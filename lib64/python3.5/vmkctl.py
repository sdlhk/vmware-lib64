# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vmkctl', [dirname(__file__)])
        except ImportError:
            import _vmkctl
            return _vmkctl
        if fp is not None:
            try:
                _mod = imp.load_module('_vmkctl', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vmkctl = swig_import_helper()
    del swig_import_helper
else:
    import _vmkctl
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self) -> "PyObject *" : return _vmkctl.SwigPyIterator_value(self)
    def incr(self, n : 'size_t' = 1) -> "swig::SwigPyIterator *" : return _vmkctl.SwigPyIterator_incr(self, n)
    def decr(self, n : 'size_t' = 1) -> "swig::SwigPyIterator *" : return _vmkctl.SwigPyIterator_decr(self, n)
    def distance(self, *args) -> "ptrdiff_t" : return _vmkctl.SwigPyIterator_distance(self, *args)
    def equal(self, *args) -> "bool" : return _vmkctl.SwigPyIterator_equal(self, *args)
    def copy(self) -> "swig::SwigPyIterator *" : return _vmkctl.SwigPyIterator_copy(self)
    def next(self) -> "PyObject *" : return _vmkctl.SwigPyIterator_next(self)
    def __next__(self) -> "PyObject *" : return _vmkctl.SwigPyIterator___next__(self)
    def previous(self) -> "PyObject *" : return _vmkctl.SwigPyIterator_previous(self)
    def advance(self, *args) -> "swig::SwigPyIterator *" : return _vmkctl.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args) -> "bool" : return _vmkctl.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args) -> "bool" : return _vmkctl.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args) -> "swig::SwigPyIterator &" : return _vmkctl.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args) -> "swig::SwigPyIterator &" : return _vmkctl.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args) -> "swig::SwigPyIterator *" : return _vmkctl.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args) -> "ptrdiff_t" : return _vmkctl.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _vmkctl.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class MapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringString, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.MapStringString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.MapStringString___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.MapStringString___bool__(self)
    def __len__(self) -> "std::map< string,string >::size_type" : return _vmkctl.MapStringString___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args) -> "std::map< string,string >::mapped_type const &" : return _vmkctl.MapStringString___getitem__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.MapStringString___delitem__(self, *args)
    def has_key(self, *args) -> "bool" : return _vmkctl.MapStringString_has_key(self, *args)
    def keys(self) -> "PyObject *" : return _vmkctl.MapStringString_keys(self)
    def values(self) -> "PyObject *" : return _vmkctl.MapStringString_values(self)
    def items(self) -> "PyObject *" : return _vmkctl.MapStringString_items(self)
    def __contains__(self, *args) -> "bool" : return _vmkctl.MapStringString___contains__(self, *args)
    def key_iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.MapStringString_key_iterator(self)
    def value_iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.MapStringString_value_iterator(self)
    def __setitem__(self, *args) -> "void" : return _vmkctl.MapStringString___setitem__(self, *args)
    def asdict(self) -> "PyObject *" : return _vmkctl.MapStringString_asdict(self)
    def __init__(self, *args): 
        this = _vmkctl.new_MapStringString(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self) -> "bool" : return _vmkctl.MapStringString_empty(self)
    def size(self) -> "std::map< string,string >::size_type" : return _vmkctl.MapStringString_size(self)
    def clear(self) -> "void" : return _vmkctl.MapStringString_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.MapStringString_swap(self, *args)
    def get_allocator(self) -> "std::map< string,string >::allocator_type" : return _vmkctl.MapStringString_get_allocator(self)
    def begin(self) -> "std::map< string,string >::iterator" : return _vmkctl.MapStringString_begin(self)
    def end(self) -> "std::map< string,string >::iterator" : return _vmkctl.MapStringString_end(self)
    def rbegin(self) -> "std::map< string,string >::reverse_iterator" : return _vmkctl.MapStringString_rbegin(self)
    def rend(self) -> "std::map< string,string >::reverse_iterator" : return _vmkctl.MapStringString_rend(self)
    def count(self, *args) -> "std::map< string,string >::size_type" : return _vmkctl.MapStringString_count(self, *args)
    def erase(self, *args) -> "void" : return _vmkctl.MapStringString_erase(self, *args)
    def find(self, *args) -> "std::map< string,string >::iterator" : return _vmkctl.MapStringString_find(self, *args)
    def lower_bound(self, *args) -> "std::map< string,string >::iterator" : return _vmkctl.MapStringString_lower_bound(self, *args)
    def upper_bound(self, *args) -> "std::map< string,string >::iterator" : return _vmkctl.MapStringString_upper_bound(self, *args)
    __swig_destroy__ = _vmkctl.delete_MapStringString
    __del__ = lambda self : None;
MapStringString_swigregister = _vmkctl.MapStringString_swigregister
MapStringString_swigregister(MapStringString)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.StringVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.StringVector___bool__(self)
    def __len__(self) -> "std::vector< std::string >::size_type" : return _vmkctl.StringVector___len__(self)
    def pop(self) -> "std::vector< std::string >::value_type" : return _vmkctl.StringVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< std::string,std::allocator< std::string > > *" : return _vmkctl.StringVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.StringVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.StringVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.StringVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< std::string >::value_type const &" : return _vmkctl.StringVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.StringVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.StringVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.StringVector_empty(self)
    def size(self) -> "std::vector< std::string >::size_type" : return _vmkctl.StringVector_size(self)
    def clear(self) -> "void" : return _vmkctl.StringVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.StringVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::string >::allocator_type" : return _vmkctl.StringVector_get_allocator(self)
    def begin(self) -> "std::vector< std::string >::iterator" : return _vmkctl.StringVector_begin(self)
    def end(self) -> "std::vector< std::string >::iterator" : return _vmkctl.StringVector_end(self)
    def rbegin(self) -> "std::vector< std::string >::reverse_iterator" : return _vmkctl.StringVector_rbegin(self)
    def rend(self) -> "std::vector< std::string >::reverse_iterator" : return _vmkctl.StringVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.StringVector_pop_back(self)
    def erase(self, *args) -> "std::vector< std::string >::iterator" : return _vmkctl.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.StringVector_push_back(self, *args)
    def front(self) -> "std::vector< std::string >::value_type const &" : return _vmkctl.StringVector_front(self)
    def back(self) -> "std::vector< std::string >::value_type const &" : return _vmkctl.StringVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.StringVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.StringVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.StringVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.StringVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::string >::size_type" : return _vmkctl.StringVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _vmkctl.StringVector_swigregister
StringVector_swigregister(StringVector)

class StringSet(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringSet, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringSet, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.StringSet_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.StringSet___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.StringSet___bool__(self)
    def __len__(self) -> "std::set< std::string >::size_type" : return _vmkctl.StringSet___len__(self)
    def append(self, *args) -> "void" : return _vmkctl.StringSet_append(self, *args)
    def __contains__(self, *args) -> "bool" : return _vmkctl.StringSet___contains__(self, *args)
    def __getitem__(self, *args) -> "std::set< std::string >::value_type" : return _vmkctl.StringSet___getitem__(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_StringSet(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self) -> "bool" : return _vmkctl.StringSet_empty(self)
    def size(self) -> "std::set< std::string >::size_type" : return _vmkctl.StringSet_size(self)
    def clear(self) -> "void" : return _vmkctl.StringSet_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.StringSet_swap(self, *args)
    def count(self, *args) -> "std::set< std::string >::size_type" : return _vmkctl.StringSet_count(self, *args)
    def begin(self) -> "std::set< std::string >::iterator" : return _vmkctl.StringSet_begin(self)
    def end(self) -> "std::set< std::string >::iterator" : return _vmkctl.StringSet_end(self)
    def rbegin(self) -> "std::set< std::string >::reverse_iterator" : return _vmkctl.StringSet_rbegin(self)
    def rend(self) -> "std::set< std::string >::reverse_iterator" : return _vmkctl.StringSet_rend(self)
    def erase(self, *args) -> "void" : return _vmkctl.StringSet_erase(self, *args)
    def find(self, *args) -> "std::set< std::string >::iterator" : return _vmkctl.StringSet_find(self, *args)
    def lower_bound(self, *args) -> "std::set< std::string >::iterator" : return _vmkctl.StringSet_lower_bound(self, *args)
    def upper_bound(self, *args) -> "std::set< std::string >::iterator" : return _vmkctl.StringSet_upper_bound(self, *args)
    def equal_range(self, *args) -> "std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator >" : return _vmkctl.StringSet_equal_range(self, *args)
    def insert(self, *args) -> "std::pair< std::set< std::string >::iterator,bool >" : return _vmkctl.StringSet_insert(self, *args)
    __swig_destroy__ = _vmkctl.delete_StringSet
    __del__ = lambda self : None;
StringSet_swigregister = _vmkctl.StringSet_swigregister
StringSet_swigregister(StringSet)

class Uint32Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uint32Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Uint32Vector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.Uint32Vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.Uint32Vector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.Uint32Vector___bool__(self)
    def __len__(self) -> "std::vector< uint32 >::size_type" : return _vmkctl.Uint32Vector___len__(self)
    def pop(self) -> "std::vector< uint32 >::value_type" : return _vmkctl.Uint32Vector_pop(self)
    def __getslice__(self, *args) -> "std::vector< uint32,std::allocator< uint32 > > *" : return _vmkctl.Uint32Vector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.Uint32Vector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.Uint32Vector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.Uint32Vector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< uint32 >::value_type const &" : return _vmkctl.Uint32Vector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.Uint32Vector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.Uint32Vector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.Uint32Vector_empty(self)
    def size(self) -> "std::vector< uint32 >::size_type" : return _vmkctl.Uint32Vector_size(self)
    def clear(self) -> "void" : return _vmkctl.Uint32Vector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.Uint32Vector_swap(self, *args)
    def get_allocator(self) -> "std::vector< uint32 >::allocator_type" : return _vmkctl.Uint32Vector_get_allocator(self)
    def begin(self) -> "std::vector< uint32 >::iterator" : return _vmkctl.Uint32Vector_begin(self)
    def end(self) -> "std::vector< uint32 >::iterator" : return _vmkctl.Uint32Vector_end(self)
    def rbegin(self) -> "std::vector< uint32 >::reverse_iterator" : return _vmkctl.Uint32Vector_rbegin(self)
    def rend(self) -> "std::vector< uint32 >::reverse_iterator" : return _vmkctl.Uint32Vector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.Uint32Vector_pop_back(self)
    def erase(self, *args) -> "std::vector< uint32 >::iterator" : return _vmkctl.Uint32Vector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_Uint32Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.Uint32Vector_push_back(self, *args)
    def front(self) -> "std::vector< uint32 >::value_type const &" : return _vmkctl.Uint32Vector_front(self)
    def back(self) -> "std::vector< uint32 >::value_type const &" : return _vmkctl.Uint32Vector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.Uint32Vector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.Uint32Vector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.Uint32Vector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.Uint32Vector_reserve(self, *args)
    def capacity(self) -> "std::vector< uint32 >::size_type" : return _vmkctl.Uint32Vector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_Uint32Vector
    __del__ = lambda self : None;
Uint32Vector_swigregister = _vmkctl.Uint32Vector_swigregister
Uint32Vector_swigregister(Uint32Vector)

class Uint64Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uint64Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Uint64Vector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.Uint64Vector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.Uint64Vector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.Uint64Vector___bool__(self)
    def __len__(self) -> "std::vector< unsigned long >::size_type" : return _vmkctl.Uint64Vector___len__(self)
    def pop(self) -> "std::vector< unsigned long >::value_type" : return _vmkctl.Uint64Vector_pop(self)
    def __getslice__(self, *args) -> "std::vector< unsigned long,std::allocator< unsigned long > > *" : return _vmkctl.Uint64Vector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.Uint64Vector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.Uint64Vector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.Uint64Vector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< unsigned long >::value_type const &" : return _vmkctl.Uint64Vector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.Uint64Vector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.Uint64Vector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.Uint64Vector_empty(self)
    def size(self) -> "std::vector< unsigned long >::size_type" : return _vmkctl.Uint64Vector_size(self)
    def clear(self) -> "void" : return _vmkctl.Uint64Vector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.Uint64Vector_swap(self, *args)
    def get_allocator(self) -> "std::vector< unsigned long >::allocator_type" : return _vmkctl.Uint64Vector_get_allocator(self)
    def begin(self) -> "std::vector< unsigned long >::iterator" : return _vmkctl.Uint64Vector_begin(self)
    def end(self) -> "std::vector< unsigned long >::iterator" : return _vmkctl.Uint64Vector_end(self)
    def rbegin(self) -> "std::vector< unsigned long >::reverse_iterator" : return _vmkctl.Uint64Vector_rbegin(self)
    def rend(self) -> "std::vector< unsigned long >::reverse_iterator" : return _vmkctl.Uint64Vector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.Uint64Vector_pop_back(self)
    def erase(self, *args) -> "std::vector< unsigned long >::iterator" : return _vmkctl.Uint64Vector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_Uint64Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.Uint64Vector_push_back(self, *args)
    def front(self) -> "std::vector< unsigned long >::value_type const &" : return _vmkctl.Uint64Vector_front(self)
    def back(self) -> "std::vector< unsigned long >::value_type const &" : return _vmkctl.Uint64Vector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.Uint64Vector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.Uint64Vector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.Uint64Vector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.Uint64Vector_reserve(self, *args)
    def capacity(self) -> "std::vector< unsigned long >::size_type" : return _vmkctl.Uint64Vector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_Uint64Vector
    __del__ = lambda self : None;
Uint64Vector_swigregister = _vmkctl.Uint64Vector_swigregister
Uint64Vector_swigregister(Uint64Vector)

class HostPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_HostPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Host >::pointer" : return _vmkctl.HostPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.HostPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.HostPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Host >::pointer" : return _vmkctl.HostPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.HostPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_HostPtr
    __del__ = lambda self : None;
HostPtr_swigregister = _vmkctl.HostPtr_swigregister
HostPtr_swigregister(HostPtr)

class AdvancedOptionPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedOptionPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedOptionPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_AdvancedOptionPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Adv::AdvancedOption >::pointer" : return _vmkctl.AdvancedOptionPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.AdvancedOptionPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.AdvancedOptionPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Adv::AdvancedOption >::pointer" : return _vmkctl.AdvancedOptionPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.AdvancedOptionPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_AdvancedOptionPtr
    __del__ = lambda self : None;
AdvancedOptionPtr_swigregister = _vmkctl.AdvancedOptionPtr_swigregister
AdvancedOptionPtr_swigregister(AdvancedOptionPtr)

class AdvancedOptionBranchPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedOptionBranchPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedOptionBranchPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_AdvancedOptionBranchPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Adv::AdvancedOptionBranch >::pointer" : return _vmkctl.AdvancedOptionBranchPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.AdvancedOptionBranchPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.AdvancedOptionBranchPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Adv::AdvancedOptionBranch >::pointer" : return _vmkctl.AdvancedOptionBranchPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.AdvancedOptionBranchPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_AdvancedOptionBranchPtr
    __del__ = lambda self : None;
AdvancedOptionBranchPtr_swigregister = _vmkctl.AdvancedOptionBranchPtr_swigregister
AdvancedOptionBranchPtr_swigregister(AdvancedOptionBranchPtr)

class AdvancedOptionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedOptionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedOptionVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.AdvancedOptionVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.AdvancedOptionVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.AdvancedOptionVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOption > >::size_type" : return _vmkctl.AdvancedOptionVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.AdvancedOptionVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.AdvancedOptionVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOption > >::size_type" : return _vmkctl.AdvancedOptionVector_size(self)
    def clear(self) -> "void" : return _vmkctl.AdvancedOptionVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.AdvancedOptionVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOption > >::allocator_type" : return _vmkctl.AdvancedOptionVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOption > >::iterator" : return _vmkctl.AdvancedOptionVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOption > >::iterator" : return _vmkctl.AdvancedOptionVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOption > >::reverse_iterator" : return _vmkctl.AdvancedOptionVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOption > >::reverse_iterator" : return _vmkctl.AdvancedOptionVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.AdvancedOptionVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOption > >::value_type const &" : return _vmkctl.AdvancedOptionVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOption > >::value_type const &" : return _vmkctl.AdvancedOptionVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.AdvancedOptionVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOption > >::size_type" : return _vmkctl.AdvancedOptionVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_AdvancedOptionVector
    __del__ = lambda self : None;
AdvancedOptionVector_swigregister = _vmkctl.AdvancedOptionVector_swigregister
AdvancedOptionVector_swigregister(AdvancedOptionVector)

class AdvancedOptionBranchVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedOptionBranchVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedOptionBranchVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.AdvancedOptionBranchVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.AdvancedOptionBranchVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.AdvancedOptionBranchVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOptionBranch > >::size_type" : return _vmkctl.AdvancedOptionBranchVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.AdvancedOptionBranchVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.AdvancedOptionBranchVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOptionBranch > >::size_type" : return _vmkctl.AdvancedOptionBranchVector_size(self)
    def clear(self) -> "void" : return _vmkctl.AdvancedOptionBranchVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.AdvancedOptionBranchVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOptionBranch > >::allocator_type" : return _vmkctl.AdvancedOptionBranchVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOptionBranch > >::iterator" : return _vmkctl.AdvancedOptionBranchVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOptionBranch > >::iterator" : return _vmkctl.AdvancedOptionBranchVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOptionBranch > >::reverse_iterator" : return _vmkctl.AdvancedOptionBranchVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOptionBranch > >::reverse_iterator" : return _vmkctl.AdvancedOptionBranchVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.AdvancedOptionBranchVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOptionBranch > >::value_type const &" : return _vmkctl.AdvancedOptionBranchVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOptionBranch > >::value_type const &" : return _vmkctl.AdvancedOptionBranchVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.AdvancedOptionBranchVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Adv::AdvancedOptionBranch > >::size_type" : return _vmkctl.AdvancedOptionBranchVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_AdvancedOptionBranchVector
    __del__ = lambda self : None;
AdvancedOptionBranchVector_swigregister = _vmkctl.AdvancedOptionBranchVector_swigregister
AdvancedOptionBranchVector_swigregister(AdvancedOptionBranchVector)

class CpuPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_CpuPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Hardware::Cpu >::pointer" : return _vmkctl.CpuPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.CpuPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.CpuPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Hardware::Cpu >::pointer" : return _vmkctl.CpuPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.CpuPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_CpuPtr
    __del__ = lambda self : None;
CpuPtr_swigregister = _vmkctl.CpuPtr_swigregister
CpuPtr_swigregister(CpuPtr)

class CpuPackagePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuPackagePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuPackagePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_CpuPackagePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Hardware::CpuPackage >::pointer" : return _vmkctl.CpuPackagePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.CpuPackagePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.CpuPackagePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Hardware::CpuPackage >::pointer" : return _vmkctl.CpuPackagePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.CpuPackagePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_CpuPackagePtr
    __del__ = lambda self : None;
CpuPackagePtr_swigregister = _vmkctl.CpuPackagePtr_swigregister
CpuPackagePtr_swigregister(CpuPackagePtr)

class CpuInfoPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuInfoPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuInfoPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_CpuInfoPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Hardware::CpuInfo >::pointer" : return _vmkctl.CpuInfoPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.CpuInfoPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.CpuInfoPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Hardware::CpuInfo >::pointer" : return _vmkctl.CpuInfoPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.CpuInfoPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_CpuInfoPtr
    __del__ = lambda self : None;
CpuInfoPtr_swigregister = _vmkctl.CpuInfoPtr_swigregister
CpuInfoPtr_swigregister(CpuInfoPtr)

class HeapPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeapPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeapPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_HeapPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Hardware::Heap >::pointer" : return _vmkctl.HeapPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.HeapPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.HeapPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Hardware::Heap >::pointer" : return _vmkctl.HeapPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.HeapPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_HeapPtr
    __del__ = lambda self : None;
HeapPtr_swigregister = _vmkctl.HeapPtr_swigregister
HeapPtr_swigregister(HeapPtr)

class MemoryInfoPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryInfoPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryInfoPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_MemoryInfoPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Hardware::MemoryInfo >::pointer" : return _vmkctl.MemoryInfoPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.MemoryInfoPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.MemoryInfoPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Hardware::MemoryInfo >::pointer" : return _vmkctl.MemoryInfoPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.MemoryInfoPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_MemoryInfoPtr
    __del__ = lambda self : None;
MemoryInfoPtr_swigregister = _vmkctl.MemoryInfoPtr_swigregister
MemoryInfoPtr_swigregister(MemoryInfoPtr)

class NumaInfoPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumaInfoPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NumaInfoPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_NumaInfoPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Hardware::NumaInfo >::pointer" : return _vmkctl.NumaInfoPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.NumaInfoPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.NumaInfoPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Hardware::NumaInfo >::pointer" : return _vmkctl.NumaInfoPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.NumaInfoPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_NumaInfoPtr
    __del__ = lambda self : None;
NumaInfoPtr_swigregister = _vmkctl.NumaInfoPtr_swigregister
NumaInfoPtr_swigregister(NumaInfoPtr)

class NumaNodePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumaNodePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NumaNodePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_NumaNodePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Hardware::NumaNode >::pointer" : return _vmkctl.NumaNodePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.NumaNodePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.NumaNodePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Hardware::NumaNode >::pointer" : return _vmkctl.NumaNodePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.NumaNodePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_NumaNodePtr
    __del__ = lambda self : None;
NumaNodePtr_swigregister = _vmkctl.NumaNodePtr_swigregister
NumaNodePtr_swigregister(NumaNodePtr)

class PMemVolumePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemVolumePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemVolumePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PMemVolumePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Hardware::PMemVolume >::pointer" : return _vmkctl.PMemVolumePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PMemVolumePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PMemVolumePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Hardware::PMemVolume >::pointer" : return _vmkctl.PMemVolumePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PMemVolumePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PMemVolumePtr
    __del__ = lambda self : None;
PMemVolumePtr_swigregister = _vmkctl.PMemVolumePtr_swigregister
PMemVolumePtr_swigregister(PMemVolumePtr)

class PMemRangePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemRangePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemRangePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PMemRangePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Hardware::PMemRange >::pointer" : return _vmkctl.PMemRangePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PMemRangePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PMemRangePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Hardware::PMemRange >::pointer" : return _vmkctl.PMemRangePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PMemRangePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PMemRangePtr
    __del__ = lambda self : None;
PMemRangePtr_swigregister = _vmkctl.PMemRangePtr_swigregister
PMemRangePtr_swigregister(PMemRangePtr)

class PMemRegionPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemRegionPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemRegionPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PMemRegionPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Hardware::PMemRegion >::pointer" : return _vmkctl.PMemRegionPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PMemRegionPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PMemRegionPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Hardware::PMemRegion >::pointer" : return _vmkctl.PMemRegionPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PMemRegionPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PMemRegionPtr
    __del__ = lambda self : None;
PMemRegionPtr_swigregister = _vmkctl.PMemRegionPtr_swigregister
PMemRegionPtr_swigregister(PMemRegionPtr)

class PMemInfoPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemInfoPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemInfoPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PMemInfoPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Hardware::PMemInfo >::pointer" : return _vmkctl.PMemInfoPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PMemInfoPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PMemInfoPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Hardware::PMemInfo >::pointer" : return _vmkctl.PMemInfoPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PMemInfoPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PMemInfoPtr
    __del__ = lambda self : None;
PMemInfoPtr_swigregister = _vmkctl.PMemInfoPtr_swigregister
PMemInfoPtr_swigregister(PMemInfoPtr)

class PciDevicePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PciDevicePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PciDevicePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PciDevicePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Hardware::PciDevice >::pointer" : return _vmkctl.PciDevicePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PciDevicePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PciDevicePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Hardware::PciDevice >::pointer" : return _vmkctl.PciDevicePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PciDevicePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PciDevicePtr
    __del__ = lambda self : None;
PciDevicePtr_swigregister = _vmkctl.PciDevicePtr_swigregister
PciDevicePtr_swigregister(PciDevicePtr)

class PciInfoPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PciInfoPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PciInfoPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PciInfoPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Hardware::PciInfo >::pointer" : return _vmkctl.PciInfoPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PciInfoPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PciInfoPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Hardware::PciInfo >::pointer" : return _vmkctl.PciInfoPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PciInfoPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PciInfoPtr
    __del__ = lambda self : None;
PciInfoPtr_swigregister = _vmkctl.PciInfoPtr_swigregister
PciInfoPtr_swigregister(PciInfoPtr)

class CpuVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.CpuVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.CpuVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.CpuVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Cpu > >::size_type" : return _vmkctl.CpuVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.CpuVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.CpuVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Cpu > >::size_type" : return _vmkctl.CpuVector_size(self)
    def clear(self) -> "void" : return _vmkctl.CpuVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.CpuVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Cpu > >::allocator_type" : return _vmkctl.CpuVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Cpu > >::iterator" : return _vmkctl.CpuVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Cpu > >::iterator" : return _vmkctl.CpuVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Cpu > >::reverse_iterator" : return _vmkctl.CpuVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Cpu > >::reverse_iterator" : return _vmkctl.CpuVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.CpuVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Cpu > >::value_type const &" : return _vmkctl.CpuVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Cpu > >::value_type const &" : return _vmkctl.CpuVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.CpuVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Cpu > >::size_type" : return _vmkctl.CpuVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_CpuVector
    __del__ = lambda self : None;
CpuVector_swigregister = _vmkctl.CpuVector_swigregister
CpuVector_swigregister(CpuVector)

class CpuPackageVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuPackageVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuPackageVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.CpuPackageVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.CpuPackageVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.CpuPackageVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuPackage > >::size_type" : return _vmkctl.CpuPackageVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.CpuPackageVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.CpuPackageVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuPackage > >::size_type" : return _vmkctl.CpuPackageVector_size(self)
    def clear(self) -> "void" : return _vmkctl.CpuPackageVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.CpuPackageVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuPackage > >::allocator_type" : return _vmkctl.CpuPackageVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuPackage > >::iterator" : return _vmkctl.CpuPackageVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuPackage > >::iterator" : return _vmkctl.CpuPackageVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuPackage > >::reverse_iterator" : return _vmkctl.CpuPackageVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuPackage > >::reverse_iterator" : return _vmkctl.CpuPackageVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.CpuPackageVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuPackage > >::value_type const &" : return _vmkctl.CpuPackageVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuPackage > >::value_type const &" : return _vmkctl.CpuPackageVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.CpuPackageVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuPackage > >::size_type" : return _vmkctl.CpuPackageVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_CpuPackageVector
    __del__ = lambda self : None;
CpuPackageVector_swigregister = _vmkctl.CpuPackageVector_swigregister
CpuPackageVector_swigregister(CpuPackageVector)

class CpuInfoVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuInfoVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuInfoVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.CpuInfoVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.CpuInfoVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.CpuInfoVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuInfo > >::size_type" : return _vmkctl.CpuInfoVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.CpuInfoVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.CpuInfoVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuInfo > >::size_type" : return _vmkctl.CpuInfoVector_size(self)
    def clear(self) -> "void" : return _vmkctl.CpuInfoVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.CpuInfoVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuInfo > >::allocator_type" : return _vmkctl.CpuInfoVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuInfo > >::iterator" : return _vmkctl.CpuInfoVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuInfo > >::iterator" : return _vmkctl.CpuInfoVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuInfo > >::reverse_iterator" : return _vmkctl.CpuInfoVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuInfo > >::reverse_iterator" : return _vmkctl.CpuInfoVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.CpuInfoVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuInfo > >::value_type const &" : return _vmkctl.CpuInfoVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuInfo > >::value_type const &" : return _vmkctl.CpuInfoVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.CpuInfoVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::CpuInfo > >::size_type" : return _vmkctl.CpuInfoVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_CpuInfoVector
    __del__ = lambda self : None;
CpuInfoVector_swigregister = _vmkctl.CpuInfoVector_swigregister
CpuInfoVector_swigregister(CpuInfoVector)

class NumaNodeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumaNodeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NumaNodeVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.NumaNodeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.NumaNodeVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.NumaNodeVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::NumaNode > >::size_type" : return _vmkctl.NumaNodeVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.NumaNodeVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.NumaNodeVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::NumaNode > >::size_type" : return _vmkctl.NumaNodeVector_size(self)
    def clear(self) -> "void" : return _vmkctl.NumaNodeVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.NumaNodeVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::NumaNode > >::allocator_type" : return _vmkctl.NumaNodeVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::NumaNode > >::iterator" : return _vmkctl.NumaNodeVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::NumaNode > >::iterator" : return _vmkctl.NumaNodeVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::NumaNode > >::reverse_iterator" : return _vmkctl.NumaNodeVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::NumaNode > >::reverse_iterator" : return _vmkctl.NumaNodeVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.NumaNodeVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::NumaNode > >::value_type const &" : return _vmkctl.NumaNodeVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::NumaNode > >::value_type const &" : return _vmkctl.NumaNodeVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.NumaNodeVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::NumaNode > >::size_type" : return _vmkctl.NumaNodeVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_NumaNodeVector
    __del__ = lambda self : None;
NumaNodeVector_swigregister = _vmkctl.NumaNodeVector_swigregister
NumaNodeVector_swigregister(NumaNodeVector)

class PMemVolumeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemVolumeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemVolumeVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.PMemVolumeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.PMemVolumeVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.PMemVolumeVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemVolume > >::size_type" : return _vmkctl.PMemVolumeVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.PMemVolumeVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.PMemVolumeVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemVolume > >::size_type" : return _vmkctl.PMemVolumeVector_size(self)
    def clear(self) -> "void" : return _vmkctl.PMemVolumeVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.PMemVolumeVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemVolume > >::allocator_type" : return _vmkctl.PMemVolumeVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemVolume > >::iterator" : return _vmkctl.PMemVolumeVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemVolume > >::iterator" : return _vmkctl.PMemVolumeVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemVolume > >::reverse_iterator" : return _vmkctl.PMemVolumeVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemVolume > >::reverse_iterator" : return _vmkctl.PMemVolumeVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.PMemVolumeVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemVolume > >::value_type const &" : return _vmkctl.PMemVolumeVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemVolume > >::value_type const &" : return _vmkctl.PMemVolumeVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.PMemVolumeVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemVolume > >::size_type" : return _vmkctl.PMemVolumeVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_PMemVolumeVector
    __del__ = lambda self : None;
PMemVolumeVector_swigregister = _vmkctl.PMemVolumeVector_swigregister
PMemVolumeVector_swigregister(PMemVolumeVector)

class PMemRangeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemRangeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemRangeVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.PMemRangeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.PMemRangeVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.PMemRangeVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRange > >::size_type" : return _vmkctl.PMemRangeVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.PMemRangeVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.PMemRangeVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRange > >::size_type" : return _vmkctl.PMemRangeVector_size(self)
    def clear(self) -> "void" : return _vmkctl.PMemRangeVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.PMemRangeVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRange > >::allocator_type" : return _vmkctl.PMemRangeVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRange > >::iterator" : return _vmkctl.PMemRangeVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRange > >::iterator" : return _vmkctl.PMemRangeVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRange > >::reverse_iterator" : return _vmkctl.PMemRangeVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRange > >::reverse_iterator" : return _vmkctl.PMemRangeVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.PMemRangeVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRange > >::value_type const &" : return _vmkctl.PMemRangeVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRange > >::value_type const &" : return _vmkctl.PMemRangeVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.PMemRangeVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRange > >::size_type" : return _vmkctl.PMemRangeVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_PMemRangeVector
    __del__ = lambda self : None;
PMemRangeVector_swigregister = _vmkctl.PMemRangeVector_swigregister
PMemRangeVector_swigregister(PMemRangeVector)

class PMemRegionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemRegionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemRegionVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.PMemRegionVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.PMemRegionVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.PMemRegionVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRegion > >::size_type" : return _vmkctl.PMemRegionVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.PMemRegionVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.PMemRegionVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRegion > >::size_type" : return _vmkctl.PMemRegionVector_size(self)
    def clear(self) -> "void" : return _vmkctl.PMemRegionVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.PMemRegionVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRegion > >::allocator_type" : return _vmkctl.PMemRegionVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRegion > >::iterator" : return _vmkctl.PMemRegionVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRegion > >::iterator" : return _vmkctl.PMemRegionVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRegion > >::reverse_iterator" : return _vmkctl.PMemRegionVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRegion > >::reverse_iterator" : return _vmkctl.PMemRegionVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.PMemRegionVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRegion > >::value_type const &" : return _vmkctl.PMemRegionVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRegion > >::value_type const &" : return _vmkctl.PMemRegionVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.PMemRegionVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PMemRegion > >::size_type" : return _vmkctl.PMemRegionVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_PMemRegionVector
    __del__ = lambda self : None;
PMemRegionVector_swigregister = _vmkctl.PMemRegionVector_swigregister
PMemRegionVector_swigregister(PMemRegionVector)

class HeapVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeapVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeapVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.HeapVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.HeapVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.HeapVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Heap > >::size_type" : return _vmkctl.HeapVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.HeapVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.HeapVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Heap > >::size_type" : return _vmkctl.HeapVector_size(self)
    def clear(self) -> "void" : return _vmkctl.HeapVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.HeapVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Heap > >::allocator_type" : return _vmkctl.HeapVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Heap > >::iterator" : return _vmkctl.HeapVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Heap > >::iterator" : return _vmkctl.HeapVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Heap > >::reverse_iterator" : return _vmkctl.HeapVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Heap > >::reverse_iterator" : return _vmkctl.HeapVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.HeapVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Heap > >::value_type const &" : return _vmkctl.HeapVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Heap > >::value_type const &" : return _vmkctl.HeapVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.HeapVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::Heap > >::size_type" : return _vmkctl.HeapVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_HeapVector
    __del__ = lambda self : None;
HeapVector_swigregister = _vmkctl.HeapVector_swigregister
HeapVector_swigregister(HeapVector)

class PciDeviceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PciDeviceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PciDeviceVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.PciDeviceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.PciDeviceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.PciDeviceVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PciDevice > >::size_type" : return _vmkctl.PciDeviceVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.PciDeviceVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.PciDeviceVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PciDevice > >::size_type" : return _vmkctl.PciDeviceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.PciDeviceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.PciDeviceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PciDevice > >::allocator_type" : return _vmkctl.PciDeviceVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PciDevice > >::iterator" : return _vmkctl.PciDeviceVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PciDevice > >::iterator" : return _vmkctl.PciDeviceVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PciDevice > >::reverse_iterator" : return _vmkctl.PciDeviceVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PciDevice > >::reverse_iterator" : return _vmkctl.PciDeviceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.PciDeviceVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PciDevice > >::value_type const &" : return _vmkctl.PciDeviceVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PciDevice > >::value_type const &" : return _vmkctl.PciDeviceVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.PciDeviceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Hardware::PciDevice > >::size_type" : return _vmkctl.PciDeviceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_PciDeviceVector
    __del__ = lambda self : None;
PciDeviceVector_swigregister = _vmkctl.PciDeviceVector_swigregister
PciDeviceVector_swigregister(PciDeviceVector)

class BootDeviceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BootDeviceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BootDeviceVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.BootDeviceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.BootDeviceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.BootDeviceVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Hardware::BootDevice >::size_type" : return _vmkctl.BootDeviceVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Hardware::BootDevice >::value_type" : return _vmkctl.BootDeviceVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Hardware::BootDevice,std::allocator< HostCtl::Hardware::BootDevice > > *" : return _vmkctl.BootDeviceVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.BootDeviceVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.BootDeviceVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.BootDeviceVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Hardware::BootDevice >::value_type const &" : return _vmkctl.BootDeviceVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.BootDeviceVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.BootDeviceVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.BootDeviceVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Hardware::BootDevice >::size_type" : return _vmkctl.BootDeviceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.BootDeviceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.BootDeviceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Hardware::BootDevice >::allocator_type" : return _vmkctl.BootDeviceVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Hardware::BootDevice >::iterator" : return _vmkctl.BootDeviceVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Hardware::BootDevice >::iterator" : return _vmkctl.BootDeviceVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Hardware::BootDevice >::reverse_iterator" : return _vmkctl.BootDeviceVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Hardware::BootDevice >::reverse_iterator" : return _vmkctl.BootDeviceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.BootDeviceVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Hardware::BootDevice >::iterator" : return _vmkctl.BootDeviceVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_BootDeviceVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.BootDeviceVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Hardware::BootDevice >::value_type const &" : return _vmkctl.BootDeviceVector_front(self)
    def back(self) -> "std::vector< HostCtl::Hardware::BootDevice >::value_type const &" : return _vmkctl.BootDeviceVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.BootDeviceVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.BootDeviceVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.BootDeviceVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.BootDeviceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Hardware::BootDevice >::size_type" : return _vmkctl.BootDeviceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_BootDeviceVector
    __del__ = lambda self : None;
BootDeviceVector_swigregister = _vmkctl.BootDeviceVector_swigregister
BootDeviceVector_swigregister(BootDeviceVector)

class SimplePciDeviceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimplePciDeviceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimplePciDeviceVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.SimplePciDeviceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.SimplePciDeviceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.SimplePciDeviceVector___bool__(self)
    def __len__(self) -> "std::vector< VmkCtl::Hardware::SimplePciDevice >::size_type" : return _vmkctl.SimplePciDeviceVector___len__(self)
    def pop(self) -> "std::vector< VmkCtl::Hardware::SimplePciDevice >::value_type" : return _vmkctl.SimplePciDeviceVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< VmkCtl::Hardware::SimplePciDevice,std::allocator< VmkCtl::Hardware::SimplePciDevice > > *" : return _vmkctl.SimplePciDeviceVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.SimplePciDeviceVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.SimplePciDeviceVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.SimplePciDeviceVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< VmkCtl::Hardware::SimplePciDevice >::value_type const &" : return _vmkctl.SimplePciDeviceVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.SimplePciDeviceVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.SimplePciDeviceVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.SimplePciDeviceVector_empty(self)
    def size(self) -> "std::vector< VmkCtl::Hardware::SimplePciDevice >::size_type" : return _vmkctl.SimplePciDeviceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.SimplePciDeviceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.SimplePciDeviceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< VmkCtl::Hardware::SimplePciDevice >::allocator_type" : return _vmkctl.SimplePciDeviceVector_get_allocator(self)
    def begin(self) -> "std::vector< VmkCtl::Hardware::SimplePciDevice >::iterator" : return _vmkctl.SimplePciDeviceVector_begin(self)
    def end(self) -> "std::vector< VmkCtl::Hardware::SimplePciDevice >::iterator" : return _vmkctl.SimplePciDeviceVector_end(self)
    def rbegin(self) -> "std::vector< VmkCtl::Hardware::SimplePciDevice >::reverse_iterator" : return _vmkctl.SimplePciDeviceVector_rbegin(self)
    def rend(self) -> "std::vector< VmkCtl::Hardware::SimplePciDevice >::reverse_iterator" : return _vmkctl.SimplePciDeviceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.SimplePciDeviceVector_pop_back(self)
    def erase(self, *args) -> "std::vector< VmkCtl::Hardware::SimplePciDevice >::iterator" : return _vmkctl.SimplePciDeviceVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_SimplePciDeviceVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.SimplePciDeviceVector_push_back(self, *args)
    def front(self) -> "std::vector< VmkCtl::Hardware::SimplePciDevice >::value_type const &" : return _vmkctl.SimplePciDeviceVector_front(self)
    def back(self) -> "std::vector< VmkCtl::Hardware::SimplePciDevice >::value_type const &" : return _vmkctl.SimplePciDeviceVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.SimplePciDeviceVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.SimplePciDeviceVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.SimplePciDeviceVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.SimplePciDeviceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< VmkCtl::Hardware::SimplePciDevice >::size_type" : return _vmkctl.SimplePciDeviceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_SimplePciDeviceVector
    __del__ = lambda self : None;
SimplePciDeviceVector_swigregister = _vmkctl.SimplePciDeviceVector_swigregister
SimplePciDeviceVector_swigregister(SimplePciDeviceVector)

class HostCtlObjectPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostCtlObjectPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostCtlObjectPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_HostCtlObjectPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Lib::HostCtlObject >::pointer" : return _vmkctl.HostCtlObjectPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.HostCtlObjectPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.HostCtlObjectPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Lib::HostCtlObject >::pointer" : return _vmkctl.HostCtlObjectPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.HostCtlObjectPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_HostCtlObjectPtr
    __del__ = lambda self : None;
HostCtlObjectPtr_swigregister = _vmkctl.HostCtlObjectPtr_swigregister
HostCtlObjectPtr_swigregister(HostCtlObjectPtr)

class HostCtlObjectVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostCtlObjectVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostCtlObjectVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.HostCtlObjectVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.HostCtlObjectVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.HostCtlObjectVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Lib::HostCtlObject > >::size_type" : return _vmkctl.HostCtlObjectVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.HostCtlObjectVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.HostCtlObjectVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Lib::HostCtlObject > >::size_type" : return _vmkctl.HostCtlObjectVector_size(self)
    def clear(self) -> "void" : return _vmkctl.HostCtlObjectVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.HostCtlObjectVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Lib::HostCtlObject > >::allocator_type" : return _vmkctl.HostCtlObjectVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Lib::HostCtlObject > >::iterator" : return _vmkctl.HostCtlObjectVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Lib::HostCtlObject > >::iterator" : return _vmkctl.HostCtlObjectVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Lib::HostCtlObject > >::reverse_iterator" : return _vmkctl.HostCtlObjectVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Lib::HostCtlObject > >::reverse_iterator" : return _vmkctl.HostCtlObjectVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.HostCtlObjectVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Lib::HostCtlObject > >::value_type const &" : return _vmkctl.HostCtlObjectVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Lib::HostCtlObject > >::value_type const &" : return _vmkctl.HostCtlObjectVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.HostCtlObjectVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Lib::HostCtlObject > >::size_type" : return _vmkctl.HostCtlObjectVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_HostCtlObjectVector
    __del__ = lambda self : None;
HostCtlObjectVector_swigregister = _vmkctl.HostCtlObjectVector_swigregister
HostCtlObjectVector_swigregister(HostCtlObjectVector)

class ConnectionPointPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectionPointPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectionPointPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_ConnectionPointPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::ConnectionPoint >::pointer" : return _vmkctl.ConnectionPointPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.ConnectionPointPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.ConnectionPointPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::ConnectionPoint >::pointer" : return _vmkctl.ConnectionPointPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.ConnectionPointPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_ConnectionPointPtr
    __del__ = lambda self : None;
ConnectionPointPtr_swigregister = _vmkctl.ConnectionPointPtr_swigregister
ConnectionPointPtr_swigregister(ConnectionPointPtr)

class PortPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PortPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::Port >::pointer" : return _vmkctl.PortPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PortPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PortPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::Port >::pointer" : return _vmkctl.PortPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PortPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PortPtr
    __del__ = lambda self : None;
PortPtr_swigregister = _vmkctl.PortPtr_swigregister
PortPtr_swigregister(PortPtr)

class PortsetPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortsetPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortsetPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PortsetPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::Portset >::pointer" : return _vmkctl.PortsetPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PortsetPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PortsetPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::Portset >::pointer" : return _vmkctl.PortsetPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PortsetPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PortsetPtr
    __del__ = lambda self : None;
PortsetPtr_swigregister = _vmkctl.PortsetPtr_swigregister
PortsetPtr_swigregister(PortsetPtr)

class PortGroupPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortGroupPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortGroupPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PortGroupPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::PortGroup >::pointer" : return _vmkctl.PortGroupPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PortGroupPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PortGroupPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::PortGroup >::pointer" : return _vmkctl.PortGroupPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PortGroupPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PortGroupPtr
    __del__ = lambda self : None;
PortGroupPtr_swigregister = _vmkctl.PortGroupPtr_swigregister
PortGroupPtr_swigregister(PortGroupPtr)

class VnicPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VnicPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VnicPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VnicPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::Vnic >::pointer" : return _vmkctl.VnicPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VnicPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VnicPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::Vnic >::pointer" : return _vmkctl.VnicPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VnicPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VnicPtr
    __del__ = lambda self : None;
VnicPtr_swigregister = _vmkctl.VnicPtr_swigregister
VnicPtr_swigregister(VnicPtr)

class DVFilterPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVFilterPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVFilterPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DVFilterPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::DVFilter >::pointer" : return _vmkctl.DVFilterPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.DVFilterPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.DVFilterPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::DVFilter >::pointer" : return _vmkctl.DVFilterPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.DVFilterPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_DVFilterPtr
    __del__ = lambda self : None;
DVFilterPtr_swigregister = _vmkctl.DVFilterPtr_swigregister
DVFilterPtr_swigregister(DVFilterPtr)

class DVPortPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DVPortPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::DVPort >::pointer" : return _vmkctl.DVPortPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.DVPortPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.DVPortPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::DVPort >::pointer" : return _vmkctl.DVPortPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.DVPortPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_DVPortPtr
    __del__ = lambda self : None;
DVPortPtr_swigregister = _vmkctl.DVPortPtr_swigregister
DVPortPtr_swigregister(DVPortPtr)

class DVSwitchPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVSwitchPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVSwitchPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DVSwitchPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::DVSwitch >::pointer" : return _vmkctl.DVSwitchPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.DVSwitchPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.DVSwitchPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::DVSwitch >::pointer" : return _vmkctl.DVSwitchPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.DVSwitchPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_DVSwitchPtr
    __del__ = lambda self : None;
DVSwitchPtr_swigregister = _vmkctl.DVSwitchPtr_swigregister
DVSwitchPtr_swigregister(DVSwitchPtr)

class VirtualSwitchPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirtualSwitchPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirtualSwitchPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VirtualSwitchPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::VirtualSwitch >::pointer" : return _vmkctl.VirtualSwitchPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VirtualSwitchPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VirtualSwitchPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::VirtualSwitch >::pointer" : return _vmkctl.VirtualSwitchPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VirtualSwitchPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VirtualSwitchPtr
    __del__ = lambda self : None;
VirtualSwitchPtr_swigregister = _vmkctl.VirtualSwitchPtr_swigregister
VirtualSwitchPtr_swigregister(VirtualSwitchPtr)

class VmkNicPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmkNicPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VmkNicPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VmkNicPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::VmkNic >::pointer" : return _vmkctl.VmkNicPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VmkNicPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VmkNicPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::VmkNic >::pointer" : return _vmkctl.VmkNicPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VmkNicPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VmkNicPtr
    __del__ = lambda self : None;
VmkNicPtr_swigregister = _vmkctl.VmkNicPtr_swigregister
VmkNicPtr_swigregister(VmkNicPtr)

class OpaqueSwitchPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpaqueSwitchPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpaqueSwitchPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_OpaqueSwitchPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::OpaqueSwitch >::pointer" : return _vmkctl.OpaqueSwitchPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.OpaqueSwitchPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.OpaqueSwitchPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::OpaqueSwitch >::pointer" : return _vmkctl.OpaqueSwitchPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.OpaqueSwitchPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_OpaqueSwitchPtr
    __del__ = lambda self : None;
OpaqueSwitchPtr_swigregister = _vmkctl.OpaqueSwitchPtr_swigregister
OpaqueSwitchPtr_swigregister(OpaqueSwitchPtr)

class ConsoleNicInfoPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConsoleNicInfoPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConsoleNicInfoPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_ConsoleNicInfoPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::ConsoleNicInfo >::pointer" : return _vmkctl.ConsoleNicInfoPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.ConsoleNicInfoPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.ConsoleNicInfoPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::ConsoleNicInfo >::pointer" : return _vmkctl.ConsoleNicInfoPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.ConsoleNicInfoPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_ConsoleNicInfoPtr
    __del__ = lambda self : None;
ConsoleNicInfoPtr_swigregister = _vmkctl.ConsoleNicInfoPtr_swigregister
ConsoleNicInfoPtr_swigregister(ConsoleNicInfoPtr)

class NetstackInstancePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetstackInstancePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetstackInstancePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_NetstackInstancePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::NetstackInstance >::pointer" : return _vmkctl.NetstackInstancePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.NetstackInstancePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.NetstackInstancePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::NetstackInstance >::pointer" : return _vmkctl.NetstackInstancePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.NetstackInstancePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_NetstackInstancePtr
    __del__ = lambda self : None;
NetstackInstancePtr_swigregister = _vmkctl.NetstackInstancePtr_swigregister
NetstackInstancePtr_swigregister(NetstackInstancePtr)

class VmKernelNicInfoPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmKernelNicInfoPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VmKernelNicInfoPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VmKernelNicInfoPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::VmKernelNicInfo >::pointer" : return _vmkctl.VmKernelNicInfoPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VmKernelNicInfoPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VmKernelNicInfoPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::VmKernelNicInfo >::pointer" : return _vmkctl.VmKernelNicInfoPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VmKernelNicInfoPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VmKernelNicInfoPtr
    __del__ = lambda self : None;
VmKernelNicInfoPtr_swigregister = _vmkctl.VmKernelNicInfoPtr_swigregister
VmKernelNicInfoPtr_swigregister(VmKernelNicInfoPtr)

class DnsConfigPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DnsConfigPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DnsConfigPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DnsConfigPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::DnsConfig >::pointer" : return _vmkctl.DnsConfigPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.DnsConfigPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.DnsConfigPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::DnsConfig >::pointer" : return _vmkctl.DnsConfigPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.DnsConfigPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_DnsConfigPtr
    __del__ = lambda self : None;
DnsConfigPtr_swigregister = _vmkctl.DnsConfigPtr_swigregister
DnsConfigPtr_swigregister(DnsConfigPtr)

class DVFilterFastPathPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVFilterFastPathPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVFilterFastPathPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DVFilterFastPathPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::DVFilterFastPath >::pointer" : return _vmkctl.DVFilterFastPathPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.DVFilterFastPathPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.DVFilterFastPathPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::DVFilterFastPath >::pointer" : return _vmkctl.DVFilterFastPathPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.DVFilterFastPathPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_DVFilterFastPathPtr
    __del__ = lambda self : None;
DVFilterFastPathPtr_swigregister = _vmkctl.DVFilterFastPathPtr_swigregister
DVFilterFastPathPtr_swigregister(DVFilterFastPathPtr)

class IpSecConfigPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IpSecConfigPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IpSecConfigPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_IpSecConfigPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::IpSecConfig >::pointer" : return _vmkctl.IpSecConfigPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.IpSecConfigPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.IpSecConfigPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::IpSecConfig >::pointer" : return _vmkctl.IpSecConfigPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.IpSecConfigPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_IpSecConfigPtr
    __del__ = lambda self : None;
IpSecConfigPtr_swigregister = _vmkctl.IpSecConfigPtr_swigregister
IpSecConfigPtr_swigregister(IpSecConfigPtr)

class RoutingInfoPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutingInfoPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RoutingInfoPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_RoutingInfoPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::RoutingInfo >::pointer" : return _vmkctl.RoutingInfoPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.RoutingInfoPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.RoutingInfoPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::RoutingInfo >::pointer" : return _vmkctl.RoutingInfoPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.RoutingInfoPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_RoutingInfoPtr
    __del__ = lambda self : None;
RoutingInfoPtr_swigregister = _vmkctl.RoutingInfoPtr_swigregister
RoutingInfoPtr_swigregister(RoutingInfoPtr)

class VirtualSwitchInfoPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirtualSwitchInfoPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirtualSwitchInfoPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VirtualSwitchInfoPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::VirtualSwitchInfo >::pointer" : return _vmkctl.VirtualSwitchInfoPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VirtualSwitchInfoPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VirtualSwitchInfoPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::VirtualSwitchInfo >::pointer" : return _vmkctl.VirtualSwitchInfoPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VirtualSwitchInfoPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VirtualSwitchInfoPtr
    __del__ = lambda self : None;
VirtualSwitchInfoPtr_swigregister = _vmkctl.VirtualSwitchInfoPtr_swigregister
VirtualSwitchInfoPtr_swigregister(VirtualSwitchInfoPtr)

class FcoePnicPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FcoePnicPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FcoePnicPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_FcoePnicPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::FcoePnic >::pointer" : return _vmkctl.FcoePnicPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.FcoePnicPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.FcoePnicPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::FcoePnic >::pointer" : return _vmkctl.FcoePnicPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.FcoePnicPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_FcoePnicPtr
    __del__ = lambda self : None;
FcoePnicPtr_swigregister = _vmkctl.FcoePnicPtr_swigregister
FcoePnicPtr_swigregister(FcoePnicPtr)

class PnicPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnicPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PnicPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::Pnic >::pointer" : return _vmkctl.PnicPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PnicPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PnicPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::Pnic >::pointer" : return _vmkctl.PnicPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PnicPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PnicPtr
    __del__ = lambda self : None;
PnicPtr_swigregister = _vmkctl.PnicPtr_swigregister
PnicPtr_swigregister(PnicPtr)

class NetworkInterfacePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkInterfacePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkInterfacePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_NetworkInterfacePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::NetworkInterface >::pointer" : return _vmkctl.NetworkInterfacePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.NetworkInterfacePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.NetworkInterfacePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::NetworkInterface >::pointer" : return _vmkctl.NetworkInterfacePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.NetworkInterfacePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_NetworkInterfacePtr
    __del__ = lambda self : None;
NetworkInterfacePtr_swigregister = _vmkctl.NetworkInterfacePtr_swigregister
NetworkInterfacePtr_swigregister(NetworkInterfacePtr)

class FilterStatsPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterStatsPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilterStatsPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_FilterStatsPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::FilterStats >::pointer" : return _vmkctl.FilterStatsPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.FilterStatsPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.FilterStatsPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::FilterStats >::pointer" : return _vmkctl.FilterStatsPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.FilterStatsPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_FilterStatsPtr
    __del__ = lambda self : None;
FilterStatsPtr_swigregister = _vmkctl.FilterStatsPtr_swigregister
FilterStatsPtr_swigregister(FilterStatsPtr)

class VlanStatsPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VlanStatsPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VlanStatsPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VlanStatsPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Network::VlanStats >::pointer" : return _vmkctl.VlanStatsPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VlanStatsPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VlanStatsPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Network::VlanStats >::pointer" : return _vmkctl.VlanStatsPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VlanStatsPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VlanStatsPtr
    __del__ = lambda self : None;
VlanStatsPtr_swigregister = _vmkctl.VlanStatsPtr_swigregister
VlanStatsPtr_swigregister(VlanStatsPtr)

class PortVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.PortVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.PortVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.PortVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Port > >::size_type" : return _vmkctl.PortVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.PortVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.PortVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Port > >::size_type" : return _vmkctl.PortVector_size(self)
    def clear(self) -> "void" : return _vmkctl.PortVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.PortVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Port > >::allocator_type" : return _vmkctl.PortVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Port > >::iterator" : return _vmkctl.PortVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Port > >::iterator" : return _vmkctl.PortVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Port > >::reverse_iterator" : return _vmkctl.PortVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Port > >::reverse_iterator" : return _vmkctl.PortVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.PortVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Port > >::value_type const &" : return _vmkctl.PortVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Port > >::value_type const &" : return _vmkctl.PortVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.PortVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Port > >::size_type" : return _vmkctl.PortVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_PortVector
    __del__ = lambda self : None;
PortVector_swigregister = _vmkctl.PortVector_swigregister
PortVector_swigregister(PortVector)

class PortsetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortsetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortsetVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.PortsetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.PortsetVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.PortsetVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Portset > >::size_type" : return _vmkctl.PortsetVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.PortsetVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.PortsetVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Portset > >::size_type" : return _vmkctl.PortsetVector_size(self)
    def clear(self) -> "void" : return _vmkctl.PortsetVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.PortsetVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Portset > >::allocator_type" : return _vmkctl.PortsetVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Portset > >::iterator" : return _vmkctl.PortsetVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Portset > >::iterator" : return _vmkctl.PortsetVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Portset > >::reverse_iterator" : return _vmkctl.PortsetVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Portset > >::reverse_iterator" : return _vmkctl.PortsetVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.PortsetVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Portset > >::value_type const &" : return _vmkctl.PortsetVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Portset > >::value_type const &" : return _vmkctl.PortsetVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.PortsetVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Portset > >::size_type" : return _vmkctl.PortsetVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_PortsetVector
    __del__ = lambda self : None;
PortsetVector_swigregister = _vmkctl.PortsetVector_swigregister
PortsetVector_swigregister(PortsetVector)

class VnicVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VnicVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VnicVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.VnicVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.VnicVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.VnicVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Vnic > >::size_type" : return _vmkctl.VnicVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.VnicVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.VnicVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Vnic > >::size_type" : return _vmkctl.VnicVector_size(self)
    def clear(self) -> "void" : return _vmkctl.VnicVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.VnicVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Vnic > >::allocator_type" : return _vmkctl.VnicVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Vnic > >::iterator" : return _vmkctl.VnicVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Vnic > >::iterator" : return _vmkctl.VnicVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Vnic > >::reverse_iterator" : return _vmkctl.VnicVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Vnic > >::reverse_iterator" : return _vmkctl.VnicVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.VnicVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Vnic > >::value_type const &" : return _vmkctl.VnicVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Vnic > >::value_type const &" : return _vmkctl.VnicVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.VnicVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Vnic > >::size_type" : return _vmkctl.VnicVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_VnicVector
    __del__ = lambda self : None;
VnicVector_swigregister = _vmkctl.VnicVector_swigregister
VnicVector_swigregister(VnicVector)

class DVFilterVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVFilterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVFilterVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.DVFilterVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.DVFilterVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.DVFilterVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilter > >::size_type" : return _vmkctl.DVFilterVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.DVFilterVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.DVFilterVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilter > >::size_type" : return _vmkctl.DVFilterVector_size(self)
    def clear(self) -> "void" : return _vmkctl.DVFilterVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.DVFilterVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilter > >::allocator_type" : return _vmkctl.DVFilterVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilter > >::iterator" : return _vmkctl.DVFilterVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilter > >::iterator" : return _vmkctl.DVFilterVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilter > >::reverse_iterator" : return _vmkctl.DVFilterVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilter > >::reverse_iterator" : return _vmkctl.DVFilterVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.DVFilterVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilter > >::value_type const &" : return _vmkctl.DVFilterVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilter > >::value_type const &" : return _vmkctl.DVFilterVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.DVFilterVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilter > >::size_type" : return _vmkctl.DVFilterVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_DVFilterVector
    __del__ = lambda self : None;
DVFilterVector_swigregister = _vmkctl.DVFilterVector_swigregister
DVFilterVector_swigregister(DVFilterVector)

class DVPortVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.DVPortVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.DVPortVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.DVPortVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVPort > >::size_type" : return _vmkctl.DVPortVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.DVPortVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.DVPortVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVPort > >::size_type" : return _vmkctl.DVPortVector_size(self)
    def clear(self) -> "void" : return _vmkctl.DVPortVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.DVPortVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVPort > >::allocator_type" : return _vmkctl.DVPortVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVPort > >::iterator" : return _vmkctl.DVPortVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVPort > >::iterator" : return _vmkctl.DVPortVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVPort > >::reverse_iterator" : return _vmkctl.DVPortVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVPort > >::reverse_iterator" : return _vmkctl.DVPortVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.DVPortVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVPort > >::value_type const &" : return _vmkctl.DVPortVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVPort > >::value_type const &" : return _vmkctl.DVPortVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.DVPortVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVPort > >::size_type" : return _vmkctl.DVPortVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_DVPortVector
    __del__ = lambda self : None;
DVPortVector_swigregister = _vmkctl.DVPortVector_swigregister
DVPortVector_swigregister(DVPortVector)

class PortGroupVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortGroupVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortGroupVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.PortGroupVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.PortGroupVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.PortGroupVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::PortGroup > >::size_type" : return _vmkctl.PortGroupVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.PortGroupVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.PortGroupVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::PortGroup > >::size_type" : return _vmkctl.PortGroupVector_size(self)
    def clear(self) -> "void" : return _vmkctl.PortGroupVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.PortGroupVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::PortGroup > >::allocator_type" : return _vmkctl.PortGroupVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::PortGroup > >::iterator" : return _vmkctl.PortGroupVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::PortGroup > >::iterator" : return _vmkctl.PortGroupVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::PortGroup > >::reverse_iterator" : return _vmkctl.PortGroupVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::PortGroup > >::reverse_iterator" : return _vmkctl.PortGroupVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.PortGroupVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::PortGroup > >::value_type const &" : return _vmkctl.PortGroupVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::PortGroup > >::value_type const &" : return _vmkctl.PortGroupVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.PortGroupVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::PortGroup > >::size_type" : return _vmkctl.PortGroupVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_PortGroupVector
    __del__ = lambda self : None;
PortGroupVector_swigregister = _vmkctl.PortGroupVector_swigregister
PortGroupVector_swigregister(PortGroupVector)

class VmkNicVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmkNicVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VmkNicVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.VmkNicVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.VmkNicVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.VmkNicVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VmkNic > >::size_type" : return _vmkctl.VmkNicVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.VmkNicVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.VmkNicVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VmkNic > >::size_type" : return _vmkctl.VmkNicVector_size(self)
    def clear(self) -> "void" : return _vmkctl.VmkNicVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.VmkNicVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VmkNic > >::allocator_type" : return _vmkctl.VmkNicVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VmkNic > >::iterator" : return _vmkctl.VmkNicVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VmkNic > >::iterator" : return _vmkctl.VmkNicVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VmkNic > >::reverse_iterator" : return _vmkctl.VmkNicVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VmkNic > >::reverse_iterator" : return _vmkctl.VmkNicVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.VmkNicVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VmkNic > >::value_type const &" : return _vmkctl.VmkNicVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VmkNic > >::value_type const &" : return _vmkctl.VmkNicVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.VmkNicVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VmkNic > >::size_type" : return _vmkctl.VmkNicVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_VmkNicVector
    __del__ = lambda self : None;
VmkNicVector_swigregister = _vmkctl.VmkNicVector_swigregister
VmkNicVector_swigregister(VmkNicVector)

class VirtualSwitchVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirtualSwitchVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirtualSwitchVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.VirtualSwitchVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.VirtualSwitchVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.VirtualSwitchVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VirtualSwitch > >::size_type" : return _vmkctl.VirtualSwitchVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.VirtualSwitchVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.VirtualSwitchVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VirtualSwitch > >::size_type" : return _vmkctl.VirtualSwitchVector_size(self)
    def clear(self) -> "void" : return _vmkctl.VirtualSwitchVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.VirtualSwitchVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VirtualSwitch > >::allocator_type" : return _vmkctl.VirtualSwitchVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VirtualSwitch > >::iterator" : return _vmkctl.VirtualSwitchVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VirtualSwitch > >::iterator" : return _vmkctl.VirtualSwitchVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VirtualSwitch > >::reverse_iterator" : return _vmkctl.VirtualSwitchVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VirtualSwitch > >::reverse_iterator" : return _vmkctl.VirtualSwitchVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.VirtualSwitchVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VirtualSwitch > >::value_type const &" : return _vmkctl.VirtualSwitchVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VirtualSwitch > >::value_type const &" : return _vmkctl.VirtualSwitchVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.VirtualSwitchVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::VirtualSwitch > >::size_type" : return _vmkctl.VirtualSwitchVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_VirtualSwitchVector
    __del__ = lambda self : None;
VirtualSwitchVector_swigregister = _vmkctl.VirtualSwitchVector_swigregister
VirtualSwitchVector_swigregister(VirtualSwitchVector)

class DVSwitchVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVSwitchVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVSwitchVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.DVSwitchVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.DVSwitchVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.DVSwitchVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVSwitch > >::size_type" : return _vmkctl.DVSwitchVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.DVSwitchVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.DVSwitchVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVSwitch > >::size_type" : return _vmkctl.DVSwitchVector_size(self)
    def clear(self) -> "void" : return _vmkctl.DVSwitchVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.DVSwitchVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVSwitch > >::allocator_type" : return _vmkctl.DVSwitchVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVSwitch > >::iterator" : return _vmkctl.DVSwitchVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVSwitch > >::iterator" : return _vmkctl.DVSwitchVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVSwitch > >::reverse_iterator" : return _vmkctl.DVSwitchVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVSwitch > >::reverse_iterator" : return _vmkctl.DVSwitchVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.DVSwitchVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVSwitch > >::value_type const &" : return _vmkctl.DVSwitchVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVSwitch > >::value_type const &" : return _vmkctl.DVSwitchVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.DVSwitchVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVSwitch > >::size_type" : return _vmkctl.DVSwitchVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_DVSwitchVector
    __del__ = lambda self : None;
DVSwitchVector_swigregister = _vmkctl.DVSwitchVector_swigregister
DVSwitchVector_swigregister(DVSwitchVector)

class OpaqueSwitchVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpaqueSwitchVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OpaqueSwitchVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.OpaqueSwitchVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.OpaqueSwitchVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.OpaqueSwitchVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::OpaqueSwitch > >::size_type" : return _vmkctl.OpaqueSwitchVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.OpaqueSwitchVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.OpaqueSwitchVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::OpaqueSwitch > >::size_type" : return _vmkctl.OpaqueSwitchVector_size(self)
    def clear(self) -> "void" : return _vmkctl.OpaqueSwitchVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.OpaqueSwitchVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::OpaqueSwitch > >::allocator_type" : return _vmkctl.OpaqueSwitchVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::OpaqueSwitch > >::iterator" : return _vmkctl.OpaqueSwitchVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::OpaqueSwitch > >::iterator" : return _vmkctl.OpaqueSwitchVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::OpaqueSwitch > >::reverse_iterator" : return _vmkctl.OpaqueSwitchVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::OpaqueSwitch > >::reverse_iterator" : return _vmkctl.OpaqueSwitchVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.OpaqueSwitchVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::OpaqueSwitch > >::value_type const &" : return _vmkctl.OpaqueSwitchVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::OpaqueSwitch > >::value_type const &" : return _vmkctl.OpaqueSwitchVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.OpaqueSwitchVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::OpaqueSwitch > >::size_type" : return _vmkctl.OpaqueSwitchVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_OpaqueSwitchVector
    __del__ = lambda self : None;
OpaqueSwitchVector_swigregister = _vmkctl.OpaqueSwitchVector_swigregister
OpaqueSwitchVector_swigregister(OpaqueSwitchVector)

class NetstackInstanceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetstackInstanceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetstackInstanceVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.NetstackInstanceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.NetstackInstanceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.NetstackInstanceVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::NetstackInstance > >::size_type" : return _vmkctl.NetstackInstanceVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.NetstackInstanceVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.NetstackInstanceVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::NetstackInstance > >::size_type" : return _vmkctl.NetstackInstanceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.NetstackInstanceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.NetstackInstanceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::NetstackInstance > >::allocator_type" : return _vmkctl.NetstackInstanceVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::NetstackInstance > >::iterator" : return _vmkctl.NetstackInstanceVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::NetstackInstance > >::iterator" : return _vmkctl.NetstackInstanceVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::NetstackInstance > >::reverse_iterator" : return _vmkctl.NetstackInstanceVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::NetstackInstance > >::reverse_iterator" : return _vmkctl.NetstackInstanceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.NetstackInstanceVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::NetstackInstance > >::value_type const &" : return _vmkctl.NetstackInstanceVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::NetstackInstance > >::value_type const &" : return _vmkctl.NetstackInstanceVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.NetstackInstanceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::NetstackInstance > >::size_type" : return _vmkctl.NetstackInstanceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_NetstackInstanceVector
    __del__ = lambda self : None;
NetstackInstanceVector_swigregister = _vmkctl.NetstackInstanceVector_swigregister
NetstackInstanceVector_swigregister(NetstackInstanceVector)

class DVFilterFastPathVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVFilterFastPathVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVFilterFastPathVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.DVFilterFastPathVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.DVFilterFastPathVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.DVFilterFastPathVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilterFastPath > >::size_type" : return _vmkctl.DVFilterFastPathVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.DVFilterFastPathVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.DVFilterFastPathVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilterFastPath > >::size_type" : return _vmkctl.DVFilterFastPathVector_size(self)
    def clear(self) -> "void" : return _vmkctl.DVFilterFastPathVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.DVFilterFastPathVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilterFastPath > >::allocator_type" : return _vmkctl.DVFilterFastPathVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilterFastPath > >::iterator" : return _vmkctl.DVFilterFastPathVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilterFastPath > >::iterator" : return _vmkctl.DVFilterFastPathVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilterFastPath > >::reverse_iterator" : return _vmkctl.DVFilterFastPathVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilterFastPath > >::reverse_iterator" : return _vmkctl.DVFilterFastPathVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.DVFilterFastPathVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilterFastPath > >::value_type const &" : return _vmkctl.DVFilterFastPathVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilterFastPath > >::value_type const &" : return _vmkctl.DVFilterFastPathVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.DVFilterFastPathVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::DVFilterFastPath > >::size_type" : return _vmkctl.DVFilterFastPathVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_DVFilterFastPathVector
    __del__ = lambda self : None;
DVFilterFastPathVector_swigregister = _vmkctl.DVFilterFastPathVector_swigregister
DVFilterFastPathVector_swigregister(DVFilterFastPathVector)

class PnicVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnicVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.PnicVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.PnicVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.PnicVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Pnic > >::size_type" : return _vmkctl.PnicVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.PnicVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.PnicVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Pnic > >::size_type" : return _vmkctl.PnicVector_size(self)
    def clear(self) -> "void" : return _vmkctl.PnicVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.PnicVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Pnic > >::allocator_type" : return _vmkctl.PnicVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Pnic > >::iterator" : return _vmkctl.PnicVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Pnic > >::iterator" : return _vmkctl.PnicVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Pnic > >::reverse_iterator" : return _vmkctl.PnicVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Pnic > >::reverse_iterator" : return _vmkctl.PnicVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.PnicVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Pnic > >::value_type const &" : return _vmkctl.PnicVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Pnic > >::value_type const &" : return _vmkctl.PnicVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.PnicVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::Pnic > >::size_type" : return _vmkctl.PnicVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_PnicVector
    __del__ = lambda self : None;
PnicVector_swigregister = _vmkctl.PnicVector_swigregister
PnicVector_swigregister(PnicVector)

class FcoePnicVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FcoePnicVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FcoePnicVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.FcoePnicVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.FcoePnicVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.FcoePnicVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Network::FcoePnic > >::size_type" : return _vmkctl.FcoePnicVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.FcoePnicVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.FcoePnicVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Network::FcoePnic > >::size_type" : return _vmkctl.FcoePnicVector_size(self)
    def clear(self) -> "void" : return _vmkctl.FcoePnicVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.FcoePnicVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Network::FcoePnic > >::allocator_type" : return _vmkctl.FcoePnicVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::FcoePnic > >::iterator" : return _vmkctl.FcoePnicVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Network::FcoePnic > >::iterator" : return _vmkctl.FcoePnicVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Network::FcoePnic > >::reverse_iterator" : return _vmkctl.FcoePnicVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Network::FcoePnic > >::reverse_iterator" : return _vmkctl.FcoePnicVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.FcoePnicVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Network::FcoePnic > >::value_type const &" : return _vmkctl.FcoePnicVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Network::FcoePnic > >::value_type const &" : return _vmkctl.FcoePnicVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.FcoePnicVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Network::FcoePnic > >::size_type" : return _vmkctl.FcoePnicVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_FcoePnicVector
    __del__ = lambda self : None;
FcoePnicVector_swigregister = _vmkctl.FcoePnicVector_swigregister
FcoePnicVector_swigregister(FcoePnicVector)

class Ipv4AddressVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv4AddressVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv4AddressVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.Ipv4AddressVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.Ipv4AddressVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.Ipv4AddressVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Network::Ipv4Address >::size_type" : return _vmkctl.Ipv4AddressVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Network::Ipv4Address >::value_type" : return _vmkctl.Ipv4AddressVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Network::Ipv4Address,std::allocator< HostCtl::Network::Ipv4Address > > *" : return _vmkctl.Ipv4AddressVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.Ipv4AddressVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.Ipv4AddressVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.Ipv4AddressVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Network::Ipv4Address >::value_type const &" : return _vmkctl.Ipv4AddressVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.Ipv4AddressVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.Ipv4AddressVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.Ipv4AddressVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Network::Ipv4Address >::size_type" : return _vmkctl.Ipv4AddressVector_size(self)
    def clear(self) -> "void" : return _vmkctl.Ipv4AddressVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.Ipv4AddressVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Network::Ipv4Address >::allocator_type" : return _vmkctl.Ipv4AddressVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Network::Ipv4Address >::iterator" : return _vmkctl.Ipv4AddressVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Network::Ipv4Address >::iterator" : return _vmkctl.Ipv4AddressVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Network::Ipv4Address >::reverse_iterator" : return _vmkctl.Ipv4AddressVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Network::Ipv4Address >::reverse_iterator" : return _vmkctl.Ipv4AddressVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.Ipv4AddressVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Network::Ipv4Address >::iterator" : return _vmkctl.Ipv4AddressVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_Ipv4AddressVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.Ipv4AddressVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Network::Ipv4Address >::value_type const &" : return _vmkctl.Ipv4AddressVector_front(self)
    def back(self) -> "std::vector< HostCtl::Network::Ipv4Address >::value_type const &" : return _vmkctl.Ipv4AddressVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.Ipv4AddressVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.Ipv4AddressVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.Ipv4AddressVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.Ipv4AddressVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Network::Ipv4Address >::size_type" : return _vmkctl.Ipv4AddressVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_Ipv4AddressVector
    __del__ = lambda self : None;
Ipv4AddressVector_swigregister = _vmkctl.Ipv4AddressVector_swigregister
Ipv4AddressVector_swigregister(Ipv4AddressVector)

class Ipv6NetworkVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv6NetworkVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv6NetworkVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.Ipv6NetworkVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.Ipv6NetworkVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.Ipv6NetworkVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Network::Ipv6Network >::size_type" : return _vmkctl.Ipv6NetworkVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Network::Ipv6Network >::value_type" : return _vmkctl.Ipv6NetworkVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Network::Ipv6Network,std::allocator< HostCtl::Network::Ipv6Network > > *" : return _vmkctl.Ipv6NetworkVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.Ipv6NetworkVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.Ipv6NetworkVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.Ipv6NetworkVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Network::Ipv6Network >::value_type const &" : return _vmkctl.Ipv6NetworkVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.Ipv6NetworkVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.Ipv6NetworkVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.Ipv6NetworkVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Network::Ipv6Network >::size_type" : return _vmkctl.Ipv6NetworkVector_size(self)
    def clear(self) -> "void" : return _vmkctl.Ipv6NetworkVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.Ipv6NetworkVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Network::Ipv6Network >::allocator_type" : return _vmkctl.Ipv6NetworkVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Network::Ipv6Network >::iterator" : return _vmkctl.Ipv6NetworkVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Network::Ipv6Network >::iterator" : return _vmkctl.Ipv6NetworkVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Network::Ipv6Network >::reverse_iterator" : return _vmkctl.Ipv6NetworkVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Network::Ipv6Network >::reverse_iterator" : return _vmkctl.Ipv6NetworkVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.Ipv6NetworkVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Network::Ipv6Network >::iterator" : return _vmkctl.Ipv6NetworkVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_Ipv6NetworkVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.Ipv6NetworkVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Network::Ipv6Network >::value_type const &" : return _vmkctl.Ipv6NetworkVector_front(self)
    def back(self) -> "std::vector< HostCtl::Network::Ipv6Network >::value_type const &" : return _vmkctl.Ipv6NetworkVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.Ipv6NetworkVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.Ipv6NetworkVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.Ipv6NetworkVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.Ipv6NetworkVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Network::Ipv6Network >::size_type" : return _vmkctl.Ipv6NetworkVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_Ipv6NetworkVector
    __del__ = lambda self : None;
Ipv6NetworkVector_swigregister = _vmkctl.Ipv6NetworkVector_swigregister
Ipv6NetworkVector_swigregister(Ipv6NetworkVector)

class MacAddressVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MacAddressVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MacAddressVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.MacAddressVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.MacAddressVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.MacAddressVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Network::MacAddress * >::size_type" : return _vmkctl.MacAddressVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Network::MacAddress * >::value_type" : return _vmkctl.MacAddressVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Network::MacAddress *,std::allocator< HostCtl::Network::MacAddress * > > *" : return _vmkctl.MacAddressVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.MacAddressVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.MacAddressVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.MacAddressVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Network::MacAddress * >::value_type" : return _vmkctl.MacAddressVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.MacAddressVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.MacAddressVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.MacAddressVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Network::MacAddress * >::size_type" : return _vmkctl.MacAddressVector_size(self)
    def clear(self) -> "void" : return _vmkctl.MacAddressVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.MacAddressVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Network::MacAddress * >::allocator_type" : return _vmkctl.MacAddressVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Network::MacAddress * >::iterator" : return _vmkctl.MacAddressVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Network::MacAddress * >::iterator" : return _vmkctl.MacAddressVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Network::MacAddress * >::reverse_iterator" : return _vmkctl.MacAddressVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Network::MacAddress * >::reverse_iterator" : return _vmkctl.MacAddressVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.MacAddressVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Network::MacAddress * >::iterator" : return _vmkctl.MacAddressVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_MacAddressVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.MacAddressVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Network::MacAddress * >::value_type" : return _vmkctl.MacAddressVector_front(self)
    def back(self) -> "std::vector< HostCtl::Network::MacAddress * >::value_type" : return _vmkctl.MacAddressVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.MacAddressVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.MacAddressVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.MacAddressVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.MacAddressVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Network::MacAddress * >::size_type" : return _vmkctl.MacAddressVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_MacAddressVector
    __del__ = lambda self : None;
MacAddressVector_swigregister = _vmkctl.MacAddressVector_swigregister
MacAddressVector_swigregister(MacAddressVector)

class PortAddressVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortAddressVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortAddressVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.PortAddressVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.PortAddressVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.PortAddressVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Network::PortAddress >::size_type" : return _vmkctl.PortAddressVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Network::PortAddress >::value_type" : return _vmkctl.PortAddressVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Network::PortAddress,std::allocator< HostCtl::Network::PortAddress > > *" : return _vmkctl.PortAddressVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.PortAddressVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.PortAddressVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.PortAddressVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Network::PortAddress >::value_type const &" : return _vmkctl.PortAddressVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.PortAddressVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.PortAddressVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.PortAddressVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Network::PortAddress >::size_type" : return _vmkctl.PortAddressVector_size(self)
    def clear(self) -> "void" : return _vmkctl.PortAddressVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.PortAddressVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Network::PortAddress >::allocator_type" : return _vmkctl.PortAddressVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Network::PortAddress >::iterator" : return _vmkctl.PortAddressVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Network::PortAddress >::iterator" : return _vmkctl.PortAddressVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Network::PortAddress >::reverse_iterator" : return _vmkctl.PortAddressVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Network::PortAddress >::reverse_iterator" : return _vmkctl.PortAddressVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.PortAddressVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Network::PortAddress >::iterator" : return _vmkctl.PortAddressVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_PortAddressVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.PortAddressVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Network::PortAddress >::value_type const &" : return _vmkctl.PortAddressVector_front(self)
    def back(self) -> "std::vector< HostCtl::Network::PortAddress >::value_type const &" : return _vmkctl.PortAddressVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.PortAddressVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.PortAddressVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.PortAddressVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.PortAddressVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Network::PortAddress >::size_type" : return _vmkctl.PortAddressVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_PortAddressVector
    __del__ = lambda self : None;
PortAddressVector_swigregister = _vmkctl.PortAddressVector_swigregister
PortAddressVector_swigregister(PortAddressVector)

class PortRangeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortRangeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortRangeVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.PortRangeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.PortRangeVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.PortRangeVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Network::PortRange >::size_type" : return _vmkctl.PortRangeVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Network::PortRange >::value_type" : return _vmkctl.PortRangeVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Network::PortRange,std::allocator< HostCtl::Network::PortRange > > *" : return _vmkctl.PortRangeVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.PortRangeVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.PortRangeVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.PortRangeVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Network::PortRange >::value_type const &" : return _vmkctl.PortRangeVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.PortRangeVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.PortRangeVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.PortRangeVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Network::PortRange >::size_type" : return _vmkctl.PortRangeVector_size(self)
    def clear(self) -> "void" : return _vmkctl.PortRangeVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.PortRangeVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Network::PortRange >::allocator_type" : return _vmkctl.PortRangeVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Network::PortRange >::iterator" : return _vmkctl.PortRangeVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Network::PortRange >::iterator" : return _vmkctl.PortRangeVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Network::PortRange >::reverse_iterator" : return _vmkctl.PortRangeVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Network::PortRange >::reverse_iterator" : return _vmkctl.PortRangeVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.PortRangeVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Network::PortRange >::iterator" : return _vmkctl.PortRangeVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_PortRangeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.PortRangeVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Network::PortRange >::value_type const &" : return _vmkctl.PortRangeVector_front(self)
    def back(self) -> "std::vector< HostCtl::Network::PortRange >::value_type const &" : return _vmkctl.PortRangeVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.PortRangeVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.PortRangeVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.PortRangeVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.PortRangeVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Network::PortRange >::size_type" : return _vmkctl.PortRangeVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_PortRangeVector
    __del__ = lambda self : None;
PortRangeVector_swigregister = _vmkctl.PortRangeVector_swigregister
PortRangeVector_swigregister(PortRangeVector)

class PortImplVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortImplVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortImplVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.PortImplVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.PortImplVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.PortImplVector___bool__(self)
    def __len__(self) -> "std::vector< VmkCtl::Network::PortImpl * >::size_type" : return _vmkctl.PortImplVector___len__(self)
    def pop(self) -> "std::vector< VmkCtl::Network::PortImpl * >::value_type" : return _vmkctl.PortImplVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< VmkCtl::Network::PortImpl *,std::allocator< VmkCtl::Network::PortImpl * > > *" : return _vmkctl.PortImplVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.PortImplVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.PortImplVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.PortImplVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< VmkCtl::Network::PortImpl * >::value_type" : return _vmkctl.PortImplVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.PortImplVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.PortImplVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.PortImplVector_empty(self)
    def size(self) -> "std::vector< VmkCtl::Network::PortImpl * >::size_type" : return _vmkctl.PortImplVector_size(self)
    def clear(self) -> "void" : return _vmkctl.PortImplVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.PortImplVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< VmkCtl::Network::PortImpl * >::allocator_type" : return _vmkctl.PortImplVector_get_allocator(self)
    def begin(self) -> "std::vector< VmkCtl::Network::PortImpl * >::iterator" : return _vmkctl.PortImplVector_begin(self)
    def end(self) -> "std::vector< VmkCtl::Network::PortImpl * >::iterator" : return _vmkctl.PortImplVector_end(self)
    def rbegin(self) -> "std::vector< VmkCtl::Network::PortImpl * >::reverse_iterator" : return _vmkctl.PortImplVector_rbegin(self)
    def rend(self) -> "std::vector< VmkCtl::Network::PortImpl * >::reverse_iterator" : return _vmkctl.PortImplVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.PortImplVector_pop_back(self)
    def erase(self, *args) -> "std::vector< VmkCtl::Network::PortImpl * >::iterator" : return _vmkctl.PortImplVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_PortImplVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.PortImplVector_push_back(self, *args)
    def front(self) -> "std::vector< VmkCtl::Network::PortImpl * >::value_type" : return _vmkctl.PortImplVector_front(self)
    def back(self) -> "std::vector< VmkCtl::Network::PortImpl * >::value_type" : return _vmkctl.PortImplVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.PortImplVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.PortImplVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.PortImplVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.PortImplVector_reserve(self, *args)
    def capacity(self) -> "std::vector< VmkCtl::Network::PortImpl * >::size_type" : return _vmkctl.PortImplVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_PortImplVector
    __del__ = lambda self : None;
PortImplVector_swigregister = _vmkctl.PortImplVector_swigregister
PortImplVector_swigregister(PortImplVector)

class DVPortVlanRangeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortVlanRangeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortVlanRangeVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.DVPortVlanRangeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.DVPortVlanRangeVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.DVPortVlanRangeVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Network::DVPortVlanRange * >::size_type" : return _vmkctl.DVPortVlanRangeVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Network::DVPortVlanRange * >::value_type" : return _vmkctl.DVPortVlanRangeVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Network::DVPortVlanRange *,std::allocator< HostCtl::Network::DVPortVlanRange * > > *" : return _vmkctl.DVPortVlanRangeVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.DVPortVlanRangeVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.DVPortVlanRangeVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.DVPortVlanRangeVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Network::DVPortVlanRange * >::value_type" : return _vmkctl.DVPortVlanRangeVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.DVPortVlanRangeVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.DVPortVlanRangeVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.DVPortVlanRangeVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Network::DVPortVlanRange * >::size_type" : return _vmkctl.DVPortVlanRangeVector_size(self)
    def clear(self) -> "void" : return _vmkctl.DVPortVlanRangeVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.DVPortVlanRangeVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Network::DVPortVlanRange * >::allocator_type" : return _vmkctl.DVPortVlanRangeVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Network::DVPortVlanRange * >::iterator" : return _vmkctl.DVPortVlanRangeVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Network::DVPortVlanRange * >::iterator" : return _vmkctl.DVPortVlanRangeVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Network::DVPortVlanRange * >::reverse_iterator" : return _vmkctl.DVPortVlanRangeVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Network::DVPortVlanRange * >::reverse_iterator" : return _vmkctl.DVPortVlanRangeVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.DVPortVlanRangeVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Network::DVPortVlanRange * >::iterator" : return _vmkctl.DVPortVlanRangeVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_DVPortVlanRangeVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.DVPortVlanRangeVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Network::DVPortVlanRange * >::value_type" : return _vmkctl.DVPortVlanRangeVector_front(self)
    def back(self) -> "std::vector< HostCtl::Network::DVPortVlanRange * >::value_type" : return _vmkctl.DVPortVlanRangeVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.DVPortVlanRangeVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.DVPortVlanRangeVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.DVPortVlanRangeVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.DVPortVlanRangeVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Network::DVPortVlanRange * >::size_type" : return _vmkctl.DVPortVlanRangeVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_DVPortVlanRangeVector
    __del__ = lambda self : None;
DVPortVlanRangeVector_swigregister = _vmkctl.DVPortVlanRangeVector_swigregister
DVPortVlanRangeVector_swigregister(DVPortVlanRangeVector)

class ResourceGroupPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceGroupPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceGroupPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_ResourceGroupPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::ResourceGroup >::pointer" : return _vmkctl.ResourceGroupPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.ResourceGroupPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.ResourceGroupPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::ResourceGroup >::pointer" : return _vmkctl.ResourceGroupPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.ResourceGroupPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_ResourceGroupPtr
    __del__ = lambda self : None;
ResourceGroupPtr_swigregister = _vmkctl.ResourceGroupPtr_swigregister
ResourceGroupPtr_swigregister(ResourceGroupPtr)

class VirtualMachinePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirtualMachinePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirtualMachinePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VirtualMachinePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::VirtualMachine >::pointer" : return _vmkctl.VirtualMachinePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VirtualMachinePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VirtualMachinePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::VirtualMachine >::pointer" : return _vmkctl.VirtualMachinePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VirtualMachinePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VirtualMachinePtr
    __del__ = lambda self : None;
VirtualMachinePtr_swigregister = _vmkctl.VirtualMachinePtr_swigregister
VirtualMachinePtr_swigregister(VirtualMachinePtr)

class MemoryClientStatsPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryClientStatsPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryClientStatsPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_MemoryClientStatsPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::MemoryClientStats >::pointer" : return _vmkctl.MemoryClientStatsPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.MemoryClientStatsPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.MemoryClientStatsPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::MemoryClientStats >::pointer" : return _vmkctl.MemoryClientStatsPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.MemoryClientStatsPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_MemoryClientStatsPtr
    __del__ = lambda self : None;
MemoryClientStatsPtr_swigregister = _vmkctl.MemoryClientStatsPtr_swigregister
MemoryClientStatsPtr_swigregister(MemoryClientStatsPtr)

class VMSwapInfoPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VMSwapInfoPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VMSwapInfoPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VMSwapInfoPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::VMSwapInfo >::pointer" : return _vmkctl.VMSwapInfoPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VMSwapInfoPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VMSwapInfoPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::VMSwapInfo >::pointer" : return _vmkctl.VMSwapInfoPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VMSwapInfoPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VMSwapInfoPtr
    __del__ = lambda self : None;
VMSwapInfoPtr_swigregister = _vmkctl.VMSwapInfoPtr_swigregister
VMSwapInfoPtr_swigregister(VMSwapInfoPtr)

class VMOverheadStatsPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VMOverheadStatsPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VMOverheadStatsPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VMOverheadStatsPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::VMOverheadStats >::pointer" : return _vmkctl.VMOverheadStatsPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VMOverheadStatsPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VMOverheadStatsPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::VMOverheadStats >::pointer" : return _vmkctl.VMOverheadStatsPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VMOverheadStatsPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VMOverheadStatsPtr
    __del__ = lambda self : None;
VMOverheadStatsPtr_swigregister = _vmkctl.VMOverheadStatsPtr_swigregister
VMOverheadStatsPtr_swigregister(VMOverheadStatsPtr)

class FaultToleranceStatsPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FaultToleranceStatsPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FaultToleranceStatsPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_FaultToleranceStatsPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::FaultToleranceStats >::pointer" : return _vmkctl.FaultToleranceStatsPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.FaultToleranceStatsPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.FaultToleranceStatsPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::FaultToleranceStats >::pointer" : return _vmkctl.FaultToleranceStatsPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.FaultToleranceStatsPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_FaultToleranceStatsPtr
    __del__ = lambda self : None;
FaultToleranceStatsPtr_swigregister = _vmkctl.FaultToleranceStatsPtr_swigregister
FaultToleranceStatsPtr_swigregister(FaultToleranceStatsPtr)

class VscsiDiskIOFilterStatsPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VscsiDiskIOFilterStatsPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VscsiDiskIOFilterStatsPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VscsiDiskIOFilterStatsPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::IOFilterStats >::pointer" : return _vmkctl.VscsiDiskIOFilterStatsPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VscsiDiskIOFilterStatsPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VscsiDiskIOFilterStatsPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::IOFilterStats >::pointer" : return _vmkctl.VscsiDiskIOFilterStatsPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VscsiDiskIOFilterStatsPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VscsiDiskIOFilterStatsPtr
    __del__ = lambda self : None;
VscsiDiskIOFilterStatsPtr_swigregister = _vmkctl.VscsiDiskIOFilterStatsPtr_swigregister
VscsiDiskIOFilterStatsPtr_swigregister(VscsiDiskIOFilterStatsPtr)

class VscsiStatsPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VscsiStatsPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VscsiStatsPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VscsiStatsPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::VscsiStats >::pointer" : return _vmkctl.VscsiStatsPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VscsiStatsPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VscsiStatsPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::VscsiStats >::pointer" : return _vmkctl.VscsiStatsPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VscsiStatsPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VscsiStatsPtr
    __del__ = lambda self : None;
VscsiStatsPtr_swigregister = _vmkctl.VscsiStatsPtr_swigregister
VscsiStatsPtr_swigregister(VscsiStatsPtr)

class VscsiInfoPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VscsiInfoPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VscsiInfoPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VscsiInfoPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::VscsiInfo >::pointer" : return _vmkctl.VscsiInfoPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VscsiInfoPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VscsiInfoPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::VscsiInfo >::pointer" : return _vmkctl.VscsiInfoPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VscsiInfoPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VscsiInfoPtr
    __del__ = lambda self : None;
VscsiInfoPtr_swigregister = _vmkctl.VscsiInfoPtr_swigregister
VscsiInfoPtr_swigregister(VscsiInfoPtr)

class ContentBasedReadCacheInfoPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContentBasedReadCacheInfoPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContentBasedReadCacheInfoPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_ContentBasedReadCacheInfoPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::ContentBasedReadCacheInfo >::pointer" : return _vmkctl.ContentBasedReadCacheInfoPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.ContentBasedReadCacheInfoPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.ContentBasedReadCacheInfoPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::ContentBasedReadCacheInfo >::pointer" : return _vmkctl.ContentBasedReadCacheInfoPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.ContentBasedReadCacheInfoPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_ContentBasedReadCacheInfoPtr
    __del__ = lambda self : None;
ContentBasedReadCacheInfoPtr_swigregister = _vmkctl.ContentBasedReadCacheInfoPtr_swigregister
ContentBasedReadCacheInfoPtr_swigregister(ContentBasedReadCacheInfoPtr)

class WorldPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorldPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorldPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_WorldPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::World >::pointer" : return _vmkctl.WorldPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.WorldPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.WorldPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::World >::pointer" : return _vmkctl.WorldPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.WorldPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_WorldPtr
    __del__ = lambda self : None;
WorldPtr_swigregister = _vmkctl.WorldPtr_swigregister
WorldPtr_swigregister(WorldPtr)

class CpuStatsPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuStatsPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuStatsPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_CpuStatsPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::CpuStats >::pointer" : return _vmkctl.CpuStatsPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.CpuStatsPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.CpuStatsPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::CpuStats >::pointer" : return _vmkctl.CpuStatsPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.CpuStatsPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_CpuStatsPtr
    __del__ = lambda self : None;
CpuStatsPtr_swigregister = _vmkctl.CpuStatsPtr_swigregister
CpuStatsPtr_swigregister(CpuStatsPtr)

class CpuTimesPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuTimesPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuTimesPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_CpuTimesPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::CpuTimes >::pointer" : return _vmkctl.CpuTimesPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.CpuTimesPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.CpuTimesPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::CpuTimes >::pointer" : return _vmkctl.CpuTimesPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.CpuTimesPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_CpuTimesPtr
    __del__ = lambda self : None;
CpuTimesPtr_swigregister = _vmkctl.CpuTimesPtr_swigregister
CpuTimesPtr_swigregister(CpuTimesPtr)

class MemoryStatsPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryStatsPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryStatsPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_MemoryStatsPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::MemoryStats >::pointer" : return _vmkctl.MemoryStatsPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.MemoryStatsPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.MemoryStatsPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::MemoryStats >::pointer" : return _vmkctl.MemoryStatsPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.MemoryStatsPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_MemoryStatsPtr
    __del__ = lambda self : None;
MemoryStatsPtr_swigregister = _vmkctl.MemoryStatsPtr_swigregister
MemoryStatsPtr_swigregister(MemoryStatsPtr)

class VcpuStatsPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VcpuStatsPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VcpuStatsPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VcpuStatsPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Resource::VcpuStats >::pointer" : return _vmkctl.VcpuStatsPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VcpuStatsPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VcpuStatsPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Resource::VcpuStats >::pointer" : return _vmkctl.VcpuStatsPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VcpuStatsPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VcpuStatsPtr
    __del__ = lambda self : None;
VcpuStatsPtr_swigregister = _vmkctl.VcpuStatsPtr_swigregister
VcpuStatsPtr_swigregister(VcpuStatsPtr)

class ResourceGroupVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceGroupVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceGroupVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.ResourceGroupVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.ResourceGroupVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.ResourceGroupVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::ResourceGroup > >::size_type" : return _vmkctl.ResourceGroupVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.ResourceGroupVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.ResourceGroupVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::ResourceGroup > >::size_type" : return _vmkctl.ResourceGroupVector_size(self)
    def clear(self) -> "void" : return _vmkctl.ResourceGroupVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.ResourceGroupVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::ResourceGroup > >::allocator_type" : return _vmkctl.ResourceGroupVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::ResourceGroup > >::iterator" : return _vmkctl.ResourceGroupVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::ResourceGroup > >::iterator" : return _vmkctl.ResourceGroupVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::ResourceGroup > >::reverse_iterator" : return _vmkctl.ResourceGroupVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::ResourceGroup > >::reverse_iterator" : return _vmkctl.ResourceGroupVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.ResourceGroupVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::ResourceGroup > >::value_type const &" : return _vmkctl.ResourceGroupVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::ResourceGroup > >::value_type const &" : return _vmkctl.ResourceGroupVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.ResourceGroupVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::ResourceGroup > >::size_type" : return _vmkctl.ResourceGroupVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_ResourceGroupVector
    __del__ = lambda self : None;
ResourceGroupVector_swigregister = _vmkctl.ResourceGroupVector_swigregister
ResourceGroupVector_swigregister(ResourceGroupVector)

class VirtualMachineVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirtualMachineVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VirtualMachineVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.VirtualMachineVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.VirtualMachineVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.VirtualMachineVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::VirtualMachine > >::size_type" : return _vmkctl.VirtualMachineVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.VirtualMachineVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.VirtualMachineVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::VirtualMachine > >::size_type" : return _vmkctl.VirtualMachineVector_size(self)
    def clear(self) -> "void" : return _vmkctl.VirtualMachineVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.VirtualMachineVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::VirtualMachine > >::allocator_type" : return _vmkctl.VirtualMachineVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::VirtualMachine > >::iterator" : return _vmkctl.VirtualMachineVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::VirtualMachine > >::iterator" : return _vmkctl.VirtualMachineVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::VirtualMachine > >::reverse_iterator" : return _vmkctl.VirtualMachineVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::VirtualMachine > >::reverse_iterator" : return _vmkctl.VirtualMachineVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.VirtualMachineVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::VirtualMachine > >::value_type const &" : return _vmkctl.VirtualMachineVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::VirtualMachine > >::value_type const &" : return _vmkctl.VirtualMachineVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.VirtualMachineVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::VirtualMachine > >::size_type" : return _vmkctl.VirtualMachineVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_VirtualMachineVector
    __del__ = lambda self : None;
VirtualMachineVector_swigregister = _vmkctl.VirtualMachineVector_swigregister
VirtualMachineVector_swigregister(VirtualMachineVector)

class WorldVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WorldVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WorldVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.WorldVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.WorldVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.WorldVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::World > >::size_type" : return _vmkctl.WorldVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.WorldVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.WorldVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::World > >::size_type" : return _vmkctl.WorldVector_size(self)
    def clear(self) -> "void" : return _vmkctl.WorldVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.WorldVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::World > >::allocator_type" : return _vmkctl.WorldVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::World > >::iterator" : return _vmkctl.WorldVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::World > >::iterator" : return _vmkctl.WorldVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::World > >::reverse_iterator" : return _vmkctl.WorldVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::World > >::reverse_iterator" : return _vmkctl.WorldVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.WorldVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::World > >::value_type const &" : return _vmkctl.WorldVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::World > >::value_type const &" : return _vmkctl.WorldVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.WorldVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Resource::World > >::size_type" : return _vmkctl.WorldVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_WorldVector
    __del__ = lambda self : None;
WorldVector_swigregister = _vmkctl.WorldVector_swigregister
WorldVector_swigregister(WorldVector)

class HostCpuStatsVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostCpuStatsVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostCpuStatsVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.HostCpuStatsVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.HostCpuStatsVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.HostCpuStatsVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Resource::HostCpuStats >::size_type" : return _vmkctl.HostCpuStatsVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Resource::HostCpuStats >::value_type" : return _vmkctl.HostCpuStatsVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Resource::HostCpuStats,std::allocator< HostCtl::Resource::HostCpuStats > > *" : return _vmkctl.HostCpuStatsVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.HostCpuStatsVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.HostCpuStatsVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.HostCpuStatsVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Resource::HostCpuStats >::value_type const &" : return _vmkctl.HostCpuStatsVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.HostCpuStatsVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.HostCpuStatsVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.HostCpuStatsVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Resource::HostCpuStats >::size_type" : return _vmkctl.HostCpuStatsVector_size(self)
    def clear(self) -> "void" : return _vmkctl.HostCpuStatsVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.HostCpuStatsVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Resource::HostCpuStats >::allocator_type" : return _vmkctl.HostCpuStatsVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Resource::HostCpuStats >::iterator" : return _vmkctl.HostCpuStatsVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Resource::HostCpuStats >::iterator" : return _vmkctl.HostCpuStatsVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Resource::HostCpuStats >::reverse_iterator" : return _vmkctl.HostCpuStatsVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Resource::HostCpuStats >::reverse_iterator" : return _vmkctl.HostCpuStatsVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.HostCpuStatsVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Resource::HostCpuStats >::iterator" : return _vmkctl.HostCpuStatsVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_HostCpuStatsVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.HostCpuStatsVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Resource::HostCpuStats >::value_type const &" : return _vmkctl.HostCpuStatsVector_front(self)
    def back(self) -> "std::vector< HostCtl::Resource::HostCpuStats >::value_type const &" : return _vmkctl.HostCpuStatsVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.HostCpuStatsVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.HostCpuStatsVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.HostCpuStatsVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.HostCpuStatsVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Resource::HostCpuStats >::size_type" : return _vmkctl.HostCpuStatsVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_HostCpuStatsVector
    __del__ = lambda self : None;
HostCpuStatsVector_swigregister = _vmkctl.HostCpuStatsVector_swigregister
HostCpuStatsVector_swigregister(HostCpuStatsVector)

class ResourceGroupSpecVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceGroupSpecVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceGroupSpecVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.ResourceGroupSpecVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.ResourceGroupSpecVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.ResourceGroupSpecVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Resource::ResourceGroupSpec >::size_type" : return _vmkctl.ResourceGroupSpecVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Resource::ResourceGroupSpec >::value_type" : return _vmkctl.ResourceGroupSpecVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Resource::ResourceGroupSpec,std::allocator< HostCtl::Resource::ResourceGroupSpec > > *" : return _vmkctl.ResourceGroupSpecVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.ResourceGroupSpecVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.ResourceGroupSpecVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.ResourceGroupSpecVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Resource::ResourceGroupSpec >::value_type const &" : return _vmkctl.ResourceGroupSpecVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.ResourceGroupSpecVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.ResourceGroupSpecVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.ResourceGroupSpecVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Resource::ResourceGroupSpec >::size_type" : return _vmkctl.ResourceGroupSpecVector_size(self)
    def clear(self) -> "void" : return _vmkctl.ResourceGroupSpecVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.ResourceGroupSpecVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Resource::ResourceGroupSpec >::allocator_type" : return _vmkctl.ResourceGroupSpecVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Resource::ResourceGroupSpec >::iterator" : return _vmkctl.ResourceGroupSpecVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Resource::ResourceGroupSpec >::iterator" : return _vmkctl.ResourceGroupSpecVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Resource::ResourceGroupSpec >::reverse_iterator" : return _vmkctl.ResourceGroupSpecVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Resource::ResourceGroupSpec >::reverse_iterator" : return _vmkctl.ResourceGroupSpecVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.ResourceGroupSpecVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Resource::ResourceGroupSpec >::iterator" : return _vmkctl.ResourceGroupSpecVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_ResourceGroupSpecVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.ResourceGroupSpecVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Resource::ResourceGroupSpec >::value_type const &" : return _vmkctl.ResourceGroupSpecVector_front(self)
    def back(self) -> "std::vector< HostCtl::Resource::ResourceGroupSpec >::value_type const &" : return _vmkctl.ResourceGroupSpecVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.ResourceGroupSpecVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.ResourceGroupSpecVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.ResourceGroupSpecVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.ResourceGroupSpecVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Resource::ResourceGroupSpec >::size_type" : return _vmkctl.ResourceGroupSpecVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_ResourceGroupSpecVector
    __del__ = lambda self : None;
ResourceGroupSpecVector_swigregister = _vmkctl.ResourceGroupSpecVector_swigregister
ResourceGroupSpecVector_swigregister(ResourceGroupSpecVector)

class ResourceGroupImplVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceGroupImplVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceGroupImplVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.ResourceGroupImplVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.ResourceGroupImplVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.ResourceGroupImplVector___bool__(self)
    def __len__(self) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl * >::size_type" : return _vmkctl.ResourceGroupImplVector___len__(self)
    def pop(self) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl * >::value_type" : return _vmkctl.ResourceGroupImplVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl *,std::allocator< VmkCtl::Resource::ResourceGroupImpl * > > *" : return _vmkctl.ResourceGroupImplVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.ResourceGroupImplVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.ResourceGroupImplVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.ResourceGroupImplVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl * >::value_type" : return _vmkctl.ResourceGroupImplVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.ResourceGroupImplVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.ResourceGroupImplVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.ResourceGroupImplVector_empty(self)
    def size(self) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl * >::size_type" : return _vmkctl.ResourceGroupImplVector_size(self)
    def clear(self) -> "void" : return _vmkctl.ResourceGroupImplVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.ResourceGroupImplVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl * >::allocator_type" : return _vmkctl.ResourceGroupImplVector_get_allocator(self)
    def begin(self) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl * >::iterator" : return _vmkctl.ResourceGroupImplVector_begin(self)
    def end(self) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl * >::iterator" : return _vmkctl.ResourceGroupImplVector_end(self)
    def rbegin(self) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl * >::reverse_iterator" : return _vmkctl.ResourceGroupImplVector_rbegin(self)
    def rend(self) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl * >::reverse_iterator" : return _vmkctl.ResourceGroupImplVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.ResourceGroupImplVector_pop_back(self)
    def erase(self, *args) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl * >::iterator" : return _vmkctl.ResourceGroupImplVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_ResourceGroupImplVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.ResourceGroupImplVector_push_back(self, *args)
    def front(self) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl * >::value_type" : return _vmkctl.ResourceGroupImplVector_front(self)
    def back(self) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl * >::value_type" : return _vmkctl.ResourceGroupImplVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.ResourceGroupImplVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.ResourceGroupImplVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.ResourceGroupImplVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.ResourceGroupImplVector_reserve(self, *args)
    def capacity(self) -> "std::vector< VmkCtl::Resource::ResourceGroupImpl * >::size_type" : return _vmkctl.ResourceGroupImplVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_ResourceGroupImplVector
    __del__ = lambda self : None;
ResourceGroupImplVector_swigregister = _vmkctl.ResourceGroupImplVector_swigregister
ResourceGroupImplVector_swigregister(ResourceGroupImplVector)

class DiskLunPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiskLunPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiskLunPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DiskLunPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::DiskLun >::pointer" : return _vmkctl.DiskLunPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.DiskLunPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.DiskLunPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::DiskLun >::pointer" : return _vmkctl.DiskLunPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.DiskLunPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_DiskLunPtr
    __del__ = lambda self : None;
DiskLunPtr_swigregister = _vmkctl.DiskLunPtr_swigregister
DiskLunPtr_swigregister(DiskLunPtr)

class DiskLunPartitionPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiskLunPartitionPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiskLunPartitionPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DiskLunPartitionPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::DiskLunPartition >::pointer" : return _vmkctl.DiskLunPartitionPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.DiskLunPartitionPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.DiskLunPartitionPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::DiskLunPartition >::pointer" : return _vmkctl.DiskLunPartitionPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.DiskLunPartitionPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_DiskLunPartitionPtr
    __del__ = lambda self : None;
DiskLunPartitionPtr_swigregister = _vmkctl.DiskLunPartitionPtr_swigregister
DiskLunPartitionPtr_swigregister(DiskLunPartitionPtr)

class ScsiPathPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScsiPathPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScsiPathPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_ScsiPathPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::ScsiPath >::pointer" : return _vmkctl.ScsiPathPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.ScsiPathPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.ScsiPathPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::ScsiPath >::pointer" : return _vmkctl.ScsiPathPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.ScsiPathPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_ScsiPathPtr
    __del__ = lambda self : None;
ScsiPathPtr_swigregister = _vmkctl.ScsiPathPtr_swigregister
ScsiPathPtr_swigregister(ScsiPathPtr)

class LunPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LunPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LunPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_LunPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::Lun >::pointer" : return _vmkctl.LunPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.LunPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.LunPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::Lun >::pointer" : return _vmkctl.LunPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.LunPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_LunPtr
    __del__ = lambda self : None;
LunPtr_swigregister = _vmkctl.LunPtr_swigregister
LunPtr_swigregister(LunPtr)

class UnresolvedVmfsExtentPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnresolvedVmfsExtentPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnresolvedVmfsExtentPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_UnresolvedVmfsExtentPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::UnresolvedVmfsExtent >::pointer" : return _vmkctl.UnresolvedVmfsExtentPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsExtentPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsExtentPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::UnresolvedVmfsExtent >::pointer" : return _vmkctl.UnresolvedVmfsExtentPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.UnresolvedVmfsExtentPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_UnresolvedVmfsExtentPtr
    __del__ = lambda self : None;
UnresolvedVmfsExtentPtr_swigregister = _vmkctl.UnresolvedVmfsExtentPtr_swigregister
UnresolvedVmfsExtentPtr_swigregister(UnresolvedVmfsExtentPtr)

class VmFileSystemPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmFileSystemPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VmFileSystemPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VmFileSystemPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::VmFileSystem >::pointer" : return _vmkctl.VmFileSystemPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VmFileSystemPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VmFileSystemPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::VmFileSystem >::pointer" : return _vmkctl.VmFileSystemPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VmFileSystemPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VmFileSystemPtr
    __del__ = lambda self : None;
VmFileSystemPtr_swigregister = _vmkctl.VmFileSystemPtr_swigregister
VmFileSystemPtr_swigregister(VmFileSystemPtr)

class ScsiInterfacePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScsiInterfacePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScsiInterfacePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_ScsiInterfacePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::ScsiInterface >::pointer" : return _vmkctl.ScsiInterfacePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.ScsiInterfacePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.ScsiInterfacePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::ScsiInterface >::pointer" : return _vmkctl.ScsiInterfacePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.ScsiInterfacePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_ScsiInterfacePtr
    __del__ = lambda self : None;
ScsiInterfacePtr_swigregister = _vmkctl.ScsiInterfacePtr_swigregister
ScsiInterfacePtr_swigregister(ScsiInterfacePtr)

class iScsiInterfacePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiInterfacePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiInterfacePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_iScsiInterfacePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::iScsiInterface >::pointer" : return _vmkctl.iScsiInterfacePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.iScsiInterfacePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.iScsiInterfacePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::iScsiInterface >::pointer" : return _vmkctl.iScsiInterfacePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.iScsiInterfacePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_iScsiInterfacePtr
    __del__ = lambda self : None;
iScsiInterfacePtr_swigregister = _vmkctl.iScsiInterfacePtr_swigregister
iScsiInterfacePtr_swigregister(iScsiInterfacePtr)

class PsaScsiPathConfigPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsaScsiPathConfigPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsaScsiPathConfigPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PsaScsiPathConfigPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::PsaScsiPathConfig >::pointer" : return _vmkctl.PsaScsiPathConfigPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PsaScsiPathConfigPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PsaScsiPathConfigPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::PsaScsiPathConfig >::pointer" : return _vmkctl.PsaScsiPathConfigPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PsaScsiPathConfigPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PsaScsiPathConfigPtr
    __del__ = lambda self : None;
PsaScsiPathConfigPtr_swigregister = _vmkctl.PsaScsiPathConfigPtr_swigregister
PsaScsiPathConfigPtr_swigregister(PsaScsiPathConfigPtr)

class PsaMultipathPluginPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsaMultipathPluginPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PsaMultipathPluginPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PsaMultipathPluginPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::PsaMultipathPlugin >::pointer" : return _vmkctl.PsaMultipathPluginPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PsaMultipathPluginPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PsaMultipathPluginPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::PsaMultipathPlugin >::pointer" : return _vmkctl.PsaMultipathPluginPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PsaMultipathPluginPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PsaMultipathPluginPtr
    __del__ = lambda self : None;
PsaMultipathPluginPtr_swigregister = _vmkctl.PsaMultipathPluginPtr_swigregister
PsaMultipathPluginPtr_swigregister(PsaMultipathPluginPtr)

class TransportMappingPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransportMappingPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransportMappingPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_TransportMappingPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::TransportMapping >::pointer" : return _vmkctl.TransportMappingPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.TransportMappingPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.TransportMappingPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::TransportMapping >::pointer" : return _vmkctl.TransportMappingPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.TransportMappingPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_TransportMappingPtr
    __del__ = lambda self : None;
TransportMappingPtr_swigregister = _vmkctl.TransportMappingPtr_swigregister
TransportMappingPtr_swigregister(TransportMappingPtr)

class FibreChannelInterfacePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FibreChannelInterfacePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FibreChannelInterfacePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_FibreChannelInterfacePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::FibreChannelInterface >::pointer" : return _vmkctl.FibreChannelInterfacePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.FibreChannelInterfacePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.FibreChannelInterfacePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::FibreChannelInterface >::pointer" : return _vmkctl.FibreChannelInterfacePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.FibreChannelInterfacePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_FibreChannelInterfacePtr
    __del__ = lambda self : None;
FibreChannelInterfacePtr_swigregister = _vmkctl.FibreChannelInterfacePtr_swigregister
FibreChannelInterfacePtr_swigregister(FibreChannelInterfacePtr)

class FibreChannelOverEthernetInterfacePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FibreChannelOverEthernetInterfacePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FibreChannelOverEthernetInterfacePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_FibreChannelOverEthernetInterfacePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::FibreChannelOverEthernetInterface >::pointer" : return _vmkctl.FibreChannelOverEthernetInterfacePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.FibreChannelOverEthernetInterfacePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.FibreChannelOverEthernetInterfacePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::FibreChannelOverEthernetInterface >::pointer" : return _vmkctl.FibreChannelOverEthernetInterfacePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.FibreChannelOverEthernetInterfacePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_FibreChannelOverEthernetInterfacePtr
    __del__ = lambda self : None;
FibreChannelOverEthernetInterfacePtr_swigregister = _vmkctl.FibreChannelOverEthernetInterfacePtr_swigregister
FibreChannelOverEthernetInterfacePtr_swigregister(FibreChannelOverEthernetInterfacePtr)

class BlockScsiInterfacePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockScsiInterfacePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockScsiInterfacePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_BlockScsiInterfacePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::BlockScsiInterface >::pointer" : return _vmkctl.BlockScsiInterfacePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.BlockScsiInterfacePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.BlockScsiInterfacePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::BlockScsiInterface >::pointer" : return _vmkctl.BlockScsiInterfacePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.BlockScsiInterfacePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_BlockScsiInterfacePtr
    __del__ = lambda self : None;
BlockScsiInterfacePtr_swigregister = _vmkctl.BlockScsiInterfacePtr_swigregister
BlockScsiInterfacePtr_swigregister(BlockScsiInterfacePtr)

class IdeScsiInterfacePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdeScsiInterfacePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdeScsiInterfacePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_IdeScsiInterfacePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::IdeScsiInterface >::pointer" : return _vmkctl.IdeScsiInterfacePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.IdeScsiInterfacePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.IdeScsiInterfacePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::IdeScsiInterface >::pointer" : return _vmkctl.IdeScsiInterfacePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.IdeScsiInterfacePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_IdeScsiInterfacePtr
    __del__ = lambda self : None;
IdeScsiInterfacePtr_swigregister = _vmkctl.IdeScsiInterfacePtr_swigregister
IdeScsiInterfacePtr_swigregister(IdeScsiInterfacePtr)

class ParallelScsiInterfacePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParallelScsiInterfacePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParallelScsiInterfacePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_ParallelScsiInterfacePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::ParallelScsiInterface >::pointer" : return _vmkctl.ParallelScsiInterfacePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.ParallelScsiInterfacePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.ParallelScsiInterfacePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::ParallelScsiInterface >::pointer" : return _vmkctl.ParallelScsiInterfacePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.ParallelScsiInterfacePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_ParallelScsiInterfacePtr
    __del__ = lambda self : None;
ParallelScsiInterfacePtr_swigregister = _vmkctl.ParallelScsiInterfacePtr_swigregister
ParallelScsiInterfacePtr_swigregister(ParallelScsiInterfacePtr)

class SerialAttachedScsiInterfacePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerialAttachedScsiInterfacePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SerialAttachedScsiInterfacePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_SerialAttachedScsiInterfacePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::SerialAttachedScsiInterface >::pointer" : return _vmkctl.SerialAttachedScsiInterfacePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.SerialAttachedScsiInterfacePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.SerialAttachedScsiInterfacePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::SerialAttachedScsiInterface >::pointer" : return _vmkctl.SerialAttachedScsiInterfacePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.SerialAttachedScsiInterfacePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_SerialAttachedScsiInterfacePtr
    __del__ = lambda self : None;
SerialAttachedScsiInterfacePtr_swigregister = _vmkctl.SerialAttachedScsiInterfacePtr_swigregister
SerialAttachedScsiInterfacePtr_swigregister(SerialAttachedScsiInterfacePtr)

class UsbInterfacePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UsbInterfacePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UsbInterfacePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_UsbInterfacePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::UsbInterface >::pointer" : return _vmkctl.UsbInterfacePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.UsbInterfacePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.UsbInterfacePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::UsbInterface >::pointer" : return _vmkctl.UsbInterfacePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.UsbInterfacePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_UsbInterfacePtr
    __del__ = lambda self : None;
UsbInterfacePtr_swigregister = _vmkctl.UsbInterfacePtr_swigregister
UsbInterfacePtr_swigregister(UsbInterfacePtr)

class SataInterfacePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SataInterfacePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SataInterfacePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_SataInterfacePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::SataInterface >::pointer" : return _vmkctl.SataInterfacePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.SataInterfacePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.SataInterfacePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::SataInterface >::pointer" : return _vmkctl.SataInterfacePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.SataInterfacePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_SataInterfacePtr
    __del__ = lambda self : None;
SataInterfacePtr_swigregister = _vmkctl.SataInterfacePtr_swigregister
SataInterfacePtr_swigregister(SataInterfacePtr)

class DiagnosticFilePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiagnosticFilePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiagnosticFilePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DiagnosticFilePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::DiagnosticFile >::pointer" : return _vmkctl.DiagnosticFilePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.DiagnosticFilePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.DiagnosticFilePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::DiagnosticFile >::pointer" : return _vmkctl.DiagnosticFilePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.DiagnosticFilePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_DiagnosticFilePtr
    __del__ = lambda self : None;
DiagnosticFilePtr_swigregister = _vmkctl.DiagnosticFilePtr_swigregister
DiagnosticFilePtr_swigregister(DiagnosticFilePtr)

class DiagnosticPartitionPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiagnosticPartitionPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiagnosticPartitionPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DiagnosticPartitionPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::DiagnosticPartition >::pointer" : return _vmkctl.DiagnosticPartitionPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.DiagnosticPartitionPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.DiagnosticPartitionPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::DiagnosticPartition >::pointer" : return _vmkctl.DiagnosticPartitionPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.DiagnosticPartitionPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_DiagnosticPartitionPtr
    __del__ = lambda self : None;
DiagnosticPartitionPtr_swigregister = _vmkctl.DiagnosticPartitionPtr_swigregister
DiagnosticPartitionPtr_swigregister(DiagnosticPartitionPtr)

class DiagnosticVsanPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiagnosticVsanPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiagnosticVsanPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DiagnosticVsanPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::DiagnosticVsan >::pointer" : return _vmkctl.DiagnosticVsanPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.DiagnosticVsanPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.DiagnosticVsanPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::DiagnosticVsan >::pointer" : return _vmkctl.DiagnosticVsanPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.DiagnosticVsanPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_DiagnosticVsanPtr
    __del__ = lambda self : None;
DiagnosticVsanPtr_swigregister = _vmkctl.DiagnosticVsanPtr_swigregister
DiagnosticVsanPtr_swigregister(DiagnosticVsanPtr)

class FileSystemPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileSystemPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileSystemPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_FileSystemPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::FileSystem >::pointer" : return _vmkctl.FileSystemPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.FileSystemPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.FileSystemPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::FileSystem >::pointer" : return _vmkctl.FileSystemPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.FileSystemPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_FileSystemPtr
    __del__ = lambda self : None;
FileSystemPtr_swigregister = _vmkctl.FileSystemPtr_swigregister
FileSystemPtr_swigregister(FileSystemPtr)

class PMemFileSystemPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemFileSystemPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemFileSystemPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PMemFileSystemPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::PMemFileSystem >::pointer" : return _vmkctl.PMemFileSystemPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PMemFileSystemPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PMemFileSystemPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::PMemFileSystem >::pointer" : return _vmkctl.PMemFileSystemPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PMemFileSystemPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PMemFileSystemPtr
    __del__ = lambda self : None;
PMemFileSystemPtr_swigregister = _vmkctl.PMemFileSystemPtr_swigregister
PMemFileSystemPtr_swigregister(PMemFileSystemPtr)

class UFSFileSystemPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UFSFileSystemPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UFSFileSystemPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_UFSFileSystemPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::UFSFileSystem >::pointer" : return _vmkctl.UFSFileSystemPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.UFSFileSystemPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.UFSFileSystemPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::UFSFileSystem >::pointer" : return _vmkctl.UFSFileSystemPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.UFSFileSystemPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_UFSFileSystemPtr
    __del__ = lambda self : None;
UFSFileSystemPtr_swigregister = _vmkctl.UFSFileSystemPtr_swigregister
UFSFileSystemPtr_swigregister(UFSFileSystemPtr)

class ObjectStoreFileSystemPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectStoreFileSystemPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectStoreFileSystemPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_ObjectStoreFileSystemPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::ObjectStoreFileSystem >::pointer" : return _vmkctl.ObjectStoreFileSystemPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.ObjectStoreFileSystemPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.ObjectStoreFileSystemPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::ObjectStoreFileSystem >::pointer" : return _vmkctl.ObjectStoreFileSystemPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.ObjectStoreFileSystemPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_ObjectStoreFileSystemPtr
    __del__ = lambda self : None;
ObjectStoreFileSystemPtr_swigregister = _vmkctl.ObjectStoreFileSystemPtr_swigregister
ObjectStoreFileSystemPtr_swigregister(ObjectStoreFileSystemPtr)

class UnresolvedVmfsVolumePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnresolvedVmfsVolumePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnresolvedVmfsVolumePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_UnresolvedVmfsVolumePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::UnresolvedVmfsVolume >::pointer" : return _vmkctl.UnresolvedVmfsVolumePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolumePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolumePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::UnresolvedVmfsVolume >::pointer" : return _vmkctl.UnresolvedVmfsVolumePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.UnresolvedVmfsVolumePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_UnresolvedVmfsVolumePtr
    __del__ = lambda self : None;
UnresolvedVmfsVolumePtr_swigregister = _vmkctl.UnresolvedVmfsVolumePtr_swigregister
UnresolvedVmfsVolumePtr_swigregister(UnresolvedVmfsVolumePtr)

class NetworkFileSystemPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkFileSystemPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkFileSystemPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_NetworkFileSystemPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::NetworkFileSystem >::pointer" : return _vmkctl.NetworkFileSystemPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.NetworkFileSystemPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.NetworkFileSystemPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::NetworkFileSystem >::pointer" : return _vmkctl.NetworkFileSystemPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.NetworkFileSystemPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_NetworkFileSystemPtr
    __del__ = lambda self : None;
NetworkFileSystemPtr_swigregister = _vmkctl.NetworkFileSystemPtr_swigregister
NetworkFileSystemPtr_swigregister(NetworkFileSystemPtr)

class VmFileSystemPBCachePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmFileSystemPBCachePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VmFileSystemPBCachePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VmFileSystemPBCachePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::VmFileSystemPBCache >::pointer" : return _vmkctl.VmFileSystemPBCachePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VmFileSystemPBCachePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VmFileSystemPBCachePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::VmFileSystemPBCache >::pointer" : return _vmkctl.VmFileSystemPBCachePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VmFileSystemPBCachePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VmFileSystemPBCachePtr
    __del__ = lambda self : None;
VmFileSystemPBCachePtr_swigregister = _vmkctl.VmFileSystemPBCachePtr_swigregister
VmFileSystemPBCachePtr_swigregister(VmFileSystemPBCachePtr)

class VFATFileSystemPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VFATFileSystemPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VFATFileSystemPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VFATFileSystemPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::VFATFileSystem >::pointer" : return _vmkctl.VFATFileSystemPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VFATFileSystemPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VFATFileSystemPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::VFATFileSystem >::pointer" : return _vmkctl.VFATFileSystemPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VFATFileSystemPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VFATFileSystemPtr
    __del__ = lambda self : None;
VFATFileSystemPtr_swigregister = _vmkctl.VFATFileSystemPtr_swigregister
VFATFileSystemPtr_swigregister(VFATFileSystemPtr)

class DiskLunPartitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiskLunPartitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiskLunPartitionVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.DiskLunPartitionVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.DiskLunPartitionVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.DiskLunPartitionVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLunPartition > >::size_type" : return _vmkctl.DiskLunPartitionVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.DiskLunPartitionVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLunPartition > >::size_type" : return _vmkctl.DiskLunPartitionVector_size(self)
    def clear(self) -> "void" : return _vmkctl.DiskLunPartitionVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLunPartition > >::allocator_type" : return _vmkctl.DiskLunPartitionVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLunPartition > >::iterator" : return _vmkctl.DiskLunPartitionVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLunPartition > >::iterator" : return _vmkctl.DiskLunPartitionVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLunPartition > >::reverse_iterator" : return _vmkctl.DiskLunPartitionVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLunPartition > >::reverse_iterator" : return _vmkctl.DiskLunPartitionVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.DiskLunPartitionVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLunPartition > >::value_type const &" : return _vmkctl.DiskLunPartitionVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLunPartition > >::value_type const &" : return _vmkctl.DiskLunPartitionVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLunPartition > >::size_type" : return _vmkctl.DiskLunPartitionVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_DiskLunPartitionVector
    __del__ = lambda self : None;
DiskLunPartitionVector_swigregister = _vmkctl.DiskLunPartitionVector_swigregister
DiskLunPartitionVector_swigregister(DiskLunPartitionVector)

class ScsiPathVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScsiPathVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScsiPathVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.ScsiPathVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.ScsiPathVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.ScsiPathVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiPath > >::size_type" : return _vmkctl.ScsiPathVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.ScsiPathVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.ScsiPathVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiPath > >::size_type" : return _vmkctl.ScsiPathVector_size(self)
    def clear(self) -> "void" : return _vmkctl.ScsiPathVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.ScsiPathVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiPath > >::allocator_type" : return _vmkctl.ScsiPathVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiPath > >::iterator" : return _vmkctl.ScsiPathVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiPath > >::iterator" : return _vmkctl.ScsiPathVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiPath > >::reverse_iterator" : return _vmkctl.ScsiPathVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiPath > >::reverse_iterator" : return _vmkctl.ScsiPathVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.ScsiPathVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiPath > >::value_type const &" : return _vmkctl.ScsiPathVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiPath > >::value_type const &" : return _vmkctl.ScsiPathVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.ScsiPathVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiPath > >::size_type" : return _vmkctl.ScsiPathVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_ScsiPathVector
    __del__ = lambda self : None;
ScsiPathVector_swigregister = _vmkctl.ScsiPathVector_swigregister
ScsiPathVector_swigregister(ScsiPathVector)

class LunVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LunVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LunVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.LunVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.LunVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.LunVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Lun > >::size_type" : return _vmkctl.LunVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.LunVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.LunVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Lun > >::size_type" : return _vmkctl.LunVector_size(self)
    def clear(self) -> "void" : return _vmkctl.LunVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.LunVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Lun > >::allocator_type" : return _vmkctl.LunVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Lun > >::iterator" : return _vmkctl.LunVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Lun > >::iterator" : return _vmkctl.LunVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Lun > >::reverse_iterator" : return _vmkctl.LunVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Lun > >::reverse_iterator" : return _vmkctl.LunVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.LunVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Lun > >::value_type const &" : return _vmkctl.LunVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Lun > >::value_type const &" : return _vmkctl.LunVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.LunVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Lun > >::size_type" : return _vmkctl.LunVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_LunVector
    __del__ = lambda self : None;
LunVector_swigregister = _vmkctl.LunVector_swigregister
LunVector_swigregister(LunVector)

class UnresolvedVmfsExtentVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnresolvedVmfsExtentVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnresolvedVmfsExtentVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.UnresolvedVmfsExtentVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.UnresolvedVmfsExtentVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.UnresolvedVmfsExtentVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsExtent > >::size_type" : return _vmkctl.UnresolvedVmfsExtentVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsExtentVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.UnresolvedVmfsExtentVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsExtent > >::size_type" : return _vmkctl.UnresolvedVmfsExtentVector_size(self)
    def clear(self) -> "void" : return _vmkctl.UnresolvedVmfsExtentVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsExtentVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsExtent > >::allocator_type" : return _vmkctl.UnresolvedVmfsExtentVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsExtent > >::iterator" : return _vmkctl.UnresolvedVmfsExtentVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsExtent > >::iterator" : return _vmkctl.UnresolvedVmfsExtentVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsExtent > >::reverse_iterator" : return _vmkctl.UnresolvedVmfsExtentVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsExtent > >::reverse_iterator" : return _vmkctl.UnresolvedVmfsExtentVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.UnresolvedVmfsExtentVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsExtent > >::value_type const &" : return _vmkctl.UnresolvedVmfsExtentVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsExtent > >::value_type const &" : return _vmkctl.UnresolvedVmfsExtentVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsExtentVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsExtent > >::size_type" : return _vmkctl.UnresolvedVmfsExtentVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_UnresolvedVmfsExtentVector
    __del__ = lambda self : None;
UnresolvedVmfsExtentVector_swigregister = _vmkctl.UnresolvedVmfsExtentVector_swigregister
UnresolvedVmfsExtentVector_swigregister(UnresolvedVmfsExtentVector)

class ScsiInterfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScsiInterfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScsiInterfaceVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.ScsiInterfaceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.ScsiInterfaceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.ScsiInterfaceVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiInterface > >::size_type" : return _vmkctl.ScsiInterfaceVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.ScsiInterfaceVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.ScsiInterfaceVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiInterface > >::size_type" : return _vmkctl.ScsiInterfaceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.ScsiInterfaceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.ScsiInterfaceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiInterface > >::allocator_type" : return _vmkctl.ScsiInterfaceVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiInterface > >::iterator" : return _vmkctl.ScsiInterfaceVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiInterface > >::iterator" : return _vmkctl.ScsiInterfaceVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiInterface > >::reverse_iterator" : return _vmkctl.ScsiInterfaceVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiInterface > >::reverse_iterator" : return _vmkctl.ScsiInterfaceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.ScsiInterfaceVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiInterface > >::value_type const &" : return _vmkctl.ScsiInterfaceVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiInterface > >::value_type const &" : return _vmkctl.ScsiInterfaceVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.ScsiInterfaceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ScsiInterface > >::size_type" : return _vmkctl.ScsiInterfaceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_ScsiInterfaceVector
    __del__ = lambda self : None;
ScsiInterfaceVector_swigregister = _vmkctl.ScsiInterfaceVector_swigregister
ScsiInterfaceVector_swigregister(ScsiInterfaceVector)

class FibreChannelInterfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FibreChannelInterfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FibreChannelInterfaceVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.FibreChannelInterfaceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.FibreChannelInterfaceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.FibreChannelInterfaceVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelInterface > >::size_type" : return _vmkctl.FibreChannelInterfaceVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.FibreChannelInterfaceVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.FibreChannelInterfaceVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelInterface > >::size_type" : return _vmkctl.FibreChannelInterfaceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.FibreChannelInterfaceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.FibreChannelInterfaceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelInterface > >::allocator_type" : return _vmkctl.FibreChannelInterfaceVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelInterface > >::iterator" : return _vmkctl.FibreChannelInterfaceVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelInterface > >::iterator" : return _vmkctl.FibreChannelInterfaceVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelInterface > >::reverse_iterator" : return _vmkctl.FibreChannelInterfaceVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelInterface > >::reverse_iterator" : return _vmkctl.FibreChannelInterfaceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.FibreChannelInterfaceVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelInterface > >::value_type const &" : return _vmkctl.FibreChannelInterfaceVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelInterface > >::value_type const &" : return _vmkctl.FibreChannelInterfaceVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.FibreChannelInterfaceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelInterface > >::size_type" : return _vmkctl.FibreChannelInterfaceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_FibreChannelInterfaceVector
    __del__ = lambda self : None;
FibreChannelInterfaceVector_swigregister = _vmkctl.FibreChannelInterfaceVector_swigregister
FibreChannelInterfaceVector_swigregister(FibreChannelInterfaceVector)

class FibreChannelOverEthernetInterfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FibreChannelOverEthernetInterfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FibreChannelOverEthernetInterfaceVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.FibreChannelOverEthernetInterfaceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.FibreChannelOverEthernetInterfaceVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelOverEthernetInterface > >::size_type" : return _vmkctl.FibreChannelOverEthernetInterfaceVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.FibreChannelOverEthernetInterfaceVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelOverEthernetInterface > >::size_type" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelOverEthernetInterface > >::allocator_type" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelOverEthernetInterface > >::iterator" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelOverEthernetInterface > >::iterator" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelOverEthernetInterface > >::reverse_iterator" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelOverEthernetInterface > >::reverse_iterator" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelOverEthernetInterface > >::value_type const &" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelOverEthernetInterface > >::value_type const &" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FibreChannelOverEthernetInterface > >::size_type" : return _vmkctl.FibreChannelOverEthernetInterfaceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_FibreChannelOverEthernetInterfaceVector
    __del__ = lambda self : None;
FibreChannelOverEthernetInterfaceVector_swigregister = _vmkctl.FibreChannelOverEthernetInterfaceVector_swigregister
FibreChannelOverEthernetInterfaceVector_swigregister(FibreChannelOverEthernetInterfaceVector)

class DiskLunVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiskLunVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiskLunVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.DiskLunVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.DiskLunVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.DiskLunVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLun > >::size_type" : return _vmkctl.DiskLunVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.DiskLunVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.DiskLunVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLun > >::size_type" : return _vmkctl.DiskLunVector_size(self)
    def clear(self) -> "void" : return _vmkctl.DiskLunVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.DiskLunVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLun > >::allocator_type" : return _vmkctl.DiskLunVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLun > >::iterator" : return _vmkctl.DiskLunVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLun > >::iterator" : return _vmkctl.DiskLunVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLun > >::reverse_iterator" : return _vmkctl.DiskLunVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLun > >::reverse_iterator" : return _vmkctl.DiskLunVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.DiskLunVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLun > >::value_type const &" : return _vmkctl.DiskLunVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLun > >::value_type const &" : return _vmkctl.DiskLunVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.DiskLunVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiskLun > >::size_type" : return _vmkctl.DiskLunVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_DiskLunVector
    __del__ = lambda self : None;
DiskLunVector_swigregister = _vmkctl.DiskLunVector_swigregister
DiskLunVector_swigregister(DiskLunVector)

class iScsiInterfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiInterfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiInterfaceVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.iScsiInterfaceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.iScsiInterfaceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.iScsiInterfaceVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::iScsiInterface > >::size_type" : return _vmkctl.iScsiInterfaceVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.iScsiInterfaceVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.iScsiInterfaceVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::iScsiInterface > >::size_type" : return _vmkctl.iScsiInterfaceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.iScsiInterfaceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.iScsiInterfaceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::iScsiInterface > >::allocator_type" : return _vmkctl.iScsiInterfaceVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::iScsiInterface > >::iterator" : return _vmkctl.iScsiInterfaceVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::iScsiInterface > >::iterator" : return _vmkctl.iScsiInterfaceVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::iScsiInterface > >::reverse_iterator" : return _vmkctl.iScsiInterfaceVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::iScsiInterface > >::reverse_iterator" : return _vmkctl.iScsiInterfaceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.iScsiInterfaceVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::iScsiInterface > >::value_type const &" : return _vmkctl.iScsiInterfaceVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::iScsiInterface > >::value_type const &" : return _vmkctl.iScsiInterfaceVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.iScsiInterfaceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::iScsiInterface > >::size_type" : return _vmkctl.iScsiInterfaceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_iScsiInterfaceVector
    __del__ = lambda self : None;
iScsiInterfaceVector_swigregister = _vmkctl.iScsiInterfaceVector_swigregister
iScsiInterfaceVector_swigregister(iScsiInterfaceVector)

class BlockScsiInterfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockScsiInterfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockScsiInterfaceVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.BlockScsiInterfaceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.BlockScsiInterfaceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.BlockScsiInterfaceVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::BlockScsiInterface > >::size_type" : return _vmkctl.BlockScsiInterfaceVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.BlockScsiInterfaceVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.BlockScsiInterfaceVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::BlockScsiInterface > >::size_type" : return _vmkctl.BlockScsiInterfaceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.BlockScsiInterfaceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.BlockScsiInterfaceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::BlockScsiInterface > >::allocator_type" : return _vmkctl.BlockScsiInterfaceVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::BlockScsiInterface > >::iterator" : return _vmkctl.BlockScsiInterfaceVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::BlockScsiInterface > >::iterator" : return _vmkctl.BlockScsiInterfaceVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::BlockScsiInterface > >::reverse_iterator" : return _vmkctl.BlockScsiInterfaceVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::BlockScsiInterface > >::reverse_iterator" : return _vmkctl.BlockScsiInterfaceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.BlockScsiInterfaceVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::BlockScsiInterface > >::value_type const &" : return _vmkctl.BlockScsiInterfaceVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::BlockScsiInterface > >::value_type const &" : return _vmkctl.BlockScsiInterfaceVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.BlockScsiInterfaceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::BlockScsiInterface > >::size_type" : return _vmkctl.BlockScsiInterfaceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_BlockScsiInterfaceVector
    __del__ = lambda self : None;
BlockScsiInterfaceVector_swigregister = _vmkctl.BlockScsiInterfaceVector_swigregister
BlockScsiInterfaceVector_swigregister(BlockScsiInterfaceVector)

class IdeScsiInterfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdeScsiInterfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdeScsiInterfaceVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.IdeScsiInterfaceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.IdeScsiInterfaceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.IdeScsiInterfaceVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::IdeScsiInterface > >::size_type" : return _vmkctl.IdeScsiInterfaceVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.IdeScsiInterfaceVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.IdeScsiInterfaceVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::IdeScsiInterface > >::size_type" : return _vmkctl.IdeScsiInterfaceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.IdeScsiInterfaceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.IdeScsiInterfaceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::IdeScsiInterface > >::allocator_type" : return _vmkctl.IdeScsiInterfaceVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::IdeScsiInterface > >::iterator" : return _vmkctl.IdeScsiInterfaceVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::IdeScsiInterface > >::iterator" : return _vmkctl.IdeScsiInterfaceVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::IdeScsiInterface > >::reverse_iterator" : return _vmkctl.IdeScsiInterfaceVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::IdeScsiInterface > >::reverse_iterator" : return _vmkctl.IdeScsiInterfaceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.IdeScsiInterfaceVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::IdeScsiInterface > >::value_type const &" : return _vmkctl.IdeScsiInterfaceVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::IdeScsiInterface > >::value_type const &" : return _vmkctl.IdeScsiInterfaceVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.IdeScsiInterfaceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::IdeScsiInterface > >::size_type" : return _vmkctl.IdeScsiInterfaceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_IdeScsiInterfaceVector
    __del__ = lambda self : None;
IdeScsiInterfaceVector_swigregister = _vmkctl.IdeScsiInterfaceVector_swigregister
IdeScsiInterfaceVector_swigregister(IdeScsiInterfaceVector)

class ParallelScsiInterfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParallelScsiInterfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParallelScsiInterfaceVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.ParallelScsiInterfaceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.ParallelScsiInterfaceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.ParallelScsiInterfaceVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ParallelScsiInterface > >::size_type" : return _vmkctl.ParallelScsiInterfaceVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.ParallelScsiInterfaceVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.ParallelScsiInterfaceVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ParallelScsiInterface > >::size_type" : return _vmkctl.ParallelScsiInterfaceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.ParallelScsiInterfaceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.ParallelScsiInterfaceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ParallelScsiInterface > >::allocator_type" : return _vmkctl.ParallelScsiInterfaceVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ParallelScsiInterface > >::iterator" : return _vmkctl.ParallelScsiInterfaceVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ParallelScsiInterface > >::iterator" : return _vmkctl.ParallelScsiInterfaceVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ParallelScsiInterface > >::reverse_iterator" : return _vmkctl.ParallelScsiInterfaceVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ParallelScsiInterface > >::reverse_iterator" : return _vmkctl.ParallelScsiInterfaceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.ParallelScsiInterfaceVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ParallelScsiInterface > >::value_type const &" : return _vmkctl.ParallelScsiInterfaceVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ParallelScsiInterface > >::value_type const &" : return _vmkctl.ParallelScsiInterfaceVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.ParallelScsiInterfaceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::ParallelScsiInterface > >::size_type" : return _vmkctl.ParallelScsiInterfaceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_ParallelScsiInterfaceVector
    __del__ = lambda self : None;
ParallelScsiInterfaceVector_swigregister = _vmkctl.ParallelScsiInterfaceVector_swigregister
ParallelScsiInterfaceVector_swigregister(ParallelScsiInterfaceVector)

class SerialAttachedScsiInterfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerialAttachedScsiInterfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SerialAttachedScsiInterfaceVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.SerialAttachedScsiInterfaceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.SerialAttachedScsiInterfaceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.SerialAttachedScsiInterfaceVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SerialAttachedScsiInterface > >::size_type" : return _vmkctl.SerialAttachedScsiInterfaceVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.SerialAttachedScsiInterfaceVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.SerialAttachedScsiInterfaceVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SerialAttachedScsiInterface > >::size_type" : return _vmkctl.SerialAttachedScsiInterfaceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.SerialAttachedScsiInterfaceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.SerialAttachedScsiInterfaceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SerialAttachedScsiInterface > >::allocator_type" : return _vmkctl.SerialAttachedScsiInterfaceVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SerialAttachedScsiInterface > >::iterator" : return _vmkctl.SerialAttachedScsiInterfaceVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SerialAttachedScsiInterface > >::iterator" : return _vmkctl.SerialAttachedScsiInterfaceVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SerialAttachedScsiInterface > >::reverse_iterator" : return _vmkctl.SerialAttachedScsiInterfaceVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SerialAttachedScsiInterface > >::reverse_iterator" : return _vmkctl.SerialAttachedScsiInterfaceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.SerialAttachedScsiInterfaceVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SerialAttachedScsiInterface > >::value_type const &" : return _vmkctl.SerialAttachedScsiInterfaceVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SerialAttachedScsiInterface > >::value_type const &" : return _vmkctl.SerialAttachedScsiInterfaceVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.SerialAttachedScsiInterfaceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SerialAttachedScsiInterface > >::size_type" : return _vmkctl.SerialAttachedScsiInterfaceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_SerialAttachedScsiInterfaceVector
    __del__ = lambda self : None;
SerialAttachedScsiInterfaceVector_swigregister = _vmkctl.SerialAttachedScsiInterfaceVector_swigregister
SerialAttachedScsiInterfaceVector_swigregister(SerialAttachedScsiInterfaceVector)

class UsbInterfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UsbInterfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UsbInterfaceVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.UsbInterfaceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.UsbInterfaceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.UsbInterfaceVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UsbInterface > >::size_type" : return _vmkctl.UsbInterfaceVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.UsbInterfaceVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.UsbInterfaceVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UsbInterface > >::size_type" : return _vmkctl.UsbInterfaceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.UsbInterfaceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.UsbInterfaceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UsbInterface > >::allocator_type" : return _vmkctl.UsbInterfaceVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UsbInterface > >::iterator" : return _vmkctl.UsbInterfaceVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UsbInterface > >::iterator" : return _vmkctl.UsbInterfaceVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UsbInterface > >::reverse_iterator" : return _vmkctl.UsbInterfaceVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UsbInterface > >::reverse_iterator" : return _vmkctl.UsbInterfaceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.UsbInterfaceVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UsbInterface > >::value_type const &" : return _vmkctl.UsbInterfaceVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UsbInterface > >::value_type const &" : return _vmkctl.UsbInterfaceVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.UsbInterfaceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UsbInterface > >::size_type" : return _vmkctl.UsbInterfaceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_UsbInterfaceVector
    __del__ = lambda self : None;
UsbInterfaceVector_swigregister = _vmkctl.UsbInterfaceVector_swigregister
UsbInterfaceVector_swigregister(UsbInterfaceVector)

class SataInterfaceVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SataInterfaceVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SataInterfaceVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.SataInterfaceVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.SataInterfaceVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.SataInterfaceVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SataInterface > >::size_type" : return _vmkctl.SataInterfaceVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.SataInterfaceVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.SataInterfaceVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SataInterface > >::size_type" : return _vmkctl.SataInterfaceVector_size(self)
    def clear(self) -> "void" : return _vmkctl.SataInterfaceVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.SataInterfaceVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SataInterface > >::allocator_type" : return _vmkctl.SataInterfaceVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SataInterface > >::iterator" : return _vmkctl.SataInterfaceVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SataInterface > >::iterator" : return _vmkctl.SataInterfaceVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SataInterface > >::reverse_iterator" : return _vmkctl.SataInterfaceVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SataInterface > >::reverse_iterator" : return _vmkctl.SataInterfaceVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.SataInterfaceVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SataInterface > >::value_type const &" : return _vmkctl.SataInterfaceVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SataInterface > >::value_type const &" : return _vmkctl.SataInterfaceVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.SataInterfaceVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::SataInterface > >::size_type" : return _vmkctl.SataInterfaceVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_SataInterfaceVector
    __del__ = lambda self : None;
SataInterfaceVector_swigregister = _vmkctl.SataInterfaceVector_swigregister
SataInterfaceVector_swigregister(SataInterfaceVector)

class DiagnosticFileVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiagnosticFileVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiagnosticFileVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.DiagnosticFileVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.DiagnosticFileVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.DiagnosticFileVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticFile > >::size_type" : return _vmkctl.DiagnosticFileVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.DiagnosticFileVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.DiagnosticFileVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticFile > >::size_type" : return _vmkctl.DiagnosticFileVector_size(self)
    def clear(self) -> "void" : return _vmkctl.DiagnosticFileVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.DiagnosticFileVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticFile > >::allocator_type" : return _vmkctl.DiagnosticFileVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticFile > >::iterator" : return _vmkctl.DiagnosticFileVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticFile > >::iterator" : return _vmkctl.DiagnosticFileVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticFile > >::reverse_iterator" : return _vmkctl.DiagnosticFileVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticFile > >::reverse_iterator" : return _vmkctl.DiagnosticFileVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.DiagnosticFileVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticFile > >::value_type const &" : return _vmkctl.DiagnosticFileVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticFile > >::value_type const &" : return _vmkctl.DiagnosticFileVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.DiagnosticFileVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticFile > >::size_type" : return _vmkctl.DiagnosticFileVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_DiagnosticFileVector
    __del__ = lambda self : None;
DiagnosticFileVector_swigregister = _vmkctl.DiagnosticFileVector_swigregister
DiagnosticFileVector_swigregister(DiagnosticFileVector)

class DiagnosticPartitionVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiagnosticPartitionVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiagnosticPartitionVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.DiagnosticPartitionVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.DiagnosticPartitionVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.DiagnosticPartitionVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticPartition > >::size_type" : return _vmkctl.DiagnosticPartitionVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.DiagnosticPartitionVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.DiagnosticPartitionVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticPartition > >::size_type" : return _vmkctl.DiagnosticPartitionVector_size(self)
    def clear(self) -> "void" : return _vmkctl.DiagnosticPartitionVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.DiagnosticPartitionVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticPartition > >::allocator_type" : return _vmkctl.DiagnosticPartitionVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticPartition > >::iterator" : return _vmkctl.DiagnosticPartitionVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticPartition > >::iterator" : return _vmkctl.DiagnosticPartitionVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticPartition > >::reverse_iterator" : return _vmkctl.DiagnosticPartitionVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticPartition > >::reverse_iterator" : return _vmkctl.DiagnosticPartitionVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.DiagnosticPartitionVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticPartition > >::value_type const &" : return _vmkctl.DiagnosticPartitionVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticPartition > >::value_type const &" : return _vmkctl.DiagnosticPartitionVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.DiagnosticPartitionVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticPartition > >::size_type" : return _vmkctl.DiagnosticPartitionVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_DiagnosticPartitionVector
    __del__ = lambda self : None;
DiagnosticPartitionVector_swigregister = _vmkctl.DiagnosticPartitionVector_swigregister
DiagnosticPartitionVector_swigregister(DiagnosticPartitionVector)

class DiagnosticVsanVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiagnosticVsanVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiagnosticVsanVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.DiagnosticVsanVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.DiagnosticVsanVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.DiagnosticVsanVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticVsan > >::size_type" : return _vmkctl.DiagnosticVsanVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.DiagnosticVsanVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.DiagnosticVsanVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticVsan > >::size_type" : return _vmkctl.DiagnosticVsanVector_size(self)
    def clear(self) -> "void" : return _vmkctl.DiagnosticVsanVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.DiagnosticVsanVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticVsan > >::allocator_type" : return _vmkctl.DiagnosticVsanVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticVsan > >::iterator" : return _vmkctl.DiagnosticVsanVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticVsan > >::iterator" : return _vmkctl.DiagnosticVsanVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticVsan > >::reverse_iterator" : return _vmkctl.DiagnosticVsanVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticVsan > >::reverse_iterator" : return _vmkctl.DiagnosticVsanVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.DiagnosticVsanVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticVsan > >::value_type const &" : return _vmkctl.DiagnosticVsanVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticVsan > >::value_type const &" : return _vmkctl.DiagnosticVsanVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.DiagnosticVsanVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::DiagnosticVsan > >::size_type" : return _vmkctl.DiagnosticVsanVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_DiagnosticVsanVector
    __del__ = lambda self : None;
DiagnosticVsanVector_swigregister = _vmkctl.DiagnosticVsanVector_swigregister
DiagnosticVsanVector_swigregister(DiagnosticVsanVector)

class FileSystemVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileSystemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileSystemVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.FileSystemVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.FileSystemVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.FileSystemVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FileSystem > >::size_type" : return _vmkctl.FileSystemVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.FileSystemVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.FileSystemVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FileSystem > >::size_type" : return _vmkctl.FileSystemVector_size(self)
    def clear(self) -> "void" : return _vmkctl.FileSystemVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.FileSystemVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FileSystem > >::allocator_type" : return _vmkctl.FileSystemVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FileSystem > >::iterator" : return _vmkctl.FileSystemVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FileSystem > >::iterator" : return _vmkctl.FileSystemVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FileSystem > >::reverse_iterator" : return _vmkctl.FileSystemVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FileSystem > >::reverse_iterator" : return _vmkctl.FileSystemVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.FileSystemVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FileSystem > >::value_type const &" : return _vmkctl.FileSystemVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FileSystem > >::value_type const &" : return _vmkctl.FileSystemVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.FileSystemVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::FileSystem > >::size_type" : return _vmkctl.FileSystemVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_FileSystemVector
    __del__ = lambda self : None;
FileSystemVector_swigregister = _vmkctl.FileSystemVector_swigregister
FileSystemVector_swigregister(FileSystemVector)

class PMemFileSystemVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemFileSystemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemFileSystemVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.PMemFileSystemVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.PMemFileSystemVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.PMemFileSystemVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::PMemFileSystem > >::size_type" : return _vmkctl.PMemFileSystemVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.PMemFileSystemVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.PMemFileSystemVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::PMemFileSystem > >::size_type" : return _vmkctl.PMemFileSystemVector_size(self)
    def clear(self) -> "void" : return _vmkctl.PMemFileSystemVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.PMemFileSystemVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::PMemFileSystem > >::allocator_type" : return _vmkctl.PMemFileSystemVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::PMemFileSystem > >::iterator" : return _vmkctl.PMemFileSystemVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::PMemFileSystem > >::iterator" : return _vmkctl.PMemFileSystemVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::PMemFileSystem > >::reverse_iterator" : return _vmkctl.PMemFileSystemVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::PMemFileSystem > >::reverse_iterator" : return _vmkctl.PMemFileSystemVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.PMemFileSystemVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::PMemFileSystem > >::value_type const &" : return _vmkctl.PMemFileSystemVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::PMemFileSystem > >::value_type const &" : return _vmkctl.PMemFileSystemVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.PMemFileSystemVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::PMemFileSystem > >::size_type" : return _vmkctl.PMemFileSystemVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_PMemFileSystemVector
    __del__ = lambda self : None;
PMemFileSystemVector_swigregister = _vmkctl.PMemFileSystemVector_swigregister
PMemFileSystemVector_swigregister(PMemFileSystemVector)

class UFSFileSystemVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UFSFileSystemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UFSFileSystemVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.UFSFileSystemVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.UFSFileSystemVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.UFSFileSystemVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UFSFileSystem > >::size_type" : return _vmkctl.UFSFileSystemVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.UFSFileSystemVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.UFSFileSystemVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UFSFileSystem > >::size_type" : return _vmkctl.UFSFileSystemVector_size(self)
    def clear(self) -> "void" : return _vmkctl.UFSFileSystemVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.UFSFileSystemVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UFSFileSystem > >::allocator_type" : return _vmkctl.UFSFileSystemVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UFSFileSystem > >::iterator" : return _vmkctl.UFSFileSystemVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UFSFileSystem > >::iterator" : return _vmkctl.UFSFileSystemVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UFSFileSystem > >::reverse_iterator" : return _vmkctl.UFSFileSystemVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UFSFileSystem > >::reverse_iterator" : return _vmkctl.UFSFileSystemVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.UFSFileSystemVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UFSFileSystem > >::value_type const &" : return _vmkctl.UFSFileSystemVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UFSFileSystem > >::value_type const &" : return _vmkctl.UFSFileSystemVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.UFSFileSystemVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UFSFileSystem > >::size_type" : return _vmkctl.UFSFileSystemVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_UFSFileSystemVector
    __del__ = lambda self : None;
UFSFileSystemVector_swigregister = _vmkctl.UFSFileSystemVector_swigregister
UFSFileSystemVector_swigregister(UFSFileSystemVector)

class UnresolvedVmfsVolumeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnresolvedVmfsVolumeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnresolvedVmfsVolumeVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.UnresolvedVmfsVolumeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.UnresolvedVmfsVolumeVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.UnresolvedVmfsVolumeVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsVolume > >::size_type" : return _vmkctl.UnresolvedVmfsVolumeVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolumeVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.UnresolvedVmfsVolumeVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsVolume > >::size_type" : return _vmkctl.UnresolvedVmfsVolumeVector_size(self)
    def clear(self) -> "void" : return _vmkctl.UnresolvedVmfsVolumeVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolumeVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsVolume > >::allocator_type" : return _vmkctl.UnresolvedVmfsVolumeVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsVolume > >::iterator" : return _vmkctl.UnresolvedVmfsVolumeVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsVolume > >::iterator" : return _vmkctl.UnresolvedVmfsVolumeVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsVolume > >::reverse_iterator" : return _vmkctl.UnresolvedVmfsVolumeVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsVolume > >::reverse_iterator" : return _vmkctl.UnresolvedVmfsVolumeVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.UnresolvedVmfsVolumeVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsVolume > >::value_type const &" : return _vmkctl.UnresolvedVmfsVolumeVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsVolume > >::value_type const &" : return _vmkctl.UnresolvedVmfsVolumeVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolumeVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::UnresolvedVmfsVolume > >::size_type" : return _vmkctl.UnresolvedVmfsVolumeVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_UnresolvedVmfsVolumeVector
    __del__ = lambda self : None;
UnresolvedVmfsVolumeVector_swigregister = _vmkctl.UnresolvedVmfsVolumeVector_swigregister
UnresolvedVmfsVolumeVector_swigregister(UnresolvedVmfsVolumeVector)

class NetworkFileSystemVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkFileSystemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkFileSystemVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.NetworkFileSystemVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.NetworkFileSystemVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.NetworkFileSystemVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::NetworkFileSystem > >::size_type" : return _vmkctl.NetworkFileSystemVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.NetworkFileSystemVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.NetworkFileSystemVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::NetworkFileSystem > >::size_type" : return _vmkctl.NetworkFileSystemVector_size(self)
    def clear(self) -> "void" : return _vmkctl.NetworkFileSystemVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.NetworkFileSystemVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::NetworkFileSystem > >::allocator_type" : return _vmkctl.NetworkFileSystemVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::NetworkFileSystem > >::iterator" : return _vmkctl.NetworkFileSystemVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::NetworkFileSystem > >::iterator" : return _vmkctl.NetworkFileSystemVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::NetworkFileSystem > >::reverse_iterator" : return _vmkctl.NetworkFileSystemVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::NetworkFileSystem > >::reverse_iterator" : return _vmkctl.NetworkFileSystemVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.NetworkFileSystemVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::NetworkFileSystem > >::value_type const &" : return _vmkctl.NetworkFileSystemVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::NetworkFileSystem > >::value_type const &" : return _vmkctl.NetworkFileSystemVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.NetworkFileSystemVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::NetworkFileSystem > >::size_type" : return _vmkctl.NetworkFileSystemVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_NetworkFileSystemVector
    __del__ = lambda self : None;
NetworkFileSystemVector_swigregister = _vmkctl.NetworkFileSystemVector_swigregister
NetworkFileSystemVector_swigregister(NetworkFileSystemVector)

class VmFileSystemVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmFileSystemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VmFileSystemVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.VmFileSystemVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.VmFileSystemVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.VmFileSystemVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VmFileSystem > >::size_type" : return _vmkctl.VmFileSystemVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.VmFileSystemVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.VmFileSystemVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VmFileSystem > >::size_type" : return _vmkctl.VmFileSystemVector_size(self)
    def clear(self) -> "void" : return _vmkctl.VmFileSystemVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.VmFileSystemVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VmFileSystem > >::allocator_type" : return _vmkctl.VmFileSystemVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VmFileSystem > >::iterator" : return _vmkctl.VmFileSystemVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VmFileSystem > >::iterator" : return _vmkctl.VmFileSystemVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VmFileSystem > >::reverse_iterator" : return _vmkctl.VmFileSystemVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VmFileSystem > >::reverse_iterator" : return _vmkctl.VmFileSystemVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.VmFileSystemVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VmFileSystem > >::value_type const &" : return _vmkctl.VmFileSystemVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VmFileSystem > >::value_type const &" : return _vmkctl.VmFileSystemVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.VmFileSystemVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VmFileSystem > >::size_type" : return _vmkctl.VmFileSystemVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_VmFileSystemVector
    __del__ = lambda self : None;
VmFileSystemVector_swigregister = _vmkctl.VmFileSystemVector_swigregister
VmFileSystemVector_swigregister(VmFileSystemVector)

class VFATFileSystemVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VFATFileSystemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VFATFileSystemVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.VFATFileSystemVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.VFATFileSystemVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.VFATFileSystemVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VFATFileSystem > >::size_type" : return _vmkctl.VFATFileSystemVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.VFATFileSystemVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.VFATFileSystemVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VFATFileSystem > >::size_type" : return _vmkctl.VFATFileSystemVector_size(self)
    def clear(self) -> "void" : return _vmkctl.VFATFileSystemVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.VFATFileSystemVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VFATFileSystem > >::allocator_type" : return _vmkctl.VFATFileSystemVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VFATFileSystem > >::iterator" : return _vmkctl.VFATFileSystemVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VFATFileSystem > >::iterator" : return _vmkctl.VFATFileSystemVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VFATFileSystem > >::reverse_iterator" : return _vmkctl.VFATFileSystemVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VFATFileSystem > >::reverse_iterator" : return _vmkctl.VFATFileSystemVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.VFATFileSystemVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VFATFileSystem > >::value_type const &" : return _vmkctl.VFATFileSystemVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VFATFileSystem > >::value_type const &" : return _vmkctl.VFATFileSystemVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.VFATFileSystemVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VFATFileSystem > >::size_type" : return _vmkctl.VFATFileSystemVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_VFATFileSystemVector
    __del__ = lambda self : None;
VFATFileSystemVector_swigregister = _vmkctl.VFATFileSystemVector_swigregister
VFATFileSystemVector_swigregister(VFATFileSystemVector)

class VsanFileSystemPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VsanFileSystemPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VsanFileSystemPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VsanFileSystemPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::VsanFileSystem >::pointer" : return _vmkctl.VsanFileSystemPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.VsanFileSystemPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.VsanFileSystemPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::VsanFileSystem >::pointer" : return _vmkctl.VsanFileSystemPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.VsanFileSystemPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_VsanFileSystemPtr
    __del__ = lambda self : None;
VsanFileSystemPtr_swigregister = _vmkctl.VsanFileSystemPtr_swigregister
VsanFileSystemPtr_swigregister(VsanFileSystemPtr)

class VsanFileSystemVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VsanFileSystemVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VsanFileSystemVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.VsanFileSystemVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.VsanFileSystemVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.VsanFileSystemVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VsanFileSystem > >::size_type" : return _vmkctl.VsanFileSystemVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.VsanFileSystemVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.VsanFileSystemVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VsanFileSystem > >::size_type" : return _vmkctl.VsanFileSystemVector_size(self)
    def clear(self) -> "void" : return _vmkctl.VsanFileSystemVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.VsanFileSystemVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VsanFileSystem > >::allocator_type" : return _vmkctl.VsanFileSystemVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VsanFileSystem > >::iterator" : return _vmkctl.VsanFileSystemVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VsanFileSystem > >::iterator" : return _vmkctl.VsanFileSystemVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VsanFileSystem > >::reverse_iterator" : return _vmkctl.VsanFileSystemVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VsanFileSystem > >::reverse_iterator" : return _vmkctl.VsanFileSystemVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.VsanFileSystemVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VsanFileSystem > >::value_type const &" : return _vmkctl.VsanFileSystemVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VsanFileSystem > >::value_type const &" : return _vmkctl.VsanFileSystemVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.VsanFileSystemVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::VsanFileSystem > >::size_type" : return _vmkctl.VsanFileSystemVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_VsanFileSystemVector
    __del__ = lambda self : None;
VsanFileSystemVector_swigregister = _vmkctl.VsanFileSystemVector_swigregister
VsanFileSystemVector_swigregister(VsanFileSystemVector)

class DiskLunPartitionVector_REMOVEME(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiskLunPartitionVector_REMOVEME, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiskLunPartitionVector_REMOVEME, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.DiskLunPartitionVector_REMOVEME_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.DiskLunPartitionVector_REMOVEME___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.DiskLunPartitionVector_REMOVEME___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Storage::DiskLunPartition * >::size_type" : return _vmkctl.DiskLunPartitionVector_REMOVEME___len__(self)
    def pop(self) -> "std::vector< HostCtl::Storage::DiskLunPartition * >::value_type" : return _vmkctl.DiskLunPartitionVector_REMOVEME_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Storage::DiskLunPartition *,std::allocator< HostCtl::Storage::DiskLunPartition * > > *" : return _vmkctl.DiskLunPartitionVector_REMOVEME___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector_REMOVEME___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector_REMOVEME___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector_REMOVEME___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Storage::DiskLunPartition * >::value_type" : return _vmkctl.DiskLunPartitionVector_REMOVEME___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector_REMOVEME___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector_REMOVEME_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.DiskLunPartitionVector_REMOVEME_empty(self)
    def size(self) -> "std::vector< HostCtl::Storage::DiskLunPartition * >::size_type" : return _vmkctl.DiskLunPartitionVector_REMOVEME_size(self)
    def clear(self) -> "void" : return _vmkctl.DiskLunPartitionVector_REMOVEME_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector_REMOVEME_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Storage::DiskLunPartition * >::allocator_type" : return _vmkctl.DiskLunPartitionVector_REMOVEME_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Storage::DiskLunPartition * >::iterator" : return _vmkctl.DiskLunPartitionVector_REMOVEME_begin(self)
    def end(self) -> "std::vector< HostCtl::Storage::DiskLunPartition * >::iterator" : return _vmkctl.DiskLunPartitionVector_REMOVEME_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Storage::DiskLunPartition * >::reverse_iterator" : return _vmkctl.DiskLunPartitionVector_REMOVEME_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Storage::DiskLunPartition * >::reverse_iterator" : return _vmkctl.DiskLunPartitionVector_REMOVEME_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.DiskLunPartitionVector_REMOVEME_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Storage::DiskLunPartition * >::iterator" : return _vmkctl.DiskLunPartitionVector_REMOVEME_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_DiskLunPartitionVector_REMOVEME(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector_REMOVEME_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Storage::DiskLunPartition * >::value_type" : return _vmkctl.DiskLunPartitionVector_REMOVEME_front(self)
    def back(self) -> "std::vector< HostCtl::Storage::DiskLunPartition * >::value_type" : return _vmkctl.DiskLunPartitionVector_REMOVEME_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector_REMOVEME_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector_REMOVEME_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector_REMOVEME_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.DiskLunPartitionVector_REMOVEME_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Storage::DiskLunPartition * >::size_type" : return _vmkctl.DiskLunPartitionVector_REMOVEME_capacity(self)
    __swig_destroy__ = _vmkctl.delete_DiskLunPartitionVector_REMOVEME
    __del__ = lambda self : None;
DiskLunPartitionVector_REMOVEME_swigregister = _vmkctl.DiskLunPartitionVector_REMOVEME_swigregister
DiskLunPartitionVector_REMOVEME_swigregister(DiskLunPartitionVector_REMOVEME)

class ScsiPathVector_REMOVEME(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScsiPathVector_REMOVEME, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScsiPathVector_REMOVEME, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.ScsiPathVector_REMOVEME_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.ScsiPathVector_REMOVEME___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.ScsiPathVector_REMOVEME___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Storage::ScsiPath * >::size_type" : return _vmkctl.ScsiPathVector_REMOVEME___len__(self)
    def pop(self) -> "std::vector< HostCtl::Storage::ScsiPath * >::value_type" : return _vmkctl.ScsiPathVector_REMOVEME_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Storage::ScsiPath *,std::allocator< HostCtl::Storage::ScsiPath * > > *" : return _vmkctl.ScsiPathVector_REMOVEME___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.ScsiPathVector_REMOVEME___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.ScsiPathVector_REMOVEME___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.ScsiPathVector_REMOVEME___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Storage::ScsiPath * >::value_type" : return _vmkctl.ScsiPathVector_REMOVEME___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.ScsiPathVector_REMOVEME___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.ScsiPathVector_REMOVEME_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.ScsiPathVector_REMOVEME_empty(self)
    def size(self) -> "std::vector< HostCtl::Storage::ScsiPath * >::size_type" : return _vmkctl.ScsiPathVector_REMOVEME_size(self)
    def clear(self) -> "void" : return _vmkctl.ScsiPathVector_REMOVEME_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.ScsiPathVector_REMOVEME_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Storage::ScsiPath * >::allocator_type" : return _vmkctl.ScsiPathVector_REMOVEME_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Storage::ScsiPath * >::iterator" : return _vmkctl.ScsiPathVector_REMOVEME_begin(self)
    def end(self) -> "std::vector< HostCtl::Storage::ScsiPath * >::iterator" : return _vmkctl.ScsiPathVector_REMOVEME_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Storage::ScsiPath * >::reverse_iterator" : return _vmkctl.ScsiPathVector_REMOVEME_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Storage::ScsiPath * >::reverse_iterator" : return _vmkctl.ScsiPathVector_REMOVEME_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.ScsiPathVector_REMOVEME_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Storage::ScsiPath * >::iterator" : return _vmkctl.ScsiPathVector_REMOVEME_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_ScsiPathVector_REMOVEME(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.ScsiPathVector_REMOVEME_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Storage::ScsiPath * >::value_type" : return _vmkctl.ScsiPathVector_REMOVEME_front(self)
    def back(self) -> "std::vector< HostCtl::Storage::ScsiPath * >::value_type" : return _vmkctl.ScsiPathVector_REMOVEME_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.ScsiPathVector_REMOVEME_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.ScsiPathVector_REMOVEME_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.ScsiPathVector_REMOVEME_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.ScsiPathVector_REMOVEME_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Storage::ScsiPath * >::size_type" : return _vmkctl.ScsiPathVector_REMOVEME_capacity(self)
    __swig_destroy__ = _vmkctl.delete_ScsiPathVector_REMOVEME
    __del__ = lambda self : None;
ScsiPathVector_REMOVEME_swigregister = _vmkctl.ScsiPathVector_REMOVEME_swigregister
ScsiPathVector_REMOVEME_swigregister(ScsiPathVector_REMOVEME)

class StaticTargetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StaticTargetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StaticTargetVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.StaticTargetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.StaticTargetVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.StaticTargetVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Storage::StaticTarget * >::size_type" : return _vmkctl.StaticTargetVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Storage::StaticTarget * >::value_type" : return _vmkctl.StaticTargetVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Storage::StaticTarget *,std::allocator< HostCtl::Storage::StaticTarget * > > *" : return _vmkctl.StaticTargetVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.StaticTargetVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.StaticTargetVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.StaticTargetVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Storage::StaticTarget * >::value_type" : return _vmkctl.StaticTargetVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.StaticTargetVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.StaticTargetVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.StaticTargetVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Storage::StaticTarget * >::size_type" : return _vmkctl.StaticTargetVector_size(self)
    def clear(self) -> "void" : return _vmkctl.StaticTargetVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.StaticTargetVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Storage::StaticTarget * >::allocator_type" : return _vmkctl.StaticTargetVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Storage::StaticTarget * >::iterator" : return _vmkctl.StaticTargetVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Storage::StaticTarget * >::iterator" : return _vmkctl.StaticTargetVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Storage::StaticTarget * >::reverse_iterator" : return _vmkctl.StaticTargetVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Storage::StaticTarget * >::reverse_iterator" : return _vmkctl.StaticTargetVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.StaticTargetVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Storage::StaticTarget * >::iterator" : return _vmkctl.StaticTargetVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_StaticTargetVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.StaticTargetVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Storage::StaticTarget * >::value_type" : return _vmkctl.StaticTargetVector_front(self)
    def back(self) -> "std::vector< HostCtl::Storage::StaticTarget * >::value_type" : return _vmkctl.StaticTargetVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.StaticTargetVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.StaticTargetVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.StaticTargetVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.StaticTargetVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Storage::StaticTarget * >::size_type" : return _vmkctl.StaticTargetVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_StaticTargetVector
    __del__ = lambda self : None;
StaticTargetVector_swigregister = _vmkctl.StaticTargetVector_swigregister
StaticTargetVector_swigregister(StaticTargetVector)

class TargetAddressVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetAddressVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TargetAddressVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.TargetAddressVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.TargetAddressVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.TargetAddressVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Storage::TargetAddress * >::size_type" : return _vmkctl.TargetAddressVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Storage::TargetAddress * >::value_type" : return _vmkctl.TargetAddressVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Storage::TargetAddress *,std::allocator< HostCtl::Storage::TargetAddress * > > *" : return _vmkctl.TargetAddressVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.TargetAddressVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.TargetAddressVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.TargetAddressVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Storage::TargetAddress * >::value_type" : return _vmkctl.TargetAddressVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.TargetAddressVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.TargetAddressVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.TargetAddressVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Storage::TargetAddress * >::size_type" : return _vmkctl.TargetAddressVector_size(self)
    def clear(self) -> "void" : return _vmkctl.TargetAddressVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.TargetAddressVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Storage::TargetAddress * >::allocator_type" : return _vmkctl.TargetAddressVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Storage::TargetAddress * >::iterator" : return _vmkctl.TargetAddressVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Storage::TargetAddress * >::iterator" : return _vmkctl.TargetAddressVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Storage::TargetAddress * >::reverse_iterator" : return _vmkctl.TargetAddressVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Storage::TargetAddress * >::reverse_iterator" : return _vmkctl.TargetAddressVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.TargetAddressVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Storage::TargetAddress * >::iterator" : return _vmkctl.TargetAddressVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_TargetAddressVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.TargetAddressVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Storage::TargetAddress * >::value_type" : return _vmkctl.TargetAddressVector_front(self)
    def back(self) -> "std::vector< HostCtl::Storage::TargetAddress * >::value_type" : return _vmkctl.TargetAddressVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.TargetAddressVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.TargetAddressVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.TargetAddressVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.TargetAddressVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Storage::TargetAddress * >::size_type" : return _vmkctl.TargetAddressVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_TargetAddressVector
    __del__ = lambda self : None;
TargetAddressVector_swigregister = _vmkctl.TargetAddressVector_swigregister
TargetAddressVector_swigregister(TargetAddressVector)

class LunHandleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LunHandleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LunHandleVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.LunHandleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.LunHandleVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.LunHandleVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Storage::LunHandle >::size_type" : return _vmkctl.LunHandleVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Storage::LunHandle >::value_type" : return _vmkctl.LunHandleVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Storage::LunHandle,std::allocator< HostCtl::Storage::LunHandle > > *" : return _vmkctl.LunHandleVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.LunHandleVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.LunHandleVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.LunHandleVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Storage::LunHandle >::value_type const &" : return _vmkctl.LunHandleVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.LunHandleVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.LunHandleVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.LunHandleVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Storage::LunHandle >::size_type" : return _vmkctl.LunHandleVector_size(self)
    def clear(self) -> "void" : return _vmkctl.LunHandleVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.LunHandleVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Storage::LunHandle >::allocator_type" : return _vmkctl.LunHandleVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Storage::LunHandle >::iterator" : return _vmkctl.LunHandleVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Storage::LunHandle >::iterator" : return _vmkctl.LunHandleVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Storage::LunHandle >::reverse_iterator" : return _vmkctl.LunHandleVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Storage::LunHandle >::reverse_iterator" : return _vmkctl.LunHandleVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.LunHandleVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Storage::LunHandle >::iterator" : return _vmkctl.LunHandleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_LunHandleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.LunHandleVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Storage::LunHandle >::value_type const &" : return _vmkctl.LunHandleVector_front(self)
    def back(self) -> "std::vector< HostCtl::Storage::LunHandle >::value_type const &" : return _vmkctl.LunHandleVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.LunHandleVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.LunHandleVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.LunHandleVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.LunHandleVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Storage::LunHandle >::size_type" : return _vmkctl.LunHandleVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_LunHandleVector
    __del__ = lambda self : None;
LunHandleVector_swigregister = _vmkctl.LunHandleVector_swigregister
LunHandleVector_swigregister(LunHandleVector)

class StorageArrayTypePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StorageArrayTypePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StorageArrayTypePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_StorageArrayTypePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::Nmp::StorageArrayType >::pointer" : return _vmkctl.StorageArrayTypePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.StorageArrayTypePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.StorageArrayTypePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::Nmp::StorageArrayType >::pointer" : return _vmkctl.StorageArrayTypePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.StorageArrayTypePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_StorageArrayTypePtr
    __del__ = lambda self : None;
StorageArrayTypePtr_swigregister = _vmkctl.StorageArrayTypePtr_swigregister
StorageArrayTypePtr_swigregister(StorageArrayTypePtr)

class PathSelectionPolicyPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathSelectionPolicyPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PathSelectionPolicyPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PathSelectionPolicyPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicy >::pointer" : return _vmkctl.PathSelectionPolicyPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PathSelectionPolicyPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PathSelectionPolicyPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicy >::pointer" : return _vmkctl.PathSelectionPolicyPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PathSelectionPolicyPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PathSelectionPolicyPtr
    __del__ = lambda self : None;
PathSelectionPolicyPtr_swigregister = _vmkctl.PathSelectionPolicyPtr_swigregister
PathSelectionPolicyPtr_swigregister(PathSelectionPolicyPtr)

class PathSelectionPolicyDeviceConfigPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathSelectionPolicyDeviceConfigPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PathSelectionPolicyDeviceConfigPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PathSelectionPolicyDeviceConfigPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicyDeviceConfig >::pointer" : return _vmkctl.PathSelectionPolicyDeviceConfigPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.PathSelectionPolicyDeviceConfigPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.PathSelectionPolicyDeviceConfigPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicyDeviceConfig >::pointer" : return _vmkctl.PathSelectionPolicyDeviceConfigPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.PathSelectionPolicyDeviceConfigPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_PathSelectionPolicyDeviceConfigPtr
    __del__ = lambda self : None;
PathSelectionPolicyDeviceConfigPtr_swigregister = _vmkctl.PathSelectionPolicyDeviceConfigPtr_swigregister
PathSelectionPolicyDeviceConfigPtr_swigregister(PathSelectionPolicyDeviceConfigPtr)

class StorageArrayTypeVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StorageArrayTypeVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StorageArrayTypeVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.StorageArrayTypeVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.StorageArrayTypeVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.StorageArrayTypeVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::StorageArrayType > >::size_type" : return _vmkctl.StorageArrayTypeVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.StorageArrayTypeVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.StorageArrayTypeVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::StorageArrayType > >::size_type" : return _vmkctl.StorageArrayTypeVector_size(self)
    def clear(self) -> "void" : return _vmkctl.StorageArrayTypeVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.StorageArrayTypeVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::StorageArrayType > >::allocator_type" : return _vmkctl.StorageArrayTypeVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::StorageArrayType > >::iterator" : return _vmkctl.StorageArrayTypeVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::StorageArrayType > >::iterator" : return _vmkctl.StorageArrayTypeVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::StorageArrayType > >::reverse_iterator" : return _vmkctl.StorageArrayTypeVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::StorageArrayType > >::reverse_iterator" : return _vmkctl.StorageArrayTypeVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.StorageArrayTypeVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::StorageArrayType > >::value_type const &" : return _vmkctl.StorageArrayTypeVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::StorageArrayType > >::value_type const &" : return _vmkctl.StorageArrayTypeVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.StorageArrayTypeVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::StorageArrayType > >::size_type" : return _vmkctl.StorageArrayTypeVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_StorageArrayTypeVector
    __del__ = lambda self : None;
StorageArrayTypeVector_swigregister = _vmkctl.StorageArrayTypeVector_swigregister
StorageArrayTypeVector_swigregister(StorageArrayTypeVector)

class PathSelectionPolicyVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathSelectionPolicyVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PathSelectionPolicyVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.PathSelectionPolicyVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.PathSelectionPolicyVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.PathSelectionPolicyVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicy > >::size_type" : return _vmkctl.PathSelectionPolicyVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.PathSelectionPolicyVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.PathSelectionPolicyVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicy > >::size_type" : return _vmkctl.PathSelectionPolicyVector_size(self)
    def clear(self) -> "void" : return _vmkctl.PathSelectionPolicyVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.PathSelectionPolicyVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicy > >::allocator_type" : return _vmkctl.PathSelectionPolicyVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicy > >::iterator" : return _vmkctl.PathSelectionPolicyVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicy > >::iterator" : return _vmkctl.PathSelectionPolicyVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicy > >::reverse_iterator" : return _vmkctl.PathSelectionPolicyVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicy > >::reverse_iterator" : return _vmkctl.PathSelectionPolicyVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.PathSelectionPolicyVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicy > >::value_type const &" : return _vmkctl.PathSelectionPolicyVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicy > >::value_type const &" : return _vmkctl.PathSelectionPolicyVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.PathSelectionPolicyVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::Storage::Nmp::PathSelectionPolicy > >::size_type" : return _vmkctl.PathSelectionPolicyVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_PathSelectionPolicyVector
    __del__ = lambda self : None;
PathSelectionPolicyVector_swigregister = _vmkctl.PathSelectionPolicyVector_swigregister
PathSelectionPolicyVector_swigregister(PathSelectionPolicyVector)

class SatpClaimRuleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatpClaimRuleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SatpClaimRuleVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.SatpClaimRuleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.SatpClaimRuleVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.SatpClaimRuleVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule >::size_type" : return _vmkctl.SatpClaimRuleVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule >::value_type" : return _vmkctl.SatpClaimRuleVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule,std::allocator< HostCtl::Storage::Nmp::SatpClaimRule > > *" : return _vmkctl.SatpClaimRuleVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.SatpClaimRuleVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.SatpClaimRuleVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.SatpClaimRuleVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule >::value_type const &" : return _vmkctl.SatpClaimRuleVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.SatpClaimRuleVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.SatpClaimRuleVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.SatpClaimRuleVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule >::size_type" : return _vmkctl.SatpClaimRuleVector_size(self)
    def clear(self) -> "void" : return _vmkctl.SatpClaimRuleVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.SatpClaimRuleVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule >::allocator_type" : return _vmkctl.SatpClaimRuleVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule >::iterator" : return _vmkctl.SatpClaimRuleVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule >::iterator" : return _vmkctl.SatpClaimRuleVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule >::reverse_iterator" : return _vmkctl.SatpClaimRuleVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule >::reverse_iterator" : return _vmkctl.SatpClaimRuleVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.SatpClaimRuleVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule >::iterator" : return _vmkctl.SatpClaimRuleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_SatpClaimRuleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.SatpClaimRuleVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule >::value_type const &" : return _vmkctl.SatpClaimRuleVector_front(self)
    def back(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule >::value_type const &" : return _vmkctl.SatpClaimRuleVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.SatpClaimRuleVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.SatpClaimRuleVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.SatpClaimRuleVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.SatpClaimRuleVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule >::size_type" : return _vmkctl.SatpClaimRuleVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_SatpClaimRuleVector
    __del__ = lambda self : None;
SatpClaimRuleVector_swigregister = _vmkctl.SatpClaimRuleVector_swigregister
SatpClaimRuleVector_swigregister(SatpClaimRuleVector)

class SatpClaimRulePtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatpClaimRulePtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SatpClaimRulePtrVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.SatpClaimRulePtrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.SatpClaimRulePtrVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.SatpClaimRulePtrVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule * >::size_type" : return _vmkctl.SatpClaimRulePtrVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule * >::value_type" : return _vmkctl.SatpClaimRulePtrVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule *,std::allocator< HostCtl::Storage::Nmp::SatpClaimRule * > > *" : return _vmkctl.SatpClaimRulePtrVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.SatpClaimRulePtrVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.SatpClaimRulePtrVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.SatpClaimRulePtrVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule * >::value_type" : return _vmkctl.SatpClaimRulePtrVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.SatpClaimRulePtrVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.SatpClaimRulePtrVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.SatpClaimRulePtrVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule * >::size_type" : return _vmkctl.SatpClaimRulePtrVector_size(self)
    def clear(self) -> "void" : return _vmkctl.SatpClaimRulePtrVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.SatpClaimRulePtrVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule * >::allocator_type" : return _vmkctl.SatpClaimRulePtrVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule * >::iterator" : return _vmkctl.SatpClaimRulePtrVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule * >::iterator" : return _vmkctl.SatpClaimRulePtrVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule * >::reverse_iterator" : return _vmkctl.SatpClaimRulePtrVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule * >::reverse_iterator" : return _vmkctl.SatpClaimRulePtrVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.SatpClaimRulePtrVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule * >::iterator" : return _vmkctl.SatpClaimRulePtrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_SatpClaimRulePtrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.SatpClaimRulePtrVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule * >::value_type" : return _vmkctl.SatpClaimRulePtrVector_front(self)
    def back(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule * >::value_type" : return _vmkctl.SatpClaimRulePtrVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.SatpClaimRulePtrVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.SatpClaimRulePtrVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.SatpClaimRulePtrVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.SatpClaimRulePtrVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule * >::size_type" : return _vmkctl.SatpClaimRulePtrVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_SatpClaimRulePtrVector
    __del__ = lambda self : None;
SatpClaimRulePtrVector_swigregister = _vmkctl.SatpClaimRulePtrVector_swigregister
SatpClaimRulePtrVector_swigregister(SatpClaimRulePtrVector)

class ModulePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModulePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModulePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_ModulePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::System::Module >::pointer" : return _vmkctl.ModulePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.ModulePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.ModulePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::System::Module >::pointer" : return _vmkctl.ModulePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.ModulePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_ModulePtr
    __del__ = lambda self : None;
ModulePtr_swigregister = _vmkctl.ModulePtr_swigregister
ModulePtr_swigregister(ModulePtr)

class FirewallRulesetPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirewallRulesetPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FirewallRulesetPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_FirewallRulesetPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::System::FirewallRuleset >::pointer" : return _vmkctl.FirewallRulesetPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.FirewallRulesetPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.FirewallRulesetPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::System::FirewallRuleset >::pointer" : return _vmkctl.FirewallRulesetPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.FirewallRulesetPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_FirewallRulesetPtr
    __del__ = lambda self : None;
FirewallRulesetPtr_swigregister = _vmkctl.FirewallRulesetPtr_swigregister
FirewallRulesetPtr_swigregister(FirewallRulesetPtr)

class FirewallIpListPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirewallIpListPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FirewallIpListPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_FirewallIpListPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::System::FirewallIpList >::pointer" : return _vmkctl.FirewallIpListPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.FirewallIpListPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.FirewallIpListPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::System::FirewallIpList >::pointer" : return _vmkctl.FirewallIpListPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.FirewallIpListPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_FirewallIpListPtr
    __del__ = lambda self : None;
FirewallIpListPtr_swigregister = _vmkctl.FirewallIpListPtr_swigregister
FirewallIpListPtr_swigregister(FirewallIpListPtr)

class FirewallRulePtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirewallRulePtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FirewallRulePtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_FirewallRulePtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::System::FirewallRule >::pointer" : return _vmkctl.FirewallRulePtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.FirewallRulePtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.FirewallRulePtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::System::FirewallRule >::pointer" : return _vmkctl.FirewallRulePtr_get(self)
    def __nonzero__(self):
        return _vmkctl.FirewallRulePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_FirewallRulePtr
    __del__ = lambda self : None;
FirewallRulePtr_swigregister = _vmkctl.FirewallRulePtr_swigregister
FirewallRulePtr_swigregister(FirewallRulePtr)

class SnmpAgentConfigPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SnmpAgentConfigPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SnmpAgentConfigPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_SnmpAgentConfigPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::System::SnmpAgentConfig >::pointer" : return _vmkctl.SnmpAgentConfigPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::System::SnmpAgentConfig >::pointer" : return _vmkctl.SnmpAgentConfigPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.SnmpAgentConfigPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_SnmpAgentConfigPtr
    __del__ = lambda self : None;
SnmpAgentConfigPtr_swigregister = _vmkctl.SnmpAgentConfigPtr_swigregister
SnmpAgentConfigPtr_swigregister(SnmpAgentConfigPtr)

class WbemAgentConfigPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WbemAgentConfigPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WbemAgentConfigPtr, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_WbemAgentConfigPtr(*args)
        try: self.this.append(this)
        except: self.this = this
    def release(self) -> "std::unique_ptr< HostCtl::System::WbemAgentConfig >::pointer" : return _vmkctl.WbemAgentConfigPtr_release(self)
    def reset(self, *args) -> "void" : return _vmkctl.WbemAgentConfigPtr_reset(self, *args)
    def swap(self, *args) -> "void" : return _vmkctl.WbemAgentConfigPtr_swap(self, *args)
    def get(self) -> "std::unique_ptr< HostCtl::System::WbemAgentConfig >::pointer" : return _vmkctl.WbemAgentConfigPtr_get(self)
    def __nonzero__(self):
        return _vmkctl.WbemAgentConfigPtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _vmkctl.delete_WbemAgentConfigPtr
    __del__ = lambda self : None;
WbemAgentConfigPtr_swigregister = _vmkctl.WbemAgentConfigPtr_swigregister
WbemAgentConfigPtr_swigregister(WbemAgentConfigPtr)

class FirewallRulesetVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirewallRulesetVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FirewallRulesetVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.FirewallRulesetVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.FirewallRulesetVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.FirewallRulesetVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRuleset > >::size_type" : return _vmkctl.FirewallRulesetVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.FirewallRulesetVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.FirewallRulesetVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRuleset > >::size_type" : return _vmkctl.FirewallRulesetVector_size(self)
    def clear(self) -> "void" : return _vmkctl.FirewallRulesetVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.FirewallRulesetVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRuleset > >::allocator_type" : return _vmkctl.FirewallRulesetVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRuleset > >::iterator" : return _vmkctl.FirewallRulesetVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRuleset > >::iterator" : return _vmkctl.FirewallRulesetVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRuleset > >::reverse_iterator" : return _vmkctl.FirewallRulesetVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRuleset > >::reverse_iterator" : return _vmkctl.FirewallRulesetVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.FirewallRulesetVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRuleset > >::value_type const &" : return _vmkctl.FirewallRulesetVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRuleset > >::value_type const &" : return _vmkctl.FirewallRulesetVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.FirewallRulesetVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRuleset > >::size_type" : return _vmkctl.FirewallRulesetVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_FirewallRulesetVector
    __del__ = lambda self : None;
FirewallRulesetVector_swigregister = _vmkctl.FirewallRulesetVector_swigregister
FirewallRulesetVector_swigregister(FirewallRulesetVector)

class FirewallRuleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirewallRuleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FirewallRuleVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.FirewallRuleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.FirewallRuleVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.FirewallRuleVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRule > >::size_type" : return _vmkctl.FirewallRuleVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.FirewallRuleVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.FirewallRuleVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRule > >::size_type" : return _vmkctl.FirewallRuleVector_size(self)
    def clear(self) -> "void" : return _vmkctl.FirewallRuleVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.FirewallRuleVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRule > >::allocator_type" : return _vmkctl.FirewallRuleVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRule > >::iterator" : return _vmkctl.FirewallRuleVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRule > >::iterator" : return _vmkctl.FirewallRuleVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRule > >::reverse_iterator" : return _vmkctl.FirewallRuleVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRule > >::reverse_iterator" : return _vmkctl.FirewallRuleVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.FirewallRuleVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRule > >::value_type const &" : return _vmkctl.FirewallRuleVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRule > >::value_type const &" : return _vmkctl.FirewallRuleVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.FirewallRuleVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::System::FirewallRule > >::size_type" : return _vmkctl.FirewallRuleVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_FirewallRuleVector
    __del__ = lambda self : None;
FirewallRuleVector_swigregister = _vmkctl.FirewallRuleVector_swigregister
FirewallRuleVector_swigregister(FirewallRuleVector)

class ModuleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleVector, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.ModuleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.ModuleVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.ModuleVector___bool__(self)
    def __len__(self) -> "std::vector< std::unique_ptr< HostCtl::System::Module > >::size_type" : return _vmkctl.ModuleVector___len__(self)
    def __delslice__(self, *args) -> "void" : return _vmkctl.ModuleVector___delslice__(self, *args)
    def empty(self) -> "bool" : return _vmkctl.ModuleVector_empty(self)
    def size(self) -> "std::vector< std::unique_ptr< HostCtl::System::Module > >::size_type" : return _vmkctl.ModuleVector_size(self)
    def clear(self) -> "void" : return _vmkctl.ModuleVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.ModuleVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< std::unique_ptr< HostCtl::System::Module > >::allocator_type" : return _vmkctl.ModuleVector_get_allocator(self)
    def begin(self) -> "std::vector< std::unique_ptr< HostCtl::System::Module > >::iterator" : return _vmkctl.ModuleVector_begin(self)
    def end(self) -> "std::vector< std::unique_ptr< HostCtl::System::Module > >::iterator" : return _vmkctl.ModuleVector_end(self)
    def rbegin(self) -> "std::vector< std::unique_ptr< HostCtl::System::Module > >::reverse_iterator" : return _vmkctl.ModuleVector_rbegin(self)
    def rend(self) -> "std::vector< std::unique_ptr< HostCtl::System::Module > >::reverse_iterator" : return _vmkctl.ModuleVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.ModuleVector_pop_back(self)
    def front(self) -> "std::vector< std::unique_ptr< HostCtl::System::Module > >::value_type const &" : return _vmkctl.ModuleVector_front(self)
    def back(self) -> "std::vector< std::unique_ptr< HostCtl::System::Module > >::value_type const &" : return _vmkctl.ModuleVector_back(self)
    def reserve(self, *args) -> "void" : return _vmkctl.ModuleVector_reserve(self, *args)
    def capacity(self) -> "std::vector< std::unique_ptr< HostCtl::System::Module > >::size_type" : return _vmkctl.ModuleVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_ModuleVector
    __del__ = lambda self : None;
ModuleVector_swigregister = _vmkctl.ModuleVector_swigregister
ModuleVector_swigregister(ModuleVector)

class HVReplayVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HVReplayVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HVReplayVector, name)
    __repr__ = _swig_repr
    def iterator(self) -> "swig::SwigPyIterator *" : return _vmkctl.HVReplayVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self) -> "bool" : return _vmkctl.HVReplayVector___nonzero__(self)
    def __bool__(self) -> "bool" : return _vmkctl.HVReplayVector___bool__(self)
    def __len__(self) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason >::size_type" : return _vmkctl.HVReplayVector___len__(self)
    def pop(self) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason >::value_type" : return _vmkctl.HVReplayVector_pop(self)
    def __getslice__(self, *args) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason,std::allocator< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason > > *" : return _vmkctl.HVReplayVector___getslice__(self, *args)
    def __setslice__(self, *args) -> "void" : return _vmkctl.HVReplayVector___setslice__(self, *args)
    def __delslice__(self, *args) -> "void" : return _vmkctl.HVReplayVector___delslice__(self, *args)
    def __delitem__(self, *args) -> "void" : return _vmkctl.HVReplayVector___delitem__(self, *args)
    def __getitem__(self, *args) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason >::value_type const &" : return _vmkctl.HVReplayVector___getitem__(self, *args)
    def __setitem__(self, *args) -> "void" : return _vmkctl.HVReplayVector___setitem__(self, *args)
    def append(self, *args) -> "void" : return _vmkctl.HVReplayVector_append(self, *args)
    def empty(self) -> "bool" : return _vmkctl.HVReplayVector_empty(self)
    def size(self) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason >::size_type" : return _vmkctl.HVReplayVector_size(self)
    def clear(self) -> "void" : return _vmkctl.HVReplayVector_clear(self)
    def swap(self, *args) -> "void" : return _vmkctl.HVReplayVector_swap(self, *args)
    def get_allocator(self) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason >::allocator_type" : return _vmkctl.HVReplayVector_get_allocator(self)
    def begin(self) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason >::iterator" : return _vmkctl.HVReplayVector_begin(self)
    def end(self) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason >::iterator" : return _vmkctl.HVReplayVector_end(self)
    def rbegin(self) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason >::reverse_iterator" : return _vmkctl.HVReplayVector_rbegin(self)
    def rend(self) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason >::reverse_iterator" : return _vmkctl.HVReplayVector_rend(self)
    def pop_back(self) -> "void" : return _vmkctl.HVReplayVector_pop_back(self)
    def erase(self, *args) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason >::iterator" : return _vmkctl.HVReplayVector_erase(self, *args)
    def __init__(self, *args): 
        this = _vmkctl.new_HVReplayVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args) -> "void" : return _vmkctl.HVReplayVector_push_back(self, *args)
    def front(self) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason >::value_type const &" : return _vmkctl.HVReplayVector_front(self)
    def back(self) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason >::value_type const &" : return _vmkctl.HVReplayVector_back(self)
    def assign(self, *args) -> "void" : return _vmkctl.HVReplayVector_assign(self, *args)
    def resize(self, *args) -> "void" : return _vmkctl.HVReplayVector_resize(self, *args)
    def insert(self, *args) -> "void" : return _vmkctl.HVReplayVector_insert(self, *args)
    def reserve(self, *args) -> "void" : return _vmkctl.HVReplayVector_reserve(self, *args)
    def capacity(self) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason >::size_type" : return _vmkctl.HVReplayVector_capacity(self)
    __swig_destroy__ = _vmkctl.delete_HVReplayVector
    __del__ = lambda self : None;
HVReplayVector_swigregister = _vmkctl.HVReplayVector_swigregister
HVReplayVector_swigregister(HVReplayVector)

FALSE = _vmkctl.FALSE
TRUE = _vmkctl.TRUE
vm_x86_64 = _vmkctl.vm_x86_64
vm_arm_64 = _vmkctl.vm_arm_64
FMTH = _vmkctl.FMTH
FMTSZ = _vmkctl.FMTSZ
FMTPD = _vmkctl.FMTPD
FMT64 = _vmkctl.FMT64
MIN_INT64 = _vmkctl.MIN_INT64
MAX_INT64 = _vmkctl.MAX_INT64
MIN_UINT64 = _vmkctl.MIN_UINT64
MAX_UINT64 = _vmkctl.MAX_UINT64
MAX_PPN_BITS = _vmkctl.MAX_PPN_BITS
MPN38_MASK = _vmkctl.MPN38_MASK
FMTLA = _vmkctl.FMTLA
FMTVA = _vmkctl.FMTVA
FMTVPN = _vmkctl.FMTVPN
FMTPID = _vmkctl.FMTPID
FMTUID = _vmkctl.FMTUID
FMTMODE = _vmkctl.FMTMODE
FMTTIME = _vmkctl.FMTTIME
class VMPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VMPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VMPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _vmkctl.VMPoint_x_set
    __swig_getmethods__["x"] = _vmkctl.VMPoint_x_get
    if _newclass:x = _swig_property(_vmkctl.VMPoint_x_get, _vmkctl.VMPoint_x_set)
    __swig_setmethods__["y"] = _vmkctl.VMPoint_y_set
    __swig_getmethods__["y"] = _vmkctl.VMPoint_y_get
    if _newclass:y = _swig_property(_vmkctl.VMPoint_y_get, _vmkctl.VMPoint_y_set)
    def __init__(self): 
        this = _vmkctl.new_VMPoint()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VMPoint
    __del__ = lambda self : None;
VMPoint_swigregister = _vmkctl.VMPoint_swigregister
VMPoint_swigregister(VMPoint)

class VMRect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VMRect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VMRect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["left"] = _vmkctl.VMRect_left_set
    __swig_getmethods__["left"] = _vmkctl.VMRect_left_get
    if _newclass:left = _swig_property(_vmkctl.VMRect_left_get, _vmkctl.VMRect_left_set)
    __swig_setmethods__["top"] = _vmkctl.VMRect_top_set
    __swig_getmethods__["top"] = _vmkctl.VMRect_top_get
    if _newclass:top = _swig_property(_vmkctl.VMRect_top_get, _vmkctl.VMRect_top_set)
    __swig_setmethods__["right"] = _vmkctl.VMRect_right_set
    __swig_getmethods__["right"] = _vmkctl.VMRect_right_get
    if _newclass:right = _swig_property(_vmkctl.VMRect_right_get, _vmkctl.VMRect_right_set)
    __swig_setmethods__["bottom"] = _vmkctl.VMRect_bottom_set
    __swig_getmethods__["bottom"] = _vmkctl.VMRect_bottom_get
    if _newclass:bottom = _swig_property(_vmkctl.VMRect_bottom_get, _vmkctl.VMRect_bottom_set)
    def __init__(self): 
        this = _vmkctl.new_VMRect()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VMRect
    __del__ = lambda self : None;
VMRect_swigregister = _vmkctl.VMRect_swigregister
VMRect_swigregister(VMRect)


def VmkCtl_PrintBackTrace(*args) -> "void" :
  return _vmkctl.VmkCtl_PrintBackTrace(*args)
VmkCtl_PrintBackTrace = _vmkctl.VmkCtl_PrintBackTrace
class HostCtlException(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostCtlException, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostCtlException, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_HostCtlException(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_HostCtlException
    __del__ = lambda self : None;
    def what(self) -> "char const *" : return _vmkctl.HostCtlException_what(self)
    def GetMessage(self) -> "std::string const &" : return _vmkctl.HostCtlException_GetMessage(self)
    def GetDetailedMessage(self) -> "std::string" : return _vmkctl.HostCtlException_GetDetailedMessage(self)
    def GetVobMessage(self) -> "HostCtl::Lib::VobMessage const &" : return _vmkctl.HostCtlException_GetVobMessage(self)
    def __str__(self) -> "std::string" : return _vmkctl.HostCtlException___str__(self)
HostCtlException_swigregister = _vmkctl.HostCtlException_swigregister
HostCtlException_swigregister(HostCtlException)

def VmkCtl_Daemon(*args) -> "int" :
  return _vmkctl.VmkCtl_Daemon(*args)
VmkCtl_Daemon = _vmkctl.VmkCtl_Daemon

def VmkCtl_Exec(*args) -> "int" :
  return _vmkctl.VmkCtl_Exec(*args)
VmkCtl_Exec = _vmkctl.VmkCtl_Exec
cvar = _vmkctl.cvar
emptyString = cvar.emptyString

class HostCtlObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostCtlObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostCtlObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_HostCtlObject
    __del__ = lambda self : None;
    def Refresh(self) -> "void" : return _vmkctl.HostCtlObject_Refresh(self)
    def SaveConfig(self) -> "void" : return _vmkctl.HostCtlObject_SaveConfig(self)
    def LoadConfig(self) -> "void" : return _vmkctl.HostCtlObject_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.HostCtlObject_Print(self, *args)
    def GetName(self) -> "std::string" : return _vmkctl.HostCtlObject_GetName(self)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.HostCtlObject_GetChildren(self)
HostCtlObject_swigregister = _vmkctl.HostCtlObject_swigregister
HostCtlObject_swigregister(HostCtlObject)

class VmkCtlObject(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmkCtlObject, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VmkCtlObject, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_VmkCtlObject
    __del__ = lambda self : None;
    __swig_getmethods__["Init"] = lambda x: _vmkctl.VmkCtlObject_Init
    if _newclass:Init = staticmethod(_vmkctl.VmkCtlObject_Init)
    def Refresh(self) -> "void" : return _vmkctl.VmkCtlObject_Refresh(self)
    def LoadConfig(self) -> "void" : return _vmkctl.VmkCtlObject_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.VmkCtlObject_Print(self, *args)
    def GetName(self) -> "std::string" : return _vmkctl.VmkCtlObject_GetName(self)
    def SaveConfig(self) -> "void" : return _vmkctl.VmkCtlObject_SaveConfig(self)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.VmkCtlObject_GetChildren(self)
    def MarkConfigDirty(self) -> "void" : return _vmkctl.VmkCtlObject_MarkConfigDirty(self)
    def IsConfigDirty(self) -> "bool" : return _vmkctl.VmkCtlObject_IsConfigDirty(self)
    __swig_getmethods__["GetConfigFileName"] = lambda x: _vmkctl.VmkCtlObject_GetConfigFileName
    if _newclass:GetConfigFileName = staticmethod(_vmkctl.VmkCtlObject_GetConfigFileName)
VmkCtlObject_swigregister = _vmkctl.VmkCtlObject_swigregister
VmkCtlObject_swigregister(VmkCtlObject)

def VmkCtlObject_Init() -> "void" :
  return _vmkctl.VmkCtlObject_Init()
VmkCtlObject_Init = _vmkctl.VmkCtlObject_Init

def VmkCtlObject_GetConfigFileName() -> "std::string const &" :
  return _vmkctl.VmkCtlObject_GetConfigFileName()
VmkCtlObject_GetConfigFileName = _vmkctl.VmkCtlObject_GetConfigFileName

class AdvancedOption(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedOption, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedOption, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ADV_OPTION_INT_TYPE = _vmkctl.AdvancedOption_ADV_OPTION_INT_TYPE
    ADV_OPTION_STRING_TYPE = _vmkctl.AdvancedOption_ADV_OPTION_STRING_TYPE
    def GetOptionName(self) -> "std::string" : return _vmkctl.AdvancedOption_GetOptionName(self)
    def GetOptionPath(self) -> "std::string" : return _vmkctl.AdvancedOption_GetOptionPath(self)
    def GetType(self) -> "HostCtl::Adv::AdvancedOption::AdvOptionType" : return _vmkctl.AdvancedOption_GetType(self)
    def GetDescription(self) -> "std::string" : return _vmkctl.AdvancedOption_GetDescription(self)
    def SetToDefault(self) -> "void" : return _vmkctl.AdvancedOption_SetToDefault(self)
    __swig_destroy__ = _vmkctl.delete_AdvancedOption
    __del__ = lambda self : None;
AdvancedOption_swigregister = _vmkctl.AdvancedOption_swigregister
AdvancedOption_swigregister(AdvancedOption)

class AdvancedOptionImpl(AdvancedOption,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [AdvancedOption,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedOptionImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [AdvancedOption,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedOptionImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetOptionName(self) -> "std::string" : return _vmkctl.AdvancedOptionImpl_GetOptionName(self)
    def GetOptionPath(self) -> "std::string" : return _vmkctl.AdvancedOptionImpl_GetOptionPath(self)
    def GetDescription(self) -> "std::string" : return _vmkctl.AdvancedOptionImpl_GetDescription(self)
    def SetToDefault(self) -> "void" : return _vmkctl.AdvancedOptionImpl_SetToDefault(self)
    def IsHidden(self) -> "bool" : return _vmkctl.AdvancedOptionImpl_IsHidden(self)
    def Refresh(self) -> "void" : return _vmkctl.AdvancedOptionImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.AdvancedOptionImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.AdvancedOptionImpl_Print(self, *args)
    __swig_getmethods__["FindOption"] = lambda x: _vmkctl.AdvancedOptionImpl_FindOption
    if _newclass:FindOption = staticmethod(_vmkctl.AdvancedOptionImpl_FindOption)
    __swig_destroy__ = _vmkctl.delete_AdvancedOptionImpl
    __del__ = lambda self : None;
AdvancedOptionImpl_swigregister = _vmkctl.AdvancedOptionImpl_swigregister
AdvancedOptionImpl_swigregister(AdvancedOptionImpl)

def AdvancedOptionImpl_FindOption(*args) -> "HostCtl::Adv::AdvancedOptionPtr" :
  return _vmkctl.AdvancedOptionImpl_FindOption(*args)
AdvancedOptionImpl_FindOption = _vmkctl.AdvancedOptionImpl_FindOption

class AdvancedOptionBranch(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedOptionBranch, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedOptionBranch, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetBranchName(self) -> "std::string" : return _vmkctl.AdvancedOptionBranch_GetBranchName(self)
    def GetOptions(self) -> "std::vector< HostCtl::Adv::AdvancedOptionPtr,std::allocator< HostCtl::Adv::AdvancedOptionPtr > >" : return _vmkctl.AdvancedOptionBranch_GetOptions(self)
    def GetOptionByName(self, *args) -> "HostCtl::Adv::AdvancedOptionPtr" : return _vmkctl.AdvancedOptionBranch_GetOptionByName(self, *args)
    def GetBranches(self) -> "std::vector< HostCtl::Adv::AdvancedOptionBranchPtr,std::allocator< HostCtl::Adv::AdvancedOptionBranchPtr > >" : return _vmkctl.AdvancedOptionBranch_GetBranches(self)
    def GetBranchByName(self, *args) -> "HostCtl::Adv::AdvancedOptionBranchPtr" : return _vmkctl.AdvancedOptionBranch_GetBranchByName(self, *args)
    __swig_destroy__ = _vmkctl.delete_AdvancedOptionBranch
    __del__ = lambda self : None;
AdvancedOptionBranch_swigregister = _vmkctl.AdvancedOptionBranch_swigregister
AdvancedOptionBranch_swigregister(AdvancedOptionBranch)

class AdvancedOptionBranchImpl(AdvancedOptionBranch,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [AdvancedOptionBranch,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedOptionBranchImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [AdvancedOptionBranch,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedOptionBranchImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_AdvancedOptionBranchImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetBranchName(self) -> "std::string" : return _vmkctl.AdvancedOptionBranchImpl_GetBranchName(self)
    def GetOptions(self, *args) -> "std::vector< HostCtl::Adv::AdvancedOptionPtr,std::allocator< HostCtl::Adv::AdvancedOptionPtr > >" : return _vmkctl.AdvancedOptionBranchImpl_GetOptions(self, *args)
    def GetOptionByName(self, *args) -> "HostCtl::Adv::AdvancedOptionPtr" : return _vmkctl.AdvancedOptionBranchImpl_GetOptionByName(self, *args)
    def GetBranches(self) -> "std::vector< HostCtl::Adv::AdvancedOptionBranchPtr,std::allocator< HostCtl::Adv::AdvancedOptionBranchPtr > >" : return _vmkctl.AdvancedOptionBranchImpl_GetBranches(self)
    def GetBranchByName(self, *args) -> "HostCtl::Adv::AdvancedOptionBranchPtr" : return _vmkctl.AdvancedOptionBranchImpl_GetBranchByName(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.AdvancedOptionBranchImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.AdvancedOptionBranchImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.AdvancedOptionBranchImpl_Print(self, *args)
    __swig_destroy__ = _vmkctl.delete_AdvancedOptionBranchImpl
    __del__ = lambda self : None;
AdvancedOptionBranchImpl_swigregister = _vmkctl.AdvancedOptionBranchImpl_swigregister
AdvancedOptionBranchImpl_swigregister(AdvancedOptionBranchImpl)

class AdvancedIntegerOption(AdvancedOption):
    __swig_setmethods__ = {}
    for _s in [AdvancedOption]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedIntegerOption, name, value)
    __swig_getmethods__ = {}
    for _s in [AdvancedOption]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedIntegerOption, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetType(self) -> "HostCtl::Adv::AdvancedOption::AdvOptionType" : return _vmkctl.AdvancedIntegerOption_GetType(self)
    def GetDefaultValue(self) -> "uint32" : return _vmkctl.AdvancedIntegerOption_GetDefaultValue(self)
    def GetMinimum(self) -> "uint32" : return _vmkctl.AdvancedIntegerOption_GetMinimum(self)
    def GetMaximum(self) -> "uint32" : return _vmkctl.AdvancedIntegerOption_GetMaximum(self)
    def GetValue(self) -> "uint32" : return _vmkctl.AdvancedIntegerOption_GetValue(self)
    def SetValue(self, *args) -> "void" : return _vmkctl.AdvancedIntegerOption_SetValue(self, *args)
    __swig_destroy__ = _vmkctl.delete_AdvancedIntegerOption
    __del__ = lambda self : None;
AdvancedIntegerOption_swigregister = _vmkctl.AdvancedIntegerOption_swigregister
AdvancedIntegerOption_swigregister(AdvancedIntegerOption)

class AdvancedIntegerOptionImpl(AdvancedIntegerOption,AdvancedOptionImpl):
    __swig_setmethods__ = {}
    for _s in [AdvancedIntegerOption,AdvancedOptionImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedIntegerOptionImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [AdvancedIntegerOption,AdvancedOptionImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedIntegerOptionImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_AdvancedIntegerOptionImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetDefaultValue(self) -> "uint32" : return _vmkctl.AdvancedIntegerOptionImpl_GetDefaultValue(self)
    def GetMinimum(self) -> "uint32" : return _vmkctl.AdvancedIntegerOptionImpl_GetMinimum(self)
    def GetMaximum(self) -> "uint32" : return _vmkctl.AdvancedIntegerOptionImpl_GetMaximum(self)
    def GetValue(self) -> "uint32" : return _vmkctl.AdvancedIntegerOptionImpl_GetValue(self)
    def SetValue(self, *args) -> "void" : return _vmkctl.AdvancedIntegerOptionImpl_SetValue(self, *args)
    def SetToDefault(self) -> "void" : return _vmkctl.AdvancedIntegerOptionImpl_SetToDefault(self)
    def Refresh(self) -> "void" : return _vmkctl.AdvancedIntegerOptionImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.AdvancedIntegerOptionImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.AdvancedIntegerOptionImpl_Print(self, *args)
    def IsHidden(self) -> "bool" : return _vmkctl.AdvancedIntegerOptionImpl_IsHidden(self)
    __swig_destroy__ = _vmkctl.delete_AdvancedIntegerOptionImpl
    __del__ = lambda self : None;
AdvancedIntegerOptionImpl_swigregister = _vmkctl.AdvancedIntegerOptionImpl_swigregister
AdvancedIntegerOptionImpl_swigregister(AdvancedIntegerOptionImpl)

class AdvancedStringOption(AdvancedOption):
    __swig_setmethods__ = {}
    for _s in [AdvancedOption]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedStringOption, name, value)
    __swig_getmethods__ = {}
    for _s in [AdvancedOption]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedStringOption, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetType(self) -> "HostCtl::Adv::AdvancedOption::AdvOptionType" : return _vmkctl.AdvancedStringOption_GetType(self)
    def GetDefaultValue(self) -> "std::string" : return _vmkctl.AdvancedStringOption_GetDefaultValue(self)
    def GetValidCharacters(self) -> "std::string" : return _vmkctl.AdvancedStringOption_GetValidCharacters(self)
    def GetValue(self) -> "std::string" : return _vmkctl.AdvancedStringOption_GetValue(self)
    def SetValue(self, *args) -> "void" : return _vmkctl.AdvancedStringOption_SetValue(self, *args)
    __swig_destroy__ = _vmkctl.delete_AdvancedStringOption
    __del__ = lambda self : None;
AdvancedStringOption_swigregister = _vmkctl.AdvancedStringOption_swigregister
AdvancedStringOption_swigregister(AdvancedStringOption)

class AdvancedStringOptionImpl(AdvancedStringOption,AdvancedOptionImpl):
    __swig_setmethods__ = {}
    for _s in [AdvancedStringOption,AdvancedOptionImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AdvancedStringOptionImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [AdvancedStringOption,AdvancedOptionImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AdvancedStringOptionImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_AdvancedStringOptionImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetDefaultValue(self) -> "std::string" : return _vmkctl.AdvancedStringOptionImpl_GetDefaultValue(self)
    def GetValidCharacters(self) -> "std::string" : return _vmkctl.AdvancedStringOptionImpl_GetValidCharacters(self)
    def GetValue(self) -> "std::string" : return _vmkctl.AdvancedStringOptionImpl_GetValue(self)
    def SetValue(self, *args) -> "void" : return _vmkctl.AdvancedStringOptionImpl_SetValue(self, *args)
    def SetToDefault(self) -> "void" : return _vmkctl.AdvancedStringOptionImpl_SetToDefault(self)
    def IsHidden(self) -> "bool" : return _vmkctl.AdvancedStringOptionImpl_IsHidden(self)
    def Refresh(self) -> "void" : return _vmkctl.AdvancedStringOptionImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.AdvancedStringOptionImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.AdvancedStringOptionImpl_Print(self, *args)
    __swig_destroy__ = _vmkctl.delete_AdvancedStringOptionImpl
    __del__ = lambda self : None;
AdvancedStringOptionImpl_swigregister = _vmkctl.AdvancedStringOptionImpl_swigregister
AdvancedStringOptionImpl_swigregister(AdvancedStringOptionImpl)

class PciDevice(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PciDevice, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PciDevice, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    PCI_OWNER_DEFAULT = _vmkctl.PciDevice_PCI_OWNER_DEFAULT
    PCI_OWNER_CONSOLE = _vmkctl.PciDevice_PCI_OWNER_CONSOLE
    PCI_OWNER_VMKERNEL = _vmkctl.PciDevice_PCI_OWNER_VMKERNEL
    PCI_OWNER_PASSTHRU = _vmkctl.PciDevice_PCI_OWNER_PASSTHRU
    PCI_DEVICE_CAP_RESERVED = _vmkctl.PciDevice_PCI_DEVICE_CAP_RESERVED
    PCI_DEVICE_CAP_PM = _vmkctl.PciDevice_PCI_DEVICE_CAP_PM
    PCI_DEVICE_CAP_AGP = _vmkctl.PciDevice_PCI_DEVICE_CAP_AGP
    PCI_DEVICE_CAP_VPD = _vmkctl.PciDevice_PCI_DEVICE_CAP_VPD
    PCI_DEVICE_CAP_SLOT_ID = _vmkctl.PciDevice_PCI_DEVICE_CAP_SLOT_ID
    PCI_DEVICE_CAP_MSI = _vmkctl.PciDevice_PCI_DEVICE_CAP_MSI
    PCI_DEVICE_CAP_CPCI_HOT_SWAP = _vmkctl.PciDevice_PCI_DEVICE_CAP_CPCI_HOT_SWAP
    PCI_DEVICE_CAP_PCIX = _vmkctl.PciDevice_PCI_DEVICE_CAP_PCIX
    PCI_DEVICE_CAP_AMD = _vmkctl.PciDevice_PCI_DEVICE_CAP_AMD
    PCI_DEVICE_CAP_VENDOR = _vmkctl.PciDevice_PCI_DEVICE_CAP_VENDOR
    PCI_DEVICE_CAP_DBG_PORT = _vmkctl.PciDevice_PCI_DEVICE_CAP_DBG_PORT
    PCI_DEVICE_CAP_CPCI_RSRC = _vmkctl.PciDevice_PCI_DEVICE_CAP_CPCI_RSRC
    PCI_DEVICE_CAP_SHPC = _vmkctl.PciDevice_PCI_DEVICE_CAP_SHPC
    PCI_DEVICE_CAP_SSVID = _vmkctl.PciDevice_PCI_DEVICE_CAP_SSVID
    PCI_DEVICE_CAP_AGP8X = _vmkctl.PciDevice_PCI_DEVICE_CAP_AGP8X
    PCI_DEVICE_CAP_SECURE_DEVICE = _vmkctl.PciDevice_PCI_DEVICE_CAP_SECURE_DEVICE
    PCI_DEVICE_CAP_PCI_EXPRESS = _vmkctl.PciDevice_PCI_DEVICE_CAP_PCI_EXPRESS
    PCI_DEVICE_CAP_MSIX = _vmkctl.PciDevice_PCI_DEVICE_CAP_MSIX
    PCI_DEVICE_CAP_INVALID = _vmkctl.PciDevice_PCI_DEVICE_CAP_INVALID
    PCI_DEVICE_EXT_CAP_RESERVED = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_RESERVED
    PCI_DEVICE_EXT_CAP_AER = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_AER
    PCI_DEVICE_EXT_CAP_VC = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_VC
    PCI_DEVICE_EXT_CAP_DSN = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_DSN
    PCI_DEVICE_EXT_CAP_PWR = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_PWR
    PCI_DEVICE_EXT_CAP_RC_LINK_DECL = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_RC_LINK_DECL
    PCI_DEVICE_EXT_CAP_RC_LINK_CTRL = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_RC_LINK_CTRL
    PCI_DEVICE_EXT_CAP_RC_EVT_COL = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_RC_EVT_COL
    PCI_DEVICE_EXT_CAP_MULTI_FN_VC = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_MULTI_FN_VC
    PCI_DEVICE_EXT_CAP_VC2 = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_VC2
    PCI_DEVICE_EXT_CAP_RCRB = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_RCRB
    PCI_DEVICE_EXT_CAP_VENDOR = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_VENDOR
    PCI_DEVICE_EXT_CAP_CORRELATION_ACCESS = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_CORRELATION_ACCESS
    PCI_DEVICE_EXT_CAP_ACS = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_ACS
    PCI_DEVICE_EXT_CAP_ARI = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_ARI
    PCI_DEVICE_EXT_CAP_ATS = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_ATS
    PCI_DEVICE_EXT_CAP_SRIOV = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_SRIOV
    PCI_DEVICE_EXT_CAP_MRIOV = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_MRIOV
    PCI_DEVICE_EXT_CAP_MULTICAST = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_MULTICAST
    PCI_DEVICE_EXT_CAP_ATSPRI = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_ATSPRI
    PCI_DEVICE_EXT_CAP_RESIZABLE_BAR = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_RESIZABLE_BAR
    PCI_DEVICE_EXT_CAP_DPA = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_DPA
    PCI_DEVICE_EXT_CAP_TPH = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_TPH
    PCI_DEVICE_EXT_CAP_LTR = _vmkctl.PciDevice_PCI_DEVICE_EXT_CAP_LTR
    PCIE_PORT_TYPE_ENDPOINT = _vmkctl.PciDevice_PCIE_PORT_TYPE_ENDPOINT
    PCIE_PORT_TYPE_LEGACY = _vmkctl.PciDevice_PCIE_PORT_TYPE_LEGACY
    PCIE_PORT_TYPE_ROOT = _vmkctl.PciDevice_PCIE_PORT_TYPE_ROOT
    PCIE_PORT_TYPE_UPSTREAM = _vmkctl.PciDevice_PCIE_PORT_TYPE_UPSTREAM
    PCIE_PORT_TYPE_DOWNSTREAM = _vmkctl.PciDevice_PCIE_PORT_TYPE_DOWNSTREAM
    PCIE_PORT_TYPE_EXP_TO_PCI_BRIDGE = _vmkctl.PciDevice_PCIE_PORT_TYPE_EXP_TO_PCI_BRIDGE
    PCIE_PORT_TYPE_PCI_TO_EXP_BRIDGE = _vmkctl.PciDevice_PCIE_PORT_TYPE_PCI_TO_EXP_BRIDGE
    PCIE_PORT_TYPE_RC_INT_ENDPOINT = _vmkctl.PciDevice_PCIE_PORT_TYPE_RC_INT_ENDPOINT
    PCIE_PORT_TYPE_RC_EVENT_COLLECTOR = _vmkctl.PciDevice_PCIE_PORT_TYPE_RC_EVENT_COLLECTOR
    PCI_DEVICE_TYPE_UNKNOWN = _vmkctl.PciDevice_PCI_DEVICE_TYPE_UNKNOWN
    PCI_DEVICE_TYPE_MASS_STORAGE_CONTROLLER = _vmkctl.PciDevice_PCI_DEVICE_TYPE_MASS_STORAGE_CONTROLLER
    PCI_DEVICE_TYPE_NETWORK_CONTROLLER = _vmkctl.PciDevice_PCI_DEVICE_TYPE_NETWORK_CONTROLLER
    PCI_DEVICE_TYPE_DISPLAY_CONTROLLER = _vmkctl.PciDevice_PCI_DEVICE_TYPE_DISPLAY_CONTROLLER
    PCI_DEVICE_TYPE_MULTIMEDIA_DEVICE = _vmkctl.PciDevice_PCI_DEVICE_TYPE_MULTIMEDIA_DEVICE
    PCI_DEVICE_TYPE_MEMORY_CONTROLLER = _vmkctl.PciDevice_PCI_DEVICE_TYPE_MEMORY_CONTROLLER
    PCI_DEVICE_TYPE_BRIDGE_DEVICE = _vmkctl.PciDevice_PCI_DEVICE_TYPE_BRIDGE_DEVICE
    PCI_DEVICE_TYPE_SIMPLE_COMMUNICATIONS_CONTROLLER = _vmkctl.PciDevice_PCI_DEVICE_TYPE_SIMPLE_COMMUNICATIONS_CONTROLLER
    PCI_DEVICE_TYPE_BASE_SYSTEM_PERIPHERAL = _vmkctl.PciDevice_PCI_DEVICE_TYPE_BASE_SYSTEM_PERIPHERAL
    PCI_DEVICE_TYPE_INPUT_DEVICE = _vmkctl.PciDevice_PCI_DEVICE_TYPE_INPUT_DEVICE
    PCI_DEVICE_TYPE_DOCKING_STATION = _vmkctl.PciDevice_PCI_DEVICE_TYPE_DOCKING_STATION
    PCI_DEVICE_TYPE_PROCESSOR = _vmkctl.PciDevice_PCI_DEVICE_TYPE_PROCESSOR
    PCI_DEVICE_TYPE_SERIAL_BUS_CONTROLLER = _vmkctl.PciDevice_PCI_DEVICE_TYPE_SERIAL_BUS_CONTROLLER
    PCI_DEVICE_TYPE_WIRELESS_CONTROLLER = _vmkctl.PciDevice_PCI_DEVICE_TYPE_WIRELESS_CONTROLLER
    PCI_DEVICE_TYPE_INTELLIGENT_IO_CONTROLLER = _vmkctl.PciDevice_PCI_DEVICE_TYPE_INTELLIGENT_IO_CONTROLLER
    PCI_DEVICE_TYPE_SATELLITE_COMMUNICATIONS_CONTROLLER = _vmkctl.PciDevice_PCI_DEVICE_TYPE_SATELLITE_COMMUNICATIONS_CONTROLLER
    PCI_DEVICE_TYPE_ENCRYPTION_DECRYPTION_CONTROLLER = _vmkctl.PciDevice_PCI_DEVICE_TYPE_ENCRYPTION_DECRYPTION_CONTROLLER
    PCI_DEVICE_TYPE_DSP_CONTROLLER = _vmkctl.PciDevice_PCI_DEVICE_TYPE_DSP_CONTROLLER
    PCI_DEVICE_MISCELLANEOUS = _vmkctl.PciDevice_PCI_DEVICE_MISCELLANEOUS
    SERIAL_BUS_CONTROLLER_TYPE_FIREWIRE = _vmkctl.PciDevice_SERIAL_BUS_CONTROLLER_TYPE_FIREWIRE
    SERIAL_BUS_CONTROLLER_TYPE_ACCESS = _vmkctl.PciDevice_SERIAL_BUS_CONTROLLER_TYPE_ACCESS
    SERIAL_BUS_CONTROLLER_TYPE_SSA = _vmkctl.PciDevice_SERIAL_BUS_CONTROLLER_TYPE_SSA
    SERIAL_BUS_CONTROLLER_TYPE_USB = _vmkctl.PciDevice_SERIAL_BUS_CONTROLLER_TYPE_USB
    SERIAL_BUS_CONTROLLER_TYPE_FIBRE_CHANNEL = _vmkctl.PciDevice_SERIAL_BUS_CONTROLLER_TYPE_FIBRE_CHANNEL
    SERIAL_BUS_CONTROLLER_TYPE_SMBUS = _vmkctl.PciDevice_SERIAL_BUS_CONTROLLER_TYPE_SMBUS
    SERIAL_BUS_CONTROLLER_TYPE_INFINIBAND = _vmkctl.PciDevice_SERIAL_BUS_CONTROLLER_TYPE_INFINIBAND
    SERIAL_BUS_CONTROLLER_TYPE_IPMI = _vmkctl.PciDevice_SERIAL_BUS_CONTROLLER_TYPE_IPMI
    SERIAL_BUS_CONTROLLER_TYPE_SERCOS = _vmkctl.PciDevice_SERIAL_BUS_CONTROLLER_TYPE_SERCOS
    SERIAL_BUS_CONTROLLER_TYPE_IEC61491 = _vmkctl.PciDevice_SERIAL_BUS_CONTROLLER_TYPE_IEC61491
    SERIAL_BUS_CONTROLLER_TYPE_CANBUS = _vmkctl.PciDevice_SERIAL_BUS_CONTROLLER_TYPE_CANBUS
    USB_CONTROLLER_INTERFACE_UHCI = _vmkctl.PciDevice_USB_CONTROLLER_INTERFACE_UHCI
    USB_CONTROLLER_INTERFACE_OHCI = _vmkctl.PciDevice_USB_CONTROLLER_INTERFACE_OHCI
    USB_CONTROLLER_INTERFACE_EHCI = _vmkctl.PciDevice_USB_CONTROLLER_INTERFACE_EHCI
    USB_CONTROLLER_INTERFACE_XHCI = _vmkctl.PciDevice_USB_CONTROLLER_INTERFACE_XHCI
    USB_CONTROLLER_INTERFACE_NONE = _vmkctl.PciDevice_USB_CONTROLLER_INTERFACE_NONE
    USB_CONTROLLER_INTERFACE_DEVICE = _vmkctl.PciDevice_USB_CONTROLLER_INTERFACE_DEVICE
    PCI_DEVICE_RESET_DEFAULT = _vmkctl.PciDevice_PCI_DEVICE_RESET_DEFAULT
    PCI_DEVICE_RESET_FLR = _vmkctl.PciDevice_PCI_DEVICE_RESET_FLR
    PCI_DEVICE_RESET_D3D0 = _vmkctl.PciDevice_PCI_DEVICE_RESET_D3D0
    PCI_DEVICE_RESET_LINK = _vmkctl.PciDevice_PCI_DEVICE_RESET_LINK
    PCI_DEVICE_RESET_BRIDGE = _vmkctl.PciDevice_PCI_DEVICE_RESET_BRIDGE
    PCI_DEVICE_RESET_NONE = _vmkctl.PciDevice_PCI_DEVICE_RESET_NONE
    def GetSeg(self) -> "uint16" : return _vmkctl.PciDevice_GetSeg(self)
    def GetBus(self) -> "uint8" : return _vmkctl.PciDevice_GetBus(self)
    def GetSlot(self) -> "uint8" : return _vmkctl.PciDevice_GetSlot(self)
    def GetFunction(self) -> "uint8" : return _vmkctl.PciDevice_GetFunction(self)
    def GetPhysicalSlot(self) -> "uint32" : return _vmkctl.PciDevice_GetPhysicalSlot(self)
    def GetVendorId(self) -> "uint16" : return _vmkctl.PciDevice_GetVendorId(self)
    def GetVendor(self) -> "std::string" : return _vmkctl.PciDevice_GetVendor(self)
    def GetDeviceId(self) -> "uint16" : return _vmkctl.PciDevice_GetDeviceId(self)
    def GetSubVendorId(self) -> "uint16" : return _vmkctl.PciDevice_GetSubVendorId(self)
    def GetSubDeviceId(self) -> "uint16" : return _vmkctl.PciDevice_GetSubDeviceId(self)
    def GetDevice(self) -> "std::string" : return _vmkctl.PciDevice_GetDevice(self)
    def GetType(self) -> "uint16" : return _vmkctl.PciDevice_GetType(self)
    def GetProgIF(self) -> "uint8" : return _vmkctl.PciDevice_GetProgIF(self)
    def GetRevisionId(self) -> "uint8" : return _vmkctl.PciDevice_GetRevisionId(self)
    def GetSpawnedBus(self) -> "uint8" : return _vmkctl.PciDevice_GetSpawnedBus(self)
    def GetCapabilities(self) -> "std::vector< HostCtl::Hardware::PciDevice::PciCapType,std::allocator< HostCtl::Hardware::PciDevice::PciCapType > >" : return _vmkctl.PciDevice_GetCapabilities(self)
    def HasCapability(self, *args) -> "bool" : return _vmkctl.PciDevice_HasCapability(self, *args)
    def GetPciExpressPortType(self) -> "HostCtl::Hardware::PciDevice::PciExpressPortType" : return _vmkctl.PciDevice_GetPciExpressPortType(self)
    def GetSBDFString(self) -> "std::string" : return _vmkctl.PciDevice_GetSBDFString(self)
    def GetVmKernelDeviceName(self) -> "std::string" : return _vmkctl.PciDevice_GetVmKernelDeviceName(self)
    def GetConfiguredVmKernelDeviceName(self) -> "std::string" : return _vmkctl.PciDevice_GetConfiguredVmKernelDeviceName(self)
    def SetVmKernelDeviceName(self, *args) -> "void" : return _vmkctl.PciDevice_SetVmKernelDeviceName(self, *args)
    def GetSlotDescription(self) -> "std::string" : return _vmkctl.PciDevice_GetSlotDescription(self)
    def GetRuntimeDeviceOwner(self) -> "HostCtl::Hardware::PciDevice::PciDeviceOwner" : return _vmkctl.PciDevice_GetRuntimeDeviceOwner(self)
    def HasConfiguredDeviceOwner(self) -> "bool" : return _vmkctl.PciDevice_HasConfiguredDeviceOwner(self)
    def GetDriverVMDeviceOwner(self) -> "std::string" : return _vmkctl.PciDevice_GetDriverVMDeviceOwner(self)
    def GetConfiguredDeviceOwner(self) -> "HostCtl::Hardware::PciDevice::PciDeviceOwner" : return _vmkctl.PciDevice_GetConfiguredDeviceOwner(self)
    def SetRuntimeDeviceOwner(self, *args) -> "void" : return _vmkctl.PciDevice_SetRuntimeDeviceOwner(self, *args)
    def SetDriverVMDeviceOwner(self, *args) -> "void" : return _vmkctl.PciDevice_SetDriverVMDeviceOwner(self, *args)
    def SetConfiguredDeviceOwner(self, *args) -> "void" : return _vmkctl.PciDevice_SetConfiguredDeviceOwner(self, *args)
    def GetParentDevice(self) -> "HostCtl::Hardware::PciDevicePtr" : return _vmkctl.PciDevice_GetParentDevice(self)
    def GetDependantDevice(self) -> "HostCtl::Hardware::PciDevicePtr" : return _vmkctl.PciDevice_GetDependantDevice(self)
    def GetPassthruChildren(self) -> "std::vector< HostCtl::Hardware::PciDevicePtr,std::allocator< HostCtl::Hardware::PciDevicePtr > >" : return _vmkctl.PciDevice_GetPassthruChildren(self)
    def IsPassthruCapable(self) -> "bool" : return _vmkctl.PciDevice_IsPassthruCapable(self)
    def IsSriovCapable(self) -> "bool" : return _vmkctl.PciDevice_IsSriovCapable(self)
    def GetMaxVFsSupported(self) -> "uint16" : return _vmkctl.PciDevice_GetMaxVFsSupported(self)
    def IsVirtualFunction(self) -> "bool" : return _vmkctl.PciDevice_IsVirtualFunction(self)
    def GetDeviceClass(self) -> "uint16" : return _vmkctl.PciDevice_GetDeviceClass(self)
    def GetDeviceClassName(self) -> "std::string" : return _vmkctl.PciDevice_GetDeviceClassName(self)
    def GetInterruptLine(self) -> "uint8" : return _vmkctl.PciDevice_GetInterruptLine(self)
    def GetIrq(self) -> "uint8" : return _vmkctl.PciDevice_GetIrq(self)
    def GetIterruptVector(self) -> "uint8" : return _vmkctl.PciDevice_GetIterruptVector(self)
    def GetPciPin(self) -> "uint8" : return _vmkctl.PciDevice_GetPciPin(self)
    def GetFlags(self) -> "uint16" : return _vmkctl.PciDevice_GetFlags(self)
    def GetModuleId(self) -> "uint32" : return _vmkctl.PciDevice_GetModuleId(self)
    def GetModuleName(self) -> "std::string" : return _vmkctl.PciDevice_GetModuleName(self)
    def GetChassis(self) -> "uint8" : return _vmkctl.PciDevice_GetChassis(self)
    def GetPciResetMethod(self) -> "HostCtl::Hardware::PciDevice::PciResetMethod" : return _vmkctl.PciDevice_GetPciResetMethod(self)
    def GetResetMethodString(self) -> "std::string" : return _vmkctl.PciDevice_GetResetMethodString(self)
    __swig_destroy__ = _vmkctl.delete_PciDevice
    __del__ = lambda self : None;
PciDevice_swigregister = _vmkctl.PciDevice_swigregister
PciDevice_swigregister(PciDevice)

class PciDeviceImpl(PciDevice,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [PciDevice,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PciDeviceImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [PciDevice,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PciDeviceImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PciDeviceImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PciDeviceImpl
    __del__ = lambda self : None;
    def GetSeg(self) -> "uint16" : return _vmkctl.PciDeviceImpl_GetSeg(self)
    def GetBus(self) -> "uint8" : return _vmkctl.PciDeviceImpl_GetBus(self)
    def GetSlot(self) -> "uint8" : return _vmkctl.PciDeviceImpl_GetSlot(self)
    def GetFunction(self) -> "uint8" : return _vmkctl.PciDeviceImpl_GetFunction(self)
    def GetVendorId(self) -> "uint16" : return _vmkctl.PciDeviceImpl_GetVendorId(self)
    def GetVendor(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetVendor(self)
    def GetDeviceId(self) -> "uint16" : return _vmkctl.PciDeviceImpl_GetDeviceId(self)
    def GetSubVendorId(self) -> "uint16" : return _vmkctl.PciDeviceImpl_GetSubVendorId(self)
    def GetSubDeviceId(self) -> "uint16" : return _vmkctl.PciDeviceImpl_GetSubDeviceId(self)
    def GetDevice(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetDevice(self)
    def GetType(self) -> "uint16" : return _vmkctl.PciDeviceImpl_GetType(self)
    def GetProgIF(self) -> "uint8" : return _vmkctl.PciDeviceImpl_GetProgIF(self)
    def GetRevisionId(self) -> "uint8" : return _vmkctl.PciDeviceImpl_GetRevisionId(self)
    def GetInterruptLine(self) -> "uint8" : return _vmkctl.PciDeviceImpl_GetInterruptLine(self)
    def GetIrq(self) -> "uint8" : return _vmkctl.PciDeviceImpl_GetIrq(self)
    def GetIterruptVector(self) -> "uint8" : return _vmkctl.PciDeviceImpl_GetIterruptVector(self)
    def GetPciPin(self) -> "uint8" : return _vmkctl.PciDeviceImpl_GetPciPin(self)
    def GetSpawnedBus(self) -> "uint8" : return _vmkctl.PciDeviceImpl_GetSpawnedBus(self)
    def GetDeviceClass(self) -> "uint16" : return _vmkctl.PciDeviceImpl_GetDeviceClass(self)
    def GetDeviceClassName(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetDeviceClassName(self)
    def GetModuleName(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetModuleName(self)
    def GetBARInfo(self) -> "std::vector< Hardware_PCIBarInfoStruct,std::allocator< Hardware_PCIBarInfoStruct > >" : return _vmkctl.PciDeviceImpl_GetBARInfo(self)
    def GetFlags(self) -> "uint16" : return _vmkctl.PciDeviceImpl_GetFlags(self)
    def GetModuleId(self) -> "uint32" : return _vmkctl.PciDeviceImpl_GetModuleId(self)
    def GetChassis(self) -> "uint8" : return _vmkctl.PciDeviceImpl_GetChassis(self)
    def GetPhysicalSlot(self) -> "uint32" : return _vmkctl.PciDeviceImpl_GetPhysicalSlot(self)
    def GetSlotDescription(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetSlotDescription(self)
    def GetCapabilities(self) -> "std::vector< HostCtl::Hardware::PciDevice::PciCapType,std::allocator< HostCtl::Hardware::PciDevice::PciCapType > >" : return _vmkctl.PciDeviceImpl_GetCapabilities(self)
    def HasCapability(self, *args) -> "bool" : return _vmkctl.PciDeviceImpl_HasCapability(self, *args)
    def IsPciExpress(self) -> "bool" : return _vmkctl.PciDeviceImpl_IsPciExpress(self)
    def GetPciExpressPortType(self) -> "HostCtl::Hardware::PciDevice::PciExpressPortType" : return _vmkctl.PciDeviceImpl_GetPciExpressPortType(self)
    def DeviceExists(self) -> "bool" : return _vmkctl.PciDeviceImpl_DeviceExists(self)
    def GetVmKernelDeviceName(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetVmKernelDeviceName(self)
    def GetConfiguredVmKernelDeviceName(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetConfiguredVmKernelDeviceName(self)
    def SetVmKernelDeviceName(self, *args) -> "void" : return _vmkctl.PciDeviceImpl_SetVmKernelDeviceName(self, *args)
    def GetDeviceDriver(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetDeviceDriver(self)
    def GetDeviceDriverType(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetDeviceDriverType(self)
    def Refresh(self) -> "void" : return _vmkctl.PciDeviceImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.PciDeviceImpl_Print(self, *args)
    def SetDeviceOptions(self, *args) -> "void" : return _vmkctl.PciDeviceImpl_SetDeviceOptions(self, *args)
    def GetDeviceOptions(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetDeviceOptions(self)
    def GetRuntimeDeviceOwner(self) -> "HostCtl::Hardware::PciDevice::PciDeviceOwner" : return _vmkctl.PciDeviceImpl_GetRuntimeDeviceOwner(self)
    def SetRuntimeDeviceOwner(self, *args) -> "void" : return _vmkctl.PciDeviceImpl_SetRuntimeDeviceOwner(self, *args)
    def HasConfiguredDeviceOwner(self) -> "bool" : return _vmkctl.PciDeviceImpl_HasConfiguredDeviceOwner(self)
    def GetDriverVMDeviceOwner(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetDriverVMDeviceOwner(self)
    def GetConfiguredDeviceOwner(self) -> "HostCtl::Hardware::PciDevice::PciDeviceOwner" : return _vmkctl.PciDeviceImpl_GetConfiguredDeviceOwner(self)
    def SetDriverVMDeviceOwner(self, *args) -> "void" : return _vmkctl.PciDeviceImpl_SetDriverVMDeviceOwner(self, *args)
    def SetConfiguredDeviceOwner(self, *args) -> "void" : return _vmkctl.PciDeviceImpl_SetConfiguredDeviceOwner(self, *args)
    def GetParentDevice(self) -> "HostCtl::Hardware::PciDevicePtr" : return _vmkctl.PciDeviceImpl_GetParentDevice(self)
    def GetDependantDevice(self) -> "HostCtl::Hardware::PciDevicePtr" : return _vmkctl.PciDeviceImpl_GetDependantDevice(self)
    def GetPassthruChildren(self) -> "std::vector< HostCtl::Hardware::PciDevicePtr,std::allocator< HostCtl::Hardware::PciDevicePtr > >" : return _vmkctl.PciDeviceImpl_GetPassthruChildren(self)
    def IsPassthruCapable(self) -> "bool" : return _vmkctl.PciDeviceImpl_IsPassthruCapable(self)
    def IsSriovCapable(self) -> "bool" : return _vmkctl.PciDeviceImpl_IsSriovCapable(self)
    def IsVirtualFunction(self) -> "bool" : return _vmkctl.PciDeviceImpl_IsVirtualFunction(self)
    def GetMaxVFsSupported(self) -> "uint16" : return _vmkctl.PciDeviceImpl_GetMaxVFsSupported(self)
    def LoadConfig(self) -> "void" : return _vmkctl.PciDeviceImpl_LoadConfig(self)
    def RestoreOwner(self) -> "void" : return _vmkctl.PciDeviceImpl_RestoreOwner(self)
    def MoveSubtreeIntoPassthru(self) -> "void" : return _vmkctl.PciDeviceImpl_MoveSubtreeIntoPassthru(self)
    def RestorePassthruAttributes(self) -> "void" : return _vmkctl.PciDeviceImpl_RestorePassthruAttributes(self)
    def PostLoadUpdateConfig(self) -> "void" : return _vmkctl.PciDeviceImpl_PostLoadUpdateConfig(self)
    def GetSBDFString(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetSBDFString(self)
    __swig_getmethods__["ParseDriverMap"] = lambda x: _vmkctl.PciDeviceImpl_ParseDriverMap
    if _newclass:ParseDriverMap = staticmethod(_vmkctl.PciDeviceImpl_ParseDriverMap)
    __swig_getmethods__["ParsePciString"] = lambda x: _vmkctl.PciDeviceImpl_ParsePciString
    if _newclass:ParsePciString = staticmethod(_vmkctl.PciDeviceImpl_ParsePciString)
    def GetConfiguredResetMethod(self) -> "Hardware_PCIResetMethod" : return _vmkctl.PciDeviceImpl_GetConfiguredResetMethod(self)
    def GetConfiguredFptShareable(self) -> "bool" : return _vmkctl.PciDeviceImpl_GetConfiguredFptShareable(self)
    def GetResetMethod(self) -> "Hardware_PCIResetMethod" : return _vmkctl.PciDeviceImpl_GetResetMethod(self)
    def GetFPTShareable(self) -> "bool" : return _vmkctl.PciDeviceImpl_GetFPTShareable(self)
    def GetResetMethodString(self) -> "std::string" : return _vmkctl.PciDeviceImpl_GetResetMethodString(self)
    def GetPciResetMethod(self) -> "HostCtl::Hardware::PciDevice::PciResetMethod" : return _vmkctl.PciDeviceImpl_GetPciResetMethod(self)
PciDeviceImpl_swigregister = _vmkctl.PciDeviceImpl_swigregister
PciDeviceImpl_swigregister(PciDeviceImpl)

def PciDeviceImpl_ParseDriverMap() -> "void" :
  return _vmkctl.PciDeviceImpl_ParseDriverMap()
PciDeviceImpl_ParseDriverMap = _vmkctl.PciDeviceImpl_ParseDriverMap

def PciDeviceImpl_ParsePciString(*args) -> "bool" :
  return _vmkctl.PciDeviceImpl_ParsePciString(*args)
PciDeviceImpl_ParsePciString = _vmkctl.PciDeviceImpl_ParsePciString

class PciInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PciInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PciInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetAllPciDevices(self) -> "std::vector< HostCtl::Hardware::PciDevicePtr,std::allocator< HostCtl::Hardware::PciDevicePtr > >" : return _vmkctl.PciInfo_GetAllPciDevices(self)
    def GetVmKernelPciDevices(self) -> "std::vector< HostCtl::Hardware::PciDevicePtr,std::allocator< HostCtl::Hardware::PciDevicePtr > >" : return _vmkctl.PciInfo_GetVmKernelPciDevices(self)
    __swig_destroy__ = _vmkctl.delete_PciInfo
    __del__ = lambda self : None;
PciInfo_swigregister = _vmkctl.PciInfo_swigregister
PciInfo_swigregister(PciInfo)

class PciInfoImpl(PciInfo,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [PciInfo,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PciInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [PciInfo,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PciInfoImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PciInfoImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetAllPciDevices(self) -> "std::vector< HostCtl::Hardware::PciDevicePtr,std::allocator< HostCtl::Hardware::PciDevicePtr > >" : return _vmkctl.PciInfoImpl_GetAllPciDevices(self)
    def GetVmKernelPciDevices(self) -> "std::vector< HostCtl::Hardware::PciDevicePtr,std::allocator< HostCtl::Hardware::PciDevicePtr > >" : return _vmkctl.PciInfoImpl_GetVmKernelPciDevices(self)
    def Refresh(self) -> "void" : return _vmkctl.PciInfoImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.PciInfoImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.PciInfoImpl_Print(self, *args)
    def LoadConfig(self) -> "void" : return _vmkctl.PciInfoImpl_LoadConfig(self)
    def LoadNetworkingDrivers(self) -> "void" : return _vmkctl.PciInfoImpl_LoadNetworkingDrivers(self)
    def LoadStorageDrivers(self) -> "void" : return _vmkctl.PciInfoImpl_LoadStorageDrivers(self)
    def LoadUSBDrivers(self) -> "void" : return _vmkctl.PciInfoImpl_LoadUSBDrivers(self)
    def GetSegBusSlotFunc(self, *args) -> "void" : return _vmkctl.PciInfoImpl_GetSegBusSlotFunc(self, *args)
    __swig_destroy__ = _vmkctl.delete_PciInfoImpl
    __del__ = lambda self : None;
PciInfoImpl_swigregister = _vmkctl.PciInfoImpl_swigregister
PciInfoImpl_swigregister(PciInfoImpl)

class CpuCache(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuCache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuCache, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _vmkctl.CpuCache_size_set
    __swig_getmethods__["size"] = _vmkctl.CpuCache_size_get
    if _newclass:size = _swig_property(_vmkctl.CpuCache_size_get, _vmkctl.CpuCache_size_set)
    __swig_setmethods__["assoc"] = _vmkctl.CpuCache_assoc_set
    __swig_getmethods__["assoc"] = _vmkctl.CpuCache_assoc_get
    if _newclass:assoc = _swig_property(_vmkctl.CpuCache_assoc_get, _vmkctl.CpuCache_assoc_set)
    __swig_setmethods__["lineSize"] = _vmkctl.CpuCache_lineSize_set
    __swig_getmethods__["lineSize"] = _vmkctl.CpuCache_lineSize_get
    if _newclass:lineSize = _swig_property(_vmkctl.CpuCache_lineSize_get, _vmkctl.CpuCache_lineSize_set)
    __swig_setmethods__["cpuCount"] = _vmkctl.CpuCache_cpuCount_set
    __swig_getmethods__["cpuCount"] = _vmkctl.CpuCache_cpuCount_get
    if _newclass:cpuCount = _swig_property(_vmkctl.CpuCache_cpuCount_get, _vmkctl.CpuCache_cpuCount_set)
    def __init__(self): 
        this = _vmkctl.new_CpuCache()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_CpuCache
    __del__ = lambda self : None;
CpuCache_swigregister = _vmkctl.CpuCache_swigregister
CpuCache_swigregister(CpuCache)

class Cpu(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Cpu, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Cpu, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_Cpu
    __del__ = lambda self : None;
    def GetId(self) -> "uint32" : return _vmkctl.Cpu_GetId(self)
    def GetFamily(self) -> "uint8" : return _vmkctl.Cpu_GetFamily(self)
    def GetModel(self) -> "uint8" : return _vmkctl.Cpu_GetModel(self)
    def GetType(self) -> "uint8" : return _vmkctl.Cpu_GetType(self)
    def GetStepping(self) -> "uint8" : return _vmkctl.Cpu_GetStepping(self)
    def GetCpuSpeed(self) -> "uint64" : return _vmkctl.Cpu_GetCpuSpeed(self)
    def GetBusSpeed(self) -> "uint64" : return _vmkctl.Cpu_GetBusSpeed(self)
    def GetVendorName(self) -> "std::string" : return _vmkctl.Cpu_GetVendorName(self)
    def GetCpuId(self) -> "CpuId" : return _vmkctl.Cpu_GetCpuId(self)
    def GetCpuPackageId(self) -> "uint32" : return _vmkctl.Cpu_GetCpuPackageId(self)
    def GetL2CacheData(self, *args) -> "void" : return _vmkctl.Cpu_GetL2CacheData(self, *args)
    def GetL3CacheData(self, *args) -> "void" : return _vmkctl.Cpu_GetL3CacheData(self, *args)
    def GetApicId(self) -> "uint32" : return _vmkctl.Cpu_GetApicId(self)
    def GetNode(self) -> "uint32" : return _vmkctl.Cpu_GetNode(self)
Cpu_swigregister = _vmkctl.Cpu_swigregister
Cpu_swigregister(Cpu)

class CpuImpl(Cpu,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [Cpu,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [Cpu,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpuImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_CpuImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_CpuImpl
    __del__ = lambda self : None;
    def GetId(self) -> "uint32" : return _vmkctl.CpuImpl_GetId(self)
    def GetCpuPackageId(self) -> "uint32" : return _vmkctl.CpuImpl_GetCpuPackageId(self)
    def GetFamily(self) -> "uint8" : return _vmkctl.CpuImpl_GetFamily(self)
    def GetModel(self) -> "uint8" : return _vmkctl.CpuImpl_GetModel(self)
    def GetType(self) -> "uint8" : return _vmkctl.CpuImpl_GetType(self)
    def GetStepping(self) -> "uint8" : return _vmkctl.CpuImpl_GetStepping(self)
    def GetCpuSpeed(self) -> "uint64" : return _vmkctl.CpuImpl_GetCpuSpeed(self)
    def GetBusSpeed(self) -> "uint64" : return _vmkctl.CpuImpl_GetBusSpeed(self)
    def GetVendorName(self) -> "std::string" : return _vmkctl.CpuImpl_GetVendorName(self)
    def GetCpuId(self) -> "HostCtl::Hardware::CpuId" : return _vmkctl.CpuImpl_GetCpuId(self)
    def GetApicId(self) -> "uint32" : return _vmkctl.CpuImpl_GetApicId(self)
    def GetNode(self) -> "uint32" : return _vmkctl.CpuImpl_GetNode(self)
    def GetL2CacheData(self, *args) -> "void" : return _vmkctl.CpuImpl_GetL2CacheData(self, *args)
    def GetL3CacheData(self, *args) -> "void" : return _vmkctl.CpuImpl_GetL3CacheData(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.CpuImpl_Refresh(self)
    def Print(self, *args) -> "void" : return _vmkctl.CpuImpl_Print(self, *args)
    def GetName(self) -> "std::string" : return _vmkctl.CpuImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.CpuImpl_LoadConfig(self)
CpuImpl_swigregister = _vmkctl.CpuImpl_swigregister
CpuImpl_swigregister(CpuImpl)

class CpuPackage(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuPackage, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpuPackage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_CpuPackage
    __del__ = lambda self : None;
    def GetPackageId(self) -> "uint32" : return _vmkctl.CpuPackage_GetPackageId(self)
    def GetNumCores(self) -> "uint32" : return _vmkctl.CpuPackage_GetNumCores(self)
    def GetCores(self) -> "std::vector< HostCtl::Hardware::CpuPtr,std::allocator< HostCtl::Hardware::CpuPtr > >" : return _vmkctl.CpuPackage_GetCores(self)
CpuPackage_swigregister = _vmkctl.CpuPackage_swigregister
CpuPackage_swigregister(CpuPackage)

class CpuInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpuInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    HV_NOTPRESENT = _vmkctl.CpuInfo_HV_NOTPRESENT
    HV_NOTSUPPORTED = _vmkctl.CpuInfo_HV_NOTSUPPORTED
    HV_DISABLED = _vmkctl.CpuInfo_HV_DISABLED
    HV_ENABLED = _vmkctl.CpuInfo_HV_ENABLED
    HV_REPLAY_SUPPORTED = _vmkctl.CpuInfo_HV_REPLAY_SUPPORTED
    HV_REPLAY_INCOMPATIBLE_CPU = _vmkctl.CpuInfo_HV_REPLAY_INCOMPATIBLE_CPU
    HV_REPLAY_HV_DISABLED = _vmkctl.CpuInfo_HV_REPLAY_HV_DISABLED
    HV_REPLAY_CPUID_MAXVAL = _vmkctl.CpuInfo_HV_REPLAY_CPUID_MAXVAL
    HV_REPLAY_OLD_BIOS = _vmkctl.CpuInfo_HV_REPLAY_OLD_BIOS
    HV_REPLAY_INTERNAL_ERROR = _vmkctl.CpuInfo_HV_REPLAY_INTERNAL_ERROR
    def GetNumCpuPackages(self) -> "uint32" : return _vmkctl.CpuInfo_GetNumCpuPackages(self)
    def GetNumCpuCores(self) -> "uint32" : return _vmkctl.CpuInfo_GetNumCpuCores(self)
    def GetNumLicensableCpuCores(self) -> "uint32" : return _vmkctl.CpuInfo_GetNumLicensableCpuCores(self)
    def GetNumCpuThreads(self) -> "uint32" : return _vmkctl.CpuInfo_GetNumCpuThreads(self)
    def GetHyperthreadingActive(self) -> "bool" : return _vmkctl.CpuInfo_GetHyperthreadingActive(self)
    def GetHyperthreadingAvailable(self) -> "bool" : return _vmkctl.CpuInfo_GetHyperthreadingAvailable(self)
    def GetHyperthreadingEnabled(self) -> "bool" : return _vmkctl.CpuInfo_GetHyperthreadingEnabled(self)
    def SetHyperthreadingEnabled(self, *args) -> "void" : return _vmkctl.CpuInfo_SetHyperthreadingEnabled(self, *args)
    def GetCpus(self) -> "std::vector< HostCtl::Hardware::CpuPtr,std::allocator< HostCtl::Hardware::CpuPtr > >" : return _vmkctl.CpuInfo_GetCpus(self)
    def GetCpuPackages(self) -> "std::vector< HostCtl::Hardware::CpuPackagePtr,std::allocator< HostCtl::Hardware::CpuPackagePtr > >" : return _vmkctl.CpuInfo_GetCpuPackages(self)
    def GetHVSupport(self) -> "HostCtl::Hardware::CpuInfo::HVState" : return _vmkctl.CpuInfo_GetHVSupport(self)
    def GetHVReplayCapable(self) -> "bool" : return _vmkctl.CpuInfo_GetHVReplayCapable(self)
    def GetHVReplayDisabledReason(self) -> "HostCtl::Hardware::CpuInfo::HVReplayDisabledReason" : return _vmkctl.CpuInfo_GetHVReplayDisabledReason(self)
    def GetHVReplayDisabledReasons(self) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason,std::allocator< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason > >" : return _vmkctl.CpuInfo_GetHVReplayDisabledReasons(self)
    def GetHVReplayDisabledReasonString(self, *args) -> "std::string" : return _vmkctl.CpuInfo_GetHVReplayDisabledReasonString(self, *args)
    def GetHwMmuSupported(self) -> "bool" : return _vmkctl.CpuInfo_GetHwMmuSupported(self)
    def GetSLC64Capable(self) -> "bool" : return _vmkctl.CpuInfo_GetSLC64Capable(self)
    def GetNVOA(self) -> "bool" : return _vmkctl.CpuInfo_GetNVOA(self)
    def GetHostFeatureCapability(self, arg0 : 'VMFeatureMasks' = None) -> "std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >" : return _vmkctl.CpuInfo_GetHostFeatureCapability(self, arg0)
    def GetHostParameters(self, *args) -> "void" : return _vmkctl.CpuInfo_GetHostParameters(self, *args)
    __swig_destroy__ = _vmkctl.delete_CpuInfo
    __del__ = lambda self : None;
CpuInfo_swigregister = _vmkctl.CpuInfo_swigregister
CpuInfo_swigregister(CpuInfo)

class CpuInfoImpl(CpuInfo,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [CpuInfo,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [CpuInfo,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpuInfoImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_CpuInfoImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_CpuInfoImpl
    __del__ = lambda self : None;
    def GetNumCpuPackages(self) -> "uint32" : return _vmkctl.CpuInfoImpl_GetNumCpuPackages(self)
    def GetNumCpuCores(self) -> "uint32" : return _vmkctl.CpuInfoImpl_GetNumCpuCores(self)
    def GetNumLicensableCpuCores(self) -> "uint32" : return _vmkctl.CpuInfoImpl_GetNumLicensableCpuCores(self)
    def GetNumCpuThreads(self) -> "uint32" : return _vmkctl.CpuInfoImpl_GetNumCpuThreads(self)
    def GetHyperthreadingActive(self) -> "bool" : return _vmkctl.CpuInfoImpl_GetHyperthreadingActive(self)
    def GetHyperthreadingAvailable(self) -> "bool" : return _vmkctl.CpuInfoImpl_GetHyperthreadingAvailable(self)
    def GetHyperthreadingEnabled(self) -> "bool" : return _vmkctl.CpuInfoImpl_GetHyperthreadingEnabled(self)
    def GetHVSupport(self) -> "HostCtl::Hardware::CpuInfo::HVState" : return _vmkctl.CpuInfoImpl_GetHVSupport(self)
    def GetHVReplayCapable(self) -> "bool" : return _vmkctl.CpuInfoImpl_GetHVReplayCapable(self)
    def GetSLC64Capable(self) -> "bool" : return _vmkctl.CpuInfoImpl_GetSLC64Capable(self)
    def GetHVReplayDisabledReason(self) -> "HostCtl::Hardware::CpuInfo::HVReplayDisabledReason" : return _vmkctl.CpuInfoImpl_GetHVReplayDisabledReason(self)
    def GetHVReplayDisabledReasons(self) -> "std::vector< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason,std::allocator< HostCtl::Hardware::CpuInfo::HVReplayDisabledReason > >" : return _vmkctl.CpuInfoImpl_GetHVReplayDisabledReasons(self)
    def GetHVReplayDisabledReasonString(self, *args) -> "std::string" : return _vmkctl.CpuInfoImpl_GetHVReplayDisabledReasonString(self, *args)
    def GetHwMmuSupported(self) -> "bool" : return _vmkctl.CpuInfoImpl_GetHwMmuSupported(self)
    def GetNVOA(self) -> "bool" : return _vmkctl.CpuInfoImpl_GetNVOA(self)
    def GetModelName(self) -> "std::string" : return _vmkctl.CpuInfoImpl_GetModelName(self)
    def GetCpuById(self, *args) -> "HostCtl::Hardware::CpuPtr" : return _vmkctl.CpuInfoImpl_GetCpuById(self, *args)
    def SetHyperthreadingEnabled(self, *args) -> "void" : return _vmkctl.CpuInfoImpl_SetHyperthreadingEnabled(self, *args)
    def GetCpus(self) -> "std::vector< HostCtl::Hardware::CpuPtr,std::allocator< HostCtl::Hardware::CpuPtr > >" : return _vmkctl.CpuInfoImpl_GetCpus(self)
    def GetHostFeatureCapability(self, arg0 : 'VMFeatureMasks' = None) -> "std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >" : return _vmkctl.CpuInfoImpl_GetHostFeatureCapability(self, arg0)
    def GetCpuPackages(self) -> "std::vector< HostCtl::Hardware::CpuPackagePtr,std::allocator< HostCtl::Hardware::CpuPackagePtr > >" : return _vmkctl.CpuInfoImpl_GetCpuPackages(self)
    def Refresh(self) -> "void" : return _vmkctl.CpuInfoImpl_Refresh(self)
    def Print(self, *args) -> "void" : return _vmkctl.CpuInfoImpl_Print(self, *args)
    def GetName(self) -> "std::string" : return _vmkctl.CpuInfoImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.CpuInfoImpl_LoadConfig(self)
    def GetHostParameters(self, *args) -> "void" : return _vmkctl.CpuInfoImpl_GetHostParameters(self, *args)
CpuInfoImpl_swigregister = _vmkctl.CpuInfoImpl_swigregister
CpuInfoImpl_swigregister(CpuInfoImpl)

class Heap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Heap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Heap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _vmkctl.Heap_name_set
    __swig_getmethods__["name"] = _vmkctl.Heap_name_get
    if _newclass:name = _swig_property(_vmkctl.Heap_name_get, _vmkctl.Heap_name_set)
    __swig_setmethods__["growable"] = _vmkctl.Heap_growable_set
    __swig_getmethods__["growable"] = _vmkctl.Heap_growable_get
    if _newclass:growable = _swig_property(_vmkctl.Heap_growable_get, _vmkctl.Heap_growable_set)
    __swig_setmethods__["currentSize"] = _vmkctl.Heap_currentSize_set
    __swig_getmethods__["currentSize"] = _vmkctl.Heap_currentSize_get
    if _newclass:currentSize = _swig_property(_vmkctl.Heap_currentSize_get, _vmkctl.Heap_currentSize_set)
    __swig_setmethods__["currentAllocation"] = _vmkctl.Heap_currentAllocation_set
    __swig_getmethods__["currentAllocation"] = _vmkctl.Heap_currentAllocation_get
    if _newclass:currentAllocation = _swig_property(_vmkctl.Heap_currentAllocation_get, _vmkctl.Heap_currentAllocation_set)
    __swig_setmethods__["currentAvailable"] = _vmkctl.Heap_currentAvailable_set
    __swig_getmethods__["currentAvailable"] = _vmkctl.Heap_currentAvailable_get
    if _newclass:currentAvailable = _swig_property(_vmkctl.Heap_currentAvailable_get, _vmkctl.Heap_currentAvailable_set)
    __swig_setmethods__["currentReleasable"] = _vmkctl.Heap_currentReleasable_set
    __swig_getmethods__["currentReleasable"] = _vmkctl.Heap_currentReleasable_get
    if _newclass:currentReleasable = _swig_property(_vmkctl.Heap_currentReleasable_get, _vmkctl.Heap_currentReleasable_set)
    __swig_setmethods__["percentFreeOfCurrent"] = _vmkctl.Heap_percentFreeOfCurrent_set
    __swig_getmethods__["percentFreeOfCurrent"] = _vmkctl.Heap_percentFreeOfCurrent_get
    if _newclass:percentFreeOfCurrent = _swig_property(_vmkctl.Heap_percentFreeOfCurrent_get, _vmkctl.Heap_percentFreeOfCurrent_set)
    __swig_setmethods__["percentFreeOfMax"] = _vmkctl.Heap_percentFreeOfMax_set
    __swig_getmethods__["percentFreeOfMax"] = _vmkctl.Heap_percentFreeOfMax_get
    if _newclass:percentFreeOfMax = _swig_property(_vmkctl.Heap_percentFreeOfMax_get, _vmkctl.Heap_percentFreeOfMax_set)
    __swig_setmethods__["precentReleasable"] = _vmkctl.Heap_precentReleasable_set
    __swig_getmethods__["precentReleasable"] = _vmkctl.Heap_precentReleasable_get
    if _newclass:precentReleasable = _swig_property(_vmkctl.Heap_precentReleasable_get, _vmkctl.Heap_precentReleasable_set)
    __swig_setmethods__["maxSize"] = _vmkctl.Heap_maxSize_set
    __swig_getmethods__["maxSize"] = _vmkctl.Heap_maxSize_get
    if _newclass:maxSize = _swig_property(_vmkctl.Heap_maxSize_get, _vmkctl.Heap_maxSize_set)
    __swig_setmethods__["maxAvailable"] = _vmkctl.Heap_maxAvailable_set
    __swig_getmethods__["maxAvailable"] = _vmkctl.Heap_maxAvailable_get
    if _newclass:maxAvailable = _swig_property(_vmkctl.Heap_maxAvailable_get, _vmkctl.Heap_maxAvailable_set)
    def __init__(self): 
        this = _vmkctl.new_Heap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_Heap
    __del__ = lambda self : None;
Heap_swigregister = _vmkctl.Heap_swigregister
Heap_swigregister(Heap)

class MemoryInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetPhysicalMemory(self) -> "uint64" : return _vmkctl.MemoryInfo_GetPhysicalMemory(self)
    def GetReliableMemory(self) -> "uint64" : return _vmkctl.MemoryInfo_GetReliableMemory(self)
    def GetVmKernelMemory(self) -> "uint64" : return _vmkctl.MemoryInfo_GetVmKernelMemory(self)
    def GetVmKernelFreeMemory(self) -> "uint64" : return _vmkctl.MemoryInfo_GetVmKernelFreeMemory(self)
    def GetServiceConsoleMemory(self) -> "uint64" : return _vmkctl.MemoryInfo_GetServiceConsoleMemory(self)
    def GetServiceConsoleReservedMem(self) -> "uint32" : return _vmkctl.MemoryInfo_GetServiceConsoleReservedMem(self)
    def SetServiceConsoleReservedMem(self, *args) -> "void" : return _vmkctl.MemoryInfo_SetServiceConsoleReservedMem(self, *args)
    def GetHeapStats(self) -> "std::vector< HostCtl::Hardware::HeapPtr,std::allocator< HostCtl::Hardware::HeapPtr > >" : return _vmkctl.MemoryInfo_GetHeapStats(self)
    __swig_destroy__ = _vmkctl.delete_MemoryInfo
    __del__ = lambda self : None;
MemoryInfo_swigregister = _vmkctl.MemoryInfo_swigregister
MemoryInfo_swigregister(MemoryInfo)

class MemoryInfoImpl(MemoryInfo,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [MemoryInfo,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [MemoryInfo,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryInfoImpl, name)
    __repr__ = _swig_repr
    DEFAULT_COS_MEMORY = _vmkctl.MemoryInfoImpl_DEFAULT_COS_MEMORY
    def __init__(self, *args): 
        this = _vmkctl.new_MemoryInfoImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_MemoryInfoImpl
    __del__ = lambda self : None;
    def GetPageSize(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetPageSize(self)
    def GetTotalPages(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetTotalPages(self)
    def GetFreePages(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetFreePages(self)
    def GetSharedPages(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetSharedPages(self)
    def GetCommonPages(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetCommonPages(self)
    def GetSystemHeapSize(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetSystemHeapSize(self)
    def GetSystemHeapFree(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetSystemHeapFree(self)
    def GetSystemCodeSize(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetSystemCodeSize(self)
    def GetSystemMemoryUsage(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetSystemMemoryUsage(self)
    def GetNumNUMANodes(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetNumNUMANodes(self)
    def GetPhysicalMemory(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetPhysicalMemory(self)
    def GetReliableMemory(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetReliableMemory(self)
    def GetVmKernelMemory(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetVmKernelMemory(self)
    def GetVmKernelFreeMemory(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetVmKernelFreeMemory(self)
    def GetServiceConsoleMemory(self) -> "uint64" : return _vmkctl.MemoryInfoImpl_GetServiceConsoleMemory(self)
    def GetServiceConsoleReservedMem(self) -> "uint32" : return _vmkctl.MemoryInfoImpl_GetServiceConsoleReservedMem(self)
    def SetServiceConsoleReservedMem(self, *args) -> "void" : return _vmkctl.MemoryInfoImpl_SetServiceConsoleReservedMem(self, *args)
    def GetHeapStats(self) -> "std::vector< HostCtl::Hardware::HeapPtr,std::allocator< HostCtl::Hardware::HeapPtr > >" : return _vmkctl.MemoryInfoImpl_GetHeapStats(self)
    def Refresh(self) -> "void" : return _vmkctl.MemoryInfoImpl_Refresh(self)
    def Print(self, *args) -> "void" : return _vmkctl.MemoryInfoImpl_Print(self, *args)
    def GetName(self) -> "std::string" : return _vmkctl.MemoryInfoImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.MemoryInfoImpl_LoadConfig(self)
MemoryInfoImpl_swigregister = _vmkctl.MemoryInfoImpl_swigregister
MemoryInfoImpl_swigregister(MemoryInfoImpl)

class NumaNode(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumaNode, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumaNode, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetId(self) -> "uint8" : return _vmkctl.NumaNode_GetId(self)
    def GetCpus(self) -> "std::vector< HostCtl::Hardware::CpuPtr,std::allocator< HostCtl::Hardware::CpuPtr > >" : return _vmkctl.NumaNode_GetCpus(self)
    def GetMemoryRangeBegin(self) -> "uint64" : return _vmkctl.NumaNode_GetMemoryRangeBegin(self)
    def GetMemoryRangeLength(self) -> "uint64" : return _vmkctl.NumaNode_GetMemoryRangeLength(self)
    __swig_destroy__ = _vmkctl.delete_NumaNode
    __del__ = lambda self : None;
NumaNode_swigregister = _vmkctl.NumaNode_swigregister
NumaNode_swigregister(NumaNode)

class NumaNodeImpl(NumaNode,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [NumaNode,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumaNodeImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [NumaNode,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumaNodeImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_NumaNodeImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_NumaNodeImpl
    __del__ = lambda self : None;
    def GetId(self) -> "uint8" : return _vmkctl.NumaNodeImpl_GetId(self)
    def GetMemoryRangeBegin(self) -> "uint64" : return _vmkctl.NumaNodeImpl_GetMemoryRangeBegin(self)
    def GetMemoryRangeLength(self) -> "uint64" : return _vmkctl.NumaNodeImpl_GetMemoryRangeLength(self)
    def GetCpus(self) -> "std::vector< HostCtl::Hardware::CpuPtr,std::allocator< HostCtl::Hardware::CpuPtr > >" : return _vmkctl.NumaNodeImpl_GetCpus(self)
    def Refresh(self) -> "void" : return _vmkctl.NumaNodeImpl_Refresh(self)
    def Print(self, *args) -> "void" : return _vmkctl.NumaNodeImpl_Print(self, *args)
    def GetName(self) -> "std::string" : return _vmkctl.NumaNodeImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.NumaNodeImpl_LoadConfig(self)
NumaNodeImpl_swigregister = _vmkctl.NumaNodeImpl_swigregister
NumaNodeImpl_swigregister(NumaNodeImpl)

class NumaInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumaInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumaInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetNumNumaNodes(self) -> "uint8" : return _vmkctl.NumaInfo_GetNumNumaNodes(self)
    def GetNumaNodes(self) -> "std::vector< HostCtl::Hardware::NumaNodePtr,std::allocator< HostCtl::Hardware::NumaNodePtr > >" : return _vmkctl.NumaInfo_GetNumaNodes(self)
    __swig_destroy__ = _vmkctl.delete_NumaInfo
    __del__ = lambda self : None;
NumaInfo_swigregister = _vmkctl.NumaInfo_swigregister
NumaInfo_swigregister(NumaInfo)

class NumaInfoImpl(NumaInfo,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [NumaInfo,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumaInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [NumaInfo,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NumaInfoImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_NumaInfoImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_NumaInfoImpl
    __del__ = lambda self : None;
    def GetNumNumaNodes(self) -> "uint8" : return _vmkctl.NumaInfoImpl_GetNumNumaNodes(self)
    def GetNumaNodes(self) -> "std::vector< HostCtl::Hardware::NumaNodePtr,std::allocator< HostCtl::Hardware::NumaNodePtr > >" : return _vmkctl.NumaInfoImpl_GetNumaNodes(self)
    def Refresh(self) -> "void" : return _vmkctl.NumaInfoImpl_Refresh(self)
    def Print(self, *args) -> "void" : return _vmkctl.NumaInfoImpl_Print(self, *args)
    def GetName(self) -> "std::string" : return _vmkctl.NumaInfoImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.NumaInfoImpl_LoadConfig(self)
NumaInfoImpl_swigregister = _vmkctl.NumaInfoImpl_swigregister
NumaInfoImpl_swigregister(NumaInfoImpl)

class PMemRangeInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemRangeInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemRangeInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_uuid"] = _vmkctl.PMemRangeInfo__uuid_set
    __swig_getmethods__["_uuid"] = _vmkctl.PMemRangeInfo__uuid_get
    if _newclass:_uuid = _swig_property(_vmkctl.PMemRangeInfo__uuid_get, _vmkctl.PMemRangeInfo__uuid_set)
    __swig_setmethods__["_firstMPN"] = _vmkctl.PMemRangeInfo__firstMPN_set
    __swig_getmethods__["_firstMPN"] = _vmkctl.PMemRangeInfo__firstMPN_get
    if _newclass:_firstMPN = _swig_property(_vmkctl.PMemRangeInfo__firstMPN_get, _vmkctl.PMemRangeInfo__firstMPN_set)
    __swig_setmethods__["_lastMPN"] = _vmkctl.PMemRangeInfo__lastMPN_set
    __swig_getmethods__["_lastMPN"] = _vmkctl.PMemRangeInfo__lastMPN_get
    if _newclass:_lastMPN = _swig_property(_vmkctl.PMemRangeInfo__lastMPN_get, _vmkctl.PMemRangeInfo__lastMPN_set)
    def __init__(self): 
        this = _vmkctl.new_PMemRangeInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PMemRangeInfo
    __del__ = lambda self : None;
PMemRangeInfo_swigregister = _vmkctl.PMemRangeInfo_swigregister
PMemRangeInfo_swigregister(PMemRangeInfo)

class PMemRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemRange, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetInfo(self) -> "HostCtl::Hardware::PMemRangeInfo" : return _vmkctl.PMemRange_GetInfo(self)
    def Mount(self) -> "HostCtl::Hardware::PMemVolumePtr" : return _vmkctl.PMemRange_Mount(self)
    __swig_destroy__ = _vmkctl.delete_PMemRange
    __del__ = lambda self : None;
PMemRange_swigregister = _vmkctl.PMemRange_swigregister
PMemRange_swigregister(PMemRange)

class PMemRegionInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemRegionInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemRegionInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_uuid"] = _vmkctl.PMemRegionInfo__uuid_set
    __swig_getmethods__["_uuid"] = _vmkctl.PMemRegionInfo__uuid_get
    if _newclass:_uuid = _swig_property(_vmkctl.PMemRegionInfo__uuid_get, _vmkctl.PMemRegionInfo__uuid_set)
    __swig_setmethods__["_sizeBytes"] = _vmkctl.PMemRegionInfo__sizeBytes_set
    __swig_getmethods__["_sizeBytes"] = _vmkctl.PMemRegionInfo__sizeBytes_get
    if _newclass:_sizeBytes = _swig_property(_vmkctl.PMemRegionInfo__sizeBytes_get, _vmkctl.PMemRegionInfo__sizeBytes_set)
    def __init__(self): 
        this = _vmkctl.new_PMemRegionInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PMemRegionInfo
    __del__ = lambda self : None;
PMemRegionInfo_swigregister = _vmkctl.PMemRegionInfo_swigregister
PMemRegionInfo_swigregister(PMemRegionInfo)

class PMemRegion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemRegion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemRegion, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetInfo(self) -> "HostCtl::Hardware::PMemRegionInfo" : return _vmkctl.PMemRegion_GetInfo(self)
    __swig_destroy__ = _vmkctl.delete_PMemRegion
    __del__ = lambda self : None;
PMemRegion_swigregister = _vmkctl.PMemRegion_swigregister
PMemRegion_swigregister(PMemRegion)

class PMemVolumeInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemVolumeInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemVolumeInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_uuid"] = _vmkctl.PMemVolumeInfo__uuid_set
    __swig_getmethods__["_uuid"] = _vmkctl.PMemVolumeInfo__uuid_get
    if _newclass:_uuid = _swig_property(_vmkctl.PMemVolumeInfo__uuid_get, _vmkctl.PMemVolumeInfo__uuid_set)
    def __init__(self): 
        this = _vmkctl.new_PMemVolumeInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PMemVolumeInfo
    __del__ = lambda self : None;
PMemVolumeInfo_swigregister = _vmkctl.PMemVolumeInfo_swigregister
PMemVolumeInfo_swigregister(PMemVolumeInfo)

class PMemRegionStoreInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemRegionStoreInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemRegionStoreInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_totalSizeMB"] = _vmkctl.PMemRegionStoreInfo__totalSizeMB_set
    __swig_getmethods__["_totalSizeMB"] = _vmkctl.PMemRegionStoreInfo__totalSizeMB_get
    if _newclass:_totalSizeMB = _swig_property(_vmkctl.PMemRegionStoreInfo__totalSizeMB_get, _vmkctl.PMemRegionStoreInfo__totalSizeMB_set)
    __swig_setmethods__["_availableReservationMB"] = _vmkctl.PMemRegionStoreInfo__availableReservationMB_set
    __swig_getmethods__["_availableReservationMB"] = _vmkctl.PMemRegionStoreInfo__availableReservationMB_get
    if _newclass:_availableReservationMB = _swig_property(_vmkctl.PMemRegionStoreInfo__availableReservationMB_get, _vmkctl.PMemRegionStoreInfo__availableReservationMB_set)
    def __init__(self): 
        this = _vmkctl.new_PMemRegionStoreInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PMemRegionStoreInfo
    __del__ = lambda self : None;
PMemRegionStoreInfo_swigregister = _vmkctl.PMemRegionStoreInfo_swigregister
PMemRegionStoreInfo_swigregister(PMemRegionStoreInfo)

class PMemVolume(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemVolume, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemVolume, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetInfo(self) -> "HostCtl::Hardware::PMemVolumeInfo" : return _vmkctl.PMemVolume_GetInfo(self)
    def GetRegionStoreInfo(self) -> "HostCtl::Hardware::PMemRegionStoreInfo" : return _vmkctl.PMemVolume_GetRegionStoreInfo(self)
    def GetRegions(self) -> "std::vector< HostCtl::Hardware::PMemRegionPtr,std::allocator< HostCtl::Hardware::PMemRegionPtr > >" : return _vmkctl.PMemVolume_GetRegions(self)
    __swig_destroy__ = _vmkctl.delete_PMemVolume
    __del__ = lambda self : None;
PMemVolume_swigregister = _vmkctl.PMemVolume_swigregister
PMemVolume_swigregister(PMemVolume)

class PMemInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PMemInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetVolumes(self) -> "std::vector< HostCtl::Hardware::PMemVolumePtr,std::allocator< HostCtl::Hardware::PMemVolumePtr > >" : return _vmkctl.PMemInfo_GetVolumes(self)
    def GetMemoryRanges(self) -> "std::vector< HostCtl::Hardware::PMemRangePtr,std::allocator< HostCtl::Hardware::PMemRangePtr > >" : return _vmkctl.PMemInfo_GetMemoryRanges(self)
    __swig_destroy__ = _vmkctl.delete_PMemInfo
    __del__ = lambda self : None;
PMemInfo_swigregister = _vmkctl.PMemInfo_swigregister
PMemInfo_swigregister(PMemInfo)

class PMemRangeImpl(PMemRange):
    __swig_setmethods__ = {}
    for _s in [PMemRange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemRangeImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [PMemRange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PMemRangeImpl, name)
    __repr__ = _swig_repr
    def GetInfo(self) -> "HostCtl::Hardware::PMemRangeInfo" : return _vmkctl.PMemRangeImpl_GetInfo(self)
    def Mount(self) -> "HostCtl::Hardware::PMemVolumePtr" : return _vmkctl.PMemRangeImpl_Mount(self)
    __swig_setmethods__["_info"] = _vmkctl.PMemRangeImpl__info_set
    __swig_getmethods__["_info"] = _vmkctl.PMemRangeImpl__info_get
    if _newclass:_info = _swig_property(_vmkctl.PMemRangeImpl__info_get, _vmkctl.PMemRangeImpl__info_set)
    def __init__(self): 
        this = _vmkctl.new_PMemRangeImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PMemRangeImpl
    __del__ = lambda self : None;
PMemRangeImpl_swigregister = _vmkctl.PMemRangeImpl_swigregister
PMemRangeImpl_swigregister(PMemRangeImpl)

class PMemRegionImpl(PMemRegion):
    __swig_setmethods__ = {}
    for _s in [PMemRegion]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemRegionImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [PMemRegion]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PMemRegionImpl, name)
    __repr__ = _swig_repr
    def GetInfo(self) -> "HostCtl::Hardware::PMemRegionInfo" : return _vmkctl.PMemRegionImpl_GetInfo(self)
    __swig_setmethods__["_id"] = _vmkctl.PMemRegionImpl__id_set
    __swig_getmethods__["_id"] = _vmkctl.PMemRegionImpl__id_get
    if _newclass:_id = _swig_property(_vmkctl.PMemRegionImpl__id_get, _vmkctl.PMemRegionImpl__id_set)
    __swig_setmethods__["_info"] = _vmkctl.PMemRegionImpl__info_set
    __swig_getmethods__["_info"] = _vmkctl.PMemRegionImpl__info_get
    if _newclass:_info = _swig_property(_vmkctl.PMemRegionImpl__info_get, _vmkctl.PMemRegionImpl__info_set)
    def __init__(self): 
        this = _vmkctl.new_PMemRegionImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PMemRegionImpl
    __del__ = lambda self : None;
PMemRegionImpl_swigregister = _vmkctl.PMemRegionImpl_swigregister
PMemRegionImpl_swigregister(PMemRegionImpl)

class PMemVolumeImpl(PMemVolume):
    __swig_setmethods__ = {}
    for _s in [PMemVolume]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemVolumeImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [PMemVolume]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PMemVolumeImpl, name)
    __repr__ = _swig_repr
    def GetInfo(self) -> "HostCtl::Hardware::PMemVolumeInfo" : return _vmkctl.PMemVolumeImpl_GetInfo(self)
    def GetRegionStoreInfo(self) -> "HostCtl::Hardware::PMemRegionStoreInfo" : return _vmkctl.PMemVolumeImpl_GetRegionStoreInfo(self)
    def GetRegions(self) -> "std::vector< HostCtl::Hardware::PMemRegionPtr,std::allocator< HostCtl::Hardware::PMemRegionPtr > >" : return _vmkctl.PMemVolumeImpl_GetRegions(self)
    __swig_setmethods__["_id"] = _vmkctl.PMemVolumeImpl__id_set
    __swig_getmethods__["_id"] = _vmkctl.PMemVolumeImpl__id_get
    if _newclass:_id = _swig_property(_vmkctl.PMemVolumeImpl__id_get, _vmkctl.PMemVolumeImpl__id_set)
    __swig_setmethods__["_info"] = _vmkctl.PMemVolumeImpl__info_set
    __swig_getmethods__["_info"] = _vmkctl.PMemVolumeImpl__info_get
    if _newclass:_info = _swig_property(_vmkctl.PMemVolumeImpl__info_get, _vmkctl.PMemVolumeImpl__info_set)
    def __init__(self): 
        this = _vmkctl.new_PMemVolumeImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PMemVolumeImpl
    __del__ = lambda self : None;
PMemVolumeImpl_swigregister = _vmkctl.PMemVolumeImpl_swigregister
PMemVolumeImpl_swigregister(PMemVolumeImpl)

class PMemInfoImpl(PMemInfo):
    __swig_setmethods__ = {}
    for _s in [PMemInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [PMemInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PMemInfoImpl, name)
    __repr__ = _swig_repr
    def GetVolumes(self) -> "std::vector< HostCtl::Hardware::PMemVolumePtr,std::allocator< HostCtl::Hardware::PMemVolumePtr > >" : return _vmkctl.PMemInfoImpl_GetVolumes(self)
    def GetMemoryRanges(self) -> "std::vector< HostCtl::Hardware::PMemRangePtr,std::allocator< HostCtl::Hardware::PMemRangePtr > >" : return _vmkctl.PMemInfoImpl_GetMemoryRanges(self)
    def __init__(self): 
        this = _vmkctl.new_PMemInfoImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PMemInfoImpl
    __del__ = lambda self : None;
PMemInfoImpl_swigregister = _vmkctl.PMemInfoImpl_swigregister
PMemInfoImpl_swigregister(PMemInfoImpl)

class HardwareUuid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HardwareUuid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HardwareUuid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["uuid"] = _vmkctl.HardwareUuid_uuid_set
    __swig_getmethods__["uuid"] = _vmkctl.HardwareUuid_uuid_get
    if _newclass:uuid = _swig_property(_vmkctl.HardwareUuid_uuid_get, _vmkctl.HardwareUuid_uuid_set)
    __swig_setmethods__["uuidStr"] = _vmkctl.HardwareUuid_uuidStr_set
    __swig_getmethods__["uuidStr"] = _vmkctl.HardwareUuid_uuidStr_get
    if _newclass:uuidStr = _swig_property(_vmkctl.HardwareUuid_uuidStr_get, _vmkctl.HardwareUuid_uuidStr_set)
    def __init__(self): 
        this = _vmkctl.new_HardwareUuid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_HardwareUuid
    __del__ = lambda self : None;
HardwareUuid_swigregister = _vmkctl.HardwareUuid_swigregister
HardwareUuid_swigregister(HardwareUuid)

class BootDevice(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BootDevice, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BootDevice, name)
    __repr__ = _swig_repr
    BOOT_DEV_RESERVED = _vmkctl.BootDevice_BOOT_DEV_RESERVED
    BOOT_DEV_FLOPPY = _vmkctl.BootDevice_BOOT_DEV_FLOPPY
    BOOT_DEV_HARDDISK = _vmkctl.BootDevice_BOOT_DEV_HARDDISK
    BOOT_DEV_CDROM = _vmkctl.BootDevice_BOOT_DEV_CDROM
    BOOT_DEV_PCMCIA = _vmkctl.BootDevice_BOOT_DEV_PCMCIA
    BOOT_DEV_USB = _vmkctl.BootDevice_BOOT_DEV_USB
    BOOT_DEV_EMBNET = _vmkctl.BootDevice_BOOT_DEV_EMBNET
    BOOT_DEV_ZIP = _vmkctl.BootDevice_BOOT_DEV_ZIP
    BOOT_DEV_USB_FLOPPY = _vmkctl.BootDevice_BOOT_DEV_USB_FLOPPY
    BOOT_DEV_USB_CDROM = _vmkctl.BootDevice_BOOT_DEV_USB_CDROM
    BOOT_DEV_BEV = _vmkctl.BootDevice_BOOT_DEV_BEV
    BOOT_DEV_UNK = _vmkctl.BootDevice_BOOT_DEV_UNK
    def GetTypeString(self) -> "std::string" : return _vmkctl.BootDevice_GetTypeString(self)
    __swig_setmethods__["deviceIndex"] = _vmkctl.BootDevice_deviceIndex_set
    __swig_getmethods__["deviceIndex"] = _vmkctl.BootDevice_deviceIndex_get
    if _newclass:deviceIndex = _swig_property(_vmkctl.BootDevice_deviceIndex_get, _vmkctl.BootDevice_deviceIndex_set)
    __swig_setmethods__["description"] = _vmkctl.BootDevice_description_set
    __swig_getmethods__["description"] = _vmkctl.BootDevice_description_get
    if _newclass:description = _swig_property(_vmkctl.BootDevice_description_get, _vmkctl.BootDevice_description_set)
    __swig_setmethods__["priority"] = _vmkctl.BootDevice_priority_set
    __swig_getmethods__["priority"] = _vmkctl.BootDevice_priority_get
    if _newclass:priority = _swig_property(_vmkctl.BootDevice_priority_get, _vmkctl.BootDevice_priority_set)
    __swig_setmethods__["type"] = _vmkctl.BootDevice_type_set
    __swig_getmethods__["type"] = _vmkctl.BootDevice_type_get
    if _newclass:type = _swig_property(_vmkctl.BootDevice_type_get, _vmkctl.BootDevice_type_set)
    __swig_setmethods__["BootNames"] = _vmkctl.BootDevice_BootNames_set
    __swig_getmethods__["BootNames"] = _vmkctl.BootDevice_BootNames_get
    if _newclass:BootNames = _swig_property(_vmkctl.BootDevice_BootNames_get, _vmkctl.BootDevice_BootNames_set)
    __swig_setmethods__["enabled"] = _vmkctl.BootDevice_enabled_set
    __swig_getmethods__["enabled"] = _vmkctl.BootDevice_enabled_get
    if _newclass:enabled = _swig_property(_vmkctl.BootDevice_enabled_get, _vmkctl.BootDevice_enabled_set)
    def __init__(self): 
        this = _vmkctl.new_BootDevice()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_BootDevice
    __del__ = lambda self : None;
BootDevice_swigregister = _vmkctl.BootDevice_swigregister
BootDevice_swigregister(BootDevice)

class BiosData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BiosData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BiosData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vendor"] = _vmkctl.BiosData_vendor_set
    __swig_getmethods__["vendor"] = _vmkctl.BiosData_vendor_get
    if _newclass:vendor = _swig_property(_vmkctl.BiosData_vendor_get, _vmkctl.BiosData_vendor_set)
    __swig_setmethods__["version"] = _vmkctl.BiosData_version_set
    __swig_getmethods__["version"] = _vmkctl.BiosData_version_get
    if _newclass:version = _swig_property(_vmkctl.BiosData_version_get, _vmkctl.BiosData_version_set)
    __swig_setmethods__["releaseDate"] = _vmkctl.BiosData_releaseDate_set
    __swig_getmethods__["releaseDate"] = _vmkctl.BiosData_releaseDate_get
    if _newclass:releaseDate = _swig_property(_vmkctl.BiosData_releaseDate_get, _vmkctl.BiosData_releaseDate_set)
    __swig_setmethods__["major"] = _vmkctl.BiosData_major_set
    __swig_getmethods__["major"] = _vmkctl.BiosData_major_get
    if _newclass:major = _swig_property(_vmkctl.BiosData_major_get, _vmkctl.BiosData_major_set)
    __swig_setmethods__["minor"] = _vmkctl.BiosData_minor_set
    __swig_getmethods__["minor"] = _vmkctl.BiosData_minor_get
    if _newclass:minor = _swig_property(_vmkctl.BiosData_minor_get, _vmkctl.BiosData_minor_set)
    __swig_setmethods__["fwMajor"] = _vmkctl.BiosData_fwMajor_set
    __swig_getmethods__["fwMajor"] = _vmkctl.BiosData_fwMajor_get
    if _newclass:fwMajor = _swig_property(_vmkctl.BiosData_fwMajor_get, _vmkctl.BiosData_fwMajor_set)
    __swig_setmethods__["fwMinor"] = _vmkctl.BiosData_fwMinor_set
    __swig_getmethods__["fwMinor"] = _vmkctl.BiosData_fwMinor_get
    if _newclass:fwMinor = _swig_property(_vmkctl.BiosData_fwMinor_get, _vmkctl.BiosData_fwMinor_set)
    def __init__(self): 
        this = _vmkctl.new_BiosData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_BiosData
    __del__ = lambda self : None;
BiosData_swigregister = _vmkctl.BiosData_swigregister
BiosData_swigregister(BiosData)

class HardwareInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HardwareInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HardwareInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetPciInfo(self) -> "HostCtl::Hardware::PciInfoPtr" : return _vmkctl.HardwareInfo_GetPciInfo(self)
    def IsSmcPresent(self) -> "bool" : return _vmkctl.HardwareInfo_IsSmcPresent(self)
    def GetMemoryInfo(self) -> "HostCtl::Hardware::MemoryInfoPtr" : return _vmkctl.HardwareInfo_GetMemoryInfo(self)
    def GetCpuInfo(self) -> "HostCtl::Hardware::CpuInfoPtr" : return _vmkctl.HardwareInfo_GetCpuInfo(self)
    def GetPowerManagementCurrentPolicy(self) -> "std::string" : return _vmkctl.HardwareInfo_GetPowerManagementCurrentPolicy(self)
    def GetPowerManagementHardwareSupport(self) -> "std::string" : return _vmkctl.HardwareInfo_GetPowerManagementHardwareSupport(self)
    def GetNumaInfo(self) -> "HostCtl::Hardware::NumaInfoPtr" : return _vmkctl.HardwareInfo_GetNumaInfo(self)
    def GetHardwareUuid(self) -> "HostCtl::Hardware::HardwareUuid" : return _vmkctl.HardwareInfo_GetHardwareUuid(self)
    def GetProductName(self) -> "std::string" : return _vmkctl.HardwareInfo_GetProductName(self)
    def GetVendorName(self) -> "std::string" : return _vmkctl.HardwareInfo_GetVendorName(self)
    def GetSerialNumber(self) -> "std::string" : return _vmkctl.HardwareInfo_GetSerialNumber(self)
    def GetHardwareUptime(self) -> "uint64" : return _vmkctl.HardwareInfo_GetHardwareUptime(self)
    def GetBootDevices(self) -> "std::vector< HostCtl::Hardware::BootDevice,std::allocator< HostCtl::Hardware::BootDevice > >" : return _vmkctl.HardwareInfo_GetBootDevices(self)
    def SwapBootDeviceOrder(self, *args) -> "void" : return _vmkctl.HardwareInfo_SwapBootDeviceOrder(self, *args)
    def IsIPMISupported(self) -> "bool" : return _vmkctl.HardwareInfo_IsIPMISupported(self)
    def GetPMemInfo(self) -> "HostCtl::Hardware::PMemInfoPtr" : return _vmkctl.HardwareInfo_GetPMemInfo(self)
    def GetBiosInfo(self) -> "HostCtl::Hardware::BiosData const &" : return _vmkctl.HardwareInfo_GetBiosInfo(self)
    __swig_destroy__ = _vmkctl.delete_HardwareInfo
    __del__ = lambda self : None;
HardwareInfo_swigregister = _vmkctl.HardwareInfo_swigregister
HardwareInfo_swigregister(HardwareInfo)

class HardwareInfoImpl(HardwareInfo,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [HardwareInfo,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HardwareInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [HardwareInfo,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HardwareInfoImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_HardwareInfoImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_HardwareInfoImpl
    __del__ = lambda self : None;
    def GetPciInfo(self) -> "HostCtl::Hardware::PciInfoPtr" : return _vmkctl.HardwareInfoImpl_GetPciInfo(self)
    def IsSmcPresent(self) -> "bool" : return _vmkctl.HardwareInfoImpl_IsSmcPresent(self)
    def GetMemoryInfo(self) -> "HostCtl::Hardware::MemoryInfoPtr" : return _vmkctl.HardwareInfoImpl_GetMemoryInfo(self)
    def GetCpuInfo(self) -> "HostCtl::Hardware::CpuInfoPtr" : return _vmkctl.HardwareInfoImpl_GetCpuInfo(self)
    def GetPowerManagementCurrentPolicy(self) -> "std::string" : return _vmkctl.HardwareInfoImpl_GetPowerManagementCurrentPolicy(self)
    def GetPowerManagementHardwareSupport(self) -> "std::string" : return _vmkctl.HardwareInfoImpl_GetPowerManagementHardwareSupport(self)
    def GetHardwareUuid(self) -> "HostCtl::Hardware::HardwareUuid" : return _vmkctl.HardwareInfoImpl_GetHardwareUuid(self)
    def GetProductName(self) -> "std::string" : return _vmkctl.HardwareInfoImpl_GetProductName(self)
    def GetVendorName(self) -> "std::string" : return _vmkctl.HardwareInfoImpl_GetVendorName(self)
    def GetSerialNumber(self) -> "std::string" : return _vmkctl.HardwareInfoImpl_GetSerialNumber(self)
    def GetNumaInfo(self) -> "HostCtl::Hardware::NumaInfoPtr" : return _vmkctl.HardwareInfoImpl_GetNumaInfo(self)
    def GetHardwareUptime(self) -> "uint64" : return _vmkctl.HardwareInfoImpl_GetHardwareUptime(self)
    def GetBootDevices(self) -> "std::vector< HostCtl::Hardware::BootDevice,std::allocator< HostCtl::Hardware::BootDevice > >" : return _vmkctl.HardwareInfoImpl_GetBootDevices(self)
    def SwapBootDeviceOrder(self, *args) -> "void" : return _vmkctl.HardwareInfoImpl_SwapBootDeviceOrder(self, *args)
    def IsIPMISupported(self) -> "bool" : return _vmkctl.HardwareInfoImpl_IsIPMISupported(self)
    def GetPMemInfo(self) -> "HostCtl::Hardware::PMemInfoPtr" : return _vmkctl.HardwareInfoImpl_GetPMemInfo(self)
    def GetBiosInfo(self) -> "HostCtl::Hardware::BiosData const &" : return _vmkctl.HardwareInfoImpl_GetBiosInfo(self)
    def Refresh(self) -> "void" : return _vmkctl.HardwareInfoImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.HardwareInfoImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.HardwareInfoImpl_Print(self, *args)
    def LoadConfig(self) -> "void" : return _vmkctl.HardwareInfoImpl_LoadConfig(self)
HardwareInfoImpl_swigregister = _vmkctl.HardwareInfoImpl_swigregister
HardwareInfoImpl_swigregister(HardwareInfoImpl)

CDP_CAPS_ROUTER = _vmkctl.CDP_CAPS_ROUTER
CDP_CAPS_TRANS_BRIDGE = _vmkctl.CDP_CAPS_TRANS_BRIDGE
CDP_CAPS_SOURCE_BRIDGE = _vmkctl.CDP_CAPS_SOURCE_BRIDGE
CDP_CAPS_SWITCH = _vmkctl.CDP_CAPS_SWITCH
CDP_CAPS_HOST = _vmkctl.CDP_CAPS_HOST
CDP_CAPS_IGMP = _vmkctl.CDP_CAPS_IGMP
CDP_CAPS_REPEATER = _vmkctl.CDP_CAPS_REPEATER
PNIC_CDP_STATUS_DOWN = _vmkctl.PNIC_CDP_STATUS_DOWN
PNIC_CDP_STATUS_LISTEN = _vmkctl.PNIC_CDP_STATUS_LISTEN
PNIC_CDP_STATUS_ADVERTISE = _vmkctl.PNIC_CDP_STATUS_ADVERTISE
PNIC_CDP_STATUS_BOTH = _vmkctl.PNIC_CDP_STATUS_BOTH
class CdpSummary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CdpSummary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CdpSummary, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _vmkctl.CdpSummary_status_set
    __swig_getmethods__["status"] = _vmkctl.CdpSummary_status_get
    if _newclass:status = _swig_property(_vmkctl.CdpSummary_status_get, _vmkctl.CdpSummary_status_set)
    __swig_setmethods__["cdpVersion"] = _vmkctl.CdpSummary_cdpVersion_set
    __swig_getmethods__["cdpVersion"] = _vmkctl.CdpSummary_cdpVersion_get
    if _newclass:cdpVersion = _swig_property(_vmkctl.CdpSummary_cdpVersion_get, _vmkctl.CdpSummary_cdpVersion_set)
    __swig_setmethods__["timeout"] = _vmkctl.CdpSummary_timeout_set
    __swig_getmethods__["timeout"] = _vmkctl.CdpSummary_timeout_get
    if _newclass:timeout = _swig_property(_vmkctl.CdpSummary_timeout_get, _vmkctl.CdpSummary_timeout_set)
    __swig_setmethods__["ttl"] = _vmkctl.CdpSummary_ttl_set
    __swig_getmethods__["ttl"] = _vmkctl.CdpSummary_ttl_get
    if _newclass:ttl = _swig_property(_vmkctl.CdpSummary_ttl_get, _vmkctl.CdpSummary_ttl_set)
    __swig_setmethods__["samples"] = _vmkctl.CdpSummary_samples_set
    __swig_getmethods__["samples"] = _vmkctl.CdpSummary_samples_get
    if _newclass:samples = _swig_property(_vmkctl.CdpSummary_samples_get, _vmkctl.CdpSummary_samples_set)
    __swig_setmethods__["deviceId"] = _vmkctl.CdpSummary_deviceId_set
    __swig_getmethods__["deviceId"] = _vmkctl.CdpSummary_deviceId_get
    if _newclass:deviceId = _swig_property(_vmkctl.CdpSummary_deviceId_get, _vmkctl.CdpSummary_deviceId_set)
    __swig_setmethods__["ipAddress"] = _vmkctl.CdpSummary_ipAddress_set
    __swig_getmethods__["ipAddress"] = _vmkctl.CdpSummary_ipAddress_get
    if _newclass:ipAddress = _swig_property(_vmkctl.CdpSummary_ipAddress_get, _vmkctl.CdpSummary_ipAddress_set)
    __swig_setmethods__["network"] = _vmkctl.CdpSummary_network_set
    __swig_getmethods__["network"] = _vmkctl.CdpSummary_network_get
    if _newclass:network = _swig_property(_vmkctl.CdpSummary_network_get, _vmkctl.CdpSummary_network_set)
    __swig_setmethods__["portId"] = _vmkctl.CdpSummary_portId_set
    __swig_getmethods__["portId"] = _vmkctl.CdpSummary_portId_get
    if _newclass:portId = _swig_property(_vmkctl.CdpSummary_portId_get, _vmkctl.CdpSummary_portId_set)
    __swig_setmethods__["capabilities"] = _vmkctl.CdpSummary_capabilities_set
    __swig_getmethods__["capabilities"] = _vmkctl.CdpSummary_capabilities_get
    if _newclass:capabilities = _swig_property(_vmkctl.CdpSummary_capabilities_get, _vmkctl.CdpSummary_capabilities_set)
    __swig_setmethods__["version"] = _vmkctl.CdpSummary_version_set
    __swig_getmethods__["version"] = _vmkctl.CdpSummary_version_get
    if _newclass:version = _swig_property(_vmkctl.CdpSummary_version_get, _vmkctl.CdpSummary_version_set)
    __swig_setmethods__["platform"] = _vmkctl.CdpSummary_platform_set
    __swig_getmethods__["platform"] = _vmkctl.CdpSummary_platform_get
    if _newclass:platform = _swig_property(_vmkctl.CdpSummary_platform_get, _vmkctl.CdpSummary_platform_set)
    __swig_setmethods__["vlan"] = _vmkctl.CdpSummary_vlan_set
    __swig_getmethods__["vlan"] = _vmkctl.CdpSummary_vlan_get
    if _newclass:vlan = _swig_property(_vmkctl.CdpSummary_vlan_get, _vmkctl.CdpSummary_vlan_set)
    __swig_setmethods__["duplex"] = _vmkctl.CdpSummary_duplex_set
    __swig_getmethods__["duplex"] = _vmkctl.CdpSummary_duplex_get
    if _newclass:duplex = _swig_property(_vmkctl.CdpSummary_duplex_get, _vmkctl.CdpSummary_duplex_set)
    __swig_setmethods__["mtu"] = _vmkctl.CdpSummary_mtu_set
    __swig_getmethods__["mtu"] = _vmkctl.CdpSummary_mtu_get
    if _newclass:mtu = _swig_property(_vmkctl.CdpSummary_mtu_get, _vmkctl.CdpSummary_mtu_set)
    __swig_setmethods__["systemName"] = _vmkctl.CdpSummary_systemName_set
    __swig_getmethods__["systemName"] = _vmkctl.CdpSummary_systemName_get
    if _newclass:systemName = _swig_property(_vmkctl.CdpSummary_systemName_get, _vmkctl.CdpSummary_systemName_set)
    __swig_setmethods__["systemOid"] = _vmkctl.CdpSummary_systemOid_set
    __swig_getmethods__["systemOid"] = _vmkctl.CdpSummary_systemOid_get
    if _newclass:systemOid = _swig_property(_vmkctl.CdpSummary_systemOid_get, _vmkctl.CdpSummary_systemOid_set)
    __swig_setmethods__["mgmtAddress"] = _vmkctl.CdpSummary_mgmtAddress_set
    __swig_getmethods__["mgmtAddress"] = _vmkctl.CdpSummary_mgmtAddress_get
    if _newclass:mgmtAddress = _swig_property(_vmkctl.CdpSummary_mgmtAddress_get, _vmkctl.CdpSummary_mgmtAddress_set)
    __swig_setmethods__["location"] = _vmkctl.CdpSummary_location_set
    __swig_getmethods__["location"] = _vmkctl.CdpSummary_location_get
    if _newclass:location = _swig_property(_vmkctl.CdpSummary_location_get, _vmkctl.CdpSummary_location_set)
    def __init__(self): 
        this = _vmkctl.new_CdpSummary()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_CdpSummary
    __del__ = lambda self : None;
CdpSummary_swigregister = _vmkctl.CdpSummary_swigregister
CdpSummary_swigregister(CdpSummary)

MAX_OPT_TLV_LEN = _vmkctl.MAX_OPT_TLV_LEN
LLDP_KEY_SYS_CAP = _vmkctl.LLDP_KEY_SYS_CAP
LLDP_KEY_TIMEOUT = _vmkctl.LLDP_KEY_TIMEOUT
LLDP_KEY_SAMPLES = _vmkctl.LLDP_KEY_SAMPLES
PROTOCOL_CDP = _vmkctl.PROTOCOL_CDP
PROTOCOL_LLDP = _vmkctl.PROTOCOL_LLDP
class DPStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DPStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DPStatus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["protocol"] = _vmkctl.DPStatus_protocol_set
    __swig_getmethods__["protocol"] = _vmkctl.DPStatus_protocol_get
    if _newclass:protocol = _swig_property(_vmkctl.DPStatus_protocol_get, _vmkctl.DPStatus_protocol_set)
    __swig_setmethods__["infoAvailable"] = _vmkctl.DPStatus_infoAvailable_set
    __swig_getmethods__["infoAvailable"] = _vmkctl.DPStatus_infoAvailable_get
    if _newclass:infoAvailable = _swig_property(_vmkctl.DPStatus_infoAvailable_get, _vmkctl.DPStatus_infoAvailable_set)
    def __init__(self): 
        this = _vmkctl.new_DPStatus()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DPStatus
    __del__ = lambda self : None;
DPStatus_swigregister = _vmkctl.DPStatus_swigregister
DPStatus_swigregister(DPStatus)

class LldpSummary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LldpSummary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LldpSummary, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _vmkctl.LldpSummary_status_set
    __swig_getmethods__["status"] = _vmkctl.LldpSummary_status_get
    if _newclass:status = _swig_property(_vmkctl.LldpSummary_status_get, _vmkctl.LldpSummary_status_set)
    __swig_setmethods__["timeout"] = _vmkctl.LldpSummary_timeout_set
    __swig_getmethods__["timeout"] = _vmkctl.LldpSummary_timeout_get
    if _newclass:timeout = _swig_property(_vmkctl.LldpSummary_timeout_get, _vmkctl.LldpSummary_timeout_set)
    __swig_setmethods__["samples"] = _vmkctl.LldpSummary_samples_set
    __swig_getmethods__["samples"] = _vmkctl.LldpSummary_samples_get
    if _newclass:samples = _swig_property(_vmkctl.LldpSummary_samples_get, _vmkctl.LldpSummary_samples_set)
    __swig_setmethods__["chassisID"] = _vmkctl.LldpSummary_chassisID_set
    __swig_getmethods__["chassisID"] = _vmkctl.LldpSummary_chassisID_get
    if _newclass:chassisID = _swig_property(_vmkctl.LldpSummary_chassisID_get, _vmkctl.LldpSummary_chassisID_set)
    __swig_setmethods__["portID"] = _vmkctl.LldpSummary_portID_set
    __swig_getmethods__["portID"] = _vmkctl.LldpSummary_portID_get
    if _newclass:portID = _swig_property(_vmkctl.LldpSummary_portID_get, _vmkctl.LldpSummary_portID_set)
    __swig_setmethods__["ttl"] = _vmkctl.LldpSummary_ttl_set
    __swig_getmethods__["ttl"] = _vmkctl.LldpSummary_ttl_get
    if _newclass:ttl = _swig_property(_vmkctl.LldpSummary_ttl_get, _vmkctl.LldpSummary_ttl_set)
    __swig_setmethods__["optTLVs"] = _vmkctl.LldpSummary_optTLVs_set
    __swig_getmethods__["optTLVs"] = _vmkctl.LldpSummary_optTLVs_get
    if _newclass:optTLVs = _swig_property(_vmkctl.LldpSummary_optTLVs_get, _vmkctl.LldpSummary_optTLVs_set)
    def __init__(self): 
        this = _vmkctl.new_LldpSummary()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_LldpSummary
    __del__ = lambda self : None;
LldpSummary_swigregister = _vmkctl.LldpSummary_swigregister
LldpSummary_swigregister(LldpSummary)

class DVPortParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dvsId"] = _vmkctl.DVPortParam_dvsId_set
    __swig_getmethods__["dvsId"] = _vmkctl.DVPortParam_dvsId_get
    if _newclass:dvsId = _swig_property(_vmkctl.DVPortParam_dvsId_get, _vmkctl.DVPortParam_dvsId_set)
    __swig_setmethods__["portId"] = _vmkctl.DVPortParam_portId_set
    __swig_getmethods__["portId"] = _vmkctl.DVPortParam_portId_get
    if _newclass:portId = _swig_property(_vmkctl.DVPortParam_portId_get, _vmkctl.DVPortParam_portId_set)
    __swig_setmethods__["connectionId"] = _vmkctl.DVPortParam_connectionId_set
    __swig_getmethods__["connectionId"] = _vmkctl.DVPortParam_connectionId_get
    if _newclass:connectionId = _swig_property(_vmkctl.DVPortParam_connectionId_get, _vmkctl.DVPortParam_connectionId_set)
    def __init__(self): 
        this = _vmkctl.new_DVPortParam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DVPortParam
    __del__ = lambda self : None;
DVPortParam_swigregister = _vmkctl.DVPortParam_swigregister
DVPortParam_swigregister(DVPortParam)

class DVPortParamCompare(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortParamCompare, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortParamCompare, name)
    __repr__ = _swig_repr
    def __call__(self, *args) -> "bool" : return _vmkctl.DVPortParamCompare___call__(self, *args)
    def __init__(self): 
        this = _vmkctl.new_DVPortParamCompare()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DVPortParamCompare
    __del__ = lambda self : None;
DVPortParamCompare_swigregister = _vmkctl.DVPortParamCompare_swigregister
DVPortParamCompare_swigregister(DVPortParamCompare)

class VspanPortTypes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VspanPortTypes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VspanPortTypes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["allVmm"] = _vmkctl.VspanPortTypes_allVmm_set
    __swig_getmethods__["allVmm"] = _vmkctl.VspanPortTypes_allVmm_get
    if _newclass:allVmm = _swig_property(_vmkctl.VspanPortTypes_allVmm_get, _vmkctl.VspanPortTypes_allVmm_set)
    __swig_setmethods__["allPNic"] = _vmkctl.VspanPortTypes_allPNic_set
    __swig_getmethods__["allPNic"] = _vmkctl.VspanPortTypes_allPNic_get
    if _newclass:allPNic = _swig_property(_vmkctl.VspanPortTypes_allPNic_get, _vmkctl.VspanPortTypes_allPNic_set)
    __swig_setmethods__["allCos"] = _vmkctl.VspanPortTypes_allCos_set
    __swig_getmethods__["allCos"] = _vmkctl.VspanPortTypes_allCos_get
    if _newclass:allCos = _swig_property(_vmkctl.VspanPortTypes_allCos_get, _vmkctl.VspanPortTypes_allCos_set)
    __swig_setmethods__["allVmkNic"] = _vmkctl.VspanPortTypes_allVmkNic_set
    __swig_getmethods__["allVmkNic"] = _vmkctl.VspanPortTypes_allVmkNic_get
    if _newclass:allVmkNic = _swig_property(_vmkctl.VspanPortTypes_allVmkNic_get, _vmkctl.VspanPortTypes_allVmkNic_set)
    __swig_setmethods__["allTest"] = _vmkctl.VspanPortTypes_allTest_set
    __swig_getmethods__["allTest"] = _vmkctl.VspanPortTypes_allTest_get
    if _newclass:allTest = _swig_property(_vmkctl.VspanPortTypes_allTest_get, _vmkctl.VspanPortTypes_allTest_set)
    def __init__(self): 
        this = _vmkctl.new_VspanPortTypes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VspanPortTypes
    __del__ = lambda self : None;
VspanPortTypes_swigregister = _vmkctl.VspanPortTypes_swigregister
VspanPortTypes_swigregister(VspanPortTypes)

class VspanPortFlags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VspanPortFlags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VspanPortFlags, name)
    __repr__ = _swig_repr
    __swig_setmethods__["noInput"] = _vmkctl.VspanPortFlags_noInput_set
    __swig_getmethods__["noInput"] = _vmkctl.VspanPortFlags_noInput_get
    if _newclass:noInput = _swig_property(_vmkctl.VspanPortFlags_noInput_get, _vmkctl.VspanPortFlags_noInput_set)
    __swig_setmethods__["noOutput"] = _vmkctl.VspanPortFlags_noOutput_set
    __swig_getmethods__["noOutput"] = _vmkctl.VspanPortFlags_noOutput_get
    if _newclass:noOutput = _swig_property(_vmkctl.VspanPortFlags_noOutput_get, _vmkctl.VspanPortFlags_noOutput_set)
    __swig_setmethods__["useOrigVlan"] = _vmkctl.VspanPortFlags_useOrigVlan_set
    __swig_getmethods__["useOrigVlan"] = _vmkctl.VspanPortFlags_useOrigVlan_get
    if _newclass:useOrigVlan = _swig_property(_vmkctl.VspanPortFlags_useOrigVlan_get, _vmkctl.VspanPortFlags_useOrigVlan_set)
    __swig_setmethods__["addEncapVlan"] = _vmkctl.VspanPortFlags_addEncapVlan_set
    __swig_getmethods__["addEncapVlan"] = _vmkctl.VspanPortFlags_addEncapVlan_get
    if _newclass:addEncapVlan = _swig_property(_vmkctl.VspanPortFlags_addEncapVlan_get, _vmkctl.VspanPortFlags_addEncapVlan_set)
    __swig_setmethods__["isLegacyMode"] = _vmkctl.VspanPortFlags_isLegacyMode_set
    __swig_getmethods__["isLegacyMode"] = _vmkctl.VspanPortFlags_isLegacyMode_get
    if _newclass:isLegacyMode = _swig_property(_vmkctl.VspanPortFlags_isLegacyMode_get, _vmkctl.VspanPortFlags_isLegacyMode_set)
    __swig_setmethods__["isDisabled"] = _vmkctl.VspanPortFlags_isDisabled_set
    __swig_getmethods__["isDisabled"] = _vmkctl.VspanPortFlags_isDisabled_get
    if _newclass:isDisabled = _swig_property(_vmkctl.VspanPortFlags_isDisabled_get, _vmkctl.VspanPortFlags_isDisabled_set)
    def __init__(self): 
        this = _vmkctl.new_VspanPortFlags()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VspanPortFlags
    __del__ = lambda self : None;
VspanPortFlags_swigregister = _vmkctl.VspanPortFlags_swigregister
VspanPortFlags_swigregister(VspanPortFlags)

class DvMirrorEntities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DvMirrorEntities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DvMirrorEntities, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ports"] = _vmkctl.DvMirrorEntities_ports_set
    __swig_getmethods__["ports"] = _vmkctl.DvMirrorEntities_ports_get
    if _newclass:ports = _swig_property(_vmkctl.DvMirrorEntities_ports_get, _vmkctl.DvMirrorEntities_ports_set)
    __swig_setmethods__["uplinkNames"] = _vmkctl.DvMirrorEntities_uplinkNames_set
    __swig_getmethods__["uplinkNames"] = _vmkctl.DvMirrorEntities_uplinkNames_get
    if _newclass:uplinkNames = _swig_property(_vmkctl.DvMirrorEntities_uplinkNames_get, _vmkctl.DvMirrorEntities_uplinkNames_set)
    __swig_setmethods__["vlans"] = _vmkctl.DvMirrorEntities_vlans_set
    __swig_getmethods__["vlans"] = _vmkctl.DvMirrorEntities_vlans_get
    if _newclass:vlans = _swig_property(_vmkctl.DvMirrorEntities_vlans_get, _vmkctl.DvMirrorEntities_vlans_set)
    __swig_setmethods__["ips"] = _vmkctl.DvMirrorEntities_ips_set
    __swig_getmethods__["ips"] = _vmkctl.DvMirrorEntities_ips_get
    if _newclass:ips = _swig_property(_vmkctl.DvMirrorEntities_ips_get, _vmkctl.DvMirrorEntities_ips_set)
    def __init__(self): 
        this = _vmkctl.new_DvMirrorEntities()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DvMirrorEntities
    __del__ = lambda self : None;
DvMirrorEntities_swigregister = _vmkctl.DvMirrorEntities_swigregister
DvMirrorEntities_swigregister(DvMirrorEntities)

DVMIRROR_SESSIONTYPE_MIXEDDESTMIRROR = _vmkctl.DVMIRROR_SESSIONTYPE_MIXEDDESTMIRROR
DVMIRROR_SESSIONTYPE_DVPORT = _vmkctl.DVMIRROR_SESSIONTYPE_DVPORT
DVMIRROR_SESSIONTYPE_RMIRRORL2_SRC = _vmkctl.DVMIRROR_SESSIONTYPE_RMIRRORL2_SRC
DVMIRROR_SESSIONTYPE_RMIRRORL2_DST = _vmkctl.DVMIRROR_SESSIONTYPE_RMIRRORL2_DST
DVMIRROR_SESSIONTYPE_RMIRRORL3_SRC = _vmkctl.DVMIRROR_SESSIONTYPE_RMIRRORL3_SRC
DVMIRROR_SESSION_ENCAPTYPE_GRE = _vmkctl.DVMIRROR_SESSION_ENCAPTYPE_GRE
DVMIRROR_SESSION_ENCAPTYPE_ERSPAN2 = _vmkctl.DVMIRROR_SESSION_ENCAPTYPE_ERSPAN2
DVMIRROR_SESSION_ENCAPTYPE_ERSPAN3 = _vmkctl.DVMIRROR_SESSION_ENCAPTYPE_ERSPAN3
class VspanSession(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VspanSession, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VspanSession, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _vmkctl.VspanSession_key_set
    __swig_getmethods__["key"] = _vmkctl.VspanSession_key_get
    if _newclass:key = _swig_property(_vmkctl.VspanSession_key_get, _vmkctl.VspanSession_key_set)
    __swig_setmethods__["name"] = _vmkctl.VspanSession_name_set
    __swig_getmethods__["name"] = _vmkctl.VspanSession_name_get
    if _newclass:name = _swig_property(_vmkctl.VspanSession_name_get, _vmkctl.VspanSession_name_set)
    __swig_setmethods__["snapLen"] = _vmkctl.VspanSession_snapLen_set
    __swig_getmethods__["snapLen"] = _vmkctl.VspanSession_snapLen_get
    if _newclass:snapLen = _swig_property(_vmkctl.VspanSession_snapLen_get, _vmkctl.VspanSession_snapLen_set)
    __swig_setmethods__["encapVlan"] = _vmkctl.VspanSession_encapVlan_set
    __swig_getmethods__["encapVlan"] = _vmkctl.VspanSession_encapVlan_get
    if _newclass:encapVlan = _swig_property(_vmkctl.VspanSession_encapVlan_get, _vmkctl.VspanSession_encapVlan_set)
    __swig_setmethods__["srcInput"] = _vmkctl.VspanSession_srcInput_set
    __swig_getmethods__["srcInput"] = _vmkctl.VspanSession_srcInput_get
    if _newclass:srcInput = _swig_property(_vmkctl.VspanSession_srcInput_get, _vmkctl.VspanSession_srcInput_set)
    __swig_setmethods__["srcOutput"] = _vmkctl.VspanSession_srcOutput_set
    __swig_getmethods__["srcOutput"] = _vmkctl.VspanSession_srcOutput_get
    if _newclass:srcOutput = _swig_property(_vmkctl.VspanSession_srcOutput_get, _vmkctl.VspanSession_srcOutput_set)
    __swig_setmethods__["dstFlags"] = _vmkctl.VspanSession_dstFlags_set
    __swig_getmethods__["dstFlags"] = _vmkctl.VspanSession_dstFlags_get
    if _newclass:dstFlags = _swig_property(_vmkctl.VspanSession_dstFlags_get, _vmkctl.VspanSession_dstFlags_set)
    __swig_setmethods__["srcPortsInput"] = _vmkctl.VspanSession_srcPortsInput_set
    __swig_getmethods__["srcPortsInput"] = _vmkctl.VspanSession_srcPortsInput_get
    if _newclass:srcPortsInput = _swig_property(_vmkctl.VspanSession_srcPortsInput_get, _vmkctl.VspanSession_srcPortsInput_set)
    __swig_setmethods__["srcPortsOutput"] = _vmkctl.VspanSession_srcPortsOutput_set
    __swig_getmethods__["srcPortsOutput"] = _vmkctl.VspanSession_srcPortsOutput_get
    if _newclass:srcPortsOutput = _swig_property(_vmkctl.VspanSession_srcPortsOutput_get, _vmkctl.VspanSession_srcPortsOutput_set)
    __swig_setmethods__["dstPorts"] = _vmkctl.VspanSession_dstPorts_set
    __swig_getmethods__["dstPorts"] = _vmkctl.VspanSession_dstPorts_get
    if _newclass:dstPorts = _swig_property(_vmkctl.VspanSession_dstPorts_get, _vmkctl.VspanSession_dstPorts_set)
    __swig_setmethods__["sessionType"] = _vmkctl.VspanSession_sessionType_set
    __swig_getmethods__["sessionType"] = _vmkctl.VspanSession_sessionType_get
    if _newclass:sessionType = _swig_property(_vmkctl.VspanSession_sessionType_get, _vmkctl.VspanSession_sessionType_set)
    __swig_setmethods__["samplingRate"] = _vmkctl.VspanSession_samplingRate_set
    __swig_getmethods__["samplingRate"] = _vmkctl.VspanSession_samplingRate_get
    if _newclass:samplingRate = _swig_property(_vmkctl.VspanSession_samplingRate_get, _vmkctl.VspanSession_samplingRate_set)
    __swig_setmethods__["encapType"] = _vmkctl.VspanSession_encapType_set
    __swig_getmethods__["encapType"] = _vmkctl.VspanSession_encapType_get
    if _newclass:encapType = _swig_property(_vmkctl.VspanSession_encapType_get, _vmkctl.VspanSession_encapType_set)
    __swig_setmethods__["erspanID"] = _vmkctl.VspanSession_erspanID_set
    __swig_getmethods__["erspanID"] = _vmkctl.VspanSession_erspanID_get
    if _newclass:erspanID = _swig_property(_vmkctl.VspanSession_erspanID_get, _vmkctl.VspanSession_erspanID_set)
    __swig_setmethods__["erspanCOS"] = _vmkctl.VspanSession_erspanCOS_set
    __swig_getmethods__["erspanCOS"] = _vmkctl.VspanSession_erspanCOS_get
    if _newclass:erspanCOS = _swig_property(_vmkctl.VspanSession_erspanCOS_get, _vmkctl.VspanSession_erspanCOS_set)
    __swig_setmethods__["erspanGra"] = _vmkctl.VspanSession_erspanGra_set
    __swig_getmethods__["erspanGra"] = _vmkctl.VspanSession_erspanGra_get
    if _newclass:erspanGra = _swig_property(_vmkctl.VspanSession_erspanGra_get, _vmkctl.VspanSession_erspanGra_set)
    def __init__(self): 
        this = _vmkctl.new_VspanSession()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VspanSession
    __del__ = lambda self : None;
VspanSession_swigregister = _vmkctl.VspanSession_swigregister
VspanSession_swigregister(VspanSession)

class IpfixProp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IpfixProp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IpfixProp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["idleFlowTimeout"] = _vmkctl.IpfixProp_idleFlowTimeout_set
    __swig_getmethods__["idleFlowTimeout"] = _vmkctl.IpfixProp_idleFlowTimeout_get
    if _newclass:idleFlowTimeout = _swig_property(_vmkctl.IpfixProp_idleFlowTimeout_get, _vmkctl.IpfixProp_idleFlowTimeout_set)
    __swig_setmethods__["activeFlowTimeout"] = _vmkctl.IpfixProp_activeFlowTimeout_set
    __swig_getmethods__["activeFlowTimeout"] = _vmkctl.IpfixProp_activeFlowTimeout_get
    if _newclass:activeFlowTimeout = _swig_property(_vmkctl.IpfixProp_activeFlowTimeout_get, _vmkctl.IpfixProp_activeFlowTimeout_set)
    __swig_setmethods__["samplingRate"] = _vmkctl.IpfixProp_samplingRate_set
    __swig_getmethods__["samplingRate"] = _vmkctl.IpfixProp_samplingRate_get
    if _newclass:samplingRate = _swig_property(_vmkctl.IpfixProp_samplingRate_get, _vmkctl.IpfixProp_samplingRate_set)
    __swig_setmethods__["collectorIP"] = _vmkctl.IpfixProp_collectorIP_set
    __swig_getmethods__["collectorIP"] = _vmkctl.IpfixProp_collectorIP_get
    if _newclass:collectorIP = _swig_property(_vmkctl.IpfixProp_collectorIP_get, _vmkctl.IpfixProp_collectorIP_set)
    __swig_setmethods__["collectorPort"] = _vmkctl.IpfixProp_collectorPort_set
    __swig_getmethods__["collectorPort"] = _vmkctl.IpfixProp_collectorPort_get
    if _newclass:collectorPort = _swig_property(_vmkctl.IpfixProp_collectorPort_get, _vmkctl.IpfixProp_collectorPort_set)
    __swig_setmethods__["internalFlowsOnly"] = _vmkctl.IpfixProp_internalFlowsOnly_set
    __swig_getmethods__["internalFlowsOnly"] = _vmkctl.IpfixProp_internalFlowsOnly_get
    if _newclass:internalFlowsOnly = _swig_property(_vmkctl.IpfixProp_internalFlowsOnly_get, _vmkctl.IpfixProp_internalFlowsOnly_set)
    __swig_setmethods__["observationDomainId"] = _vmkctl.IpfixProp_observationDomainId_set
    __swig_getmethods__["observationDomainId"] = _vmkctl.IpfixProp_observationDomainId_get
    if _newclass:observationDomainId = _swig_property(_vmkctl.IpfixProp_observationDomainId_get, _vmkctl.IpfixProp_observationDomainId_set)
    def __init__(self): 
        this = _vmkctl.new_IpfixProp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_IpfixProp
    __del__ = lambda self : None;
IpfixProp_swigregister = _vmkctl.IpfixProp_swigregister
IpfixProp_swigregister(IpfixProp)

DVS_CDP_MODE_CDP = _vmkctl.DVS_CDP_MODE_CDP
DVS_CDP_MODE_LLDP = _vmkctl.DVS_CDP_MODE_LLDP
DVS_CDP_STATUS_DOWN = _vmkctl.DVS_CDP_STATUS_DOWN
DVS_CDP_STATUS_LISTEN = _vmkctl.DVS_CDP_STATUS_LISTEN
DVS_CDP_STATUS_ADVERTISE = _vmkctl.DVS_CDP_STATUS_ADVERTISE
DVS_CDP_STATUS_BOTH = _vmkctl.DVS_CDP_STATUS_BOTH
class CdpParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CdpParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CdpParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mode"] = _vmkctl.CdpParam_mode_set
    __swig_getmethods__["mode"] = _vmkctl.CdpParam_mode_get
    if _newclass:mode = _swig_property(_vmkctl.CdpParam_mode_get, _vmkctl.CdpParam_mode_set)
    __swig_setmethods__["status"] = _vmkctl.CdpParam_status_set
    __swig_getmethods__["status"] = _vmkctl.CdpParam_status_get
    if _newclass:status = _swig_property(_vmkctl.CdpParam_status_get, _vmkctl.CdpParam_status_set)
    def __init__(self): 
        this = _vmkctl.new_CdpParam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_CdpParam
    __del__ = lambda self : None;
CdpParam_swigregister = _vmkctl.CdpParam_swigregister
CdpParam_swigregister(CdpParam)

LACP_MODE_INVALID = _vmkctl.LACP_MODE_INVALID
LACP_MODE_ACTIVE = _vmkctl.LACP_MODE_ACTIVE
LACP_MODE_PASSIVE = _vmkctl.LACP_MODE_PASSIVE
class DVPortLacpPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortLacpPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortLacpPolicy, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_DVPortLacpPolicy()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["enable"] = _vmkctl.DVPortLacpPolicy_enable_set
    __swig_getmethods__["enable"] = _vmkctl.DVPortLacpPolicy_enable_get
    if _newclass:enable = _swig_property(_vmkctl.DVPortLacpPolicy_enable_get, _vmkctl.DVPortLacpPolicy_enable_set)
    __swig_setmethods__["mode"] = _vmkctl.DVPortLacpPolicy_mode_set
    __swig_getmethods__["mode"] = _vmkctl.DVPortLacpPolicy_mode_get
    if _newclass:mode = _swig_property(_vmkctl.DVPortLacpPolicy_mode_get, _vmkctl.DVPortLacpPolicy_mode_set)
    __swig_destroy__ = _vmkctl.delete_DVPortLacpPolicy
    __del__ = lambda self : None;
DVPortLacpPolicy_swigregister = _vmkctl.DVPortLacpPolicy_swigregister
DVPortLacpPolicy_swigregister(DVPortLacpPolicy)

class DvsLacpGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DvsLacpGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DvsLacpGroup, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _vmkctl.DvsLacpGroup_data_set
    __swig_getmethods__["data"] = _vmkctl.DvsLacpGroup_data_get
    if _newclass:data = _swig_property(_vmkctl.DvsLacpGroup_data_get, _vmkctl.DvsLacpGroup_data_set)
    def __init__(self): 
        this = _vmkctl.new_DvsLacpGroup()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DvsLacpGroup
    __del__ = lambda self : None;
DvsLacpGroup_swigregister = _vmkctl.DvsLacpGroup_swigregister
DvsLacpGroup_swigregister(DvsLacpGroup)

DVS_LACP_LB_NONE = _vmkctl.DVS_LACP_LB_NONE
DVS_LACP_LB_DSTMAC = _vmkctl.DVS_LACP_LB_DSTMAC
DVS_LACP_LB_SRCMAC = _vmkctl.DVS_LACP_LB_SRCMAC
DVS_LACP_LB_SRCMAC_DSTMAC = _vmkctl.DVS_LACP_LB_SRCMAC_DSTMAC
DVS_LACP_LB_DSTIP = _vmkctl.DVS_LACP_LB_DSTIP
DVS_LACP_LB_SRCIP = _vmkctl.DVS_LACP_LB_SRCIP
DVS_LACP_LB_SRCIP_DSTIP = _vmkctl.DVS_LACP_LB_SRCIP_DSTIP
DVS_LACP_LB_VLAN = _vmkctl.DVS_LACP_LB_VLAN
DVS_LACP_LB_DSTIP_VLAN = _vmkctl.DVS_LACP_LB_DSTIP_VLAN
DVS_LACP_LB_SRCIP_VLAN = _vmkctl.DVS_LACP_LB_SRCIP_VLAN
DVS_LACP_LB_SRCIP_DSTIP_VLAN = _vmkctl.DVS_LACP_LB_SRCIP_DSTIP_VLAN
DVS_LACP_LB_DSTPORT = _vmkctl.DVS_LACP_LB_DSTPORT
DVS_LACP_LB_SRCPORT = _vmkctl.DVS_LACP_LB_SRCPORT
DVS_LACP_LB_SRCPORT_DSTPORT = _vmkctl.DVS_LACP_LB_SRCPORT_DSTPORT
DVS_LACP_LB_DSTIP_DSTPORT = _vmkctl.DVS_LACP_LB_DSTIP_DSTPORT
DVS_LACP_LB_SRCIP_SRCPORT = _vmkctl.DVS_LACP_LB_SRCIP_SRCPORT
DVS_LACP_LB_SRCIP_DSTIP_SRCPORT_DSTPORT = _vmkctl.DVS_LACP_LB_SRCIP_DSTIP_SRCPORT_DSTPORT
DVS_LACP_LB_DSTIP_DSTPORT_VLAN = _vmkctl.DVS_LACP_LB_DSTIP_DSTPORT_VLAN
DVS_LACP_LB_SRCIP_SRCPORT_VLAN = _vmkctl.DVS_LACP_LB_SRCIP_SRCPORT_VLAN
DVS_LACP_LB_SRCIP_DSTIP_SRCPORT_DSTPORT_VLAN = _vmkctl.DVS_LACP_LB_SRCIP_DSTIP_SRCPORT_DSTPORT_VLAN
DVS_LACP_LB_SRCID = _vmkctl.DVS_LACP_LB_SRCID
class LagConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LagConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LagConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["key"] = _vmkctl.LagConfig_key_set
    __swig_getmethods__["key"] = _vmkctl.LagConfig_key_get
    if _newclass:key = _swig_property(_vmkctl.LagConfig_key_get, _vmkctl.LagConfig_key_set)
    __swig_setmethods__["name"] = _vmkctl.LagConfig_name_set
    __swig_getmethods__["name"] = _vmkctl.LagConfig_name_get
    if _newclass:name = _swig_property(_vmkctl.LagConfig_name_get, _vmkctl.LagConfig_name_set)
    __swig_setmethods__["mode"] = _vmkctl.LagConfig_mode_set
    __swig_getmethods__["mode"] = _vmkctl.LagConfig_mode_get
    if _newclass:mode = _swig_property(_vmkctl.LagConfig_mode_get, _vmkctl.LagConfig_mode_set)
    __swig_setmethods__["loadBalance"] = _vmkctl.LagConfig_loadBalance_set
    __swig_getmethods__["loadBalance"] = _vmkctl.LagConfig_loadBalance_get
    if _newclass:loadBalance = _swig_property(_vmkctl.LagConfig_loadBalance_get, _vmkctl.LagConfig_loadBalance_set)
    __swig_setmethods__["uplinkNum"] = _vmkctl.LagConfig_uplinkNum_set
    __swig_getmethods__["uplinkNum"] = _vmkctl.LagConfig_uplinkNum_get
    if _newclass:uplinkNum = _swig_property(_vmkctl.LagConfig_uplinkNum_get, _vmkctl.LagConfig_uplinkNum_set)
    def __init__(self): 
        this = _vmkctl.new_LagConfig()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_LagConfig
    __del__ = lambda self : None;
LagConfig_swigregister = _vmkctl.LagConfig_swigregister
LagConfig_swigregister(LagConfig)

DVP_LB_TYPE_NONE = _vmkctl.DVP_LB_TYPE_NONE
DVP_LB_TYPE_LB_IP = _vmkctl.DVP_LB_TYPE_LB_IP
DVP_LB_TYPE_LB_SRCMAC = _vmkctl.DVP_LB_TYPE_LB_SRCMAC
DVP_LB_TYPE_LB_SRCID = _vmkctl.DVP_LB_TYPE_LB_SRCID
DVP_LB_TYPE_FO_EXPLICIT = _vmkctl.DVP_LB_TYPE_FO_EXPLICIT
DVP_LB_TYPE_LB_SRCLOAD = _vmkctl.DVP_LB_TYPE_LB_SRCLOAD
class DVPortTeamPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortTeamPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortTeamPolicy, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_DVPortTeamPolicy()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["loadBalance"] = _vmkctl.DVPortTeamPolicy_loadBalance_set
    __swig_getmethods__["loadBalance"] = _vmkctl.DVPortTeamPolicy_loadBalance_get
    if _newclass:loadBalance = _swig_property(_vmkctl.DVPortTeamPolicy_loadBalance_get, _vmkctl.DVPortTeamPolicy_loadBalance_set)
    __swig_setmethods__["lcBeaconState"] = _vmkctl.DVPortTeamPolicy_lcBeaconState_set
    __swig_getmethods__["lcBeaconState"] = _vmkctl.DVPortTeamPolicy_lcBeaconState_get
    if _newclass:lcBeaconState = _swig_property(_vmkctl.DVPortTeamPolicy_lcBeaconState_get, _vmkctl.DVPortTeamPolicy_lcBeaconState_set)
    __swig_setmethods__["lcLinkState"] = _vmkctl.DVPortTeamPolicy_lcLinkState_set
    __swig_getmethods__["lcLinkState"] = _vmkctl.DVPortTeamPolicy_lcLinkState_get
    if _newclass:lcLinkState = _swig_property(_vmkctl.DVPortTeamPolicy_lcLinkState_get, _vmkctl.DVPortTeamPolicy_lcLinkState_set)
    __swig_setmethods__["lcDuplex"] = _vmkctl.DVPortTeamPolicy_lcDuplex_set
    __swig_getmethods__["lcDuplex"] = _vmkctl.DVPortTeamPolicy_lcDuplex_get
    if _newclass:lcDuplex = _swig_property(_vmkctl.DVPortTeamPolicy_lcDuplex_get, _vmkctl.DVPortTeamPolicy_lcDuplex_set)
    __swig_setmethods__["lcLinkError"] = _vmkctl.DVPortTeamPolicy_lcLinkError_set
    __swig_getmethods__["lcLinkError"] = _vmkctl.DVPortTeamPolicy_lcLinkError_get
    if _newclass:lcLinkError = _swig_property(_vmkctl.DVPortTeamPolicy_lcLinkError_get, _vmkctl.DVPortTeamPolicy_lcLinkError_set)
    __swig_setmethods__["lcLinkSpeedExact"] = _vmkctl.DVPortTeamPolicy_lcLinkSpeedExact_set
    __swig_getmethods__["lcLinkSpeedExact"] = _vmkctl.DVPortTeamPolicy_lcLinkSpeedExact_get
    if _newclass:lcLinkSpeedExact = _swig_property(_vmkctl.DVPortTeamPolicy_lcLinkSpeedExact_get, _vmkctl.DVPortTeamPolicy_lcLinkSpeedExact_set)
    __swig_setmethods__["lcLinkSpeedGte"] = _vmkctl.DVPortTeamPolicy_lcLinkSpeedGte_set
    __swig_getmethods__["lcLinkSpeedGte"] = _vmkctl.DVPortTeamPolicy_lcLinkSpeedGte_get
    if _newclass:lcLinkSpeedGte = _swig_property(_vmkctl.DVPortTeamPolicy_lcLinkSpeedGte_get, _vmkctl.DVPortTeamPolicy_lcLinkSpeedGte_set)
    __swig_setmethods__["percentError"] = _vmkctl.DVPortTeamPolicy_percentError_set
    __swig_getmethods__["percentError"] = _vmkctl.DVPortTeamPolicy_percentError_get
    if _newclass:percentError = _swig_property(_vmkctl.DVPortTeamPolicy_percentError_get, _vmkctl.DVPortTeamPolicy_percentError_set)
    __swig_setmethods__["fullDuplex"] = _vmkctl.DVPortTeamPolicy_fullDuplex_set
    __swig_getmethods__["fullDuplex"] = _vmkctl.DVPortTeamPolicy_fullDuplex_get
    if _newclass:fullDuplex = _swig_property(_vmkctl.DVPortTeamPolicy_fullDuplex_get, _vmkctl.DVPortTeamPolicy_fullDuplex_set)
    __swig_setmethods__["speed"] = _vmkctl.DVPortTeamPolicy_speed_set
    __swig_getmethods__["speed"] = _vmkctl.DVPortTeamPolicy_speed_get
    if _newclass:speed = _swig_property(_vmkctl.DVPortTeamPolicy_speed_get, _vmkctl.DVPortTeamPolicy_speed_set)
    __swig_setmethods__["reversePolicy"] = _vmkctl.DVPortTeamPolicy_reversePolicy_set
    __swig_getmethods__["reversePolicy"] = _vmkctl.DVPortTeamPolicy_reversePolicy_get
    if _newclass:reversePolicy = _swig_property(_vmkctl.DVPortTeamPolicy_reversePolicy_get, _vmkctl.DVPortTeamPolicy_reversePolicy_set)
    __swig_setmethods__["bestEffort"] = _vmkctl.DVPortTeamPolicy_bestEffort_set
    __swig_getmethods__["bestEffort"] = _vmkctl.DVPortTeamPolicy_bestEffort_get
    if _newclass:bestEffort = _swig_property(_vmkctl.DVPortTeamPolicy_bestEffort_get, _vmkctl.DVPortTeamPolicy_bestEffort_set)
    __swig_setmethods__["rollingOrder"] = _vmkctl.DVPortTeamPolicy_rollingOrder_set
    __swig_getmethods__["rollingOrder"] = _vmkctl.DVPortTeamPolicy_rollingOrder_get
    if _newclass:rollingOrder = _swig_property(_vmkctl.DVPortTeamPolicy_rollingOrder_get, _vmkctl.DVPortTeamPolicy_rollingOrder_set)
    __swig_setmethods__["shotgun"] = _vmkctl.DVPortTeamPolicy_shotgun_set
    __swig_getmethods__["shotgun"] = _vmkctl.DVPortTeamPolicy_shotgun_get
    if _newclass:shotgun = _swig_property(_vmkctl.DVPortTeamPolicy_shotgun_get, _vmkctl.DVPortTeamPolicy_shotgun_set)
    __swig_setmethods__["notifySwitchOnFailure"] = _vmkctl.DVPortTeamPolicy_notifySwitchOnFailure_set
    __swig_getmethods__["notifySwitchOnFailure"] = _vmkctl.DVPortTeamPolicy_notifySwitchOnFailure_get
    if _newclass:notifySwitchOnFailure = _swig_property(_vmkctl.DVPortTeamPolicy_notifySwitchOnFailure_get, _vmkctl.DVPortTeamPolicy_notifySwitchOnFailure_set)
    __swig_setmethods__["activeUplinks"] = _vmkctl.DVPortTeamPolicy_activeUplinks_set
    __swig_getmethods__["activeUplinks"] = _vmkctl.DVPortTeamPolicy_activeUplinks_get
    if _newclass:activeUplinks = _swig_property(_vmkctl.DVPortTeamPolicy_activeUplinks_get, _vmkctl.DVPortTeamPolicy_activeUplinks_set)
    __swig_setmethods__["standbyUplinks"] = _vmkctl.DVPortTeamPolicy_standbyUplinks_set
    __swig_getmethods__["standbyUplinks"] = _vmkctl.DVPortTeamPolicy_standbyUplinks_get
    if _newclass:standbyUplinks = _swig_property(_vmkctl.DVPortTeamPolicy_standbyUplinks_get, _vmkctl.DVPortTeamPolicy_standbyUplinks_set)
    __swig_destroy__ = _vmkctl.delete_DVPortTeamPolicy
    __del__ = lambda self : None;
DVPortTeamPolicy_swigregister = _vmkctl.DVPortTeamPolicy_swigregister
DVPortTeamPolicy_swigregister(DVPortTeamPolicy)

class DVPortShapingPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortShapingPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortShapingPolicy, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enabled"] = _vmkctl.DVPortShapingPolicy_enabled_set
    __swig_getmethods__["enabled"] = _vmkctl.DVPortShapingPolicy_enabled_get
    if _newclass:enabled = _swig_property(_vmkctl.DVPortShapingPolicy_enabled_get, _vmkctl.DVPortShapingPolicy_enabled_set)
    __swig_setmethods__["averageBps"] = _vmkctl.DVPortShapingPolicy_averageBps_set
    __swig_getmethods__["averageBps"] = _vmkctl.DVPortShapingPolicy_averageBps_get
    if _newclass:averageBps = _swig_property(_vmkctl.DVPortShapingPolicy_averageBps_get, _vmkctl.DVPortShapingPolicy_averageBps_set)
    __swig_setmethods__["peakBps"] = _vmkctl.DVPortShapingPolicy_peakBps_set
    __swig_getmethods__["peakBps"] = _vmkctl.DVPortShapingPolicy_peakBps_get
    if _newclass:peakBps = _swig_property(_vmkctl.DVPortShapingPolicy_peakBps_get, _vmkctl.DVPortShapingPolicy_peakBps_set)
    __swig_setmethods__["burstSize"] = _vmkctl.DVPortShapingPolicy_burstSize_set
    __swig_getmethods__["burstSize"] = _vmkctl.DVPortShapingPolicy_burstSize_get
    if _newclass:burstSize = _swig_property(_vmkctl.DVPortShapingPolicy_burstSize_get, _vmkctl.DVPortShapingPolicy_burstSize_set)
    def __init__(self): 
        this = _vmkctl.new_DVPortShapingPolicy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DVPortShapingPolicy
    __del__ = lambda self : None;
DVPortShapingPolicy_swigregister = _vmkctl.DVPortShapingPolicy_swigregister
DVPortShapingPolicy_swigregister(DVPortShapingPolicy)

class DVPortSecurityPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortSecurityPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortSecurityPolicy, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_DVPortSecurityPolicy()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["allowPromiscuous"] = _vmkctl.DVPortSecurityPolicy_allowPromiscuous_set
    __swig_getmethods__["allowPromiscuous"] = _vmkctl.DVPortSecurityPolicy_allowPromiscuous_get
    if _newclass:allowPromiscuous = _swig_property(_vmkctl.DVPortSecurityPolicy_allowPromiscuous_get, _vmkctl.DVPortSecurityPolicy_allowPromiscuous_set)
    __swig_setmethods__["allowMacChange"] = _vmkctl.DVPortSecurityPolicy_allowMacChange_set
    __swig_getmethods__["allowMacChange"] = _vmkctl.DVPortSecurityPolicy_allowMacChange_get
    if _newclass:allowMacChange = _swig_property(_vmkctl.DVPortSecurityPolicy_allowMacChange_get, _vmkctl.DVPortSecurityPolicy_allowMacChange_set)
    __swig_setmethods__["allowForgedTransmits"] = _vmkctl.DVPortSecurityPolicy_allowForgedTransmits_set
    __swig_getmethods__["allowForgedTransmits"] = _vmkctl.DVPortSecurityPolicy_allowForgedTransmits_get
    if _newclass:allowForgedTransmits = _swig_property(_vmkctl.DVPortSecurityPolicy_allowForgedTransmits_get, _vmkctl.DVPortSecurityPolicy_allowForgedTransmits_set)
    __swig_destroy__ = _vmkctl.delete_DVPortSecurityPolicy
    __del__ = lambda self : None;
DVPortSecurityPolicy_swigregister = _vmkctl.DVPortSecurityPolicy_swigregister
DVPortSecurityPolicy_swigregister(DVPortSecurityPolicy)

DVS_PVLAN_TYPE_PROMISC = _vmkctl.DVS_PVLAN_TYPE_PROMISC
DVS_PVLAN_TYPE_ISOLATED = _vmkctl.DVS_PVLAN_TYPE_ISOLATED
DVS_PVLAN_TYPE_COMMUNITY = _vmkctl.DVS_PVLAN_TYPE_COMMUNITY
class PvlanProp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PvlanProp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PvlanProp, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PvlanProp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["primaryPvlanId"] = _vmkctl.PvlanProp_primaryPvlanId_set
    __swig_getmethods__["primaryPvlanId"] = _vmkctl.PvlanProp_primaryPvlanId_get
    if _newclass:primaryPvlanId = _swig_property(_vmkctl.PvlanProp_primaryPvlanId_get, _vmkctl.PvlanProp_primaryPvlanId_set)
    __swig_setmethods__["secondaryPvlanId"] = _vmkctl.PvlanProp_secondaryPvlanId_set
    __swig_getmethods__["secondaryPvlanId"] = _vmkctl.PvlanProp_secondaryPvlanId_get
    if _newclass:secondaryPvlanId = _swig_property(_vmkctl.PvlanProp_secondaryPvlanId_get, _vmkctl.PvlanProp_secondaryPvlanId_set)
    __swig_setmethods__["portType"] = _vmkctl.PvlanProp_portType_set
    __swig_getmethods__["portType"] = _vmkctl.PvlanProp_portType_get
    if _newclass:portType = _swig_property(_vmkctl.PvlanProp_portType_get, _vmkctl.PvlanProp_portType_set)
    __swig_destroy__ = _vmkctl.delete_PvlanProp
    __del__ = lambda self : None;
PvlanProp_swigregister = _vmkctl.PvlanProp_swigregister
PvlanProp_swigregister(PvlanProp)

class DVPortVlanRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortVlanRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortVlanRange, name)
    __repr__ = _swig_repr
    __swig_setmethods__["minVlanId"] = _vmkctl.DVPortVlanRange_minVlanId_set
    __swig_getmethods__["minVlanId"] = _vmkctl.DVPortVlanRange_minVlanId_get
    if _newclass:minVlanId = _swig_property(_vmkctl.DVPortVlanRange_minVlanId_get, _vmkctl.DVPortVlanRange_minVlanId_set)
    __swig_setmethods__["maxVlanId"] = _vmkctl.DVPortVlanRange_maxVlanId_set
    __swig_getmethods__["maxVlanId"] = _vmkctl.DVPortVlanRange_maxVlanId_get
    if _newclass:maxVlanId = _swig_property(_vmkctl.DVPortVlanRange_maxVlanId_get, _vmkctl.DVPortVlanRange_maxVlanId_set)
    def __init__(self): 
        this = _vmkctl.new_DVPortVlanRange()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DVPortVlanRange
    __del__ = lambda self : None;
DVPortVlanRange_swigregister = _vmkctl.DVPortVlanRange_swigregister
DVPortVlanRange_swigregister(DVPortVlanRange)

class DVPortVlanPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortVlanPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortVlanPolicy, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_DVPortVlanPolicy()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["isTrunking"] = _vmkctl.DVPortVlanPolicy_isTrunking_set
    __swig_getmethods__["isTrunking"] = _vmkctl.DVPortVlanPolicy_isTrunking_get
    if _newclass:isTrunking = _swig_property(_vmkctl.DVPortVlanPolicy_isTrunking_get, _vmkctl.DVPortVlanPolicy_isTrunking_set)
    __swig_setmethods__["isPvlan"] = _vmkctl.DVPortVlanPolicy_isPvlan_set
    __swig_getmethods__["isPvlan"] = _vmkctl.DVPortVlanPolicy_isPvlan_get
    if _newclass:isPvlan = _swig_property(_vmkctl.DVPortVlanPolicy_isPvlan_get, _vmkctl.DVPortVlanPolicy_isPvlan_set)
    __swig_setmethods__["vlanId"] = _vmkctl.DVPortVlanPolicy_vlanId_set
    __swig_getmethods__["vlanId"] = _vmkctl.DVPortVlanPolicy_vlanId_get
    if _newclass:vlanId = _swig_property(_vmkctl.DVPortVlanPolicy_vlanId_get, _vmkctl.DVPortVlanPolicy_vlanId_set)
    __swig_setmethods__["vlanRange"] = _vmkctl.DVPortVlanPolicy_vlanRange_set
    __swig_getmethods__["vlanRange"] = _vmkctl.DVPortVlanPolicy_vlanRange_get
    if _newclass:vlanRange = _swig_property(_vmkctl.DVPortVlanPolicy_vlanRange_get, _vmkctl.DVPortVlanPolicy_vlanRange_set)
    __swig_destroy__ = _vmkctl.delete_DVPortVlanPolicy
    __del__ = lambda self : None;
DVPortVlanPolicy_swigregister = _vmkctl.DVPortVlanPolicy_swigregister
DVPortVlanPolicy_swigregister(DVPortVlanPolicy)

class DVSwitchStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVSwitchStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVSwitchStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numPortsInUse"] = _vmkctl.DVSwitchStats_numPortsInUse_set
    __swig_getmethods__["numPortsInUse"] = _vmkctl.DVSwitchStats_numPortsInUse_get
    if _newclass:numPortsInUse = _swig_property(_vmkctl.DVSwitchStats_numPortsInUse_get, _vmkctl.DVSwitchStats_numPortsInUse_set)
    __swig_setmethods__["version"] = _vmkctl.DVSwitchStats_version_set
    __swig_getmethods__["version"] = _vmkctl.DVSwitchStats_version_get
    if _newclass:version = _swig_property(_vmkctl.DVSwitchStats_version_get, _vmkctl.DVSwitchStats_version_set)
    def __init__(self): 
        this = _vmkctl.new_DVSwitchStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DVSwitchStats
    __del__ = lambda self : None;
DVSwitchStats_swigregister = _vmkctl.DVSwitchStats_swigregister
DVSwitchStats_swigregister(DVSwitchStats)

class DVPortRuntimeVlanInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortRuntimeVlanInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortRuntimeVlanInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_DVPortRuntimeVlanInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["isTrunking"] = _vmkctl.DVPortRuntimeVlanInfo_isTrunking_set
    __swig_getmethods__["isTrunking"] = _vmkctl.DVPortRuntimeVlanInfo_isTrunking_get
    if _newclass:isTrunking = _swig_property(_vmkctl.DVPortRuntimeVlanInfo_isTrunking_get, _vmkctl.DVPortRuntimeVlanInfo_isTrunking_set)
    __swig_setmethods__["vlanId"] = _vmkctl.DVPortRuntimeVlanInfo_vlanId_set
    __swig_getmethods__["vlanId"] = _vmkctl.DVPortRuntimeVlanInfo_vlanId_get
    if _newclass:vlanId = _swig_property(_vmkctl.DVPortRuntimeVlanInfo_vlanId_get, _vmkctl.DVPortRuntimeVlanInfo_vlanId_set)
    __swig_setmethods__["vlanRange"] = _vmkctl.DVPortRuntimeVlanInfo_vlanRange_set
    __swig_getmethods__["vlanRange"] = _vmkctl.DVPortRuntimeVlanInfo_vlanRange_get
    if _newclass:vlanRange = _swig_property(_vmkctl.DVPortRuntimeVlanInfo_vlanRange_get, _vmkctl.DVPortRuntimeVlanInfo_vlanRange_set)
    __swig_destroy__ = _vmkctl.delete_DVPortRuntimeVlanInfo
    __del__ = lambda self : None;
DVPortRuntimeVlanInfo_swigregister = _vmkctl.DVPortRuntimeVlanInfo_swigregister
DVPortRuntimeVlanInfo_swigregister(DVPortRuntimeVlanInfo)

class DVPortStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortStats, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_DVPortStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["packetsInMulticast"] = _vmkctl.DVPortStats_packetsInMulticast_set
    __swig_getmethods__["packetsInMulticast"] = _vmkctl.DVPortStats_packetsInMulticast_get
    if _newclass:packetsInMulticast = _swig_property(_vmkctl.DVPortStats_packetsInMulticast_get, _vmkctl.DVPortStats_packetsInMulticast_set)
    __swig_setmethods__["packetsOutMulticast"] = _vmkctl.DVPortStats_packetsOutMulticast_set
    __swig_getmethods__["packetsOutMulticast"] = _vmkctl.DVPortStats_packetsOutMulticast_get
    if _newclass:packetsOutMulticast = _swig_property(_vmkctl.DVPortStats_packetsOutMulticast_get, _vmkctl.DVPortStats_packetsOutMulticast_set)
    __swig_setmethods__["bytesInMulticast"] = _vmkctl.DVPortStats_bytesInMulticast_set
    __swig_getmethods__["bytesInMulticast"] = _vmkctl.DVPortStats_bytesInMulticast_get
    if _newclass:bytesInMulticast = _swig_property(_vmkctl.DVPortStats_bytesInMulticast_get, _vmkctl.DVPortStats_bytesInMulticast_set)
    __swig_setmethods__["bytesOutMulticast"] = _vmkctl.DVPortStats_bytesOutMulticast_set
    __swig_getmethods__["bytesOutMulticast"] = _vmkctl.DVPortStats_bytesOutMulticast_get
    if _newclass:bytesOutMulticast = _swig_property(_vmkctl.DVPortStats_bytesOutMulticast_get, _vmkctl.DVPortStats_bytesOutMulticast_set)
    __swig_setmethods__["packetsInUnicast"] = _vmkctl.DVPortStats_packetsInUnicast_set
    __swig_getmethods__["packetsInUnicast"] = _vmkctl.DVPortStats_packetsInUnicast_get
    if _newclass:packetsInUnicast = _swig_property(_vmkctl.DVPortStats_packetsInUnicast_get, _vmkctl.DVPortStats_packetsInUnicast_set)
    __swig_setmethods__["packetsOutUnicast"] = _vmkctl.DVPortStats_packetsOutUnicast_set
    __swig_getmethods__["packetsOutUnicast"] = _vmkctl.DVPortStats_packetsOutUnicast_get
    if _newclass:packetsOutUnicast = _swig_property(_vmkctl.DVPortStats_packetsOutUnicast_get, _vmkctl.DVPortStats_packetsOutUnicast_set)
    __swig_setmethods__["bytesInUnicast"] = _vmkctl.DVPortStats_bytesInUnicast_set
    __swig_getmethods__["bytesInUnicast"] = _vmkctl.DVPortStats_bytesInUnicast_get
    if _newclass:bytesInUnicast = _swig_property(_vmkctl.DVPortStats_bytesInUnicast_get, _vmkctl.DVPortStats_bytesInUnicast_set)
    __swig_setmethods__["bytesOutUnicast"] = _vmkctl.DVPortStats_bytesOutUnicast_set
    __swig_getmethods__["bytesOutUnicast"] = _vmkctl.DVPortStats_bytesOutUnicast_get
    if _newclass:bytesOutUnicast = _swig_property(_vmkctl.DVPortStats_bytesOutUnicast_get, _vmkctl.DVPortStats_bytesOutUnicast_set)
    __swig_setmethods__["packetsInBroadcast"] = _vmkctl.DVPortStats_packetsInBroadcast_set
    __swig_getmethods__["packetsInBroadcast"] = _vmkctl.DVPortStats_packetsInBroadcast_get
    if _newclass:packetsInBroadcast = _swig_property(_vmkctl.DVPortStats_packetsInBroadcast_get, _vmkctl.DVPortStats_packetsInBroadcast_set)
    __swig_setmethods__["packetsOutBroadcast"] = _vmkctl.DVPortStats_packetsOutBroadcast_set
    __swig_getmethods__["packetsOutBroadcast"] = _vmkctl.DVPortStats_packetsOutBroadcast_get
    if _newclass:packetsOutBroadcast = _swig_property(_vmkctl.DVPortStats_packetsOutBroadcast_get, _vmkctl.DVPortStats_packetsOutBroadcast_set)
    __swig_setmethods__["bytesInBroadcast"] = _vmkctl.DVPortStats_bytesInBroadcast_set
    __swig_getmethods__["bytesInBroadcast"] = _vmkctl.DVPortStats_bytesInBroadcast_get
    if _newclass:bytesInBroadcast = _swig_property(_vmkctl.DVPortStats_bytesInBroadcast_get, _vmkctl.DVPortStats_bytesInBroadcast_set)
    __swig_setmethods__["bytesOutBroadcast"] = _vmkctl.DVPortStats_bytesOutBroadcast_set
    __swig_getmethods__["bytesOutBroadcast"] = _vmkctl.DVPortStats_bytesOutBroadcast_get
    if _newclass:bytesOutBroadcast = _swig_property(_vmkctl.DVPortStats_bytesOutBroadcast_get, _vmkctl.DVPortStats_bytesOutBroadcast_set)
    __swig_setmethods__["packetsInDropped"] = _vmkctl.DVPortStats_packetsInDropped_set
    __swig_getmethods__["packetsInDropped"] = _vmkctl.DVPortStats_packetsInDropped_get
    if _newclass:packetsInDropped = _swig_property(_vmkctl.DVPortStats_packetsInDropped_get, _vmkctl.DVPortStats_packetsInDropped_set)
    __swig_setmethods__["packetsOutDropped"] = _vmkctl.DVPortStats_packetsOutDropped_set
    __swig_getmethods__["packetsOutDropped"] = _vmkctl.DVPortStats_packetsOutDropped_get
    if _newclass:packetsOutDropped = _swig_property(_vmkctl.DVPortStats_packetsOutDropped_get, _vmkctl.DVPortStats_packetsOutDropped_set)
    __swig_setmethods__["packetsInException"] = _vmkctl.DVPortStats_packetsInException_set
    __swig_getmethods__["packetsInException"] = _vmkctl.DVPortStats_packetsInException_get
    if _newclass:packetsInException = _swig_property(_vmkctl.DVPortStats_packetsInException_get, _vmkctl.DVPortStats_packetsInException_set)
    __swig_setmethods__["packetsOutException"] = _vmkctl.DVPortStats_packetsOutException_set
    __swig_getmethods__["packetsOutException"] = _vmkctl.DVPortStats_packetsOutException_get
    if _newclass:packetsOutException = _swig_property(_vmkctl.DVPortStats_packetsOutException_get, _vmkctl.DVPortStats_packetsOutException_set)
    __swig_setmethods__["pnicBytesIn"] = _vmkctl.DVPortStats_pnicBytesIn_set
    __swig_getmethods__["pnicBytesIn"] = _vmkctl.DVPortStats_pnicBytesIn_get
    if _newclass:pnicBytesIn = _swig_property(_vmkctl.DVPortStats_pnicBytesIn_get, _vmkctl.DVPortStats_pnicBytesIn_set)
    __swig_setmethods__["pnicBytesOut"] = _vmkctl.DVPortStats_pnicBytesOut_set
    __swig_getmethods__["pnicBytesOut"] = _vmkctl.DVPortStats_pnicBytesOut_get
    if _newclass:pnicBytesOut = _swig_property(_vmkctl.DVPortStats_pnicBytesOut_get, _vmkctl.DVPortStats_pnicBytesOut_set)
    __swig_destroy__ = _vmkctl.delete_DVPortStats
    __del__ = lambda self : None;
DVPortStats_swigregister = _vmkctl.DVPortStats_swigregister
DVPortStats_swigregister(DVPortStats)

class DVSResPoolCfg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVSResPoolCfg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVSResPoolCfg, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DVSResPoolCfg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["poolId"] = _vmkctl.DVSResPoolCfg_poolId_set
    __swig_getmethods__["poolId"] = _vmkctl.DVSResPoolCfg_poolId_get
    if _newclass:poolId = _swig_property(_vmkctl.DVSResPoolCfg_poolId_get, _vmkctl.DVSResPoolCfg_poolId_set)
    __swig_setmethods__["reservation"] = _vmkctl.DVSResPoolCfg_reservation_set
    __swig_getmethods__["reservation"] = _vmkctl.DVSResPoolCfg_reservation_get
    if _newclass:reservation = _swig_property(_vmkctl.DVSResPoolCfg_reservation_get, _vmkctl.DVSResPoolCfg_reservation_set)
    __swig_setmethods__["shares"] = _vmkctl.DVSResPoolCfg_shares_set
    __swig_getmethods__["shares"] = _vmkctl.DVSResPoolCfg_shares_get
    if _newclass:shares = _swig_property(_vmkctl.DVSResPoolCfg_shares_get, _vmkctl.DVSResPoolCfg_shares_set)
    __swig_setmethods__["limit"] = _vmkctl.DVSResPoolCfg_limit_set
    __swig_getmethods__["limit"] = _vmkctl.DVSResPoolCfg_limit_get
    if _newclass:limit = _swig_property(_vmkctl.DVSResPoolCfg_limit_get, _vmkctl.DVSResPoolCfg_limit_set)
    __swig_setmethods__["pTag"] = _vmkctl.DVSResPoolCfg_pTag_set
    __swig_getmethods__["pTag"] = _vmkctl.DVSResPoolCfg_pTag_get
    if _newclass:pTag = _swig_property(_vmkctl.DVSResPoolCfg_pTag_get, _vmkctl.DVSResPoolCfg_pTag_set)
    __swig_destroy__ = _vmkctl.delete_DVSResPoolCfg
    __del__ = lambda self : None;
DVSResPoolCfg_swigregister = _vmkctl.DVSResPoolCfg_swigregister
DVSResPoolCfg_swigregister(DVSResPoolCfg)

class DVSResPool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVSResPool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVSResPool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DVSResPool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["id"] = _vmkctl.DVSResPool_id_set
    __swig_getmethods__["id"] = _vmkctl.DVSResPool_id_get
    if _newclass:id = _swig_property(_vmkctl.DVSResPool_id_get, _vmkctl.DVSResPool_id_set)
    __swig_destroy__ = _vmkctl.delete_DVSResPool
    __del__ = lambda self : None;
DVSResPool_swigregister = _vmkctl.DVSResPool_swigregister
DVSResPool_swigregister(DVSResPool)

DVS_OVERLAY_CLASS_TYPE_SINGLETON = _vmkctl.DVS_OVERLAY_CLASS_TYPE_SINGLETON
DVS_OVERLAY_CLASS_TYPE_STACKABLE = _vmkctl.DVS_OVERLAY_CLASS_TYPE_STACKABLE
class DVSOverlayClass(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVSOverlayClass, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVSOverlayClass, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _vmkctl.DVSOverlayClass_name_set
    __swig_getmethods__["name"] = _vmkctl.DVSOverlayClass_name_get
    if _newclass:name = _swig_property(_vmkctl.DVSOverlayClass_name_get, _vmkctl.DVSOverlayClass_name_set)
    __swig_setmethods__["type"] = _vmkctl.DVSOverlayClass_type_set
    __swig_getmethods__["type"] = _vmkctl.DVSOverlayClass_type_get
    if _newclass:type = _swig_property(_vmkctl.DVSOverlayClass_type_get, _vmkctl.DVSOverlayClass_type_set)
    def __init__(self): 
        this = _vmkctl.new_DVSOverlayClass()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DVSOverlayClass
    __del__ = lambda self : None;
DVSOverlayClass_swigregister = _vmkctl.DVSOverlayClass_swigregister
DVSOverlayClass_swigregister(DVSOverlayClass)

class DVSOverlayInstance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVSOverlayInstance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVSOverlayInstance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["depth"] = _vmkctl.DVSOverlayInstance_depth_set
    __swig_getmethods__["depth"] = _vmkctl.DVSOverlayInstance_depth_get
    if _newclass:depth = _swig_property(_vmkctl.DVSOverlayInstance_depth_get, _vmkctl.DVSOverlayInstance_depth_set)
    __swig_setmethods__["overlayClassName"] = _vmkctl.DVSOverlayInstance_overlayClassName_set
    __swig_getmethods__["overlayClassName"] = _vmkctl.DVSOverlayInstance_overlayClassName_get
    if _newclass:overlayClassName = _swig_property(_vmkctl.DVSOverlayInstance_overlayClassName_get, _vmkctl.DVSOverlayInstance_overlayClassName_set)
    def __init__(self): 
        this = _vmkctl.new_DVSOverlayInstance()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DVSOverlayInstance
    __del__ = lambda self : None;
DVSOverlayInstance_swigregister = _vmkctl.DVSOverlayInstance_swigregister
DVSOverlayInstance_swigregister(DVSOverlayInstance)

class DVPortOverlayParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPortOverlayParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DVPortOverlayParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["depth"] = _vmkctl.DVPortOverlayParam_depth_set
    __swig_getmethods__["depth"] = _vmkctl.DVPortOverlayParam_depth_get
    if _newclass:depth = _swig_property(_vmkctl.DVPortOverlayParam_depth_get, _vmkctl.DVPortOverlayParam_depth_set)
    __swig_setmethods__["param"] = _vmkctl.DVPortOverlayParam_param_set
    __swig_getmethods__["param"] = _vmkctl.DVPortOverlayParam_param_get
    if _newclass:param = _swig_property(_vmkctl.DVPortOverlayParam_param_get, _vmkctl.DVPortOverlayParam_param_set)
    def __init__(self): 
        this = _vmkctl.new_DVPortOverlayParam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DVPortOverlayParam
    __del__ = lambda self : None;
DVPortOverlayParam_swigregister = _vmkctl.DVPortOverlayParam_swigregister
DVPortOverlayParam_swigregister(DVPortOverlayParam)

class HealthCheckResult(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HealthCheckResult, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HealthCheckResult, name)
    __repr__ = _swig_repr
    __swig_setmethods__["goodVlan"] = _vmkctl.HealthCheckResult_goodVlan_set
    __swig_getmethods__["goodVlan"] = _vmkctl.HealthCheckResult_goodVlan_get
    if _newclass:goodVlan = _swig_property(_vmkctl.HealthCheckResult_goodVlan_get, _vmkctl.HealthCheckResult_goodVlan_set)
    __swig_setmethods__["badVlan"] = _vmkctl.HealthCheckResult_badVlan_set
    __swig_getmethods__["badVlan"] = _vmkctl.HealthCheckResult_badVlan_get
    if _newclass:badVlan = _swig_property(_vmkctl.HealthCheckResult_badVlan_get, _vmkctl.HealthCheckResult_badVlan_set)
    def __init__(self): 
        this = _vmkctl.new_HealthCheckResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_HealthCheckResult
    __del__ = lambda self : None;
HealthCheckResult_swigregister = _vmkctl.HealthCheckResult_swigregister
HealthCheckResult_swigregister(HealthCheckResult)
INVALID_CONNECTION_ID = cvar.INVALID_CONNECTION_ID

class VnicWorldInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VnicWorldInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VnicWorldInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["worldId"] = _vmkctl.VnicWorldInfo_worldId_set
    __swig_getmethods__["worldId"] = _vmkctl.VnicWorldInfo_worldId_get
    if _newclass:worldId = _swig_property(_vmkctl.VnicWorldInfo_worldId_get, _vmkctl.VnicWorldInfo_worldId_set)
    __swig_setmethods__["vnicIndex"] = _vmkctl.VnicWorldInfo_vnicIndex_set
    __swig_getmethods__["vnicIndex"] = _vmkctl.VnicWorldInfo_vnicIndex_get
    if _newclass:vnicIndex = _swig_property(_vmkctl.VnicWorldInfo_vnicIndex_get, _vmkctl.VnicWorldInfo_vnicIndex_set)
    __swig_setmethods__["reservation"] = _vmkctl.VnicWorldInfo_reservation_set
    __swig_getmethods__["reservation"] = _vmkctl.VnicWorldInfo_reservation_get
    if _newclass:reservation = _swig_property(_vmkctl.VnicWorldInfo_reservation_get, _vmkctl.VnicWorldInfo_reservation_set)
    def __init__(self): 
        this = _vmkctl.new_VnicWorldInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VnicWorldInfo
    __del__ = lambda self : None;
VnicWorldInfo_swigregister = _vmkctl.VnicWorldInfo_swigregister
VnicWorldInfo_swigregister(VnicWorldInfo)

class NetResourceRuntimeInfoOnPnic(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetResourceRuntimeInfoOnPnic, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetResourceRuntimeInfoOnPnic, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pnicDevice"] = _vmkctl.NetResourceRuntimeInfoOnPnic_pnicDevice_set
    __swig_getmethods__["pnicDevice"] = _vmkctl.NetResourceRuntimeInfoOnPnic_pnicDevice_get
    if _newclass:pnicDevice = _swig_property(_vmkctl.NetResourceRuntimeInfoOnPnic_pnicDevice_get, _vmkctl.NetResourceRuntimeInfoOnPnic_pnicDevice_set)
    __swig_setmethods__["totalCapacityForVMTraffic"] = _vmkctl.NetResourceRuntimeInfoOnPnic_totalCapacityForVMTraffic_set
    __swig_getmethods__["totalCapacityForVMTraffic"] = _vmkctl.NetResourceRuntimeInfoOnPnic_totalCapacityForVMTraffic_get
    if _newclass:totalCapacityForVMTraffic = _swig_property(_vmkctl.NetResourceRuntimeInfoOnPnic_totalCapacityForVMTraffic_get, _vmkctl.NetResourceRuntimeInfoOnPnic_totalCapacityForVMTraffic_set)
    __swig_setmethods__["placedVnics"] = _vmkctl.NetResourceRuntimeInfoOnPnic_placedVnics_set
    __swig_getmethods__["placedVnics"] = _vmkctl.NetResourceRuntimeInfoOnPnic_placedVnics_get
    if _newclass:placedVnics = _swig_property(_vmkctl.NetResourceRuntimeInfoOnPnic_placedVnics_get, _vmkctl.NetResourceRuntimeInfoOnPnic_placedVnics_set)
    def __init__(self): 
        this = _vmkctl.new_NetResourceRuntimeInfoOnPnic()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_NetResourceRuntimeInfoOnPnic
    __del__ = lambda self : None;
NetResourceRuntimeInfoOnPnic_swigregister = _vmkctl.NetResourceRuntimeInfoOnPnic_swigregister
NetResourceRuntimeInfoOnPnic_swigregister(NetResourceRuntimeInfoOnPnic)

class IpEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IpEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IpEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vlanId"] = _vmkctl.IpEntry_vlanId_set
    __swig_getmethods__["vlanId"] = _vmkctl.IpEntry_vlanId_get
    if _newclass:vlanId = _swig_property(_vmkctl.IpEntry_vlanId_get, _vmkctl.IpEntry_vlanId_set)
    __swig_setmethods__["macAddress"] = _vmkctl.IpEntry_macAddress_set
    __swig_getmethods__["macAddress"] = _vmkctl.IpEntry_macAddress_get
    if _newclass:macAddress = _swig_property(_vmkctl.IpEntry_macAddress_get, _vmkctl.IpEntry_macAddress_set)
    __swig_setmethods__["ipAddress"] = _vmkctl.IpEntry_ipAddress_set
    __swig_getmethods__["ipAddress"] = _vmkctl.IpEntry_ipAddress_get
    if _newclass:ipAddress = _swig_property(_vmkctl.IpEntry_ipAddress_get, _vmkctl.IpEntry_ipAddress_set)
    def __init__(self): 
        this = _vmkctl.new_IpEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_IpEntry
    __del__ = lambda self : None;
IpEntry_swigregister = _vmkctl.IpEntry_swigregister
IpEntry_swigregister(IpEntry)

IPDISCOVERY_DHCP_SNOOPING = _vmkctl.IPDISCOVERY_DHCP_SNOOPING
IPDISCOVERY_STATIC_IP = _vmkctl.IPDISCOVERY_STATIC_IP
IPDISCOVERY_TRUST_ON_FIRST_USE = _vmkctl.IPDISCOVERY_TRUST_ON_FIRST_USE
IPDISCOVERY_ARP_SNOOPING = _vmkctl.IPDISCOVERY_ARP_SNOOPING
class PortDbEntry(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortDbEntry, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortDbEntry, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ipEntry"] = _vmkctl.PortDbEntry_ipEntry_set
    __swig_getmethods__["ipEntry"] = _vmkctl.PortDbEntry_ipEntry_get
    if _newclass:ipEntry = _swig_property(_vmkctl.PortDbEntry_ipEntry_get, _vmkctl.PortDbEntry_ipEntry_set)
    __swig_setmethods__["discoveryMethod"] = _vmkctl.PortDbEntry_discoveryMethod_set
    __swig_getmethods__["discoveryMethod"] = _vmkctl.PortDbEntry_discoveryMethod_get
    if _newclass:discoveryMethod = _swig_property(_vmkctl.PortDbEntry_discoveryMethod_get, _vmkctl.PortDbEntry_discoveryMethod_set)
    __swig_setmethods__["dhcpLeaseRemaining"] = _vmkctl.PortDbEntry_dhcpLeaseRemaining_set
    __swig_getmethods__["dhcpLeaseRemaining"] = _vmkctl.PortDbEntry_dhcpLeaseRemaining_get
    if _newclass:dhcpLeaseRemaining = _swig_property(_vmkctl.PortDbEntry_dhcpLeaseRemaining_get, _vmkctl.PortDbEntry_dhcpLeaseRemaining_set)
    def __init__(self): 
        this = _vmkctl.new_PortDbEntry()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PortDbEntry
    __del__ = lambda self : None;
PortDbEntry_swigregister = _vmkctl.PortDbEntry_swigregister
PortDbEntry_swigregister(PortDbEntry)

class PortDbClearSpec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortDbClearSpec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortDbClearSpec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["clearAll"] = _vmkctl.PortDbClearSpec_clearAll_set
    __swig_getmethods__["clearAll"] = _vmkctl.PortDbClearSpec_clearAll_get
    if _newclass:clearAll = _swig_property(_vmkctl.PortDbClearSpec_clearAll_get, _vmkctl.PortDbClearSpec_clearAll_set)
    __swig_setmethods__["entriesToRemove"] = _vmkctl.PortDbClearSpec_entriesToRemove_set
    __swig_getmethods__["entriesToRemove"] = _vmkctl.PortDbClearSpec_entriesToRemove_get
    if _newclass:entriesToRemove = _swig_property(_vmkctl.PortDbClearSpec_entriesToRemove_get, _vmkctl.PortDbClearSpec_entriesToRemove_set)
    def __init__(self): 
        this = _vmkctl.new_PortDbClearSpec()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PortDbClearSpec
    __del__ = lambda self : None;
PortDbClearSpec_swigregister = _vmkctl.PortDbClearSpec_swigregister
PortDbClearSpec_swigregister(PortDbClearSpec)

class IpDiscoveryConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IpDiscoveryConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IpDiscoveryConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ipDiscoveryEnabled"] = _vmkctl.IpDiscoveryConfig_ipDiscoveryEnabled_set
    __swig_getmethods__["ipDiscoveryEnabled"] = _vmkctl.IpDiscoveryConfig_ipDiscoveryEnabled_get
    if _newclass:ipDiscoveryEnabled = _swig_property(_vmkctl.IpDiscoveryConfig_ipDiscoveryEnabled_get, _vmkctl.IpDiscoveryConfig_ipDiscoveryEnabled_set)
    __swig_setmethods__["isTrusted"] = _vmkctl.IpDiscoveryConfig_isTrusted_set
    __swig_getmethods__["isTrusted"] = _vmkctl.IpDiscoveryConfig_isTrusted_get
    if _newclass:isTrusted = _swig_property(_vmkctl.IpDiscoveryConfig_isTrusted_get, _vmkctl.IpDiscoveryConfig_isTrusted_set)
    __swig_setmethods__["maxBindingDbSize"] = _vmkctl.IpDiscoveryConfig_maxBindingDbSize_set
    __swig_getmethods__["maxBindingDbSize"] = _vmkctl.IpDiscoveryConfig_maxBindingDbSize_get
    if _newclass:maxBindingDbSize = _swig_property(_vmkctl.IpDiscoveryConfig_maxBindingDbSize_get, _vmkctl.IpDiscoveryConfig_maxBindingDbSize_set)
    __swig_setmethods__["staticIPs"] = _vmkctl.IpDiscoveryConfig_staticIPs_set
    __swig_getmethods__["staticIPs"] = _vmkctl.IpDiscoveryConfig_staticIPs_get
    if _newclass:staticIPs = _swig_property(_vmkctl.IpDiscoveryConfig_staticIPs_get, _vmkctl.IpDiscoveryConfig_staticIPs_set)
    def __init__(self): 
        this = _vmkctl.new_IpDiscoveryConfig()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_IpDiscoveryConfig
    __del__ = lambda self : None;
IpDiscoveryConfig_swigregister = _vmkctl.IpDiscoveryConfig_swigregister
IpDiscoveryConfig_swigregister(IpDiscoveryConfig)

class DAIConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DAIConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DAIConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["enabled"] = _vmkctl.DAIConfig_enabled_set
    __swig_getmethods__["enabled"] = _vmkctl.DAIConfig_enabled_get
    if _newclass:enabled = _swig_property(_vmkctl.DAIConfig_enabled_get, _vmkctl.DAIConfig_enabled_set)
    __swig_setmethods__["arpRateLimit"] = _vmkctl.DAIConfig_arpRateLimit_set
    __swig_getmethods__["arpRateLimit"] = _vmkctl.DAIConfig_arpRateLimit_get
    if _newclass:arpRateLimit = _swig_property(_vmkctl.DAIConfig_arpRateLimit_get, _vmkctl.DAIConfig_arpRateLimit_set)
    __swig_setmethods__["errRateLimit"] = _vmkctl.DAIConfig_errRateLimit_set
    __swig_getmethods__["errRateLimit"] = _vmkctl.DAIConfig_errRateLimit_get
    if _newclass:errRateLimit = _swig_property(_vmkctl.DAIConfig_errRateLimit_get, _vmkctl.DAIConfig_errRateLimit_set)
    __swig_setmethods__["errPeriod"] = _vmkctl.DAIConfig_errPeriod_set
    __swig_getmethods__["errPeriod"] = _vmkctl.DAIConfig_errPeriod_get
    if _newclass:errPeriod = _swig_property(_vmkctl.DAIConfig_errPeriod_get, _vmkctl.DAIConfig_errPeriod_set)
    def __init__(self): 
        this = _vmkctl.new_DAIConfig()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DAIConfig
    __del__ = lambda self : None;
DAIConfig_swigregister = _vmkctl.DAIConfig_swigregister
DAIConfig_swigregister(DAIConfig)

FILTER_CONFIG = _vmkctl.FILTER_CONFIG
TRAFFIC_FILTER_CONFIG = _vmkctl.TRAFFIC_FILTER_CONFIG
class TrafficFilterConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrafficFilterConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrafficFilterConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["agentName"] = _vmkctl.TrafficFilterConfig_agentName_set
    __swig_getmethods__["agentName"] = _vmkctl.TrafficFilterConfig_agentName_get
    if _newclass:agentName = _swig_property(_vmkctl.TrafficFilterConfig_agentName_get, _vmkctl.TrafficFilterConfig_agentName_set)
    __swig_setmethods__["onFailure"] = _vmkctl.TrafficFilterConfig_onFailure_set
    __swig_getmethods__["onFailure"] = _vmkctl.TrafficFilterConfig_onFailure_get
    if _newclass:onFailure = _swig_property(_vmkctl.TrafficFilterConfig_onFailure_get, _vmkctl.TrafficFilterConfig_onFailure_set)
    __swig_setmethods__["slotNumber"] = _vmkctl.TrafficFilterConfig_slotNumber_set
    __swig_getmethods__["slotNumber"] = _vmkctl.TrafficFilterConfig_slotNumber_get
    if _newclass:slotNumber = _swig_property(_vmkctl.TrafficFilterConfig_slotNumber_get, _vmkctl.TrafficFilterConfig_slotNumber_set)
    __swig_setmethods__["filterConfigType"] = _vmkctl.TrafficFilterConfig_filterConfigType_set
    __swig_getmethods__["filterConfigType"] = _vmkctl.TrafficFilterConfig_filterConfigType_get
    if _newclass:filterConfigType = _swig_property(_vmkctl.TrafficFilterConfig_filterConfigType_get, _vmkctl.TrafficFilterConfig_filterConfigType_set)
    __swig_setmethods__["rules"] = _vmkctl.TrafficFilterConfig_rules_set
    __swig_getmethods__["rules"] = _vmkctl.TrafficFilterConfig_rules_get
    if _newclass:rules = _swig_property(_vmkctl.TrafficFilterConfig_rules_get, _vmkctl.TrafficFilterConfig_rules_set)
    __swig_setmethods__["ruleset"] = _vmkctl.TrafficFilterConfig_ruleset_set
    __swig_getmethods__["ruleset"] = _vmkctl.TrafficFilterConfig_ruleset_get
    if _newclass:ruleset = _swig_property(_vmkctl.TrafficFilterConfig_ruleset_get, _vmkctl.TrafficFilterConfig_ruleset_set)
    def __init__(self): 
        this = _vmkctl.new_TrafficFilterConfig()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_TrafficFilterConfig
    __del__ = lambda self : None;
TrafficFilterConfig_swigregister = _vmkctl.TrafficFilterConfig_swigregister
TrafficFilterConfig_swigregister(TrafficFilterConfig)

class TrafficFilterPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TrafficFilterPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TrafficFilterPolicy, name)
    __repr__ = _swig_repr
    __swig_setmethods__["trafficFilterConfigs"] = _vmkctl.TrafficFilterPolicy_trafficFilterConfigs_set
    __swig_getmethods__["trafficFilterConfigs"] = _vmkctl.TrafficFilterPolicy_trafficFilterConfigs_get
    if _newclass:trafficFilterConfigs = _swig_property(_vmkctl.TrafficFilterPolicy_trafficFilterConfigs_get, _vmkctl.TrafficFilterPolicy_trafficFilterConfigs_set)
    def __init__(self): 
        this = _vmkctl.new_TrafficFilterPolicy()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_TrafficFilterPolicy
    __del__ = lambda self : None;
TrafficFilterPolicy_swigregister = _vmkctl.TrafficFilterPolicy_swigregister
TrafficFilterPolicy_swigregister(TrafficFilterPolicy)

class SwitchSecurityConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwitchSecurityConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwitchSecurityConfig, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bpduFilterEnabled"] = _vmkctl.SwitchSecurityConfig_bpduFilterEnabled_set
    __swig_getmethods__["bpduFilterEnabled"] = _vmkctl.SwitchSecurityConfig_bpduFilterEnabled_get
    if _newclass:bpduFilterEnabled = _swig_property(_vmkctl.SwitchSecurityConfig_bpduFilterEnabled_get, _vmkctl.SwitchSecurityConfig_bpduFilterEnabled_set)
    __swig_setmethods__["dhcpServerBlockEnabled"] = _vmkctl.SwitchSecurityConfig_dhcpServerBlockEnabled_set
    __swig_getmethods__["dhcpServerBlockEnabled"] = _vmkctl.SwitchSecurityConfig_dhcpServerBlockEnabled_get
    if _newclass:dhcpServerBlockEnabled = _swig_property(_vmkctl.SwitchSecurityConfig_dhcpServerBlockEnabled_get, _vmkctl.SwitchSecurityConfig_dhcpServerBlockEnabled_set)
    __swig_setmethods__["ipSrcGuardEnabled"] = _vmkctl.SwitchSecurityConfig_ipSrcGuardEnabled_set
    __swig_getmethods__["ipSrcGuardEnabled"] = _vmkctl.SwitchSecurityConfig_ipSrcGuardEnabled_get
    if _newclass:ipSrcGuardEnabled = _swig_property(_vmkctl.SwitchSecurityConfig_ipSrcGuardEnabled_get, _vmkctl.SwitchSecurityConfig_ipSrcGuardEnabled_set)
    __swig_setmethods__["ipDiscoveryConf"] = _vmkctl.SwitchSecurityConfig_ipDiscoveryConf_set
    __swig_getmethods__["ipDiscoveryConf"] = _vmkctl.SwitchSecurityConfig_ipDiscoveryConf_get
    if _newclass:ipDiscoveryConf = _swig_property(_vmkctl.SwitchSecurityConfig_ipDiscoveryConf_get, _vmkctl.SwitchSecurityConfig_ipDiscoveryConf_set)
    __swig_setmethods__["dynamicArpInspectionConf"] = _vmkctl.SwitchSecurityConfig_dynamicArpInspectionConf_set
    __swig_getmethods__["dynamicArpInspectionConf"] = _vmkctl.SwitchSecurityConfig_dynamicArpInspectionConf_get
    if _newclass:dynamicArpInspectionConf = _swig_property(_vmkctl.SwitchSecurityConfig_dynamicArpInspectionConf_get, _vmkctl.SwitchSecurityConfig_dynamicArpInspectionConf_set)
    def __init__(self): 
        this = _vmkctl.new_SwitchSecurityConfig()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_SwitchSecurityConfig
    __del__ = lambda self : None;
SwitchSecurityConfig_swigregister = _vmkctl.SwitchSecurityConfig_swigregister
SwitchSecurityConfig_swigregister(SwitchSecurityConfig)

CHANGED_RXCSUM = _vmkctl.CHANGED_RXCSUM
CHANGED_TXCSUM = _vmkctl.CHANGED_TXCSUM
CHANGED_SG = _vmkctl.CHANGED_SG
CHANGED_TSO = _vmkctl.CHANGED_TSO
CHANGED_UFO = _vmkctl.CHANGED_UFO
CHANGED_GSO = _vmkctl.CHANGED_GSO
CHANGED_IPV4_CSO = _vmkctl.CHANGED_IPV4_CSO
CHANGED_IPV4_TSO = _vmkctl.CHANGED_IPV4_TSO
CHANGED_SCATTER_GATHER = _vmkctl.CHANGED_SCATTER_GATHER
CHANGED_OFFSET_BASED_OFFLOAD = _vmkctl.CHANGED_OFFSET_BASED_OFFLOAD
CHANGED_VXLAN_ENCAP = _vmkctl.CHANGED_VXLAN_ENCAP
CHANGED_IPV6_TSO = _vmkctl.CHANGED_IPV6_TSO
CHANGED_IPV6_TSO_EXT = _vmkctl.CHANGED_IPV6_TSO_EXT
CHANGED_IPV6_CSO = _vmkctl.CHANGED_IPV6_CSO
CHANGED_IPV6_CSO_EXT = _vmkctl.CHANGED_IPV6_CSO_EXT
CHANGED_HIGH_DMA = _vmkctl.CHANGED_HIGH_DMA
CHANGED_SG_SPAN_PAGES = _vmkctl.CHANGED_SG_SPAN_PAGES
CHANGED_VLAN_TAGGING = _vmkctl.CHANGED_VLAN_TAGGING
CHANGED_VLAN_UNTAGGING = _vmkctl.CHANGED_VLAN_UNTAGGING
CHANGED_GENEVE_OFFLOAD = _vmkctl.CHANGED_GENEVE_OFFLOAD
CHANGED_RX = _vmkctl.CHANGED_RX
CHANGED_RXMINI = _vmkctl.CHANGED_RXMINI
CHANGED_RXJUMBO = _vmkctl.CHANGED_RXJUMBO
CHANGED_TX = _vmkctl.CHANGED_TX
CHANGED_RX_QUEUE_PAIR = _vmkctl.CHANGED_RX_QUEUE_PAIR
CHANGED_RX_QUEUE_NO_FEAT = _vmkctl.CHANGED_RX_QUEUE_NO_FEAT
CHANGED_RX_QUEUE_PREEMPTIBLE = _vmkctl.CHANGED_RX_QUEUE_PREEMPTIBLE
CHANGED_RX_QUEUE_LATENCY = _vmkctl.CHANGED_RX_QUEUE_LATENCY
CHANGED_RX_DYNAMIC_LB = _vmkctl.CHANGED_RX_DYNAMIC_LB
CHANGED_DYNAMIC_POOL_LB = _vmkctl.CHANGED_DYNAMIC_POOL_LB
CHANGED_NUMA_IO_AWARE_DYNAMIC_LB = _vmkctl.CHANGED_NUMA_IO_AWARE_DYNAMIC_LB
CHANGED_RSS = _vmkctl.CHANGED_RSS
CHANGED_LRO = _vmkctl.CHANGED_LRO
CHANGED_GENEVE_OAM = _vmkctl.CHANGED_GENEVE_OAM
CONNECTION_AUTO = _vmkctl.CONNECTION_AUTO
CONNECTION_10 = _vmkctl.CONNECTION_10
CONNECTION_100 = _vmkctl.CONNECTION_100
CONNECTION_1000 = _vmkctl.CONNECTION_1000
CONNECTION_2500 = _vmkctl.CONNECTION_2500
CONNECTION_5000 = _vmkctl.CONNECTION_5000
CONNECTION_10000 = _vmkctl.CONNECTION_10000
CONNECTION_20000 = _vmkctl.CONNECTION_20000
CONNECTION_25000 = _vmkctl.CONNECTION_25000
CONNECTION_40000 = _vmkctl.CONNECTION_40000
CONNECTION_50000 = _vmkctl.CONNECTION_50000
CONNECTION_56000 = _vmkctl.CONNECTION_56000
CONNECTION_100000 = _vmkctl.CONNECTION_100000
DUPLEX_MODE_AUTO = _vmkctl.DUPLEX_MODE_AUTO
DUPLEX_MODE_FULL = _vmkctl.DUPLEX_MODE_FULL
DUPLEX_MODE_HALF = _vmkctl.DUPLEX_MODE_HALF
MEDIA_TYPE_NONE = _vmkctl.MEDIA_TYPE_NONE
MEDIA_TYPE_UNKNOWN = _vmkctl.MEDIA_TYPE_UNKNOWN
MEDIA_TYPE_BASE_T = _vmkctl.MEDIA_TYPE_BASE_T
MEDIA_TYPE_BASE_X = _vmkctl.MEDIA_TYPE_BASE_X
MEDIA_TYPE_BASE_KX = _vmkctl.MEDIA_TYPE_BASE_KX
MEDIA_TYPE_BASE_SX = _vmkctl.MEDIA_TYPE_BASE_SX
MEDIA_TYPE_BASE_LX = _vmkctl.MEDIA_TYPE_BASE_LX
MEDIA_TYPE_BASE_KR = _vmkctl.MEDIA_TYPE_BASE_KR
MEDIA_TYPE_BASE_LR = _vmkctl.MEDIA_TYPE_BASE_LR
MEDIA_TYPE_BASE_SR = _vmkctl.MEDIA_TYPE_BASE_SR
MEDIA_TYPE_BASE_ER = _vmkctl.MEDIA_TYPE_BASE_ER
MEDIA_TYPE_BASE_TWINAX = _vmkctl.MEDIA_TYPE_BASE_TWINAX
MEDIA_TYPE_BASE_TWINAX_LONG = _vmkctl.MEDIA_TYPE_BASE_TWINAX_LONG
MEDIA_TYPE_BASE_LRM = _vmkctl.MEDIA_TYPE_BASE_LRM
MEDIA_TYPE_BASE_CR1 = _vmkctl.MEDIA_TYPE_BASE_CR1
MEDIA_TYPE_BASE_KR2 = _vmkctl.MEDIA_TYPE_BASE_KR2
MEDIA_TYPE_BASE_MLD2 = _vmkctl.MEDIA_TYPE_BASE_MLD2
MEDIA_TYPE_BASE_KR4 = _vmkctl.MEDIA_TYPE_BASE_KR4
MEDIA_TYPE_BASE_KX4 = _vmkctl.MEDIA_TYPE_BASE_KX4
MEDIA_TYPE_BASE_CR4 = _vmkctl.MEDIA_TYPE_BASE_CR4
MEDIA_TYPE_BASE_SR4 = _vmkctl.MEDIA_TYPE_BASE_SR4
MEDIA_TYPE_BASE_LR4 = _vmkctl.MEDIA_TYPE_BASE_LR4
MEDIA_TYPE_BASE_R4 = _vmkctl.MEDIA_TYPE_BASE_R4
MEDIA_TYPE_BASE_SGMII = _vmkctl.MEDIA_TYPE_BASE_SGMII
MEDIA_TYPE_BASE_SFI = _vmkctl.MEDIA_TYPE_BASE_SFI
MEDIA_TYPE_BASE_XLPPI = _vmkctl.MEDIA_TYPE_BASE_XLPPI
MEDIA_TYPE_BASE_CX_SGMII = _vmkctl.MEDIA_TYPE_BASE_CX_SGMII
PNICPORT_MODE_TP = _vmkctl.PNICPORT_MODE_TP
PNICPORT_MODE_AUI = _vmkctl.PNICPORT_MODE_AUI
PNICPORT_MODE_BNC = _vmkctl.PNICPORT_MODE_BNC
PNICPORT_MODE_MII = _vmkctl.PNICPORT_MODE_MII
PNICPORT_MODE_FIBRE = _vmkctl.PNICPORT_MODE_FIBRE
PNICPORT_MODE_DA = _vmkctl.PNICPORT_MODE_DA
PNICPORT_MODE_UNKNOWN = _vmkctl.PNICPORT_MODE_UNKNOWN
TRANSCEIVER_MODE_INTERNAL = _vmkctl.TRANSCEIVER_MODE_INTERNAL
TRANSCEIVER_MODE_EXTERNAL = _vmkctl.TRANSCEIVER_MODE_EXTERNAL
TRANSCEIVER_MODE_UNKNOWN = _vmkctl.TRANSCEIVER_MODE_UNKNOWN
WAKEON_MODE_PHY = _vmkctl.WAKEON_MODE_PHY
WAKEON_MODE_UCAST = _vmkctl.WAKEON_MODE_UCAST
WAKEON_MODE_MCAST = _vmkctl.WAKEON_MODE_MCAST
WAKEON_MODE_BCAST = _vmkctl.WAKEON_MODE_BCAST
WAKEON_MODE_ARP = _vmkctl.WAKEON_MODE_ARP
WAKEON_MODE_MAGIC = _vmkctl.WAKEON_MODE_MAGIC
WAKEON_MODE_MAGICSECURE = _vmkctl.WAKEON_MODE_MAGICSECURE
WAKEON_MODE_UNSUPPORTED = _vmkctl.WAKEON_MODE_UNSUPPORTED
WAKEON_MODE_DISABLE = _vmkctl.WAKEON_MODE_DISABLE
class DnsConfig(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DnsConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DnsConfig, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetHostname(self) -> "std::string" : return _vmkctl.DnsConfig_GetHostname(self)
    def SetHostname(self, *args) -> "void" : return _vmkctl.DnsConfig_SetHostname(self, *args)
    def SetIpv6HostInfo(self, *args) -> "void" : return _vmkctl.DnsConfig_SetIpv6HostInfo(self, *args)
    def GetPreferredHostname(self) -> "std::string" : return _vmkctl.DnsConfig_GetPreferredHostname(self)
    def UpdatePreferredHostname(self) -> "void" : return _vmkctl.DnsConfig_UpdatePreferredHostname(self)
    def GetDomain(self) -> "std::string" : return _vmkctl.DnsConfig_GetDomain(self)
    def SetDomain(self, *args) -> "void" : return _vmkctl.DnsConfig_SetDomain(self, *args)
    def AddNameServer(self, *args) -> "void" : return _vmkctl.DnsConfig_AddNameServer(self, *args)
    def RemoveNameServer(self, *args) -> "void" : return _vmkctl.DnsConfig_RemoveNameServer(self, *args)
    def RemoveNameServers(self) -> "void" : return _vmkctl.DnsConfig_RemoveNameServers(self)
    def GetNameServers(self) -> "std::vector< Ipv4Address,std::allocator< HostCtl::Network::Ipv4Address > >" : return _vmkctl.DnsConfig_GetNameServers(self)
    def GetIpv6NameServers(self, dontRefresh : 'bool' = False) -> "std::vector< Ipv6Address,std::allocator< HostCtl::Network::Ipv6Address > >" : return _vmkctl.DnsConfig_GetIpv6NameServers(self, dontRefresh)
    def GetAllNameServers(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.DnsConfig_GetAllNameServers(self)
    def AddSearchDomain(self, *args) -> "void" : return _vmkctl.DnsConfig_AddSearchDomain(self, *args)
    def RemoveSearchDomain(self, *args) -> "void" : return _vmkctl.DnsConfig_RemoveSearchDomain(self, *args)
    def GetSearchDomains(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.DnsConfig_GetSearchDomains(self)
    def SetSearchDomainsString(self, *args) -> "void" : return _vmkctl.DnsConfig_SetSearchDomainsString(self, *args)
    def GetSearchDomainsString(self) -> "std::string" : return _vmkctl.DnsConfig_GetSearchDomainsString(self)
    def SetNetstackInstanceKey(self, *args) -> "void" : return _vmkctl.DnsConfig_SetNetstackInstanceKey(self, *args)
    def GetNetstackInstanceKey(self) -> "std::string" : return _vmkctl.DnsConfig_GetNetstackInstanceKey(self)
    __swig_destroy__ = _vmkctl.delete_DnsConfig
    __del__ = lambda self : None;
DnsConfig_swigregister = _vmkctl.DnsConfig_swigregister
DnsConfig_swigregister(DnsConfig)

class DnsConfigImpl(DnsConfig,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [DnsConfig,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DnsConfigImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DnsConfig,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DnsConfigImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DnsConfigImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DnsConfigImpl
    __del__ = lambda self : None;
    def GetHostname(self) -> "std::string" : return _vmkctl.DnsConfigImpl_GetHostname(self)
    def SetHostname(self, *args) -> "void" : return _vmkctl.DnsConfigImpl_SetHostname(self, *args)
    def SetIpv6HostInfo(self, *args) -> "void" : return _vmkctl.DnsConfigImpl_SetIpv6HostInfo(self, *args)
    def GetPreferredHostname(self) -> "std::string" : return _vmkctl.DnsConfigImpl_GetPreferredHostname(self)
    def UpdatePreferredHostname(self) -> "void" : return _vmkctl.DnsConfigImpl_UpdatePreferredHostname(self)
    def GetDomain(self) -> "std::string" : return _vmkctl.DnsConfigImpl_GetDomain(self)
    def SetDomain(self, *args) -> "void" : return _vmkctl.DnsConfigImpl_SetDomain(self, *args)
    def AddNameServer(self, *args) -> "void" : return _vmkctl.DnsConfigImpl_AddNameServer(self, *args)
    def RemoveNameServer(self, *args) -> "void" : return _vmkctl.DnsConfigImpl_RemoveNameServer(self, *args)
    def RemoveNameServers(self) -> "void" : return _vmkctl.DnsConfigImpl_RemoveNameServers(self)
    def RemoveIpv6NameServers(self) -> "void" : return _vmkctl.DnsConfigImpl_RemoveIpv6NameServers(self)
    def GetNameServers(self) -> "std::vector< HostCtl::Network::Ipv4Address,std::allocator< HostCtl::Network::Ipv4Address > >" : return _vmkctl.DnsConfigImpl_GetNameServers(self)
    def GetIpv6NameServers(self, dontRefresh : 'bool' = False) -> "std::vector< HostCtl::Network::Ipv6Address,std::allocator< HostCtl::Network::Ipv6Address > >" : return _vmkctl.DnsConfigImpl_GetIpv6NameServers(self, dontRefresh)
    def SetNetstackInstanceKey(self, *args) -> "void" : return _vmkctl.DnsConfigImpl_SetNetstackInstanceKey(self, *args)
    def GetNetstackInstanceKey(self) -> "std::string" : return _vmkctl.DnsConfigImpl_GetNetstackInstanceKey(self)
    def GetAllNameServers(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.DnsConfigImpl_GetAllNameServers(self)
    def AddSearchDomain(self, *args) -> "void" : return _vmkctl.DnsConfigImpl_AddSearchDomain(self, *args)
    def RemoveSearchDomain(self, *args) -> "void" : return _vmkctl.DnsConfigImpl_RemoveSearchDomain(self, *args)
    def GetSearchDomains(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.DnsConfigImpl_GetSearchDomains(self)
    def SetSearchDomainsString(self, *args) -> "void" : return _vmkctl.DnsConfigImpl_SetSearchDomainsString(self, *args)
    def GetSearchDomainsString(self) -> "std::string" : return _vmkctl.DnsConfigImpl_GetSearchDomainsString(self)
    def Refresh(self) -> "void" : return _vmkctl.DnsConfigImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.DnsConfigImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.DnsConfigImpl_Print(self, *args)
    def SaveConfig(self) -> "void" : return _vmkctl.DnsConfigImpl_SaveConfig(self)
    def LoadConfig(self) -> "void" : return _vmkctl.DnsConfigImpl_LoadConfig(self)
    def SetFqdn(self, *args) -> "void" : return _vmkctl.DnsConfigImpl_SetFqdn(self, *args)
    def GetFqdn(self) -> "std::string" : return _vmkctl.DnsConfigImpl_GetFqdn(self)
DnsConfigImpl_swigregister = _vmkctl.DnsConfigImpl_swigregister
DnsConfigImpl_swigregister(DnsConfigImpl)

class PortAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortAddress, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PortAddress(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetStringAddress(self) -> "std::string" : return _vmkctl.PortAddress_GetStringAddress(self)
    __swig_destroy__ = _vmkctl.delete_PortAddress
    __del__ = lambda self : None;
PortAddress_swigregister = _vmkctl.PortAddress_swigregister
PortAddress_swigregister(PortAddress)

class HostAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostAddress, name)
    __repr__ = _swig_repr
    HOST_ADDR_TYPE_IPV4 = _vmkctl.HostAddress_HOST_ADDR_TYPE_IPV4
    HOST_ADDR_TYPE_IPV6 = _vmkctl.HostAddress_HOST_ADDR_TYPE_IPV6
    HOST_ADDR_TYPE_FDN = _vmkctl.HostAddress_HOST_ADDR_TYPE_FDN
    HOST_ADDR_TYPE_NONE = _vmkctl.HostAddress_HOST_ADDR_TYPE_NONE
    def __init__(self, *args): 
        this = _vmkctl.new_HostAddress(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetHostAddress(self) -> "std::string" : return _vmkctl.HostAddress_GetHostAddress(self)
    def GetHostAddressType(self) -> "HostCtl::Network::HostAddress::HostAddressType" : return _vmkctl.HostAddress_GetHostAddressType(self)
    def __eq__(self, *args) -> "bool" : return _vmkctl.HostAddress___eq__(self, *args)
    def GetIpv4Address(self) -> "Ipv4Address" : return _vmkctl.HostAddress_GetIpv4Address(self)
    def GetHostName(self) -> "std::string" : return _vmkctl.HostAddress_GetHostName(self)
    __swig_destroy__ = _vmkctl.delete_HostAddress
    __del__ = lambda self : None;
HostAddress_swigregister = _vmkctl.HostAddress_swigregister
HostAddress_swigregister(HostAddress)

IP_ADDRESS_V4 = _vmkctl.IP_ADDRESS_V4
IP_ADDRESS_V6 = _vmkctl.IP_ADDRESS_V6
class IpAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IpAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IpAddress, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetStringAddress(self) -> "std::string" : return _vmkctl.IpAddress_GetStringAddress(self)
    __swig_destroy__ = _vmkctl.delete_IpAddress
    __del__ = lambda self : None;
    def IsValidAddress(self) -> "bool" : return _vmkctl.IpAddress_IsValidAddress(self)
    def IsLoopbackAddress(self) -> "bool" : return _vmkctl.IpAddress_IsLoopbackAddress(self)
    def IsAllzeroAddress(self) -> "bool" : return _vmkctl.IpAddress_IsAllzeroAddress(self)
    def IsValidNetmask(self) -> "bool" : return _vmkctl.IpAddress_IsValidNetmask(self)
    def IsValidMulticastAddress(self) -> "bool" : return _vmkctl.IpAddress_IsValidMulticastAddress(self)
    def GetIpAddressType(self) -> "HostCtl::Network::IpAddressType" : return _vmkctl.IpAddress_GetIpAddressType(self)
IpAddress_swigregister = _vmkctl.IpAddress_swigregister
IpAddress_swigregister(IpAddress)

class Ipv4Address(IpAddress):
    __swig_setmethods__ = {}
    for _s in [IpAddress]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv4Address, name, value)
    __swig_getmethods__ = {}
    for _s in [IpAddress]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv4Address, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_Ipv4Address(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_Ipv4Address
    __del__ = lambda self : None;
    def __eq__(self, *args) -> "bool" : return _vmkctl.Ipv4Address___eq__(self, *args)
    def GetStringAddress(self) -> "std::string" : return _vmkctl.Ipv4Address_GetStringAddress(self)
    def GetBinaryAddress(self) -> "uint32" : return _vmkctl.Ipv4Address_GetBinaryAddress(self)
    def SetBinaryAddress(self, *args) -> "void" : return _vmkctl.Ipv4Address_SetBinaryAddress(self, *args)
    __swig_getmethods__["IsValidAddress"] = lambda x: _vmkctl.Ipv4Address_IsValidAddress
    if _newclass:IsValidAddress = staticmethod(_vmkctl.Ipv4Address_IsValidAddress)
    def IsLoopbackAddress(self) -> "bool" : return _vmkctl.Ipv4Address_IsLoopbackAddress(self)
    def IsAllzeroAddress(self) -> "bool" : return _vmkctl.Ipv4Address_IsAllzeroAddress(self)
    def IsValidNetmask(self) -> "bool" : return _vmkctl.Ipv4Address_IsValidNetmask(self)
    def IsValidMulticastAddress(self) -> "bool" : return _vmkctl.Ipv4Address_IsValidMulticastAddress(self)
    __swig_getmethods__["AddressFromUint"] = lambda x: _vmkctl.Ipv4Address_AddressFromUint
    if _newclass:AddressFromUint = staticmethod(_vmkctl.Ipv4Address_AddressFromUint)
    __swig_getmethods__["UintFromAddress"] = lambda x: _vmkctl.Ipv4Address_UintFromAddress
    if _newclass:UintFromAddress = staticmethod(_vmkctl.Ipv4Address_UintFromAddress)
    def GetIpAddressType(self) -> "HostCtl::Network::IpAddressType" : return _vmkctl.Ipv4Address_GetIpAddressType(self)
Ipv4Address_swigregister = _vmkctl.Ipv4Address_swigregister
Ipv4Address_swigregister(Ipv4Address)

def Ipv4Address_IsValidAddress(*args) -> "bool" :
  return _vmkctl.Ipv4Address_IsValidAddress(*args)
Ipv4Address_IsValidAddress = _vmkctl.Ipv4Address_IsValidAddress

def Ipv4Address_AddressFromUint(*args) -> "std::string" :
  return _vmkctl.Ipv4Address_AddressFromUint(*args)
Ipv4Address_AddressFromUint = _vmkctl.Ipv4Address_AddressFromUint

def Ipv4Address_UintFromAddress(*args) -> "uint32" :
  return _vmkctl.Ipv4Address_UintFromAddress(*args)
Ipv4Address_UintFromAddress = _vmkctl.Ipv4Address_UintFromAddress

class Ipv4Network(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv4Network, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv4Network, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_Ipv4Network(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_Ipv4Network
    __del__ = lambda self : None;
    def __eq__(self, *args) -> "bool" : return _vmkctl.Ipv4Network___eq__(self, *args)
    def __lt__(self, *args) -> "int" : return _vmkctl.Ipv4Network___lt__(self, *args)
    def GetStringAddress(self) -> "std::string" : return _vmkctl.Ipv4Network_GetStringAddress(self)
    def GetNetmask(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.Ipv4Network_GetNetmask(self)
    def SetNetmask(self, *args) -> "void" : return _vmkctl.Ipv4Network_SetNetmask(self, *args)
    def GetNetwork(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.Ipv4Network_GetNetwork(self)
    def SetNetwork(self, *args) -> "void" : return _vmkctl.Ipv4Network_SetNetwork(self, *args)
    def IsValidNetworkAddress(self, *args) -> "bool" : return _vmkctl.Ipv4Network_IsValidNetworkAddress(self, *args)
    __swig_getmethods__["NetmaskFromNumber"] = lambda x: _vmkctl.Ipv4Network_NetmaskFromNumber
    if _newclass:NetmaskFromNumber = staticmethod(_vmkctl.Ipv4Network_NetmaskFromNumber)
    __swig_getmethods__["NumberFromNetmask"] = lambda x: _vmkctl.Ipv4Network_NumberFromNetmask
    if _newclass:NumberFromNetmask = staticmethod(_vmkctl.Ipv4Network_NumberFromNetmask)
Ipv4Network_swigregister = _vmkctl.Ipv4Network_swigregister
Ipv4Network_swigregister(Ipv4Network)

def Ipv4Network_NetmaskFromNumber(*args) -> "HostCtl::Network::Ipv4Address" :
  return _vmkctl.Ipv4Network_NetmaskFromNumber(*args)
Ipv4Network_NetmaskFromNumber = _vmkctl.Ipv4Network_NetmaskFromNumber

def Ipv4Network_NumberFromNetmask(*args) -> "uint32" :
  return _vmkctl.Ipv4Network_NumberFromNetmask(*args)
Ipv4Network_NumberFromNetmask = _vmkctl.Ipv4Network_NumberFromNetmask

VMK_SOCKET_IOCTL_DATA_IF_NAME_LEN = _vmkctl.VMK_SOCKET_IOCTL_DATA_IF_NAME_LEN
class Ipv6_addr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv6_addr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv6_addr, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addr"] = _vmkctl.Ipv6_addr_addr_set
    __swig_getmethods__["addr"] = _vmkctl.Ipv6_addr_addr_get
    if _newclass:addr = _swig_property(_vmkctl.Ipv6_addr_addr_get, _vmkctl.Ipv6_addr_addr_set)
    def __init__(self): 
        this = _vmkctl.new_Ipv6_addr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_Ipv6_addr
    __del__ = lambda self : None;
Ipv6_addr_swigregister = _vmkctl.Ipv6_addr_swigregister
Ipv6_addr_swigregister(Ipv6_addr)

class Ipv6Address(IpAddress):
    __swig_setmethods__ = {}
    for _s in [IpAddress]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv6Address, name, value)
    __swig_getmethods__ = {}
    for _s in [IpAddress]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv6Address, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_Ipv6Address(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_Ipv6Address
    __del__ = lambda self : None;
    def GetStringAddress(self) -> "std::string" : return _vmkctl.Ipv6Address_GetStringAddress(self)
    __swig_getmethods__["TruncateScopeInAddress"] = lambda x: _vmkctl.Ipv6Address_TruncateScopeInAddress
    if _newclass:TruncateScopeInAddress = staticmethod(_vmkctl.Ipv6Address_TruncateScopeInAddress)
    def GetScopedStringAddress(self) -> "std::string" : return _vmkctl.Ipv6Address_GetScopedStringAddress(self)
    def GetBinaryAddress(self) -> "HostCtl::Network::Ipv6_addr" : return _vmkctl.Ipv6Address_GetBinaryAddress(self)
    def SetBinaryAddress(self, *args) -> "void" : return _vmkctl.Ipv6Address_SetBinaryAddress(self, *args)
    __swig_getmethods__["IsValidAddress"] = lambda x: _vmkctl.Ipv6Address_IsValidAddress
    if _newclass:IsValidAddress = staticmethod(_vmkctl.Ipv6Address_IsValidAddress)
    def IsLoopbackAddress(self) -> "bool" : return _vmkctl.Ipv6Address_IsLoopbackAddress(self)
    def IsAllzeroAddress(self) -> "bool" : return _vmkctl.Ipv6Address_IsAllzeroAddress(self)
    def IsValidMulticastAddress(self) -> "bool" : return _vmkctl.Ipv6Address_IsValidMulticastAddress(self)
    def IsValidNetmask(self) -> "bool" : return _vmkctl.Ipv6Address_IsValidNetmask(self)
    __swig_getmethods__["AddressFromUint"] = lambda x: _vmkctl.Ipv6Address_AddressFromUint
    if _newclass:AddressFromUint = staticmethod(_vmkctl.Ipv6Address_AddressFromUint)
    __swig_getmethods__["UintFromAddress"] = lambda x: _vmkctl.Ipv6Address_UintFromAddress
    if _newclass:UintFromAddress = staticmethod(_vmkctl.Ipv6Address_UintFromAddress)
    def __eq__(self, *args) -> "bool" : return _vmkctl.Ipv6Address___eq__(self, *args)
    def GetIpAddressType(self) -> "HostCtl::Network::IpAddressType" : return _vmkctl.Ipv6Address_GetIpAddressType(self)
    def IsScopedAddress(self) -> "bool" : return _vmkctl.Ipv6Address_IsScopedAddress(self)
Ipv6Address_swigregister = _vmkctl.Ipv6Address_swigregister
Ipv6Address_swigregister(Ipv6Address)

def Ipv6Address_TruncateScopeInAddress(*args) -> "void" :
  return _vmkctl.Ipv6Address_TruncateScopeInAddress(*args)
Ipv6Address_TruncateScopeInAddress = _vmkctl.Ipv6Address_TruncateScopeInAddress

def Ipv6Address_IsValidAddress(*args) -> "bool" :
  return _vmkctl.Ipv6Address_IsValidAddress(*args)
Ipv6Address_IsValidAddress = _vmkctl.Ipv6Address_IsValidAddress

def Ipv6Address_AddressFromUint(*args) -> "std::string" :
  return _vmkctl.Ipv6Address_AddressFromUint(*args)
Ipv6Address_AddressFromUint = _vmkctl.Ipv6Address_AddressFromUint

def Ipv6Address_UintFromAddress(*args) -> "HostCtl::Network::Ipv6_addr" :
  return _vmkctl.Ipv6Address_UintFromAddress(*args)
Ipv6Address_UintFromAddress = _vmkctl.Ipv6Address_UintFromAddress

IP6_ADDRESS_STATIC = _vmkctl.IP6_ADDRESS_STATIC
IP6_ADDRESS_ANYCAST = _vmkctl.IP6_ADDRESS_ANYCAST
IP6_ADDRESS_TENTATIVE = _vmkctl.IP6_ADDRESS_TENTATIVE
IP6_ADDRESS_DUPLICATED = _vmkctl.IP6_ADDRESS_DUPLICATED
IP6_ADDRESS_DETACHED = _vmkctl.IP6_ADDRESS_DETACHED
IP6_ADDRESS_DEPRECATED = _vmkctl.IP6_ADDRESS_DEPRECATED
IP6_ADDRESS_NODAD = _vmkctl.IP6_ADDRESS_NODAD
IP6_ADDRESS_AUTOCONF = _vmkctl.IP6_ADDRESS_AUTOCONF
IP6_ADDRESS_TEMPORARY = _vmkctl.IP6_ADDRESS_TEMPORARY
IP6_ADDRESS_DHCP = _vmkctl.IP6_ADDRESS_DHCP
IP6_ADDRESS_PREFFERRED = _vmkctl.IP6_ADDRESS_PREFFERRED
IP6_ADDRESS_UNSET = _vmkctl.IP6_ADDRESS_UNSET
IP6_SCOPE_NODELOCAL = _vmkctl.IP6_SCOPE_NODELOCAL
IP6_SCOPE_LINKLOCAL = _vmkctl.IP6_SCOPE_LINKLOCAL
IP6_SCOPE_SITELOCAL = _vmkctl.IP6_SCOPE_SITELOCAL
IP6_SCOPE_GLOBAL = _vmkctl.IP6_SCOPE_GLOBAL
IP6_SCOPE_UNSET = _vmkctl.IP6_SCOPE_UNSET
class Ipv6Network(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv6Network, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv6Network, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_Ipv6Network(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_Ipv6Network
    __del__ = lambda self : None;
    def __eq__(self, *args) -> "bool" : return _vmkctl.Ipv6Network___eq__(self, *args)
    def __lt__(self, *args) -> "bool" : return _vmkctl.Ipv6Network___lt__(self, *args)
    def GetStringAddress(self) -> "std::string" : return _vmkctl.Ipv6Network_GetStringAddress(self)
    def SetNetmask(self, *args) -> "void" : return _vmkctl.Ipv6Network_SetNetmask(self, *args)
    def GetNetmask(self) -> "uint32" : return _vmkctl.Ipv6Network_GetNetmask(self)
    def GetAddress(self) -> "HostCtl::Network::Ipv6Address" : return _vmkctl.Ipv6Network_GetAddress(self)
    def SetAddress(self, *args) -> "void" : return _vmkctl.Ipv6Network_SetAddress(self, *args)
    def IsValid(self) -> "bool" : return _vmkctl.Ipv6Network_IsValid(self)
    def IsValidNetworkAddress(self, *args) -> "bool" : return _vmkctl.Ipv6Network_IsValidNetworkAddress(self, *args)
    def GetIpv6AddressType(self) -> "HostCtl::Network::Ipv6AddressType" : return _vmkctl.Ipv6Network_GetIpv6AddressType(self)
    def SetIpv6AddressType(self, *args) -> "void" : return _vmkctl.Ipv6Network_SetIpv6AddressType(self, *args)
    def GetIpv6AddressStatus(self) -> "HostCtl::Network::Ipv6AddressType" : return _vmkctl.Ipv6Network_GetIpv6AddressStatus(self)
    def SetIpv6AddressStatus(self, *args) -> "void" : return _vmkctl.Ipv6Network_SetIpv6AddressStatus(self, *args)
    def GetLifeTime(self) -> "uint32" : return _vmkctl.Ipv6Network_GetLifeTime(self)
    def SetLifeTime(self, *args) -> "void" : return _vmkctl.Ipv6Network_SetLifeTime(self, *args)
    def GetIpv6Scope(self) -> "HostCtl::Network::Ipv6Scope" : return _vmkctl.Ipv6Network_GetIpv6Scope(self)
    def SetIpv6Scope(self, *args) -> "void" : return _vmkctl.Ipv6Network_SetIpv6Scope(self, *args)
    def SetUseDhcp(self) -> "void" : return _vmkctl.Ipv6Network_SetUseDhcp(self)
    def SetUseRouterAdvertised(self) -> "void" : return _vmkctl.Ipv6Network_SetUseRouterAdvertised(self)
    __swig_getmethods__["NetmaskFromNumber"] = lambda x: _vmkctl.Ipv6Network_NetmaskFromNumber
    if _newclass:NetmaskFromNumber = staticmethod(_vmkctl.Ipv6Network_NetmaskFromNumber)
    __swig_getmethods__["NumberFromNetmask"] = lambda x: _vmkctl.Ipv6Network_NumberFromNetmask
    if _newclass:NumberFromNetmask = staticmethod(_vmkctl.Ipv6Network_NumberFromNetmask)
    __swig_getmethods__["IsValidAddressAndNetmask"] = lambda x: _vmkctl.Ipv6Network_IsValidAddressAndNetmask
    if _newclass:IsValidAddressAndNetmask = staticmethod(_vmkctl.Ipv6Network_IsValidAddressAndNetmask)
Ipv6Network_swigregister = _vmkctl.Ipv6Network_swigregister
Ipv6Network_swigregister(Ipv6Network)

def Ipv6Network_NetmaskFromNumber(*args) -> "HostCtl::Network::Ipv6Address" :
  return _vmkctl.Ipv6Network_NetmaskFromNumber(*args)
Ipv6Network_NetmaskFromNumber = _vmkctl.Ipv6Network_NetmaskFromNumber

def Ipv6Network_NumberFromNetmask(*args) -> "uint32" :
  return _vmkctl.Ipv6Network_NumberFromNetmask(*args)
Ipv6Network_NumberFromNetmask = _vmkctl.Ipv6Network_NumberFromNetmask

def Ipv6Network_IsValidAddressAndNetmask(*args) -> "bool" :
  return _vmkctl.Ipv6Network_IsValidAddressAndNetmask(*args)
Ipv6Network_IsValidAddressAndNetmask = _vmkctl.Ipv6Network_IsValidAddressAndNetmask

class IpConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IpConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IpConfig, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_IpConfig(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_IpConfig
    __del__ = lambda self : None;
    def SetUseDhcp(self, *args) -> "void" : return _vmkctl.IpConfig_SetUseDhcp(self, *args)
    def SetUseIpv6Dhcp(self, *args) -> "void" : return _vmkctl.IpConfig_SetUseIpv6Dhcp(self, *args)
    def GetUseDhcp(self) -> "bool" : return _vmkctl.IpConfig_GetUseDhcp(self)
    def GetUseIpv6Dhcp(self) -> "bool" : return _vmkctl.IpConfig_GetUseIpv6Dhcp(self)
    def SetUseIpv6RouterAdvertised(self, *args) -> "void" : return _vmkctl.IpConfig_SetUseIpv6RouterAdvertised(self, *args)
    def GetUseIpv6RouterAdvertised(self) -> "bool" : return _vmkctl.IpConfig_GetUseIpv6RouterAdvertised(self)
    def SetUseIpv6(self, *args) -> "void" : return _vmkctl.IpConfig_SetUseIpv6(self, *args)
    def GetUseIpv6(self) -> "bool" : return _vmkctl.IpConfig_GetUseIpv6(self)
    def IsUsingDhcp(self) -> "bool" : return _vmkctl.IpConfig_IsUsingDhcp(self)
    def GetDhcpDns(self) -> "bool" : return _vmkctl.IpConfig_GetDhcpDns(self)
    def SetDhcpDns(self, *args) -> "void" : return _vmkctl.IpConfig_SetDhcpDns(self, *args)
    def SetIpv4UseNone(self) -> "void" : return _vmkctl.IpConfig_SetIpv4UseNone(self)
    def GetIpv4UseNone(self) -> "bool" : return _vmkctl.IpConfig_GetIpv4UseNone(self)
    def GetIpv4Address(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.IpConfig_GetIpv4Address(self)
    def GetIpv6Network(self) -> "std::vector< HostCtl::Network::Ipv6Network,std::allocator< HostCtl::Network::Ipv6Network > >" : return _vmkctl.IpConfig_GetIpv6Network(self)
    def SetIpv4Address(self, *args) -> "void" : return _vmkctl.IpConfig_SetIpv4Address(self, *args)
    def GetIpv4Gateway(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.IpConfig_GetIpv4Gateway(self)
    def SetIpv4Gateway(self, *args) -> "void" : return _vmkctl.IpConfig_SetIpv4Gateway(self, *args)
    def AddIpv6Network(self, *args) -> "void" : return _vmkctl.IpConfig_AddIpv6Network(self, *args)
    def RemoveIpv6Network(self, *args) -> "void" : return _vmkctl.IpConfig_RemoveIpv6Network(self, *args)
    def SetIpv6Gateway(self, *args) -> "void" : return _vmkctl.IpConfig_SetIpv6Gateway(self, *args)
    def GetIpv6Gateway(self) -> "HostCtl::Network::Ipv6Address" : return _vmkctl.IpConfig_GetIpv6Gateway(self)
    def GetIpv4Netmask(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.IpConfig_GetIpv4Netmask(self)
    def SetIpv4Netmask(self, *args) -> "void" : return _vmkctl.IpConfig_SetIpv4Netmask(self, *args)
    def GetIpv4Broadcast(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.IpConfig_GetIpv4Broadcast(self)
    def SetIpv4Broadcast(self, *args) -> "void" : return _vmkctl.IpConfig_SetIpv4Broadcast(self, *args)
    def IsValid(self) -> "bool" : return _vmkctl.IpConfig_IsValid(self)
    def IsIpv4Valid(self) -> "bool" : return _vmkctl.IpConfig_IsIpv4Valid(self)
    def IsIpv6Valid(self) -> "bool" : return _vmkctl.IpConfig_IsIpv6Valid(self)
    def ContainsAddress(self, *args) -> "bool" : return _vmkctl.IpConfig_ContainsAddress(self, *args)
IpConfig_swigregister = _vmkctl.IpConfig_swigregister
IpConfig_swigregister(IpConfig)

class LinkCriteriaSelectionPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LinkCriteriaSelectionPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LinkCriteriaSelectionPolicy, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_LinkCriteriaSelectionPolicy()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["GetDefaultPolicy"] = lambda x: _vmkctl.LinkCriteriaSelectionPolicy_GetDefaultPolicy
    if _newclass:GetDefaultPolicy = staticmethod(_vmkctl.LinkCriteriaSelectionPolicy_GetDefaultPolicy)
    __swig_destroy__ = _vmkctl.delete_LinkCriteriaSelectionPolicy
    __del__ = lambda self : None;
    def Derive(self, *args) -> "void" : return _vmkctl.LinkCriteriaSelectionPolicy_Derive(self, *args)
    def IsSet(self) -> "bool" : return _vmkctl.LinkCriteriaSelectionPolicy_IsSet(self)
    def SetMinimumSpeed(self, *args) -> "void" : return _vmkctl.LinkCriteriaSelectionPolicy_SetMinimumSpeed(self, *args)
    def UnsetMinimumSpeed(self) -> "void" : return _vmkctl.LinkCriteriaSelectionPolicy_UnsetMinimumSpeed(self)
    def HasMinimumSpeed(self) -> "bool" : return _vmkctl.LinkCriteriaSelectionPolicy_HasMinimumSpeed(self)
    def GetMinimumSpeed(self) -> "uint32" : return _vmkctl.LinkCriteriaSelectionPolicy_GetMinimumSpeed(self)
    def IgnoreMinimumSpeed(self) -> "bool" : return _vmkctl.LinkCriteriaSelectionPolicy_IgnoreMinimumSpeed(self)
    def SetExactSpeed(self, *args) -> "void" : return _vmkctl.LinkCriteriaSelectionPolicy_SetExactSpeed(self, *args)
    def UnsetExactSpeed(self) -> "void" : return _vmkctl.LinkCriteriaSelectionPolicy_UnsetExactSpeed(self)
    def HasExactSpeed(self) -> "bool" : return _vmkctl.LinkCriteriaSelectionPolicy_HasExactSpeed(self)
    def GetExactSpeed(self) -> "uint32" : return _vmkctl.LinkCriteriaSelectionPolicy_GetExactSpeed(self)
    def IgnoreExactSpeed(self) -> "bool" : return _vmkctl.LinkCriteriaSelectionPolicy_IgnoreExactSpeed(self)
    def SetPercentError(self, *args) -> "void" : return _vmkctl.LinkCriteriaSelectionPolicy_SetPercentError(self, *args)
    def UnsetPercentError(self) -> "void" : return _vmkctl.LinkCriteriaSelectionPolicy_UnsetPercentError(self)
    def HasPercentError(self) -> "bool" : return _vmkctl.LinkCriteriaSelectionPolicy_HasPercentError(self)
    def GetPercentError(self) -> "uint32" : return _vmkctl.LinkCriteriaSelectionPolicy_GetPercentError(self)
    def IgnorePercentError(self) -> "bool" : return _vmkctl.LinkCriteriaSelectionPolicy_IgnorePercentError(self)
    def SetDuplex(self, *args) -> "void" : return _vmkctl.LinkCriteriaSelectionPolicy_SetDuplex(self, *args)
    def UnsetDuplex(self) -> "void" : return _vmkctl.LinkCriteriaSelectionPolicy_UnsetDuplex(self)
    def HasDuplex(self) -> "bool" : return _vmkctl.LinkCriteriaSelectionPolicy_HasDuplex(self)
    def GetDuplex(self) -> "bool" : return _vmkctl.LinkCriteriaSelectionPolicy_GetDuplex(self)
    def IgnoreDuplex(self) -> "bool" : return _vmkctl.LinkCriteriaSelectionPolicy_IgnoreDuplex(self)
    def SetBeacon(self, ignore : 'bool' = False) -> "void" : return _vmkctl.LinkCriteriaSelectionPolicy_SetBeacon(self, ignore)
    def UnsetBeacon(self) -> "void" : return _vmkctl.LinkCriteriaSelectionPolicy_UnsetBeacon(self)
    def HasBeacon(self) -> "bool" : return _vmkctl.LinkCriteriaSelectionPolicy_HasBeacon(self)
    def IgnoreBeacon(self) -> "bool" : return _vmkctl.LinkCriteriaSelectionPolicy_IgnoreBeacon(self)
LinkCriteriaSelectionPolicy_swigregister = _vmkctl.LinkCriteriaSelectionPolicy_swigregister
LinkCriteriaSelectionPolicy_swigregister(LinkCriteriaSelectionPolicy)
LinkCriteriaSelectionPolicy.IGNORE_STR = _vmkctl.cvar.LinkCriteriaSelectionPolicy_IGNORE_STR

def LinkCriteriaSelectionPolicy_GetDefaultPolicy() -> "HostCtl::Network::LinkCriteriaSelectionPolicy" :
  return _vmkctl.LinkCriteriaSelectionPolicy_GetDefaultPolicy()
LinkCriteriaSelectionPolicy_GetDefaultPolicy = _vmkctl.LinkCriteriaSelectionPolicy_GetDefaultPolicy

class MacAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MacAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MacAddress, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_MacAddress(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_MacAddress
    __del__ = lambda self : None;
    def GetBinaryAddress(self, *args) -> "void" : return _vmkctl.MacAddress_GetBinaryAddress(self, *args)
    def GetStringAddress(self) -> "std::string" : return _vmkctl.MacAddress_GetStringAddress(self)
    __swig_getmethods__["IsValid"] = lambda x: _vmkctl.MacAddress_IsValid
    if _newclass:IsValid = staticmethod(_vmkctl.MacAddress_IsValid)
MacAddress_swigregister = _vmkctl.MacAddress_swigregister
MacAddress_swigregister(MacAddress)

def MacAddress_IsValid(*args) -> "bool" :
  return _vmkctl.MacAddress_IsValid(*args)
MacAddress_IsValid = _vmkctl.MacAddress_IsValid

class MacAddressGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MacAddressGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MacAddressGenerator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["GetSingleton"] = lambda x: _vmkctl.MacAddressGenerator_GetSingleton
    if _newclass:GetSingleton = staticmethod(_vmkctl.MacAddressGenerator_GetSingleton)
    def GenerateVmkNicMacAddr(self, *args) -> "HostCtl::Network::MacAddress" : return _vmkctl.MacAddressGenerator_GenerateVmkNicMacAddr(self, *args)
    def GenerateVswifMacAddr(self, *args) -> "HostCtl::Network::MacAddress" : return _vmkctl.MacAddressGenerator_GenerateVswifMacAddr(self, *args)
    def GeneratePnicPseudoMac(self, *args) -> "HostCtl::Network::MacAddress" : return _vmkctl.MacAddressGenerator_GeneratePnicPseudoMac(self, *args)
    def GenerateBackupMacAddr(self, *args) -> "HostCtl::Network::MacAddress" : return _vmkctl.MacAddressGenerator_GenerateBackupMacAddr(self, *args)
    __swig_destroy__ = _vmkctl.delete_MacAddressGenerator
    __del__ = lambda self : None;
MacAddressGenerator_swigregister = _vmkctl.MacAddressGenerator_swigregister
MacAddressGenerator_swigregister(MacAddressGenerator)

def MacAddressGenerator_GetSingleton() -> "VmkCtl::Network::MacAddressGenerator const *" :
  return _vmkctl.MacAddressGenerator_GetSingleton()
MacAddressGenerator_GetSingleton = _vmkctl.MacAddressGenerator_GetSingleton

class NetworkPolicySerializer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkPolicySerializer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkPolicySerializer, name)
    __repr__ = _swig_repr
    __swig_getmethods__["LoadConfiguration"] = lambda x: _vmkctl.NetworkPolicySerializer_LoadConfiguration
    if _newclass:LoadConfiguration = staticmethod(_vmkctl.NetworkPolicySerializer_LoadConfiguration)
    __swig_getmethods__["SaveConfiguration"] = lambda x: _vmkctl.NetworkPolicySerializer_SaveConfiguration
    if _newclass:SaveConfiguration = staticmethod(_vmkctl.NetworkPolicySerializer_SaveConfiguration)
    __swig_setmethods__["TeamPolicyStr"] = _vmkctl.NetworkPolicySerializer_TeamPolicyStr_set
    __swig_getmethods__["TeamPolicyStr"] = _vmkctl.NetworkPolicySerializer_TeamPolicyStr_get
    if _newclass:TeamPolicyStr = _swig_property(_vmkctl.NetworkPolicySerializer_TeamPolicyStr_get, _vmkctl.NetworkPolicySerializer_TeamPolicyStr_set)
    def __init__(self): 
        this = _vmkctl.new_NetworkPolicySerializer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_NetworkPolicySerializer
    __del__ = lambda self : None;
NetworkPolicySerializer_swigregister = _vmkctl.NetworkPolicySerializer_swigregister
NetworkPolicySerializer_swigregister(NetworkPolicySerializer)

def NetworkPolicySerializer_LoadConfiguration(*args) -> "bool" :
  return _vmkctl.NetworkPolicySerializer_LoadConfiguration(*args)
NetworkPolicySerializer_LoadConfiguration = _vmkctl.NetworkPolicySerializer_LoadConfiguration

def NetworkPolicySerializer_SaveConfiguration(*args) -> "void" :
  return _vmkctl.NetworkPolicySerializer_SaveConfiguration(*args)
NetworkPolicySerializer_SaveConfiguration = _vmkctl.NetworkPolicySerializer_SaveConfiguration

class NicCapabilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NicCapabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NicCapabilities, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_NicCapabilities(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["GetDefaultPolicy"] = lambda x: _vmkctl.NicCapabilities_GetDefaultPolicy
    if _newclass:GetDefaultPolicy = staticmethod(_vmkctl.NicCapabilities_GetDefaultPolicy)
    def Derive(self, *args) -> "void" : return _vmkctl.NicCapabilities_Derive(self, *args)
    def IsSet(self) -> "bool" : return _vmkctl.NicCapabilities_IsSet(self)
    def UnsetAll(self) -> "void" : return _vmkctl.NicCapabilities_UnsetAll(self)
    def GetFlags(self) -> "uint64" : return _vmkctl.NicCapabilities_GetFlags(self)
    def GetMask(self) -> "uint64" : return _vmkctl.NicCapabilities_GetMask(self)
    def SetVlanTag(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetVlanTag(self, *args)
    def UnsetVlanTag(self) -> "void" : return _vmkctl.NicCapabilities_UnsetVlanTag(self)
    def HasVlanTag(self) -> "bool" : return _vmkctl.NicCapabilities_HasVlanTag(self)
    def GetVlanTag(self) -> "bool" : return _vmkctl.NicCapabilities_GetVlanTag(self)
    def SetVlanUntag(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetVlanUntag(self, *args)
    def UnsetVlanUntag(self) -> "void" : return _vmkctl.NicCapabilities_UnsetVlanUntag(self)
    def HasVlanUntag(self) -> "bool" : return _vmkctl.NicCapabilities_HasVlanUntag(self)
    def GetVlanUntag(self) -> "bool" : return _vmkctl.NicCapabilities_GetVlanUntag(self)
    def SetChecksumOffload(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetChecksumOffload(self, *args)
    def UnsetChecksumOffload(self) -> "void" : return _vmkctl.NicCapabilities_UnsetChecksumOffload(self)
    def HasChecksumOffload(self) -> "bool" : return _vmkctl.NicCapabilities_HasChecksumOffload(self)
    def GetChecksumOffload(self) -> "bool" : return _vmkctl.NicCapabilities_GetChecksumOffload(self)
    def SetTcpSegmentationOffload(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetTcpSegmentationOffload(self, *args)
    def UnsetTcpSegmentationOffload(self) -> "void" : return _vmkctl.NicCapabilities_UnsetTcpSegmentationOffload(self)
    def HasTcpSegmentationOffload(self) -> "bool" : return _vmkctl.NicCapabilities_HasTcpSegmentationOffload(self)
    def GetTcpSegmentationOffload(self) -> "bool" : return _vmkctl.NicCapabilities_GetTcpSegmentationOffload(self)
    def SetScatterGatherTx(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetScatterGatherTx(self, *args)
    def UnsetScatterGatherTx(self) -> "void" : return _vmkctl.NicCapabilities_UnsetScatterGatherTx(self)
    def HasScatterGatherTx(self) -> "bool" : return _vmkctl.NicCapabilities_HasScatterGatherTx(self)
    def GetScatterGatherTx(self) -> "bool" : return _vmkctl.NicCapabilities_GetScatterGatherTx(self)
    def SetHighDMA(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetHighDMA(self, *args)
    def UnsetHighDMA(self) -> "void" : return _vmkctl.NicCapabilities_UnsetHighDMA(self)
    def HasHighDMA(self) -> "bool" : return _vmkctl.NicCapabilities_HasHighDMA(self)
    def GetHighDMA(self) -> "bool" : return _vmkctl.NicCapabilities_GetHighDMA(self)
    def SetScatterGatherSpanPagesTx(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetScatterGatherSpanPagesTx(self, *args)
    def UnsetScatterGatherSpanPagesTx(self) -> "void" : return _vmkctl.NicCapabilities_UnsetScatterGatherSpanPagesTx(self)
    def HasScatterGatherSpanPagesTx(self) -> "bool" : return _vmkctl.NicCapabilities_HasScatterGatherSpanPagesTx(self)
    def GetScatterGatherSpanPagesTx(self) -> "bool" : return _vmkctl.NicCapabilities_GetScatterGatherSpanPagesTx(self)
    def SetChecksumOffloadIPv6(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetChecksumOffloadIPv6(self, *args)
    def UnsetChecksumOffloadIPv6(self) -> "void" : return _vmkctl.NicCapabilities_UnsetChecksumOffloadIPv6(self)
    def HasChecksumOffloadIPv6(self) -> "bool" : return _vmkctl.NicCapabilities_HasChecksumOffloadIPv6(self)
    def GetChecksumOffloadIPv6(self) -> "bool" : return _vmkctl.NicCapabilities_GetChecksumOffloadIPv6(self)
    def SetTcpSegmentationOffloadIPv6(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetTcpSegmentationOffloadIPv6(self, *args)
    def UnsetTcpSegmentationOffloadIPv6(self) -> "void" : return _vmkctl.NicCapabilities_UnsetTcpSegmentationOffloadIPv6(self)
    def HasTcpSegmentationOffloadIPv6(self) -> "bool" : return _vmkctl.NicCapabilities_HasTcpSegmentationOffloadIPv6(self)
    def GetTcpSegmentationOffloadIPv6(self) -> "bool" : return _vmkctl.NicCapabilities_GetTcpSegmentationOffloadIPv6(self)
    def SetTcpSegmentationOffload256k(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetTcpSegmentationOffload256k(self, *args)
    def UnsetTcpSegmentationOffload256k(self) -> "void" : return _vmkctl.NicCapabilities_UnsetTcpSegmentationOffload256k(self)
    def HasTcpSegmentationOffload256k(self) -> "bool" : return _vmkctl.NicCapabilities_HasTcpSegmentationOffload256k(self)
    def GetTcpSegmentationOffload256k(self) -> "bool" : return _vmkctl.NicCapabilities_GetTcpSegmentationOffload256k(self)
    def SetUplinkReadOnlyInetHeaders(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetUplinkReadOnlyInetHeaders(self, *args)
    def UnsetUplinkReadOnlyInetHeaders(self) -> "void" : return _vmkctl.NicCapabilities_UnsetUplinkReadOnlyInetHeaders(self)
    def HasUplinkReadOnlyInetHeaders(self) -> "bool" : return _vmkctl.NicCapabilities_HasUplinkReadOnlyInetHeaders(self)
    def GetUplinkReadOnlyInetHeaders(self) -> "bool" : return _vmkctl.NicCapabilities_GetUplinkReadOnlyInetHeaders(self)
    def SetUPT(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetUPT(self, *args)
    def UnsetUPT(self) -> "void" : return _vmkctl.NicCapabilities_UnsetUPT(self)
    def HasUPT(self) -> "bool" : return _vmkctl.NicCapabilities_HasUPT(self)
    def GetUPT(self) -> "bool" : return _vmkctl.NicCapabilities_GetUPT(self)
    def SetENCAP(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetENCAP(self, *args)
    def UnsetENCAP(self) -> "void" : return _vmkctl.NicCapabilities_UnsetENCAP(self)
    def HasENCAP(self) -> "bool" : return _vmkctl.NicCapabilities_HasENCAP(self)
    def GetENCAP(self) -> "bool" : return _vmkctl.NicCapabilities_GetENCAP(self)
    def SetDCB(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetDCB(self, *args)
    def UnsetDCB(self) -> "void" : return _vmkctl.NicCapabilities_UnsetDCB(self)
    def HasDCB(self) -> "bool" : return _vmkctl.NicCapabilities_HasDCB(self)
    def GetDCB(self) -> "bool" : return _vmkctl.NicCapabilities_GetDCB(self)
    def SetOffsetBasedOffload(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetOffsetBasedOffload(self, *args)
    def UnsetOffsetBasedOffload(self) -> "void" : return _vmkctl.NicCapabilities_UnsetOffsetBasedOffload(self)
    def HasOffsetBasedOffload(self) -> "bool" : return _vmkctl.NicCapabilities_HasOffsetBasedOffload(self)
    def GetOffsetBasedOffload(self) -> "bool" : return _vmkctl.NicCapabilities_GetOffsetBasedOffload(self)
    def SetChecksumOffloadIPv6ExtHdrs(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetChecksumOffloadIPv6ExtHdrs(self, *args)
    def UnsetChecksumOffloadIPv6ExtHdrs(self) -> "void" : return _vmkctl.NicCapabilities_UnsetChecksumOffloadIPv6ExtHdrs(self)
    def HasChecksumOffloadIPv6ExtHdrs(self) -> "bool" : return _vmkctl.NicCapabilities_HasChecksumOffloadIPv6ExtHdrs(self)
    def GetChecksumOffloadIPv6ExtHdrs(self) -> "bool" : return _vmkctl.NicCapabilities_GetChecksumOffloadIPv6ExtHdrs(self)
    def SetTcpSegmentationOffloadIPv6ExtHdrs(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetTcpSegmentationOffloadIPv6ExtHdrs(self, *args)
    def UnsetTcpSegmentationOffloadIPv6ExtHdrs(self) -> "void" : return _vmkctl.NicCapabilities_UnsetTcpSegmentationOffloadIPv6ExtHdrs(self)
    def HasTcpSegmentationOffloadIPv6ExtHdrs(self) -> "bool" : return _vmkctl.NicCapabilities_HasTcpSegmentationOffloadIPv6ExtHdrs(self)
    def GetTcpSegmentationOffloadIPv6ExtHdrs(self) -> "bool" : return _vmkctl.NicCapabilities_GetTcpSegmentationOffloadIPv6ExtHdrs(self)
    def SetSched(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetSched(self, *args)
    def UnsetSched(self) -> "void" : return _vmkctl.NicCapabilities_UnsetSched(self)
    def HasSched(self) -> "bool" : return _vmkctl.NicCapabilities_HasSched(self)
    def GetSched(self) -> "bool" : return _vmkctl.NicCapabilities_GetSched(self)
    def SetSRIOV(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetSRIOV(self, *args)
    def UnsetSRIOV(self) -> "void" : return _vmkctl.NicCapabilities_UnsetSRIOV(self)
    def HasSRIOV(self) -> "bool" : return _vmkctl.NicCapabilities_HasSRIOV(self)
    def GetSRIOV(self) -> "bool" : return _vmkctl.NicCapabilities_GetSRIOV(self)
    def SetSwLRO(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetSwLRO(self, *args)
    def UnsetSwLRO(self) -> "void" : return _vmkctl.NicCapabilities_UnsetSwLRO(self)
    def HasSwLRO(self) -> "bool" : return _vmkctl.NicCapabilities_HasSwLRO(self)
    def GetSwLRO(self) -> "bool" : return _vmkctl.NicCapabilities_GetSwLRO(self)
    def SetAdjustHeaderAlignment(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetAdjustHeaderAlignment(self, *args)
    def UnsetAdjustHeaderAlignment(self) -> "void" : return _vmkctl.NicCapabilities_UnsetAdjustHeaderAlignment(self)
    def HasAdjustHeaderAlignment(self) -> "bool" : return _vmkctl.NicCapabilities_HasAdjustHeaderAlignment(self)
    def GetAdjustHeaderAlignment(self) -> "bool" : return _vmkctl.NicCapabilities_GetAdjustHeaderAlignment(self)
    def SetGenericOffload(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetGenericOffload(self, *args)
    def UnsetGenericOffload(self) -> "void" : return _vmkctl.NicCapabilities_UnsetGenericOffload(self)
    def HasGenericOffload(self) -> "bool" : return _vmkctl.NicCapabilities_HasGenericOffload(self)
    def GetGenericOffload(self) -> "bool" : return _vmkctl.NicCapabilities_GetGenericOffload(self)
    def SetGeneveOffload(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetGeneveOffload(self, *args)
    def UnsetGeneveOffload(self) -> "void" : return _vmkctl.NicCapabilities_UnsetGeneveOffload(self)
    def HasGeneveOffload(self) -> "bool" : return _vmkctl.NicCapabilities_HasGeneveOffload(self)
    def GetGeneveOffload(self) -> "bool" : return _vmkctl.NicCapabilities_GetGeneveOffload(self)
    def SetHW_DCB(self, *args) -> "void" : return _vmkctl.NicCapabilities_SetHW_DCB(self, *args)
    def UnsetHW_DCB(self) -> "void" : return _vmkctl.NicCapabilities_UnsetHW_DCB(self)
    def HasHW_DCB(self) -> "bool" : return _vmkctl.NicCapabilities_HasHW_DCB(self)
    def GetHW_DCB(self) -> "bool" : return _vmkctl.NicCapabilities_GetHW_DCB(self)
    __swig_destroy__ = _vmkctl.delete_NicCapabilities
    __del__ = lambda self : None;
NicCapabilities_swigregister = _vmkctl.NicCapabilities_swigregister
NicCapabilities_swigregister(NicCapabilities)

def Network_Print(*args) -> "void" :
  return _vmkctl.Network_Print(*args)
Network_Print = _vmkctl.Network_Print

def NicCapabilities_GetDefaultPolicy() -> "HostCtl::Network::NicCapabilities" :
  return _vmkctl.NicCapabilities_GetDefaultPolicy()
NicCapabilities_GetDefaultPolicy = _vmkctl.NicCapabilities_GetDefaultPolicy

class NicTeamingPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NicTeamingPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NicTeamingPolicy, name)
    __repr__ = _swig_repr
    TEAM_POLICY_NONE = _vmkctl.NicTeamingPolicy_TEAM_POLICY_NONE
    TEAM_POLICY_LB_IP = _vmkctl.NicTeamingPolicy_TEAM_POLICY_LB_IP
    TEAM_POLICY_LB_SRCMAC = _vmkctl.NicTeamingPolicy_TEAM_POLICY_LB_SRCMAC
    TEAM_POLICY_LB_SRCID = _vmkctl.NicTeamingPolicy_TEAM_POLICY_LB_SRCID
    TEAM_POLICY_FO_EXPLICIT = _vmkctl.NicTeamingPolicy_TEAM_POLICY_FO_EXPLICIT
    TEAM_POLICY_LAST_ELEMENT = _vmkctl.NicTeamingPolicy_TEAM_POLICY_LAST_ELEMENT
    DEF_TEAM_POLICY = _vmkctl.NicTeamingPolicy_DEF_TEAM_POLICY
    def __init__(self): 
        this = _vmkctl.new_NicTeamingPolicy()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["GetDefaultPolicy"] = lambda x: _vmkctl.NicTeamingPolicy_GetDefaultPolicy
    if _newclass:GetDefaultPolicy = staticmethod(_vmkctl.NicTeamingPolicy_GetDefaultPolicy)
    __swig_destroy__ = _vmkctl.delete_NicTeamingPolicy
    __del__ = lambda self : None;
    def Derive(self, *args) -> "void" : return _vmkctl.NicTeamingPolicy_Derive(self, *args)
    def IsSet(self) -> "bool" : return _vmkctl.NicTeamingPolicy_IsSet(self)
    def UnsetAll(self) -> "void" : return _vmkctl.NicTeamingPolicy_UnsetAll(self)
    def SetTeamingPolicy(self, *args) -> "void" : return _vmkctl.NicTeamingPolicy_SetTeamingPolicy(self, *args)
    def UnsetTeamingPolicy(self) -> "void" : return _vmkctl.NicTeamingPolicy_UnsetTeamingPolicy(self)
    def HasTeamingPolicy(self) -> "bool" : return _vmkctl.NicTeamingPolicy_HasTeamingPolicy(self)
    def GetTeamingPolicy(self) -> "HostCtl::Network::NicTeamingPolicy::TeamPolicyType" : return _vmkctl.NicTeamingPolicy_GetTeamingPolicy(self)
    def SetNotifySwitchOnFailure(self, *args) -> "void" : return _vmkctl.NicTeamingPolicy_SetNotifySwitchOnFailure(self, *args)
    def UnsetNotifySwitchOnFailure(self) -> "void" : return _vmkctl.NicTeamingPolicy_UnsetNotifySwitchOnFailure(self)
    def HasNotifySwitchOnFailure(self) -> "bool" : return _vmkctl.NicTeamingPolicy_HasNotifySwitchOnFailure(self)
    def GetNotifySwitchOnFailure(self) -> "bool" : return _vmkctl.NicTeamingPolicy_GetNotifySwitchOnFailure(self)
    def SetReversePolicy(self, *args) -> "void" : return _vmkctl.NicTeamingPolicy_SetReversePolicy(self, *args)
    def UnsetReversePolicy(self) -> "void" : return _vmkctl.NicTeamingPolicy_UnsetReversePolicy(self)
    def HasReversePolicy(self) -> "bool" : return _vmkctl.NicTeamingPolicy_HasReversePolicy(self)
    def GetReversePolicy(self) -> "bool" : return _vmkctl.NicTeamingPolicy_GetReversePolicy(self)
    def SetRollingRestoration(self, *args) -> "void" : return _vmkctl.NicTeamingPolicy_SetRollingRestoration(self, *args)
    def UnsetRollingRestoration(self) -> "void" : return _vmkctl.NicTeamingPolicy_UnsetRollingRestoration(self)
    def HasRollingRestoration(self) -> "bool" : return _vmkctl.NicTeamingPolicy_HasRollingRestoration(self)
    def GetRollingRestoration(self) -> "bool" : return _vmkctl.NicTeamingPolicy_GetRollingRestoration(self)
    def SetLinkCriteria(self, *args) -> "void" : return _vmkctl.NicTeamingPolicy_SetLinkCriteria(self, *args)
    def UnsetLinkCriteria(self) -> "void" : return _vmkctl.NicTeamingPolicy_UnsetLinkCriteria(self)
    def HasLinkCriteria(self) -> "bool" : return _vmkctl.NicTeamingPolicy_HasLinkCriteria(self)
    def GetLinkCriteria(self) -> "HostCtl::Network::LinkCriteriaSelectionPolicy" : return _vmkctl.NicTeamingPolicy_GetLinkCriteria(self)
    def SetUplinkOrder(self, *args) -> "void" : return _vmkctl.NicTeamingPolicy_SetUplinkOrder(self, *args)
    def UnsetUplinkOrder(self) -> "void" : return _vmkctl.NicTeamingPolicy_UnsetUplinkOrder(self)
    def HasUplinkOrder(self) -> "bool" : return _vmkctl.NicTeamingPolicy_HasUplinkOrder(self)
    def GetUplinkOrder(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.NicTeamingPolicy_GetUplinkOrder(self)
    def SetMaxActiveUplinks(self, *args) -> "void" : return _vmkctl.NicTeamingPolicy_SetMaxActiveUplinks(self, *args)
    def UnsetMaxActiveUplinks(self) -> "void" : return _vmkctl.NicTeamingPolicy_UnsetMaxActiveUplinks(self)
    def HasMaxActiveUplinks(self) -> "bool" : return _vmkctl.NicTeamingPolicy_HasMaxActiveUplinks(self)
    def GetMaxActiveUplinks(self) -> "int" : return _vmkctl.NicTeamingPolicy_GetMaxActiveUplinks(self)
NicTeamingPolicy_swigregister = _vmkctl.NicTeamingPolicy_swigregister
NicTeamingPolicy_swigregister(NicTeamingPolicy)

def NicTeamingPolicy_GetDefaultPolicy() -> "HostCtl::Network::NicTeamingPolicy" :
  return _vmkctl.NicTeamingPolicy_GetDefaultPolicy()
NicTeamingPolicy_GetDefaultPolicy = _vmkctl.NicTeamingPolicy_GetDefaultPolicy

class PnicLinkMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicLinkMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnicLinkMode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["speed"] = _vmkctl.PnicLinkMode_speed_set
    __swig_getmethods__["speed"] = _vmkctl.PnicLinkMode_speed_get
    if _newclass:speed = _swig_property(_vmkctl.PnicLinkMode_speed_get, _vmkctl.PnicLinkMode_speed_set)
    __swig_setmethods__["duplex"] = _vmkctl.PnicLinkMode_duplex_set
    __swig_getmethods__["duplex"] = _vmkctl.PnicLinkMode_duplex_get
    if _newclass:duplex = _swig_property(_vmkctl.PnicLinkMode_duplex_get, _vmkctl.PnicLinkMode_duplex_set)
    __swig_setmethods__["media"] = _vmkctl.PnicLinkMode_media_set
    __swig_getmethods__["media"] = _vmkctl.PnicLinkMode_media_get
    if _newclass:media = _swig_property(_vmkctl.PnicLinkMode_media_get, _vmkctl.PnicLinkMode_media_set)
    def __init__(self, *args): 
        this = _vmkctl.new_PnicLinkMode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PnicLinkMode
    __del__ = lambda self : None;
PnicLinkMode_swigregister = _vmkctl.PnicLinkMode_swigregister
PnicLinkMode_swigregister(PnicLinkMode)

class PNicSourcePortStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PNicSourcePortStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PNicSourcePortStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pktsIn"] = _vmkctl.PNicSourcePortStats_pktsIn_set
    __swig_getmethods__["pktsIn"] = _vmkctl.PNicSourcePortStats_pktsIn_get
    if _newclass:pktsIn = _swig_property(_vmkctl.PNicSourcePortStats_pktsIn_get, _vmkctl.PNicSourcePortStats_pktsIn_set)
    __swig_setmethods__["bytesIn"] = _vmkctl.PNicSourcePortStats_bytesIn_set
    __swig_getmethods__["bytesIn"] = _vmkctl.PNicSourcePortStats_bytesIn_get
    if _newclass:bytesIn = _swig_property(_vmkctl.PNicSourcePortStats_bytesIn_get, _vmkctl.PNicSourcePortStats_bytesIn_set)
    __swig_setmethods__["pktsOut"] = _vmkctl.PNicSourcePortStats_pktsOut_set
    __swig_getmethods__["pktsOut"] = _vmkctl.PNicSourcePortStats_pktsOut_get
    if _newclass:pktsOut = _swig_property(_vmkctl.PNicSourcePortStats_pktsOut_get, _vmkctl.PNicSourcePortStats_pktsOut_set)
    __swig_setmethods__["bytesOut"] = _vmkctl.PNicSourcePortStats_bytesOut_set
    __swig_getmethods__["bytesOut"] = _vmkctl.PNicSourcePortStats_bytesOut_get
    if _newclass:bytesOut = _swig_property(_vmkctl.PNicSourcePortStats_bytesOut_get, _vmkctl.PNicSourcePortStats_bytesOut_set)
    def __init__(self): 
        this = _vmkctl.new_PNicSourcePortStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PNicSourcePortStats
    __del__ = lambda self : None;
PNicSourcePortStats_swigregister = _vmkctl.PNicSourcePortStats_swigregister
PNicSourcePortStats_swigregister(PNicSourcePortStats)

class PnicStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnicStats, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_PnicStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["packetsTx"] = _vmkctl.PnicStats_packetsTx_set
    __swig_getmethods__["packetsTx"] = _vmkctl.PnicStats_packetsTx_get
    if _newclass:packetsTx = _swig_property(_vmkctl.PnicStats_packetsTx_get, _vmkctl.PnicStats_packetsTx_set)
    __swig_setmethods__["packetsRx"] = _vmkctl.PnicStats_packetsRx_set
    __swig_getmethods__["packetsRx"] = _vmkctl.PnicStats_packetsRx_get
    if _newclass:packetsRx = _swig_property(_vmkctl.PnicStats_packetsRx_get, _vmkctl.PnicStats_packetsRx_set)
    __swig_setmethods__["bytesTx"] = _vmkctl.PnicStats_bytesTx_set
    __swig_getmethods__["bytesTx"] = _vmkctl.PnicStats_bytesTx_get
    if _newclass:bytesTx = _swig_property(_vmkctl.PnicStats_bytesTx_get, _vmkctl.PnicStats_bytesTx_set)
    __swig_setmethods__["bytesRx"] = _vmkctl.PnicStats_bytesRx_set
    __swig_getmethods__["bytesRx"] = _vmkctl.PnicStats_bytesRx_get
    if _newclass:bytesRx = _swig_property(_vmkctl.PnicStats_bytesRx_get, _vmkctl.PnicStats_bytesRx_set)
    __swig_setmethods__["errorsTx"] = _vmkctl.PnicStats_errorsTx_set
    __swig_getmethods__["errorsTx"] = _vmkctl.PnicStats_errorsTx_get
    if _newclass:errorsTx = _swig_property(_vmkctl.PnicStats_errorsTx_get, _vmkctl.PnicStats_errorsTx_set)
    __swig_setmethods__["errorsRx"] = _vmkctl.PnicStats_errorsRx_set
    __swig_getmethods__["errorsRx"] = _vmkctl.PnicStats_errorsRx_get
    if _newclass:errorsRx = _swig_property(_vmkctl.PnicStats_errorsRx_get, _vmkctl.PnicStats_errorsRx_set)
    __swig_setmethods__["droppedTx"] = _vmkctl.PnicStats_droppedTx_set
    __swig_getmethods__["droppedTx"] = _vmkctl.PnicStats_droppedTx_get
    if _newclass:droppedTx = _swig_property(_vmkctl.PnicStats_droppedTx_get, _vmkctl.PnicStats_droppedTx_set)
    __swig_setmethods__["droppedRx"] = _vmkctl.PnicStats_droppedRx_set
    __swig_getmethods__["droppedRx"] = _vmkctl.PnicStats_droppedRx_get
    if _newclass:droppedRx = _swig_property(_vmkctl.PnicStats_droppedRx_get, _vmkctl.PnicStats_droppedRx_set)
    __swig_setmethods__["multicastPktsRx"] = _vmkctl.PnicStats_multicastPktsRx_set
    __swig_getmethods__["multicastPktsRx"] = _vmkctl.PnicStats_multicastPktsRx_get
    if _newclass:multicastPktsRx = _swig_property(_vmkctl.PnicStats_multicastPktsRx_get, _vmkctl.PnicStats_multicastPktsRx_set)
    __swig_setmethods__["broadcastPktsRx"] = _vmkctl.PnicStats_broadcastPktsRx_set
    __swig_getmethods__["broadcastPktsRx"] = _vmkctl.PnicStats_broadcastPktsRx_get
    if _newclass:broadcastPktsRx = _swig_property(_vmkctl.PnicStats_broadcastPktsRx_get, _vmkctl.PnicStats_broadcastPktsRx_set)
    __swig_setmethods__["multicastPktsTx"] = _vmkctl.PnicStats_multicastPktsTx_set
    __swig_getmethods__["multicastPktsTx"] = _vmkctl.PnicStats_multicastPktsTx_get
    if _newclass:multicastPktsTx = _swig_property(_vmkctl.PnicStats_multicastPktsTx_get, _vmkctl.PnicStats_multicastPktsTx_set)
    __swig_setmethods__["broadcastPktsTx"] = _vmkctl.PnicStats_broadcastPktsTx_set
    __swig_getmethods__["broadcastPktsTx"] = _vmkctl.PnicStats_broadcastPktsTx_get
    if _newclass:broadcastPktsTx = _swig_property(_vmkctl.PnicStats_broadcastPktsTx_get, _vmkctl.PnicStats_broadcastPktsTx_set)
    __swig_setmethods__["RxLengthErrors"] = _vmkctl.PnicStats_RxLengthErrors_set
    __swig_getmethods__["RxLengthErrors"] = _vmkctl.PnicStats_RxLengthErrors_get
    if _newclass:RxLengthErrors = _swig_property(_vmkctl.PnicStats_RxLengthErrors_get, _vmkctl.PnicStats_RxLengthErrors_set)
    __swig_setmethods__["RxOverErrors"] = _vmkctl.PnicStats_RxOverErrors_set
    __swig_getmethods__["RxOverErrors"] = _vmkctl.PnicStats_RxOverErrors_get
    if _newclass:RxOverErrors = _swig_property(_vmkctl.PnicStats_RxOverErrors_get, _vmkctl.PnicStats_RxOverErrors_set)
    __swig_setmethods__["RxCRCErrors"] = _vmkctl.PnicStats_RxCRCErrors_set
    __swig_getmethods__["RxCRCErrors"] = _vmkctl.PnicStats_RxCRCErrors_get
    if _newclass:RxCRCErrors = _swig_property(_vmkctl.PnicStats_RxCRCErrors_get, _vmkctl.PnicStats_RxCRCErrors_set)
    __swig_setmethods__["RxFrameErrors"] = _vmkctl.PnicStats_RxFrameErrors_set
    __swig_getmethods__["RxFrameErrors"] = _vmkctl.PnicStats_RxFrameErrors_get
    if _newclass:RxFrameErrors = _swig_property(_vmkctl.PnicStats_RxFrameErrors_get, _vmkctl.PnicStats_RxFrameErrors_set)
    __swig_setmethods__["RxFIFOErrors"] = _vmkctl.PnicStats_RxFIFOErrors_set
    __swig_getmethods__["RxFIFOErrors"] = _vmkctl.PnicStats_RxFIFOErrors_get
    if _newclass:RxFIFOErrors = _swig_property(_vmkctl.PnicStats_RxFIFOErrors_get, _vmkctl.PnicStats_RxFIFOErrors_set)
    __swig_setmethods__["RxMissedErrors"] = _vmkctl.PnicStats_RxMissedErrors_set
    __swig_getmethods__["RxMissedErrors"] = _vmkctl.PnicStats_RxMissedErrors_get
    if _newclass:RxMissedErrors = _swig_property(_vmkctl.PnicStats_RxMissedErrors_get, _vmkctl.PnicStats_RxMissedErrors_set)
    __swig_setmethods__["TxAbortedErrors"] = _vmkctl.PnicStats_TxAbortedErrors_set
    __swig_getmethods__["TxAbortedErrors"] = _vmkctl.PnicStats_TxAbortedErrors_get
    if _newclass:TxAbortedErrors = _swig_property(_vmkctl.PnicStats_TxAbortedErrors_get, _vmkctl.PnicStats_TxAbortedErrors_set)
    __swig_setmethods__["TxFIFOErrors"] = _vmkctl.PnicStats_TxFIFOErrors_set
    __swig_getmethods__["TxFIFOErrors"] = _vmkctl.PnicStats_TxFIFOErrors_get
    if _newclass:TxFIFOErrors = _swig_property(_vmkctl.PnicStats_TxFIFOErrors_get, _vmkctl.PnicStats_TxFIFOErrors_set)
    __swig_setmethods__["TxCarrierErrors"] = _vmkctl.PnicStats_TxCarrierErrors_set
    __swig_getmethods__["TxCarrierErrors"] = _vmkctl.PnicStats_TxCarrierErrors_get
    if _newclass:TxCarrierErrors = _swig_property(_vmkctl.PnicStats_TxCarrierErrors_get, _vmkctl.PnicStats_TxCarrierErrors_set)
    __swig_setmethods__["TxHeartbeatErrors"] = _vmkctl.PnicStats_TxHeartbeatErrors_set
    __swig_getmethods__["TxHeartbeatErrors"] = _vmkctl.PnicStats_TxHeartbeatErrors_get
    if _newclass:TxHeartbeatErrors = _swig_property(_vmkctl.PnicStats_TxHeartbeatErrors_get, _vmkctl.PnicStats_TxHeartbeatErrors_set)
    __swig_setmethods__["TxWindowErrors"] = _vmkctl.PnicStats_TxWindowErrors_set
    __swig_getmethods__["TxWindowErrors"] = _vmkctl.PnicStats_TxWindowErrors_get
    if _newclass:TxWindowErrors = _swig_property(_vmkctl.PnicStats_TxWindowErrors_get, _vmkctl.PnicStats_TxWindowErrors_set)
    __swig_setmethods__["dot3StatsAlignmentErrors"] = _vmkctl.PnicStats_dot3StatsAlignmentErrors_set
    __swig_getmethods__["dot3StatsAlignmentErrors"] = _vmkctl.PnicStats_dot3StatsAlignmentErrors_get
    if _newclass:dot3StatsAlignmentErrors = _swig_property(_vmkctl.PnicStats_dot3StatsAlignmentErrors_get, _vmkctl.PnicStats_dot3StatsAlignmentErrors_set)
    __swig_setmethods__["dot3StatsFCSErrors"] = _vmkctl.PnicStats_dot3StatsFCSErrors_set
    __swig_getmethods__["dot3StatsFCSErrors"] = _vmkctl.PnicStats_dot3StatsFCSErrors_get
    if _newclass:dot3StatsFCSErrors = _swig_property(_vmkctl.PnicStats_dot3StatsFCSErrors_get, _vmkctl.PnicStats_dot3StatsFCSErrors_set)
    __swig_setmethods__["dot3StatsInternalMacTransmitErrors"] = _vmkctl.PnicStats_dot3StatsInternalMacTransmitErrors_set
    __swig_getmethods__["dot3StatsInternalMacTransmitErrors"] = _vmkctl.PnicStats_dot3StatsInternalMacTransmitErrors_get
    if _newclass:dot3StatsInternalMacTransmitErrors = _swig_property(_vmkctl.PnicStats_dot3StatsInternalMacTransmitErrors_get, _vmkctl.PnicStats_dot3StatsInternalMacTransmitErrors_set)
    __swig_setmethods__["dot3StatsFrameTooLongs"] = _vmkctl.PnicStats_dot3StatsFrameTooLongs_set
    __swig_getmethods__["dot3StatsFrameTooLongs"] = _vmkctl.PnicStats_dot3StatsFrameTooLongs_get
    if _newclass:dot3StatsFrameTooLongs = _swig_property(_vmkctl.PnicStats_dot3StatsFrameTooLongs_get, _vmkctl.PnicStats_dot3StatsFrameTooLongs_set)
    __swig_setmethods__["dot3StatsInternalMacReceiveErrors"] = _vmkctl.PnicStats_dot3StatsInternalMacReceiveErrors_set
    __swig_getmethods__["dot3StatsInternalMacReceiveErrors"] = _vmkctl.PnicStats_dot3StatsInternalMacReceiveErrors_get
    if _newclass:dot3StatsInternalMacReceiveErrors = _swig_property(_vmkctl.PnicStats_dot3StatsInternalMacReceiveErrors_get, _vmkctl.PnicStats_dot3StatsInternalMacReceiveErrors_set)
    __swig_setmethods__["dot3StatsSingleCollisionFrames"] = _vmkctl.PnicStats_dot3StatsSingleCollisionFrames_set
    __swig_getmethods__["dot3StatsSingleCollisionFrames"] = _vmkctl.PnicStats_dot3StatsSingleCollisionFrames_get
    if _newclass:dot3StatsSingleCollisionFrames = _swig_property(_vmkctl.PnicStats_dot3StatsSingleCollisionFrames_get, _vmkctl.PnicStats_dot3StatsSingleCollisionFrames_set)
    __swig_setmethods__["dot3StatsMultipleCollisionFrames"] = _vmkctl.PnicStats_dot3StatsMultipleCollisionFrames_set
    __swig_getmethods__["dot3StatsMultipleCollisionFrames"] = _vmkctl.PnicStats_dot3StatsMultipleCollisionFrames_get
    if _newclass:dot3StatsMultipleCollisionFrames = _swig_property(_vmkctl.PnicStats_dot3StatsMultipleCollisionFrames_get, _vmkctl.PnicStats_dot3StatsMultipleCollisionFrames_set)
    __swig_setmethods__["dot3StatsSQETestErrors"] = _vmkctl.PnicStats_dot3StatsSQETestErrors_set
    __swig_getmethods__["dot3StatsSQETestErrors"] = _vmkctl.PnicStats_dot3StatsSQETestErrors_get
    if _newclass:dot3StatsSQETestErrors = _swig_property(_vmkctl.PnicStats_dot3StatsSQETestErrors_get, _vmkctl.PnicStats_dot3StatsSQETestErrors_set)
    __swig_setmethods__["dot3StatsDeferredTransmissions"] = _vmkctl.PnicStats_dot3StatsDeferredTransmissions_set
    __swig_getmethods__["dot3StatsDeferredTransmissions"] = _vmkctl.PnicStats_dot3StatsDeferredTransmissions_get
    if _newclass:dot3StatsDeferredTransmissions = _swig_property(_vmkctl.PnicStats_dot3StatsDeferredTransmissions_get, _vmkctl.PnicStats_dot3StatsDeferredTransmissions_set)
    __swig_setmethods__["dot3StatsLateCollisions"] = _vmkctl.PnicStats_dot3StatsLateCollisions_set
    __swig_getmethods__["dot3StatsLateCollisions"] = _vmkctl.PnicStats_dot3StatsLateCollisions_get
    if _newclass:dot3StatsLateCollisions = _swig_property(_vmkctl.PnicStats_dot3StatsLateCollisions_get, _vmkctl.PnicStats_dot3StatsLateCollisions_set)
    __swig_setmethods__["dot3StatsExcessiveCollisions"] = _vmkctl.PnicStats_dot3StatsExcessiveCollisions_set
    __swig_getmethods__["dot3StatsExcessiveCollisions"] = _vmkctl.PnicStats_dot3StatsExcessiveCollisions_get
    if _newclass:dot3StatsExcessiveCollisions = _swig_property(_vmkctl.PnicStats_dot3StatsExcessiveCollisions_get, _vmkctl.PnicStats_dot3StatsExcessiveCollisions_set)
    __swig_setmethods__["dot3StatsCarrierSenseErrors"] = _vmkctl.PnicStats_dot3StatsCarrierSenseErrors_set
    __swig_getmethods__["dot3StatsCarrierSenseErrors"] = _vmkctl.PnicStats_dot3StatsCarrierSenseErrors_get
    if _newclass:dot3StatsCarrierSenseErrors = _swig_property(_vmkctl.PnicStats_dot3StatsCarrierSenseErrors_get, _vmkctl.PnicStats_dot3StatsCarrierSenseErrors_set)
    __swig_setmethods__["dot3StatsSymbolErrors"] = _vmkctl.PnicStats_dot3StatsSymbolErrors_set
    __swig_getmethods__["dot3StatsSymbolErrors"] = _vmkctl.PnicStats_dot3StatsSymbolErrors_get
    if _newclass:dot3StatsSymbolErrors = _swig_property(_vmkctl.PnicStats_dot3StatsSymbolErrors_get, _vmkctl.PnicStats_dot3StatsSymbolErrors_set)
    __swig_setmethods__["dot3ControlInUnknownOpcodes"] = _vmkctl.PnicStats_dot3ControlInUnknownOpcodes_set
    __swig_getmethods__["dot3ControlInUnknownOpcodes"] = _vmkctl.PnicStats_dot3ControlInUnknownOpcodes_get
    if _newclass:dot3ControlInUnknownOpcodes = _swig_property(_vmkctl.PnicStats_dot3ControlInUnknownOpcodes_get, _vmkctl.PnicStats_dot3ControlInUnknownOpcodes_set)
    __swig_setmethods__["dot3InPauseFrames"] = _vmkctl.PnicStats_dot3InPauseFrames_set
    __swig_getmethods__["dot3InPauseFrames"] = _vmkctl.PnicStats_dot3InPauseFrames_get
    if _newclass:dot3InPauseFrames = _swig_property(_vmkctl.PnicStats_dot3InPauseFrames_get, _vmkctl.PnicStats_dot3InPauseFrames_set)
    __swig_setmethods__["dot3OutPauseFrames"] = _vmkctl.PnicStats_dot3OutPauseFrames_set
    __swig_getmethods__["dot3OutPauseFrames"] = _vmkctl.PnicStats_dot3OutPauseFrames_get
    if _newclass:dot3OutPauseFrames = _swig_property(_vmkctl.PnicStats_dot3OutPauseFrames_get, _vmkctl.PnicStats_dot3OutPauseFrames_set)
    __swig_destroy__ = _vmkctl.delete_PnicStats
    __del__ = lambda self : None;
PnicStats_swigregister = _vmkctl.PnicStats_swigregister
PnicStats_swigregister(PnicStats)

class PnicInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnicInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_PnicInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["supportedPorts"] = _vmkctl.PnicInfo_supportedPorts_set
    __swig_getmethods__["supportedPorts"] = _vmkctl.PnicInfo_supportedPorts_get
    if _newclass:supportedPorts = _swig_property(_vmkctl.PnicInfo_supportedPorts_get, _vmkctl.PnicInfo_supportedPorts_set)
    __swig_setmethods__["supportedLinkModes"] = _vmkctl.PnicInfo_supportedLinkModes_set
    __swig_getmethods__["supportedLinkModes"] = _vmkctl.PnicInfo_supportedLinkModes_get
    if _newclass:supportedLinkModes = _swig_property(_vmkctl.PnicInfo_supportedLinkModes_get, _vmkctl.PnicInfo_supportedLinkModes_set)
    __swig_setmethods__["supportsAutoNegotiation"] = _vmkctl.PnicInfo_supportsAutoNegotiation_set
    __swig_getmethods__["supportsAutoNegotiation"] = _vmkctl.PnicInfo_supportsAutoNegotiation_get
    if _newclass:supportsAutoNegotiation = _swig_property(_vmkctl.PnicInfo_supportsAutoNegotiation_get, _vmkctl.PnicInfo_supportsAutoNegotiation_set)
    __swig_setmethods__["advertisedLinkModes"] = _vmkctl.PnicInfo_advertisedLinkModes_set
    __swig_getmethods__["advertisedLinkModes"] = _vmkctl.PnicInfo_advertisedLinkModes_get
    if _newclass:advertisedLinkModes = _swig_property(_vmkctl.PnicInfo_advertisedLinkModes_get, _vmkctl.PnicInfo_advertisedLinkModes_set)
    __swig_setmethods__["advertisedAutoNegotiation"] = _vmkctl.PnicInfo_advertisedAutoNegotiation_set
    __swig_getmethods__["advertisedAutoNegotiation"] = _vmkctl.PnicInfo_advertisedAutoNegotiation_get
    if _newclass:advertisedAutoNegotiation = _swig_property(_vmkctl.PnicInfo_advertisedAutoNegotiation_get, _vmkctl.PnicInfo_advertisedAutoNegotiation_set)
    __swig_setmethods__["linkStatusChanged"] = _vmkctl.PnicInfo_linkStatusChanged_set
    __swig_getmethods__["linkStatusChanged"] = _vmkctl.PnicInfo_linkStatusChanged_get
    if _newclass:linkStatusChanged = _swig_property(_vmkctl.PnicInfo_linkStatusChanged_get, _vmkctl.PnicInfo_linkStatusChanged_set)
    __swig_setmethods__["portChanged"] = _vmkctl.PnicInfo_portChanged_set
    __swig_getmethods__["portChanged"] = _vmkctl.PnicInfo_portChanged_get
    if _newclass:portChanged = _swig_property(_vmkctl.PnicInfo_portChanged_get, _vmkctl.PnicInfo_portChanged_set)
    __swig_setmethods__["phyadChanged"] = _vmkctl.PnicInfo_phyadChanged_set
    __swig_getmethods__["phyadChanged"] = _vmkctl.PnicInfo_phyadChanged_get
    if _newclass:phyadChanged = _swig_property(_vmkctl.PnicInfo_phyadChanged_get, _vmkctl.PnicInfo_phyadChanged_set)
    __swig_setmethods__["viradChanged"] = _vmkctl.PnicInfo_viradChanged_set
    __swig_getmethods__["viradChanged"] = _vmkctl.PnicInfo_viradChanged_get
    if _newclass:viradChanged = _swig_property(_vmkctl.PnicInfo_viradChanged_get, _vmkctl.PnicInfo_viradChanged_set)
    __swig_setmethods__["transceiverChanged"] = _vmkctl.PnicInfo_transceiverChanged_set
    __swig_getmethods__["transceiverChanged"] = _vmkctl.PnicInfo_transceiverChanged_get
    if _newclass:transceiverChanged = _swig_property(_vmkctl.PnicInfo_transceiverChanged_get, _vmkctl.PnicInfo_transceiverChanged_set)
    __swig_setmethods__["autoNegChanged"] = _vmkctl.PnicInfo_autoNegChanged_set
    __swig_getmethods__["autoNegChanged"] = _vmkctl.PnicInfo_autoNegChanged_get
    if _newclass:autoNegChanged = _swig_property(_vmkctl.PnicInfo_autoNegChanged_get, _vmkctl.PnicInfo_autoNegChanged_set)
    __swig_setmethods__["speed"] = _vmkctl.PnicInfo_speed_set
    __swig_getmethods__["speed"] = _vmkctl.PnicInfo_speed_get
    if _newclass:speed = _swig_property(_vmkctl.PnicInfo_speed_get, _vmkctl.PnicInfo_speed_set)
    __swig_setmethods__["duplex"] = _vmkctl.PnicInfo_duplex_set
    __swig_getmethods__["duplex"] = _vmkctl.PnicInfo_duplex_get
    if _newclass:duplex = _swig_property(_vmkctl.PnicInfo_duplex_get, _vmkctl.PnicInfo_duplex_set)
    __swig_setmethods__["port"] = _vmkctl.PnicInfo_port_set
    __swig_getmethods__["port"] = _vmkctl.PnicInfo_port_get
    if _newclass:port = _swig_property(_vmkctl.PnicInfo_port_get, _vmkctl.PnicInfo_port_set)
    __swig_setmethods__["PHYAD"] = _vmkctl.PnicInfo_PHYAD_set
    __swig_getmethods__["PHYAD"] = _vmkctl.PnicInfo_PHYAD_get
    if _newclass:PHYAD = _swig_property(_vmkctl.PnicInfo_PHYAD_get, _vmkctl.PnicInfo_PHYAD_set)
    __swig_setmethods__["transceiver"] = _vmkctl.PnicInfo_transceiver_set
    __swig_getmethods__["transceiver"] = _vmkctl.PnicInfo_transceiver_get
    if _newclass:transceiver = _swig_property(_vmkctl.PnicInfo_transceiver_get, _vmkctl.PnicInfo_transceiver_set)
    __swig_setmethods__["autoNegotiation"] = _vmkctl.PnicInfo_autoNegotiation_set
    __swig_getmethods__["autoNegotiation"] = _vmkctl.PnicInfo_autoNegotiation_get
    if _newclass:autoNegotiation = _swig_property(_vmkctl.PnicInfo_autoNegotiation_get, _vmkctl.PnicInfo_autoNegotiation_set)
    __swig_setmethods__["wolChanged"] = _vmkctl.PnicInfo_wolChanged_set
    __swig_getmethods__["wolChanged"] = _vmkctl.PnicInfo_wolChanged_get
    if _newclass:wolChanged = _swig_property(_vmkctl.PnicInfo_wolChanged_get, _vmkctl.PnicInfo_wolChanged_set)
    __swig_setmethods__["wolSupported"] = _vmkctl.PnicInfo_wolSupported_set
    __swig_getmethods__["wolSupported"] = _vmkctl.PnicInfo_wolSupported_get
    if _newclass:wolSupported = _swig_property(_vmkctl.PnicInfo_wolSupported_get, _vmkctl.PnicInfo_wolSupported_set)
    __swig_setmethods__["supportsWakeOn"] = _vmkctl.PnicInfo_supportsWakeOn_set
    __swig_getmethods__["supportsWakeOn"] = _vmkctl.PnicInfo_supportsWakeOn_get
    if _newclass:supportsWakeOn = _swig_property(_vmkctl.PnicInfo_supportsWakeOn_get, _vmkctl.PnicInfo_supportsWakeOn_set)
    __swig_setmethods__["wakeOn"] = _vmkctl.PnicInfo_wakeOn_set
    __swig_getmethods__["wakeOn"] = _vmkctl.PnicInfo_wakeOn_get
    if _newclass:wakeOn = _swig_property(_vmkctl.PnicInfo_wakeOn_get, _vmkctl.PnicInfo_wakeOn_set)
    __swig_setmethods__["msglvlChanged"] = _vmkctl.PnicInfo_msglvlChanged_set
    __swig_getmethods__["msglvlChanged"] = _vmkctl.PnicInfo_msglvlChanged_get
    if _newclass:msglvlChanged = _swig_property(_vmkctl.PnicInfo_msglvlChanged_get, _vmkctl.PnicInfo_msglvlChanged_set)
    __swig_setmethods__["msglvlSupported"] = _vmkctl.PnicInfo_msglvlSupported_set
    __swig_getmethods__["msglvlSupported"] = _vmkctl.PnicInfo_msglvlSupported_get
    if _newclass:msglvlSupported = _swig_property(_vmkctl.PnicInfo_msglvlSupported_get, _vmkctl.PnicInfo_msglvlSupported_set)
    __swig_setmethods__["messageLevel"] = _vmkctl.PnicInfo_messageLevel_set
    __swig_getmethods__["messageLevel"] = _vmkctl.PnicInfo_messageLevel_get
    if _newclass:messageLevel = _swig_property(_vmkctl.PnicInfo_messageLevel_get, _vmkctl.PnicInfo_messageLevel_set)
    __swig_setmethods__["viraddr"] = _vmkctl.PnicInfo_viraddr_set
    __swig_getmethods__["viraddr"] = _vmkctl.PnicInfo_viraddr_get
    if _newclass:viraddr = _swig_property(_vmkctl.PnicInfo_viraddr_get, _vmkctl.PnicInfo_viraddr_set)
    __swig_setmethods__["linkStatus"] = _vmkctl.PnicInfo_linkStatus_set
    __swig_getmethods__["linkStatus"] = _vmkctl.PnicInfo_linkStatus_get
    if _newclass:linkStatus = _swig_property(_vmkctl.PnicInfo_linkStatus_get, _vmkctl.PnicInfo_linkStatus_set)
    __swig_destroy__ = _vmkctl.delete_PnicInfo
    __del__ = lambda self : None;
PnicInfo_swigregister = _vmkctl.PnicInfo_swigregister
PnicInfo_swigregister(PnicInfo)

class PnicPauseInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicPauseInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnicPauseInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_PnicPauseInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["supported"] = _vmkctl.PnicPauseInfo_supported_set
    __swig_getmethods__["supported"] = _vmkctl.PnicPauseInfo_supported_get
    if _newclass:supported = _swig_property(_vmkctl.PnicPauseInfo_supported_get, _vmkctl.PnicPauseInfo_supported_set)
    __swig_setmethods__["autoNegotiate"] = _vmkctl.PnicPauseInfo_autoNegotiate_set
    __swig_getmethods__["autoNegotiate"] = _vmkctl.PnicPauseInfo_autoNegotiate_get
    if _newclass:autoNegotiate = _swig_property(_vmkctl.PnicPauseInfo_autoNegotiate_get, _vmkctl.PnicPauseInfo_autoNegotiate_set)
    __swig_setmethods__["rxStatus"] = _vmkctl.PnicPauseInfo_rxStatus_set
    __swig_getmethods__["rxStatus"] = _vmkctl.PnicPauseInfo_rxStatus_get
    if _newclass:rxStatus = _swig_property(_vmkctl.PnicPauseInfo_rxStatus_get, _vmkctl.PnicPauseInfo_rxStatus_set)
    __swig_setmethods__["txStatus"] = _vmkctl.PnicPauseInfo_txStatus_set
    __swig_getmethods__["txStatus"] = _vmkctl.PnicPauseInfo_txStatus_get
    if _newclass:txStatus = _swig_property(_vmkctl.PnicPauseInfo_txStatus_get, _vmkctl.PnicPauseInfo_txStatus_set)
    AUTO_NEG_NOT_AVAIL = _vmkctl.PnicPauseInfo_AUTO_NEG_NOT_AVAIL
    AUTO_NEG_ON = _vmkctl.PnicPauseInfo_AUTO_NEG_ON
    AUTO_NEG_OFF = _vmkctl.PnicPauseInfo_AUTO_NEG_OFF
    __swig_setmethods__["rxAutoNegRes"] = _vmkctl.PnicPauseInfo_rxAutoNegRes_set
    __swig_getmethods__["rxAutoNegRes"] = _vmkctl.PnicPauseInfo_rxAutoNegRes_get
    if _newclass:rxAutoNegRes = _swig_property(_vmkctl.PnicPauseInfo_rxAutoNegRes_get, _vmkctl.PnicPauseInfo_rxAutoNegRes_set)
    __swig_setmethods__["txAutoNegRes"] = _vmkctl.PnicPauseInfo_txAutoNegRes_set
    __swig_getmethods__["txAutoNegRes"] = _vmkctl.PnicPauseInfo_txAutoNegRes_get
    if _newclass:txAutoNegRes = _swig_property(_vmkctl.PnicPauseInfo_txAutoNegRes_get, _vmkctl.PnicPauseInfo_txAutoNegRes_set)
    __swig_destroy__ = _vmkctl.delete_PnicPauseInfo
    __del__ = lambda self : None;
PnicPauseInfo_swigregister = _vmkctl.PnicPauseInfo_swigregister
PnicPauseInfo_swigregister(PnicPauseInfo)

class SriovNicVFInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SriovNicVFInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SriovNicVFInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["VFID"] = _vmkctl.SriovNicVFInfo_VFID_set
    __swig_getmethods__["VFID"] = _vmkctl.SriovNicVFInfo_VFID_get
    if _newclass:VFID = _swig_property(_vmkctl.SriovNicVFInfo_VFID_get, _vmkctl.SriovNicVFInfo_VFID_set)
    __swig_setmethods__["active"] = _vmkctl.SriovNicVFInfo_active_set
    __swig_getmethods__["active"] = _vmkctl.SriovNicVFInfo_active_get
    if _newclass:active = _swig_property(_vmkctl.SriovNicVFInfo_active_get, _vmkctl.SriovNicVFInfo_active_set)
    __swig_setmethods__["BDF"] = _vmkctl.SriovNicVFInfo_BDF_set
    __swig_getmethods__["BDF"] = _vmkctl.SriovNicVFInfo_BDF_get
    if _newclass:BDF = _swig_property(_vmkctl.SriovNicVFInfo_BDF_get, _vmkctl.SriovNicVFInfo_BDF_set)
    __swig_setmethods__["owner"] = _vmkctl.SriovNicVFInfo_owner_set
    __swig_getmethods__["owner"] = _vmkctl.SriovNicVFInfo_owner_get
    if _newclass:owner = _swig_property(_vmkctl.SriovNicVFInfo_owner_get, _vmkctl.SriovNicVFInfo_owner_set)
    def __init__(self): 
        this = _vmkctl.new_SriovNicVFInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_SriovNicVFInfo
    __del__ = lambda self : None;
SriovNicVFInfo_swigregister = _vmkctl.SriovNicVFInfo_swigregister
SriovNicVFInfo_swigregister(SriovNicVFInfo)

class SriovNicVFStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SriovNicVFStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SriovNicVFStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rxUnicastPkts"] = _vmkctl.SriovNicVFStats_rxUnicastPkts_set
    __swig_getmethods__["rxUnicastPkts"] = _vmkctl.SriovNicVFStats_rxUnicastPkts_get
    if _newclass:rxUnicastPkts = _swig_property(_vmkctl.SriovNicVFStats_rxUnicastPkts_get, _vmkctl.SriovNicVFStats_rxUnicastPkts_set)
    __swig_setmethods__["rxUnicastBytes"] = _vmkctl.SriovNicVFStats_rxUnicastBytes_set
    __swig_getmethods__["rxUnicastBytes"] = _vmkctl.SriovNicVFStats_rxUnicastBytes_get
    if _newclass:rxUnicastBytes = _swig_property(_vmkctl.SriovNicVFStats_rxUnicastBytes_get, _vmkctl.SriovNicVFStats_rxUnicastBytes_set)
    __swig_setmethods__["rxMulticastPkts"] = _vmkctl.SriovNicVFStats_rxMulticastPkts_set
    __swig_getmethods__["rxMulticastPkts"] = _vmkctl.SriovNicVFStats_rxMulticastPkts_get
    if _newclass:rxMulticastPkts = _swig_property(_vmkctl.SriovNicVFStats_rxMulticastPkts_get, _vmkctl.SriovNicVFStats_rxMulticastPkts_set)
    __swig_setmethods__["rxMulticastBytes"] = _vmkctl.SriovNicVFStats_rxMulticastBytes_set
    __swig_getmethods__["rxMulticastBytes"] = _vmkctl.SriovNicVFStats_rxMulticastBytes_get
    if _newclass:rxMulticastBytes = _swig_property(_vmkctl.SriovNicVFStats_rxMulticastBytes_get, _vmkctl.SriovNicVFStats_rxMulticastBytes_set)
    __swig_setmethods__["rxBroadcastPkts"] = _vmkctl.SriovNicVFStats_rxBroadcastPkts_set
    __swig_getmethods__["rxBroadcastPkts"] = _vmkctl.SriovNicVFStats_rxBroadcastPkts_get
    if _newclass:rxBroadcastPkts = _swig_property(_vmkctl.SriovNicVFStats_rxBroadcastPkts_get, _vmkctl.SriovNicVFStats_rxBroadcastPkts_set)
    __swig_setmethods__["rxBroadcastBytes"] = _vmkctl.SriovNicVFStats_rxBroadcastBytes_set
    __swig_getmethods__["rxBroadcastBytes"] = _vmkctl.SriovNicVFStats_rxBroadcastBytes_get
    if _newclass:rxBroadcastBytes = _swig_property(_vmkctl.SriovNicVFStats_rxBroadcastBytes_get, _vmkctl.SriovNicVFStats_rxBroadcastBytes_set)
    __swig_setmethods__["rxOutOfBufferDrops"] = _vmkctl.SriovNicVFStats_rxOutOfBufferDrops_set
    __swig_getmethods__["rxOutOfBufferDrops"] = _vmkctl.SriovNicVFStats_rxOutOfBufferDrops_get
    if _newclass:rxOutOfBufferDrops = _swig_property(_vmkctl.SriovNicVFStats_rxOutOfBufferDrops_get, _vmkctl.SriovNicVFStats_rxOutOfBufferDrops_set)
    __swig_setmethods__["rxErrorDrops"] = _vmkctl.SriovNicVFStats_rxErrorDrops_set
    __swig_getmethods__["rxErrorDrops"] = _vmkctl.SriovNicVFStats_rxErrorDrops_get
    if _newclass:rxErrorDrops = _swig_property(_vmkctl.SriovNicVFStats_rxErrorDrops_get, _vmkctl.SriovNicVFStats_rxErrorDrops_set)
    __swig_setmethods__["rxLROPkts"] = _vmkctl.SriovNicVFStats_rxLROPkts_set
    __swig_getmethods__["rxLROPkts"] = _vmkctl.SriovNicVFStats_rxLROPkts_get
    if _newclass:rxLROPkts = _swig_property(_vmkctl.SriovNicVFStats_rxLROPkts_get, _vmkctl.SriovNicVFStats_rxLROPkts_set)
    __swig_setmethods__["rxLROBytes"] = _vmkctl.SriovNicVFStats_rxLROBytes_set
    __swig_getmethods__["rxLROBytes"] = _vmkctl.SriovNicVFStats_rxLROBytes_get
    if _newclass:rxLROBytes = _swig_property(_vmkctl.SriovNicVFStats_rxLROBytes_get, _vmkctl.SriovNicVFStats_rxLROBytes_set)
    __swig_setmethods__["txUnicastPkts"] = _vmkctl.SriovNicVFStats_txUnicastPkts_set
    __swig_getmethods__["txUnicastPkts"] = _vmkctl.SriovNicVFStats_txUnicastPkts_get
    if _newclass:txUnicastPkts = _swig_property(_vmkctl.SriovNicVFStats_txUnicastPkts_get, _vmkctl.SriovNicVFStats_txUnicastPkts_set)
    __swig_setmethods__["txUnicastBytes"] = _vmkctl.SriovNicVFStats_txUnicastBytes_set
    __swig_getmethods__["txUnicastBytes"] = _vmkctl.SriovNicVFStats_txUnicastBytes_get
    if _newclass:txUnicastBytes = _swig_property(_vmkctl.SriovNicVFStats_txUnicastBytes_get, _vmkctl.SriovNicVFStats_txUnicastBytes_set)
    __swig_setmethods__["txMulticastPkts"] = _vmkctl.SriovNicVFStats_txMulticastPkts_set
    __swig_getmethods__["txMulticastPkts"] = _vmkctl.SriovNicVFStats_txMulticastPkts_get
    if _newclass:txMulticastPkts = _swig_property(_vmkctl.SriovNicVFStats_txMulticastPkts_get, _vmkctl.SriovNicVFStats_txMulticastPkts_set)
    __swig_setmethods__["txMulticastBytes"] = _vmkctl.SriovNicVFStats_txMulticastBytes_set
    __swig_getmethods__["txMulticastBytes"] = _vmkctl.SriovNicVFStats_txMulticastBytes_get
    if _newclass:txMulticastBytes = _swig_property(_vmkctl.SriovNicVFStats_txMulticastBytes_get, _vmkctl.SriovNicVFStats_txMulticastBytes_set)
    __swig_setmethods__["txBroadcastPkts"] = _vmkctl.SriovNicVFStats_txBroadcastPkts_set
    __swig_getmethods__["txBroadcastPkts"] = _vmkctl.SriovNicVFStats_txBroadcastPkts_get
    if _newclass:txBroadcastPkts = _swig_property(_vmkctl.SriovNicVFStats_txBroadcastPkts_get, _vmkctl.SriovNicVFStats_txBroadcastPkts_set)
    __swig_setmethods__["txBroadcastBytes"] = _vmkctl.SriovNicVFStats_txBroadcastBytes_set
    __swig_getmethods__["txBroadcastBytes"] = _vmkctl.SriovNicVFStats_txBroadcastBytes_get
    if _newclass:txBroadcastBytes = _swig_property(_vmkctl.SriovNicVFStats_txBroadcastBytes_get, _vmkctl.SriovNicVFStats_txBroadcastBytes_set)
    __swig_setmethods__["txErrors"] = _vmkctl.SriovNicVFStats_txErrors_set
    __swig_getmethods__["txErrors"] = _vmkctl.SriovNicVFStats_txErrors_get
    if _newclass:txErrors = _swig_property(_vmkctl.SriovNicVFStats_txErrors_get, _vmkctl.SriovNicVFStats_txErrors_set)
    __swig_setmethods__["txDiscards"] = _vmkctl.SriovNicVFStats_txDiscards_set
    __swig_getmethods__["txDiscards"] = _vmkctl.SriovNicVFStats_txDiscards_get
    if _newclass:txDiscards = _swig_property(_vmkctl.SriovNicVFStats_txDiscards_get, _vmkctl.SriovNicVFStats_txDiscards_set)
    __swig_setmethods__["txTSOPkts"] = _vmkctl.SriovNicVFStats_txTSOPkts_set
    __swig_getmethods__["txTSOPkts"] = _vmkctl.SriovNicVFStats_txTSOPkts_get
    if _newclass:txTSOPkts = _swig_property(_vmkctl.SriovNicVFStats_txTSOPkts_get, _vmkctl.SriovNicVFStats_txTSOPkts_set)
    __swig_setmethods__["txTSOBytes"] = _vmkctl.SriovNicVFStats_txTSOBytes_set
    __swig_getmethods__["txTSOBytes"] = _vmkctl.SriovNicVFStats_txTSOBytes_get
    if _newclass:txTSOBytes = _swig_property(_vmkctl.SriovNicVFStats_txTSOBytes_get, _vmkctl.SriovNicVFStats_txTSOBytes_set)
    def __init__(self): 
        this = _vmkctl.new_SriovNicVFStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_SriovNicVFStats
    __del__ = lambda self : None;
SriovNicVFStats_swigregister = _vmkctl.SriovNicVFStats_swigregister
SriovNicVFStats_swigregister(SriovNicVFStats)

class PnicCoalesceInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicCoalesceInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnicCoalesceInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_PnicCoalesceInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["adaptiveRX"] = _vmkctl.PnicCoalesceInfo_adaptiveRX_set
    __swig_getmethods__["adaptiveRX"] = _vmkctl.PnicCoalesceInfo_adaptiveRX_get
    if _newclass:adaptiveRX = _swig_property(_vmkctl.PnicCoalesceInfo_adaptiveRX_get, _vmkctl.PnicCoalesceInfo_adaptiveRX_set)
    __swig_setmethods__["adaptiveTX"] = _vmkctl.PnicCoalesceInfo_adaptiveTX_set
    __swig_getmethods__["adaptiveTX"] = _vmkctl.PnicCoalesceInfo_adaptiveTX_get
    if _newclass:adaptiveTX = _swig_property(_vmkctl.PnicCoalesceInfo_adaptiveTX_get, _vmkctl.PnicCoalesceInfo_adaptiveTX_set)
    __swig_setmethods__["statsBlockUsecs"] = _vmkctl.PnicCoalesceInfo_statsBlockUsecs_set
    __swig_getmethods__["statsBlockUsecs"] = _vmkctl.PnicCoalesceInfo_statsBlockUsecs_get
    if _newclass:statsBlockUsecs = _swig_property(_vmkctl.PnicCoalesceInfo_statsBlockUsecs_get, _vmkctl.PnicCoalesceInfo_statsBlockUsecs_set)
    __swig_setmethods__["sampleInterval"] = _vmkctl.PnicCoalesceInfo_sampleInterval_set
    __swig_getmethods__["sampleInterval"] = _vmkctl.PnicCoalesceInfo_sampleInterval_get
    if _newclass:sampleInterval = _swig_property(_vmkctl.PnicCoalesceInfo_sampleInterval_get, _vmkctl.PnicCoalesceInfo_sampleInterval_set)
    __swig_setmethods__["pktRateLow"] = _vmkctl.PnicCoalesceInfo_pktRateLow_set
    __swig_getmethods__["pktRateLow"] = _vmkctl.PnicCoalesceInfo_pktRateLow_get
    if _newclass:pktRateLow = _swig_property(_vmkctl.PnicCoalesceInfo_pktRateLow_get, _vmkctl.PnicCoalesceInfo_pktRateLow_set)
    __swig_setmethods__["pktRateHigh"] = _vmkctl.PnicCoalesceInfo_pktRateHigh_set
    __swig_getmethods__["pktRateHigh"] = _vmkctl.PnicCoalesceInfo_pktRateHigh_get
    if _newclass:pktRateHigh = _swig_property(_vmkctl.PnicCoalesceInfo_pktRateHigh_get, _vmkctl.PnicCoalesceInfo_pktRateHigh_set)
    __swig_setmethods__["rxUsecs"] = _vmkctl.PnicCoalesceInfo_rxUsecs_set
    __swig_getmethods__["rxUsecs"] = _vmkctl.PnicCoalesceInfo_rxUsecs_get
    if _newclass:rxUsecs = _swig_property(_vmkctl.PnicCoalesceInfo_rxUsecs_get, _vmkctl.PnicCoalesceInfo_rxUsecs_set)
    __swig_setmethods__["rxFrames"] = _vmkctl.PnicCoalesceInfo_rxFrames_set
    __swig_getmethods__["rxFrames"] = _vmkctl.PnicCoalesceInfo_rxFrames_get
    if _newclass:rxFrames = _swig_property(_vmkctl.PnicCoalesceInfo_rxFrames_get, _vmkctl.PnicCoalesceInfo_rxFrames_set)
    __swig_setmethods__["rxUsecsIrq"] = _vmkctl.PnicCoalesceInfo_rxUsecsIrq_set
    __swig_getmethods__["rxUsecsIrq"] = _vmkctl.PnicCoalesceInfo_rxUsecsIrq_get
    if _newclass:rxUsecsIrq = _swig_property(_vmkctl.PnicCoalesceInfo_rxUsecsIrq_get, _vmkctl.PnicCoalesceInfo_rxUsecsIrq_set)
    __swig_setmethods__["rxFramesIrq"] = _vmkctl.PnicCoalesceInfo_rxFramesIrq_set
    __swig_getmethods__["rxFramesIrq"] = _vmkctl.PnicCoalesceInfo_rxFramesIrq_get
    if _newclass:rxFramesIrq = _swig_property(_vmkctl.PnicCoalesceInfo_rxFramesIrq_get, _vmkctl.PnicCoalesceInfo_rxFramesIrq_set)
    __swig_setmethods__["txUsecs"] = _vmkctl.PnicCoalesceInfo_txUsecs_set
    __swig_getmethods__["txUsecs"] = _vmkctl.PnicCoalesceInfo_txUsecs_get
    if _newclass:txUsecs = _swig_property(_vmkctl.PnicCoalesceInfo_txUsecs_get, _vmkctl.PnicCoalesceInfo_txUsecs_set)
    __swig_setmethods__["txFrames"] = _vmkctl.PnicCoalesceInfo_txFrames_set
    __swig_getmethods__["txFrames"] = _vmkctl.PnicCoalesceInfo_txFrames_get
    if _newclass:txFrames = _swig_property(_vmkctl.PnicCoalesceInfo_txFrames_get, _vmkctl.PnicCoalesceInfo_txFrames_set)
    __swig_setmethods__["txUsecsIrq"] = _vmkctl.PnicCoalesceInfo_txUsecsIrq_set
    __swig_getmethods__["txUsecsIrq"] = _vmkctl.PnicCoalesceInfo_txUsecsIrq_get
    if _newclass:txUsecsIrq = _swig_property(_vmkctl.PnicCoalesceInfo_txUsecsIrq_get, _vmkctl.PnicCoalesceInfo_txUsecsIrq_set)
    __swig_setmethods__["txFramesIrq"] = _vmkctl.PnicCoalesceInfo_txFramesIrq_set
    __swig_getmethods__["txFramesIrq"] = _vmkctl.PnicCoalesceInfo_txFramesIrq_get
    if _newclass:txFramesIrq = _swig_property(_vmkctl.PnicCoalesceInfo_txFramesIrq_get, _vmkctl.PnicCoalesceInfo_txFramesIrq_set)
    __swig_setmethods__["rxUsecsLow"] = _vmkctl.PnicCoalesceInfo_rxUsecsLow_set
    __swig_getmethods__["rxUsecsLow"] = _vmkctl.PnicCoalesceInfo_rxUsecsLow_get
    if _newclass:rxUsecsLow = _swig_property(_vmkctl.PnicCoalesceInfo_rxUsecsLow_get, _vmkctl.PnicCoalesceInfo_rxUsecsLow_set)
    __swig_setmethods__["rxFrameLow"] = _vmkctl.PnicCoalesceInfo_rxFrameLow_set
    __swig_getmethods__["rxFrameLow"] = _vmkctl.PnicCoalesceInfo_rxFrameLow_get
    if _newclass:rxFrameLow = _swig_property(_vmkctl.PnicCoalesceInfo_rxFrameLow_get, _vmkctl.PnicCoalesceInfo_rxFrameLow_set)
    __swig_setmethods__["txUsecsLow"] = _vmkctl.PnicCoalesceInfo_txUsecsLow_set
    __swig_getmethods__["txUsecsLow"] = _vmkctl.PnicCoalesceInfo_txUsecsLow_get
    if _newclass:txUsecsLow = _swig_property(_vmkctl.PnicCoalesceInfo_txUsecsLow_get, _vmkctl.PnicCoalesceInfo_txUsecsLow_set)
    __swig_setmethods__["txFrameLow"] = _vmkctl.PnicCoalesceInfo_txFrameLow_set
    __swig_getmethods__["txFrameLow"] = _vmkctl.PnicCoalesceInfo_txFrameLow_get
    if _newclass:txFrameLow = _swig_property(_vmkctl.PnicCoalesceInfo_txFrameLow_get, _vmkctl.PnicCoalesceInfo_txFrameLow_set)
    __swig_setmethods__["rxUsecsHigh"] = _vmkctl.PnicCoalesceInfo_rxUsecsHigh_set
    __swig_getmethods__["rxUsecsHigh"] = _vmkctl.PnicCoalesceInfo_rxUsecsHigh_get
    if _newclass:rxUsecsHigh = _swig_property(_vmkctl.PnicCoalesceInfo_rxUsecsHigh_get, _vmkctl.PnicCoalesceInfo_rxUsecsHigh_set)
    __swig_setmethods__["rxFrameHigh"] = _vmkctl.PnicCoalesceInfo_rxFrameHigh_set
    __swig_getmethods__["rxFrameHigh"] = _vmkctl.PnicCoalesceInfo_rxFrameHigh_get
    if _newclass:rxFrameHigh = _swig_property(_vmkctl.PnicCoalesceInfo_rxFrameHigh_get, _vmkctl.PnicCoalesceInfo_rxFrameHigh_set)
    __swig_setmethods__["txUsecsHigh"] = _vmkctl.PnicCoalesceInfo_txUsecsHigh_set
    __swig_getmethods__["txUsecsHigh"] = _vmkctl.PnicCoalesceInfo_txUsecsHigh_get
    if _newclass:txUsecsHigh = _swig_property(_vmkctl.PnicCoalesceInfo_txUsecsHigh_get, _vmkctl.PnicCoalesceInfo_txUsecsHigh_set)
    __swig_setmethods__["txFrameHigh"] = _vmkctl.PnicCoalesceInfo_txFrameHigh_set
    __swig_getmethods__["txFrameHigh"] = _vmkctl.PnicCoalesceInfo_txFrameHigh_get
    if _newclass:txFrameHigh = _swig_property(_vmkctl.PnicCoalesceInfo_txFrameHigh_get, _vmkctl.PnicCoalesceInfo_txFrameHigh_set)
    __swig_destroy__ = _vmkctl.delete_PnicCoalesceInfo
    __del__ = lambda self : None;
PnicCoalesceInfo_swigregister = _vmkctl.PnicCoalesceInfo_swigregister
PnicCoalesceInfo_swigregister(PnicCoalesceInfo)

class PnicRingInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicRingInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnicRingInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_PnicRingInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["changed"] = _vmkctl.PnicRingInfo_changed_set
    __swig_getmethods__["changed"] = _vmkctl.PnicRingInfo_changed_get
    if _newclass:changed = _swig_property(_vmkctl.PnicRingInfo_changed_get, _vmkctl.PnicRingInfo_changed_set)
    __swig_setmethods__["rx"] = _vmkctl.PnicRingInfo_rx_set
    __swig_getmethods__["rx"] = _vmkctl.PnicRingInfo_rx_get
    if _newclass:rx = _swig_property(_vmkctl.PnicRingInfo_rx_get, _vmkctl.PnicRingInfo_rx_set)
    __swig_setmethods__["rxMini"] = _vmkctl.PnicRingInfo_rxMini_set
    __swig_getmethods__["rxMini"] = _vmkctl.PnicRingInfo_rxMini_get
    if _newclass:rxMini = _swig_property(_vmkctl.PnicRingInfo_rxMini_get, _vmkctl.PnicRingInfo_rxMini_set)
    __swig_setmethods__["rxJumbo"] = _vmkctl.PnicRingInfo_rxJumbo_set
    __swig_getmethods__["rxJumbo"] = _vmkctl.PnicRingInfo_rxJumbo_get
    if _newclass:rxJumbo = _swig_property(_vmkctl.PnicRingInfo_rxJumbo_get, _vmkctl.PnicRingInfo_rxJumbo_set)
    __swig_setmethods__["tx"] = _vmkctl.PnicRingInfo_tx_set
    __swig_getmethods__["tx"] = _vmkctl.PnicRingInfo_tx_get
    if _newclass:tx = _swig_property(_vmkctl.PnicRingInfo_tx_get, _vmkctl.PnicRingInfo_tx_set)
    __swig_destroy__ = _vmkctl.delete_PnicRingInfo
    __del__ = lambda self : None;
PnicRingInfo_swigregister = _vmkctl.PnicRingInfo_swigregister
PnicRingInfo_swigregister(PnicRingInfo)

class PnicOffloadInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicOffloadInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnicOffloadInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_PnicOffloadInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["changed"] = _vmkctl.PnicOffloadInfo_changed_set
    __swig_getmethods__["changed"] = _vmkctl.PnicOffloadInfo_changed_get
    if _newclass:changed = _swig_property(_vmkctl.PnicOffloadInfo_changed_get, _vmkctl.PnicOffloadInfo_changed_set)
    __swig_setmethods__["rxChecksum"] = _vmkctl.PnicOffloadInfo_rxChecksum_set
    __swig_getmethods__["rxChecksum"] = _vmkctl.PnicOffloadInfo_rxChecksum_get
    if _newclass:rxChecksum = _swig_property(_vmkctl.PnicOffloadInfo_rxChecksum_get, _vmkctl.PnicOffloadInfo_rxChecksum_set)
    __swig_setmethods__["txChecksum"] = _vmkctl.PnicOffloadInfo_txChecksum_set
    __swig_getmethods__["txChecksum"] = _vmkctl.PnicOffloadInfo_txChecksum_get
    if _newclass:txChecksum = _swig_property(_vmkctl.PnicOffloadInfo_txChecksum_get, _vmkctl.PnicOffloadInfo_txChecksum_set)
    __swig_setmethods__["scatterGather"] = _vmkctl.PnicOffloadInfo_scatterGather_set
    __swig_getmethods__["scatterGather"] = _vmkctl.PnicOffloadInfo_scatterGather_get
    if _newclass:scatterGather = _swig_property(_vmkctl.PnicOffloadInfo_scatterGather_get, _vmkctl.PnicOffloadInfo_scatterGather_set)
    __swig_setmethods__["tso"] = _vmkctl.PnicOffloadInfo_tso_set
    __swig_getmethods__["tso"] = _vmkctl.PnicOffloadInfo_tso_get
    if _newclass:tso = _swig_property(_vmkctl.PnicOffloadInfo_tso_get, _vmkctl.PnicOffloadInfo_tso_set)
    __swig_setmethods__["ufo"] = _vmkctl.PnicOffloadInfo_ufo_set
    __swig_getmethods__["ufo"] = _vmkctl.PnicOffloadInfo_ufo_get
    if _newclass:ufo = _swig_property(_vmkctl.PnicOffloadInfo_ufo_get, _vmkctl.PnicOffloadInfo_ufo_set)
    __swig_setmethods__["gso"] = _vmkctl.PnicOffloadInfo_gso_set
    __swig_getmethods__["gso"] = _vmkctl.PnicOffloadInfo_gso_get
    if _newclass:gso = _swig_property(_vmkctl.PnicOffloadInfo_gso_get, _vmkctl.PnicOffloadInfo_gso_set)
    __swig_setmethods__["errMsg"] = _vmkctl.PnicOffloadInfo_errMsg_set
    __swig_getmethods__["errMsg"] = _vmkctl.PnicOffloadInfo_errMsg_get
    if _newclass:errMsg = _swig_property(_vmkctl.PnicOffloadInfo_errMsg_get, _vmkctl.PnicOffloadInfo_errMsg_set)
    __swig_destroy__ = _vmkctl.delete_PnicOffloadInfo
    __del__ = lambda self : None;
PnicOffloadInfo_swigregister = _vmkctl.PnicOffloadInfo_swigregister
PnicOffloadInfo_swigregister(PnicOffloadInfo)

class PnicSoftwareSimulationInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicSoftwareSimulationInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnicSoftwareSimulationInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_PnicSoftwareSimulationInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["changed"] = _vmkctl.PnicSoftwareSimulationInfo_changed_set
    __swig_getmethods__["changed"] = _vmkctl.PnicSoftwareSimulationInfo_changed_get
    if _newclass:changed = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_changed_get, _vmkctl.PnicSoftwareSimulationInfo_changed_set)
    __swig_setmethods__["ipv4CSO"] = _vmkctl.PnicSoftwareSimulationInfo_ipv4CSO_set
    __swig_getmethods__["ipv4CSO"] = _vmkctl.PnicSoftwareSimulationInfo_ipv4CSO_get
    if _newclass:ipv4CSO = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_ipv4CSO_get, _vmkctl.PnicSoftwareSimulationInfo_ipv4CSO_set)
    __swig_setmethods__["ipv4TSO"] = _vmkctl.PnicSoftwareSimulationInfo_ipv4TSO_set
    __swig_getmethods__["ipv4TSO"] = _vmkctl.PnicSoftwareSimulationInfo_ipv4TSO_get
    if _newclass:ipv4TSO = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_ipv4TSO_get, _vmkctl.PnicSoftwareSimulationInfo_ipv4TSO_set)
    __swig_setmethods__["scatterGather"] = _vmkctl.PnicSoftwareSimulationInfo_scatterGather_set
    __swig_getmethods__["scatterGather"] = _vmkctl.PnicSoftwareSimulationInfo_scatterGather_get
    if _newclass:scatterGather = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_scatterGather_get, _vmkctl.PnicSoftwareSimulationInfo_scatterGather_set)
    __swig_setmethods__["offBasedOffload"] = _vmkctl.PnicSoftwareSimulationInfo_offBasedOffload_set
    __swig_getmethods__["offBasedOffload"] = _vmkctl.PnicSoftwareSimulationInfo_offBasedOffload_get
    if _newclass:offBasedOffload = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_offBasedOffload_get, _vmkctl.PnicSoftwareSimulationInfo_offBasedOffload_set)
    __swig_setmethods__["vxlanEncap"] = _vmkctl.PnicSoftwareSimulationInfo_vxlanEncap_set
    __swig_getmethods__["vxlanEncap"] = _vmkctl.PnicSoftwareSimulationInfo_vxlanEncap_get
    if _newclass:vxlanEncap = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_vxlanEncap_get, _vmkctl.PnicSoftwareSimulationInfo_vxlanEncap_set)
    __swig_setmethods__["ipv6TSO"] = _vmkctl.PnicSoftwareSimulationInfo_ipv6TSO_set
    __swig_getmethods__["ipv6TSO"] = _vmkctl.PnicSoftwareSimulationInfo_ipv6TSO_get
    if _newclass:ipv6TSO = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_ipv6TSO_get, _vmkctl.PnicSoftwareSimulationInfo_ipv6TSO_set)
    __swig_setmethods__["ipv6TSOExt"] = _vmkctl.PnicSoftwareSimulationInfo_ipv6TSOExt_set
    __swig_getmethods__["ipv6TSOExt"] = _vmkctl.PnicSoftwareSimulationInfo_ipv6TSOExt_get
    if _newclass:ipv6TSOExt = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_ipv6TSOExt_get, _vmkctl.PnicSoftwareSimulationInfo_ipv6TSOExt_set)
    __swig_setmethods__["ipv6CSO"] = _vmkctl.PnicSoftwareSimulationInfo_ipv6CSO_set
    __swig_getmethods__["ipv6CSO"] = _vmkctl.PnicSoftwareSimulationInfo_ipv6CSO_get
    if _newclass:ipv6CSO = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_ipv6CSO_get, _vmkctl.PnicSoftwareSimulationInfo_ipv6CSO_set)
    __swig_setmethods__["ipv6CSOExt"] = _vmkctl.PnicSoftwareSimulationInfo_ipv6CSOExt_set
    __swig_getmethods__["ipv6CSOExt"] = _vmkctl.PnicSoftwareSimulationInfo_ipv6CSOExt_get
    if _newclass:ipv6CSOExt = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_ipv6CSOExt_get, _vmkctl.PnicSoftwareSimulationInfo_ipv6CSOExt_set)
    __swig_setmethods__["highDMA"] = _vmkctl.PnicSoftwareSimulationInfo_highDMA_set
    __swig_getmethods__["highDMA"] = _vmkctl.PnicSoftwareSimulationInfo_highDMA_get
    if _newclass:highDMA = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_highDMA_get, _vmkctl.PnicSoftwareSimulationInfo_highDMA_set)
    __swig_setmethods__["scatterGatherSpanPages"] = _vmkctl.PnicSoftwareSimulationInfo_scatterGatherSpanPages_set
    __swig_getmethods__["scatterGatherSpanPages"] = _vmkctl.PnicSoftwareSimulationInfo_scatterGatherSpanPages_get
    if _newclass:scatterGatherSpanPages = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_scatterGatherSpanPages_get, _vmkctl.PnicSoftwareSimulationInfo_scatterGatherSpanPages_set)
    __swig_setmethods__["vlanTagging"] = _vmkctl.PnicSoftwareSimulationInfo_vlanTagging_set
    __swig_getmethods__["vlanTagging"] = _vmkctl.PnicSoftwareSimulationInfo_vlanTagging_get
    if _newclass:vlanTagging = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_vlanTagging_get, _vmkctl.PnicSoftwareSimulationInfo_vlanTagging_set)
    __swig_setmethods__["vlanUntagging"] = _vmkctl.PnicSoftwareSimulationInfo_vlanUntagging_set
    __swig_getmethods__["vlanUntagging"] = _vmkctl.PnicSoftwareSimulationInfo_vlanUntagging_get
    if _newclass:vlanUntagging = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_vlanUntagging_get, _vmkctl.PnicSoftwareSimulationInfo_vlanUntagging_set)
    __swig_setmethods__["geneveOffload"] = _vmkctl.PnicSoftwareSimulationInfo_geneveOffload_set
    __swig_getmethods__["geneveOffload"] = _vmkctl.PnicSoftwareSimulationInfo_geneveOffload_get
    if _newclass:geneveOffload = _swig_property(_vmkctl.PnicSoftwareSimulationInfo_geneveOffload_get, _vmkctl.PnicSoftwareSimulationInfo_geneveOffload_set)
    __swig_destroy__ = _vmkctl.delete_PnicSoftwareSimulationInfo
    __del__ = lambda self : None;
PnicSoftwareSimulationInfo_swigregister = _vmkctl.PnicSoftwareSimulationInfo_swigregister
PnicSoftwareSimulationInfo_swigregister(PnicSoftwareSimulationInfo)

class PnicNetqueueInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicNetqueueInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnicNetqueueInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_PnicNetqueueInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["lbSettingChanged"] = _vmkctl.PnicNetqueueInfo_lbSettingChanged_set
    __swig_getmethods__["lbSettingChanged"] = _vmkctl.PnicNetqueueInfo_lbSettingChanged_get
    if _newclass:lbSettingChanged = _swig_property(_vmkctl.PnicNetqueueInfo_lbSettingChanged_get, _vmkctl.PnicNetqueueInfo_lbSettingChanged_set)
    __swig_setmethods__["txQueueCount"] = _vmkctl.PnicNetqueueInfo_txQueueCount_set
    __swig_getmethods__["txQueueCount"] = _vmkctl.PnicNetqueueInfo_txQueueCount_get
    if _newclass:txQueueCount = _swig_property(_vmkctl.PnicNetqueueInfo_txQueueCount_get, _vmkctl.PnicNetqueueInfo_txQueueCount_set)
    __swig_setmethods__["rxQueueCount"] = _vmkctl.PnicNetqueueInfo_rxQueueCount_set
    __swig_getmethods__["rxQueueCount"] = _vmkctl.PnicNetqueueInfo_rxQueueCount_get
    if _newclass:rxQueueCount = _swig_property(_vmkctl.PnicNetqueueInfo_rxQueueCount_get, _vmkctl.PnicNetqueueInfo_rxQueueCount_set)
    __swig_setmethods__["txQCountChanged"] = _vmkctl.PnicNetqueueInfo_txQCountChanged_set
    __swig_getmethods__["txQCountChanged"] = _vmkctl.PnicNetqueueInfo_txQCountChanged_get
    if _newclass:txQCountChanged = _swig_property(_vmkctl.PnicNetqueueInfo_txQCountChanged_get, _vmkctl.PnicNetqueueInfo_txQCountChanged_set)
    __swig_setmethods__["rxQCountChanged"] = _vmkctl.PnicNetqueueInfo_rxQCountChanged_set
    __swig_getmethods__["rxQCountChanged"] = _vmkctl.PnicNetqueueInfo_rxQCountChanged_get
    if _newclass:rxQCountChanged = _swig_property(_vmkctl.PnicNetqueueInfo_rxQCountChanged_get, _vmkctl.PnicNetqueueInfo_rxQCountChanged_set)
    __swig_setmethods__["rxqpair"] = _vmkctl.PnicNetqueueInfo_rxqpair_set
    __swig_getmethods__["rxqpair"] = _vmkctl.PnicNetqueueInfo_rxqpair_get
    if _newclass:rxqpair = _swig_property(_vmkctl.PnicNetqueueInfo_rxqpair_get, _vmkctl.PnicNetqueueInfo_rxqpair_set)
    __swig_setmethods__["rxqnofeat"] = _vmkctl.PnicNetqueueInfo_rxqnofeat_set
    __swig_getmethods__["rxqnofeat"] = _vmkctl.PnicNetqueueInfo_rxqnofeat_get
    if _newclass:rxqnofeat = _swig_property(_vmkctl.PnicNetqueueInfo_rxqnofeat_get, _vmkctl.PnicNetqueueInfo_rxqnofeat_set)
    __swig_setmethods__["rxqpreemptible"] = _vmkctl.PnicNetqueueInfo_rxqpreemptible_set
    __swig_getmethods__["rxqpreemptible"] = _vmkctl.PnicNetqueueInfo_rxqpreemptible_get
    if _newclass:rxqpreemptible = _swig_property(_vmkctl.PnicNetqueueInfo_rxqpreemptible_get, _vmkctl.PnicNetqueueInfo_rxqpreemptible_set)
    __swig_setmethods__["rxqlatency"] = _vmkctl.PnicNetqueueInfo_rxqlatency_set
    __swig_getmethods__["rxqlatency"] = _vmkctl.PnicNetqueueInfo_rxqlatency_get
    if _newclass:rxqlatency = _swig_property(_vmkctl.PnicNetqueueInfo_rxqlatency_get, _vmkctl.PnicNetqueueInfo_rxqlatency_set)
    __swig_setmethods__["rxdynamiclb"] = _vmkctl.PnicNetqueueInfo_rxdynamiclb_set
    __swig_getmethods__["rxdynamiclb"] = _vmkctl.PnicNetqueueInfo_rxdynamiclb_get
    if _newclass:rxdynamiclb = _swig_property(_vmkctl.PnicNetqueueInfo_rxdynamiclb_get, _vmkctl.PnicNetqueueInfo_rxdynamiclb_set)
    __swig_setmethods__["dynamicpoollb"] = _vmkctl.PnicNetqueueInfo_dynamicpoollb_set
    __swig_getmethods__["dynamicpoollb"] = _vmkctl.PnicNetqueueInfo_dynamicpoollb_get
    if _newclass:dynamicpoollb = _swig_property(_vmkctl.PnicNetqueueInfo_dynamicpoollb_get, _vmkctl.PnicNetqueueInfo_dynamicpoollb_set)
    __swig_setmethods__["numadynamiclb"] = _vmkctl.PnicNetqueueInfo_numadynamiclb_set
    __swig_getmethods__["numadynamiclb"] = _vmkctl.PnicNetqueueInfo_numadynamiclb_get
    if _newclass:numadynamiclb = _swig_property(_vmkctl.PnicNetqueueInfo_numadynamiclb_get, _vmkctl.PnicNetqueueInfo_numadynamiclb_set)
    __swig_setmethods__["rss"] = _vmkctl.PnicNetqueueInfo_rss_set
    __swig_getmethods__["rss"] = _vmkctl.PnicNetqueueInfo_rss_get
    if _newclass:rss = _swig_property(_vmkctl.PnicNetqueueInfo_rss_get, _vmkctl.PnicNetqueueInfo_rss_set)
    __swig_setmethods__["lro"] = _vmkctl.PnicNetqueueInfo_lro_set
    __swig_getmethods__["lro"] = _vmkctl.PnicNetqueueInfo_lro_get
    if _newclass:lro = _swig_property(_vmkctl.PnicNetqueueInfo_lro_get, _vmkctl.PnicNetqueueInfo_lro_set)
    __swig_setmethods__["geneveoam"] = _vmkctl.PnicNetqueueInfo_geneveoam_set
    __swig_getmethods__["geneveoam"] = _vmkctl.PnicNetqueueInfo_geneveoam_get
    if _newclass:geneveoam = _swig_property(_vmkctl.PnicNetqueueInfo_geneveoam_get, _vmkctl.PnicNetqueueInfo_geneveoam_set)
    __swig_setmethods__["hwrxqpair"] = _vmkctl.PnicNetqueueInfo_hwrxqpair_set
    __swig_getmethods__["hwrxqpair"] = _vmkctl.PnicNetqueueInfo_hwrxqpair_get
    if _newclass:hwrxqpair = _swig_property(_vmkctl.PnicNetqueueInfo_hwrxqpair_get, _vmkctl.PnicNetqueueInfo_hwrxqpair_set)
    __swig_setmethods__["hwrxqnofeat"] = _vmkctl.PnicNetqueueInfo_hwrxqnofeat_set
    __swig_getmethods__["hwrxqnofeat"] = _vmkctl.PnicNetqueueInfo_hwrxqnofeat_get
    if _newclass:hwrxqnofeat = _swig_property(_vmkctl.PnicNetqueueInfo_hwrxqnofeat_get, _vmkctl.PnicNetqueueInfo_hwrxqnofeat_set)
    __swig_setmethods__["hwrxqpreemptible"] = _vmkctl.PnicNetqueueInfo_hwrxqpreemptible_set
    __swig_getmethods__["hwrxqpreemptible"] = _vmkctl.PnicNetqueueInfo_hwrxqpreemptible_get
    if _newclass:hwrxqpreemptible = _swig_property(_vmkctl.PnicNetqueueInfo_hwrxqpreemptible_get, _vmkctl.PnicNetqueueInfo_hwrxqpreemptible_set)
    __swig_setmethods__["hwrxqlatency"] = _vmkctl.PnicNetqueueInfo_hwrxqlatency_set
    __swig_getmethods__["hwrxqlatency"] = _vmkctl.PnicNetqueueInfo_hwrxqlatency_get
    if _newclass:hwrxqlatency = _swig_property(_vmkctl.PnicNetqueueInfo_hwrxqlatency_get, _vmkctl.PnicNetqueueInfo_hwrxqlatency_set)
    __swig_setmethods__["hwrxdynamiclb"] = _vmkctl.PnicNetqueueInfo_hwrxdynamiclb_set
    __swig_getmethods__["hwrxdynamiclb"] = _vmkctl.PnicNetqueueInfo_hwrxdynamiclb_get
    if _newclass:hwrxdynamiclb = _swig_property(_vmkctl.PnicNetqueueInfo_hwrxdynamiclb_get, _vmkctl.PnicNetqueueInfo_hwrxdynamiclb_set)
    __swig_setmethods__["hwdynamicpoollb"] = _vmkctl.PnicNetqueueInfo_hwdynamicpoollb_set
    __swig_getmethods__["hwdynamicpoollb"] = _vmkctl.PnicNetqueueInfo_hwdynamicpoollb_get
    if _newclass:hwdynamicpoollb = _swig_property(_vmkctl.PnicNetqueueInfo_hwdynamicpoollb_get, _vmkctl.PnicNetqueueInfo_hwdynamicpoollb_set)
    __swig_setmethods__["hwnumadynamiclb"] = _vmkctl.PnicNetqueueInfo_hwnumadynamiclb_set
    __swig_getmethods__["hwnumadynamiclb"] = _vmkctl.PnicNetqueueInfo_hwnumadynamiclb_get
    if _newclass:hwnumadynamiclb = _swig_property(_vmkctl.PnicNetqueueInfo_hwnumadynamiclb_get, _vmkctl.PnicNetqueueInfo_hwnumadynamiclb_set)
    __swig_setmethods__["hwrss"] = _vmkctl.PnicNetqueueInfo_hwrss_set
    __swig_getmethods__["hwrss"] = _vmkctl.PnicNetqueueInfo_hwrss_get
    if _newclass:hwrss = _swig_property(_vmkctl.PnicNetqueueInfo_hwrss_get, _vmkctl.PnicNetqueueInfo_hwrss_set)
    __swig_setmethods__["hwlro"] = _vmkctl.PnicNetqueueInfo_hwlro_set
    __swig_getmethods__["hwlro"] = _vmkctl.PnicNetqueueInfo_hwlro_get
    if _newclass:hwlro = _swig_property(_vmkctl.PnicNetqueueInfo_hwlro_get, _vmkctl.PnicNetqueueInfo_hwlro_set)
    __swig_setmethods__["hwgeneveoam"] = _vmkctl.PnicNetqueueInfo_hwgeneveoam_set
    __swig_getmethods__["hwgeneveoam"] = _vmkctl.PnicNetqueueInfo_hwgeneveoam_get
    if _newclass:hwgeneveoam = _swig_property(_vmkctl.PnicNetqueueInfo_hwgeneveoam_get, _vmkctl.PnicNetqueueInfo_hwgeneveoam_set)
    __swig_setmethods__["rxFilterClassMacOnly"] = _vmkctl.PnicNetqueueInfo_rxFilterClassMacOnly_set
    __swig_getmethods__["rxFilterClassMacOnly"] = _vmkctl.PnicNetqueueInfo_rxFilterClassMacOnly_get
    if _newclass:rxFilterClassMacOnly = _swig_property(_vmkctl.PnicNetqueueInfo_rxFilterClassMacOnly_get, _vmkctl.PnicNetqueueInfo_rxFilterClassMacOnly_set)
    __swig_setmethods__["rxFilterClassVlanOnly"] = _vmkctl.PnicNetqueueInfo_rxFilterClassVlanOnly_set
    __swig_getmethods__["rxFilterClassVlanOnly"] = _vmkctl.PnicNetqueueInfo_rxFilterClassVlanOnly_get
    if _newclass:rxFilterClassVlanOnly = _swig_property(_vmkctl.PnicNetqueueInfo_rxFilterClassVlanOnly_get, _vmkctl.PnicNetqueueInfo_rxFilterClassVlanOnly_set)
    __swig_setmethods__["rxFilterClassVlanMac"] = _vmkctl.PnicNetqueueInfo_rxFilterClassVlanMac_set
    __swig_getmethods__["rxFilterClassVlanMac"] = _vmkctl.PnicNetqueueInfo_rxFilterClassVlanMac_get
    if _newclass:rxFilterClassVlanMac = _swig_property(_vmkctl.PnicNetqueueInfo_rxFilterClassVlanMac_get, _vmkctl.PnicNetqueueInfo_rxFilterClassVlanMac_set)
    __swig_setmethods__["rxFilterClassVxlan"] = _vmkctl.PnicNetqueueInfo_rxFilterClassVxlan_set
    __swig_getmethods__["rxFilterClassVxlan"] = _vmkctl.PnicNetqueueInfo_rxFilterClassVxlan_get
    if _newclass:rxFilterClassVxlan = _swig_property(_vmkctl.PnicNetqueueInfo_rxFilterClassVxlan_get, _vmkctl.PnicNetqueueInfo_rxFilterClassVxlan_set)
    __swig_setmethods__["rxFilterClassGeneve"] = _vmkctl.PnicNetqueueInfo_rxFilterClassGeneve_set
    __swig_getmethods__["rxFilterClassGeneve"] = _vmkctl.PnicNetqueueInfo_rxFilterClassGeneve_get
    if _newclass:rxFilterClassGeneve = _swig_property(_vmkctl.PnicNetqueueInfo_rxFilterClassGeneve_get, _vmkctl.PnicNetqueueInfo_rxFilterClassGeneve_set)
    __swig_setmethods__["rxFilterClassGenericEncap"] = _vmkctl.PnicNetqueueInfo_rxFilterClassGenericEncap_set
    __swig_getmethods__["rxFilterClassGenericEncap"] = _vmkctl.PnicNetqueueInfo_rxFilterClassGenericEncap_get
    if _newclass:rxFilterClassGenericEncap = _swig_property(_vmkctl.PnicNetqueueInfo_rxFilterClassGenericEncap_get, _vmkctl.PnicNetqueueInfo_rxFilterClassGenericEncap_set)
    __swig_destroy__ = _vmkctl.delete_PnicNetqueueInfo
    __del__ = lambda self : None;
PnicNetqueueInfo_swigregister = _vmkctl.PnicNetqueueInfo_swigregister
PnicNetqueueInfo_swigregister(PnicNetqueueInfo)

class PnicDriverInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicDriverInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnicDriverInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_PnicDriverInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["name"] = _vmkctl.PnicDriverInfo_name_set
    __swig_getmethods__["name"] = _vmkctl.PnicDriverInfo_name_get
    if _newclass:name = _swig_property(_vmkctl.PnicDriverInfo_name_get, _vmkctl.PnicDriverInfo_name_set)
    __swig_setmethods__["version"] = _vmkctl.PnicDriverInfo_version_set
    __swig_getmethods__["version"] = _vmkctl.PnicDriverInfo_version_get
    if _newclass:version = _swig_property(_vmkctl.PnicDriverInfo_version_get, _vmkctl.PnicDriverInfo_version_set)
    __swig_setmethods__["firmwareVersion"] = _vmkctl.PnicDriverInfo_firmwareVersion_set
    __swig_getmethods__["firmwareVersion"] = _vmkctl.PnicDriverInfo_firmwareVersion_get
    if _newclass:firmwareVersion = _swig_property(_vmkctl.PnicDriverInfo_firmwareVersion_get, _vmkctl.PnicDriverInfo_firmwareVersion_set)
    __swig_setmethods__["busInfo"] = _vmkctl.PnicDriverInfo_busInfo_set
    __swig_getmethods__["busInfo"] = _vmkctl.PnicDriverInfo_busInfo_get
    if _newclass:busInfo = _swig_property(_vmkctl.PnicDriverInfo_busInfo_get, _vmkctl.PnicDriverInfo_busInfo_set)
    __swig_destroy__ = _vmkctl.delete_PnicDriverInfo
    __del__ = lambda self : None;
PnicDriverInfo_swigregister = _vmkctl.PnicDriverInfo_swigregister
PnicDriverInfo_swigregister(PnicDriverInfo)

class PnicTestInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicTestInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PnicTestInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_PnicTestInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["result"] = _vmkctl.PnicTestInfo_result_set
    __swig_getmethods__["result"] = _vmkctl.PnicTestInfo_result_get
    if _newclass:result = _swig_property(_vmkctl.PnicTestInfo_result_get, _vmkctl.PnicTestInfo_result_set)
    __swig_setmethods__["info"] = _vmkctl.PnicTestInfo_info_set
    __swig_getmethods__["info"] = _vmkctl.PnicTestInfo_info_get
    if _newclass:info = _swig_property(_vmkctl.PnicTestInfo_info_get, _vmkctl.PnicTestInfo_info_set)
    __swig_destroy__ = _vmkctl.delete_PnicTestInfo
    __del__ = lambda self : None;
PnicTestInfo_swigregister = _vmkctl.PnicTestInfo_swigregister
PnicTestInfo_swigregister(PnicTestInfo)

class Pnic(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pnic, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pnic, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self) -> "std::string" : return _vmkctl.Pnic_GetName(self)
    def GetPciDevice(self) -> "HostCtl::Hardware::PciDevicePtr" : return _vmkctl.Pnic_GetPciDevice(self)
    def GetConfiguredDuplex(self) -> "HostCtl::Network::Duplex" : return _vmkctl.Pnic_GetConfiguredDuplex(self)
    def GetDuplex(self) -> "HostCtl::Network::Duplex" : return _vmkctl.Pnic_GetDuplex(self)
    def IsLinkUp(self) -> "bool" : return _vmkctl.Pnic_IsLinkUp(self)
    def IsOperationalLinkUp(self) -> "bool" : return _vmkctl.Pnic_IsOperationalLinkUp(self)
    def IsAdministrativeLinkUp(self) -> "bool" : return _vmkctl.Pnic_IsAdministrativeLinkUp(self)
    def IsEnabled(self) -> "bool" : return _vmkctl.Pnic_IsEnabled(self)
    def GetConfiguredLinkSpeed(self) -> "HostCtl::Network::LinkSpeed" : return _vmkctl.Pnic_GetConfiguredLinkSpeed(self)
    def GetLinkSpeed(self) -> "uint32" : return _vmkctl.Pnic_GetLinkSpeed(self)
    def SetLinkSpeedAndDuplex(self, *args) -> "void" : return _vmkctl.Pnic_SetLinkSpeedAndDuplex(self, *args)
    def GetHardwareCapabilities(self) -> "HostCtl::Network::NicCapabilities" : return _vmkctl.Pnic_GetHardwareCapabilities(self)
    def GetDriverName(self) -> "std::string" : return _vmkctl.Pnic_GetDriverName(self)
    def GetSupportedModes(self, mask : 'uint32' = None) -> "std::vector< HostCtl::Network::PnicLinkMode,std::allocator< HostCtl::Network::PnicLinkMode > >" : return _vmkctl.Pnic_GetSupportedModes(self, mask)
    def GetHint(self) -> "std::string" : return _vmkctl.Pnic_GetHint(self)
    def GetMacAddress(self) -> "HostCtl::Network::MacAddress" : return _vmkctl.Pnic_GetMacAddress(self)
    def GetVirtualMacAddress(self) -> "HostCtl::Network::MacAddress" : return _vmkctl.Pnic_GetVirtualMacAddress(self)
    def GetResPoolsSchedAllowed(self) -> "bool" : return _vmkctl.Pnic_GetResPoolsSchedAllowed(self)
    def SetEnabled(self, *args) -> "void" : return _vmkctl.Pnic_SetEnabled(self, *args)
    def SetResPoolsSchedAllowed(self, allowed : 'bool' = True) -> "void" : return _vmkctl.Pnic_SetResPoolsSchedAllowed(self, allowed)
    def GetResPoolsSchedSupported(self) -> "bool" : return _vmkctl.Pnic_GetResPoolsSchedSupported(self)
    def GetWakeOnLANEnabled(self) -> "bool" : return _vmkctl.Pnic_GetWakeOnLANEnabled(self)
    def GetWakeOnLANSupported(self) -> "bool" : return _vmkctl.Pnic_GetWakeOnLANSupported(self)
    def SetWakeOnLANEnabled(self, *args) -> "void" : return _vmkctl.Pnic_SetWakeOnLANEnabled(self, *args)
    def GetDPStatus(self) -> "HostCtl::Network::DPStatus" : return _vmkctl.Pnic_GetDPStatus(self)
    def GetCdpInfo(self) -> "HostCtl::Network::CdpSummary" : return _vmkctl.Pnic_GetCdpInfo(self)
    def GetLldpInfo(self) -> "HostCtl::Network::LldpSummary" : return _vmkctl.Pnic_GetLldpInfo(self)
    def GetMTU(self) -> "uint32" : return _vmkctl.Pnic_GetMTU(self)
    def IsPseudoDevice(self) -> "bool" : return _vmkctl.Pnic_IsPseudoDevice(self)
    def GetSourcePortStats(self, *args) -> "HostCtl::Network::PNicSourcePortStats" : return _vmkctl.Pnic_GetSourcePortStats(self, *args)
    def GetPnicStats(self, *args) -> "void" : return _vmkctl.Pnic_GetPnicStats(self, *args)
    def GetPnicPrivStats(self) -> "std::string" : return _vmkctl.Pnic_GetPnicPrivStats(self)
    def GetPnicInfo(self, *args) -> "void" : return _vmkctl.Pnic_GetPnicInfo(self, *args)
    def GetPnicPauseInfo(self, *args) -> "void" : return _vmkctl.Pnic_GetPnicPauseInfo(self, *args)
    def GetPnicCoalesceInfo(self, *args) -> "void" : return _vmkctl.Pnic_GetPnicCoalesceInfo(self, *args)
    def GetPnicRingInfo(self, *args) -> "void" : return _vmkctl.Pnic_GetPnicRingInfo(self, *args)
    def GetPnicOffloadInfo(self, *args) -> "void" : return _vmkctl.Pnic_GetPnicOffloadInfo(self, *args)
    def GetPnicSoftwareSimulationInfo(self, *args) -> "void" : return _vmkctl.Pnic_GetPnicSoftwareSimulationInfo(self, *args)
    def GetPnicNetqueueInfo(self, *args) -> "void" : return _vmkctl.Pnic_GetPnicNetqueueInfo(self, *args)
    def GetPnicDriverInfo(self, *args) -> "void" : return _vmkctl.Pnic_GetPnicDriverInfo(self, *args)
    def SetPnicInfo(self, *args) -> "void" : return _vmkctl.Pnic_SetPnicInfo(self, *args)
    def SetPnicPauseInfo(self, *args) -> "void" : return _vmkctl.Pnic_SetPnicPauseInfo(self, *args)
    def SetPnicCoalesceInfo(self, *args) -> "void" : return _vmkctl.Pnic_SetPnicCoalesceInfo(self, *args)
    def SetPnicRingInfo(self, *args) -> "void" : return _vmkctl.Pnic_SetPnicRingInfo(self, *args)
    def SetPnicOffloadInfo(self, *args) -> "void" : return _vmkctl.Pnic_SetPnicOffloadInfo(self, *args)
    def SetPnicSoftwareSimulationInfo(self, *args) -> "void" : return _vmkctl.Pnic_SetPnicSoftwareSimulationInfo(self, *args)
    def SetPnicNetqueueInfo(self, *args) -> "void" : return _vmkctl.Pnic_SetPnicNetqueueInfo(self, *args)
    def DumpRegister(self, *args) -> "void" : return _vmkctl.Pnic_DumpRegister(self, *args)
    def DumpEEPROM(self, *args) -> "void" : return _vmkctl.Pnic_DumpEEPROM(self, *args)
    def ChangeEEPROM(self, *args) -> "void" : return _vmkctl.Pnic_ChangeEEPROM(self, *args)
    def RestartNegotiation(self) -> "void" : return _vmkctl.Pnic_RestartNegotiation(self)
    def IdentifyNic(self, id_time : 'uint32' = 0) -> "void" : return _vmkctl.Pnic_IdentifyNic(self, id_time)
    def RunSelfTest(self, *args) -> "void" : return _vmkctl.Pnic_RunSelfTest(self, *args)
    __swig_destroy__ = _vmkctl.delete_Pnic
    __del__ = lambda self : None;
Pnic_swigregister = _vmkctl.Pnic_swigregister
Pnic_swigregister(Pnic)

class FcoePnicVlanRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FcoePnicVlanRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FcoePnicVlanRange, name)
    __repr__ = _swig_repr
    __swig_setmethods__["minVlanId"] = _vmkctl.FcoePnicVlanRange_minVlanId_set
    __swig_getmethods__["minVlanId"] = _vmkctl.FcoePnicVlanRange_minVlanId_get
    if _newclass:minVlanId = _swig_property(_vmkctl.FcoePnicVlanRange_minVlanId_get, _vmkctl.FcoePnicVlanRange_minVlanId_set)
    __swig_setmethods__["maxVlanId"] = _vmkctl.FcoePnicVlanRange_maxVlanId_set
    __swig_getmethods__["maxVlanId"] = _vmkctl.FcoePnicVlanRange_maxVlanId_get
    if _newclass:maxVlanId = _swig_property(_vmkctl.FcoePnicVlanRange_maxVlanId_get, _vmkctl.FcoePnicVlanRange_maxVlanId_set)
    def __init__(self): 
        this = _vmkctl.new_FcoePnicVlanRange()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_FcoePnicVlanRange
    __del__ = lambda self : None;
FcoePnicVlanRange_swigregister = _vmkctl.FcoePnicVlanRange_swigregister
FcoePnicVlanRange_swigregister(FcoePnicVlanRange)

class FcoeCapabilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FcoeCapabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FcoeCapabilities, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_FcoeCapabilities()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["priorityClass"] = _vmkctl.FcoeCapabilities_priorityClass_set
    __swig_getmethods__["priorityClass"] = _vmkctl.FcoeCapabilities_priorityClass_get
    if _newclass:priorityClass = _swig_property(_vmkctl.FcoeCapabilities_priorityClass_get, _vmkctl.FcoeCapabilities_priorityClass_set)
    __swig_setmethods__["sourceMacAddress"] = _vmkctl.FcoeCapabilities_sourceMacAddress_set
    __swig_getmethods__["sourceMacAddress"] = _vmkctl.FcoeCapabilities_sourceMacAddress_get
    if _newclass:sourceMacAddress = _swig_property(_vmkctl.FcoeCapabilities_sourceMacAddress_get, _vmkctl.FcoeCapabilities_sourceMacAddress_set)
    __swig_setmethods__["vlanRange"] = _vmkctl.FcoeCapabilities_vlanRange_set
    __swig_getmethods__["vlanRange"] = _vmkctl.FcoeCapabilities_vlanRange_get
    if _newclass:vlanRange = _swig_property(_vmkctl.FcoeCapabilities_vlanRange_get, _vmkctl.FcoeCapabilities_vlanRange_set)
    __swig_destroy__ = _vmkctl.delete_FcoeCapabilities
    __del__ = lambda self : None;
FcoeCapabilities_swigregister = _vmkctl.FcoeCapabilities_swigregister
FcoeCapabilities_swigregister(FcoeCapabilities)

class FcoePnic(Pnic):
    __swig_setmethods__ = {}
    for _s in [Pnic]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FcoePnic, name, value)
    __swig_getmethods__ = {}
    for _s in [Pnic]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FcoePnic, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetFcoeCapabilities(self) -> "HostCtl::Network::FcoeCapabilities" : return _vmkctl.FcoePnic_GetFcoeCapabilities(self)
    def IssueFcoeDiscovery(self, vlanId : 'uint16' = 0) -> "void" : return _vmkctl.FcoePnic_IssueFcoeDiscovery(self, vlanId)
    def DeactivateFcoe(self) -> "void" : return _vmkctl.FcoePnic_DeactivateFcoe(self)
    def IsFcoeActive(self) -> "bool" : return _vmkctl.FcoePnic_IsFcoeActive(self)
    def GetFcoePriority(self) -> "uint8" : return _vmkctl.FcoePnic_GetFcoePriority(self)
    def SetFcoePriority(self, *args) -> "void" : return _vmkctl.FcoePnic_SetFcoePriority(self, *args)
    def GetFcoeVlanRanges(self) -> "std::vector< HostCtl::Network::FcoePnicVlanRange,std::allocator< HostCtl::Network::FcoePnicVlanRange > >" : return _vmkctl.FcoePnic_GetFcoeVlanRanges(self)
    def SetFcoeVlanRanges(self, *args) -> "void" : return _vmkctl.FcoePnic_SetFcoeVlanRanges(self, *args)
    def AddFcoeVlanRange(self, *args) -> "void" : return _vmkctl.FcoePnic_AddFcoeVlanRange(self, *args)
    def RemoveFcoeVlanRange(self, *args) -> "void" : return _vmkctl.FcoePnic_RemoveFcoeVlanRange(self, *args)
    def GetFcoeSourceMacAddress(self) -> "HostCtl::Network::MacAddress" : return _vmkctl.FcoePnic_GetFcoeSourceMacAddress(self)
    def SetSourceMacAddress(self, *args) -> "void" : return _vmkctl.FcoePnic_SetSourceMacAddress(self, *args)
    def IsFcoeEnabled(self) -> "bool" : return _vmkctl.FcoePnic_IsFcoeEnabled(self)
    def SetFcoeEnabled(self, *args) -> "void" : return _vmkctl.FcoePnic_SetFcoeEnabled(self, *args)
    def IsFcoeBootable(self, *args) -> "bool" : return _vmkctl.FcoePnic_IsFcoeBootable(self, *args)
    def IsDCBHWAssistMode(self) -> "bool" : return _vmkctl.FcoePnic_IsDCBHWAssistMode(self)
    def SetFcoeCnaVN2VNEnabled(self, *args) -> "void" : return _vmkctl.FcoePnic_SetFcoeCnaVN2VNEnabled(self, *args)
    def IsFcoeCnaVN2VNEnabled(self) -> "bool" : return _vmkctl.FcoePnic_IsFcoeCnaVN2VNEnabled(self)
    __swig_destroy__ = _vmkctl.delete_FcoePnic
    __del__ = lambda self : None;
FcoePnic_swigregister = _vmkctl.FcoePnic_swigregister
FcoePnic_swigregister(FcoePnic)

class PnicImpl(Pnic,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [Pnic,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PnicImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [Pnic,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PnicImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PnicImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PnicImpl
    __del__ = lambda self : None;
    def GetName(self) -> "std::string" : return _vmkctl.PnicImpl_GetName(self)
    def GetPciDevice(self) -> "HostCtl::Hardware::PciDevicePtr" : return _vmkctl.PnicImpl_GetPciDevice(self)
    def GetConfiguredDuplex(self) -> "HostCtl::Network::Duplex" : return _vmkctl.PnicImpl_GetConfiguredDuplex(self)
    def GetConfiguredLinkSpeed(self) -> "HostCtl::Network::LinkSpeed" : return _vmkctl.PnicImpl_GetConfiguredLinkSpeed(self)
    def GetDuplex(self) -> "HostCtl::Network::Duplex" : return _vmkctl.PnicImpl_GetDuplex(self)
    def GetLinkSpeed(self) -> "uint32" : return _vmkctl.PnicImpl_GetLinkSpeed(self)
    def SetLinkSpeedAndDuplex(self, *args) -> "void" : return _vmkctl.PnicImpl_SetLinkSpeedAndDuplex(self, *args)
    def IsLinkUp(self) -> "bool" : return _vmkctl.PnicImpl_IsLinkUp(self)
    def IsOperationalLinkUp(self) -> "bool" : return _vmkctl.PnicImpl_IsOperationalLinkUp(self)
    def IsAdministrativeLinkUp(self) -> "bool" : return _vmkctl.PnicImpl_IsAdministrativeLinkUp(self)
    def IsEnabled(self) -> "bool" : return _vmkctl.PnicImpl_IsEnabled(self)
    def IsPseudoDevice(self) -> "bool" : return _vmkctl.PnicImpl_IsPseudoDevice(self)
    def GetHardwareCapabilities(self) -> "HostCtl::Network::NicCapabilities" : return _vmkctl.PnicImpl_GetHardwareCapabilities(self)
    def GetDriverName(self) -> "std::string" : return _vmkctl.PnicImpl_GetDriverName(self)
    def GetHint(self) -> "std::string" : return _vmkctl.PnicImpl_GetHint(self)
    def GetMTU(self) -> "uint32" : return _vmkctl.PnicImpl_GetMTU(self)
    def GetResPoolsSchedAllowed(self) -> "bool" : return _vmkctl.PnicImpl_GetResPoolsSchedAllowed(self)
    def GetResPoolsSchedSupported(self) -> "bool" : return _vmkctl.PnicImpl_GetResPoolsSchedSupported(self)
    def GetMacAddress(self) -> "HostCtl::Network::MacAddress" : return _vmkctl.PnicImpl_GetMacAddress(self)
    def GetVirtualMacAddress(self) -> "HostCtl::Network::MacAddress" : return _vmkctl.PnicImpl_GetVirtualMacAddress(self)
    def GetWakeOnLANEnabled(self) -> "bool" : return _vmkctl.PnicImpl_GetWakeOnLANEnabled(self)
    def GetWakeOnLANSupported(self) -> "bool" : return _vmkctl.PnicImpl_GetWakeOnLANSupported(self)
    def SetWakeOnLANEnabled(self, *args) -> "void" : return _vmkctl.PnicImpl_SetWakeOnLANEnabled(self, *args)
    def GetSupportedModes(self, mask : 'uint32' = None) -> "std::vector< HostCtl::Network::PnicLinkMode,std::allocator< HostCtl::Network::PnicLinkMode > >" : return _vmkctl.PnicImpl_GetSupportedModes(self, mask)
    def Refresh(self) -> "void" : return _vmkctl.PnicImpl_Refresh(self)
    def Print(self, *args) -> "void" : return _vmkctl.PnicImpl_Print(self, *args)
    def LoadConfig(self) -> "void" : return _vmkctl.PnicImpl_LoadConfig(self)
    __swig_getmethods__["IsValidPnic"] = lambda x: _vmkctl.PnicImpl_IsValidPnic
    if _newclass:IsValidPnic = staticmethod(_vmkctl.PnicImpl_IsValidPnic)
    __swig_getmethods__["GetNewNicName"] = lambda x: _vmkctl.PnicImpl_GetNewNicName
    if _newclass:GetNewNicName = staticmethod(_vmkctl.PnicImpl_GetNewNicName)
    def GetDPStatus(self) -> "HostCtl::Network::DPStatus" : return _vmkctl.PnicImpl_GetDPStatus(self)
    def GetCdpInfo(self) -> "HostCtl::Network::CdpSummary" : return _vmkctl.PnicImpl_GetCdpInfo(self)
    def GetLldpInfo(self) -> "HostCtl::Network::LldpSummary" : return _vmkctl.PnicImpl_GetLldpInfo(self)
    def SetMTU(self, *args) -> "void" : return _vmkctl.PnicImpl_SetMTU(self, *args)
    def SetEnabled(self, *args) -> "void" : return _vmkctl.PnicImpl_SetEnabled(self, *args)
    __swig_getmethods__["SetEnabledInternal"] = lambda x: _vmkctl.PnicImpl_SetEnabledInternal
    if _newclass:SetEnabledInternal = staticmethod(_vmkctl.PnicImpl_SetEnabledInternal)
    def SetVirtualMac(self, *args) -> "void" : return _vmkctl.PnicImpl_SetVirtualMac(self, *args)
    def SetResPoolsSchedAllowed(self, *args) -> "void" : return _vmkctl.PnicImpl_SetResPoolsSchedAllowed(self, *args)
    def GetSourcePortStats(self, *args) -> "HostCtl::Network::PNicSourcePortStats" : return _vmkctl.PnicImpl_GetSourcePortStats(self, *args)
    def GetPnicStats(self, *args) -> "void" : return _vmkctl.PnicImpl_GetPnicStats(self, *args)
    def GetPnicPrivStats(self) -> "std::string" : return _vmkctl.PnicImpl_GetPnicPrivStats(self)
    def GetPnicInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_GetPnicInfo(self, *args)
    def GetPnicPauseInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_GetPnicPauseInfo(self, *args)
    def GetPnicCoalesceInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_GetPnicCoalesceInfo(self, *args)
    def GetPnicRingInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_GetPnicRingInfo(self, *args)
    def GetPnicOffloadInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_GetPnicOffloadInfo(self, *args)
    def GetPnicSoftwareSimulationInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_GetPnicSoftwareSimulationInfo(self, *args)
    def GetPnicNetqueueInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_GetPnicNetqueueInfo(self, *args)
    def GetPnicDriverInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_GetPnicDriverInfo(self, *args)
    def SetPnicInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_SetPnicInfo(self, *args)
    def SetPnicPauseInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_SetPnicPauseInfo(self, *args)
    def SetPnicCoalesceInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_SetPnicCoalesceInfo(self, *args)
    def SetPnicRingInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_SetPnicRingInfo(self, *args)
    def SetPnicOffloadInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_SetPnicOffloadInfo(self, *args)
    def SetPnicSoftwareSimulationInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_SetPnicSoftwareSimulationInfo(self, *args)
    def SetPnicNetqueueInfo(self, *args) -> "void" : return _vmkctl.PnicImpl_SetPnicNetqueueInfo(self, *args)
    def DumpRegister(self, *args) -> "void" : return _vmkctl.PnicImpl_DumpRegister(self, *args)
    def DumpEEPROM(self, *args) -> "void" : return _vmkctl.PnicImpl_DumpEEPROM(self, *args)
    def ChangeEEPROM(self, *args) -> "void" : return _vmkctl.PnicImpl_ChangeEEPROM(self, *args)
    def RestartNegotiation(self) -> "void" : return _vmkctl.PnicImpl_RestartNegotiation(self)
    def IdentifyNic(self, id_time : 'uint32' = 0) -> "void" : return _vmkctl.PnicImpl_IdentifyNic(self, id_time)
    def RunSelfTest(self, *args) -> "void" : return _vmkctl.PnicImpl_RunSelfTest(self, *args)
    def IsLegacy(self) -> "bool" : return _vmkctl.PnicImpl_IsLegacy(self)
PnicImpl_swigregister = _vmkctl.PnicImpl_swigregister
PnicImpl_swigregister(PnicImpl)

def PnicImpl_IsValidPnic(*args) -> "bool" :
  return _vmkctl.PnicImpl_IsValidPnic(*args)
PnicImpl_IsValidPnic = _vmkctl.PnicImpl_IsValidPnic

def PnicImpl_GetNewNicName(*args) -> "std::string" :
  return _vmkctl.PnicImpl_GetNewNicName(*args)
PnicImpl_GetNewNicName = _vmkctl.PnicImpl_GetNewNicName

def PnicImpl_SetEnabledInternal(*args) -> "void" :
  return _vmkctl.PnicImpl_SetEnabledInternal(*args)
PnicImpl_SetEnabledInternal = _vmkctl.PnicImpl_SetEnabledInternal

class FcoePnicImpl(FcoePnic,PnicImpl):
    __swig_setmethods__ = {}
    for _s in [FcoePnic,PnicImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FcoePnicImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [FcoePnic,PnicImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FcoePnicImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_FcoePnicImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_FcoePnicImpl
    __del__ = lambda self : None;
    def IssueFcoeDiscovery(self, vlanId : 'uint16' = 0) -> "void" : return _vmkctl.FcoePnicImpl_IssueFcoeDiscovery(self, vlanId)
    def DeactivateFcoe(self) -> "void" : return _vmkctl.FcoePnicImpl_DeactivateFcoe(self)
    def GetFcoeCapabilities(self) -> "HostCtl::Network::FcoeCapabilities" : return _vmkctl.FcoePnicImpl_GetFcoeCapabilities(self)
    def IsFcoeActive(self) -> "bool" : return _vmkctl.FcoePnicImpl_IsFcoeActive(self)
    def GetFcoePriority(self) -> "uint8" : return _vmkctl.FcoePnicImpl_GetFcoePriority(self)
    def SetFcoePriority(self, *args) -> "void" : return _vmkctl.FcoePnicImpl_SetFcoePriority(self, *args)
    def GetFcoeVlanRanges(self) -> "std::vector< HostCtl::Network::FcoePnicVlanRange,std::allocator< HostCtl::Network::FcoePnicVlanRange > >" : return _vmkctl.FcoePnicImpl_GetFcoeVlanRanges(self)
    def SetFcoeVlanRanges(self, *args) -> "void" : return _vmkctl.FcoePnicImpl_SetFcoeVlanRanges(self, *args)
    def AddFcoeVlanRange(self, *args) -> "void" : return _vmkctl.FcoePnicImpl_AddFcoeVlanRange(self, *args)
    def RemoveFcoeVlanRange(self, *args) -> "void" : return _vmkctl.FcoePnicImpl_RemoveFcoeVlanRange(self, *args)
    def GetFcoeSourceMacAddress(self) -> "HostCtl::Network::MacAddress" : return _vmkctl.FcoePnicImpl_GetFcoeSourceMacAddress(self)
    def SetSourceMacAddress(self, *args) -> "void" : return _vmkctl.FcoePnicImpl_SetSourceMacAddress(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.FcoePnicImpl_Refresh(self)
    def LoadConfig(self) -> "void" : return _vmkctl.FcoePnicImpl_LoadConfig(self)
    def PercentBandwidthToMbps(self) -> "uint32" : return _vmkctl.FcoePnicImpl_PercentBandwidthToMbps(self)
    def IsFcoeEnabled(self) -> "bool" : return _vmkctl.FcoePnicImpl_IsFcoeEnabled(self)
    def SetFcoeEnabled(self, *args) -> "void" : return _vmkctl.FcoePnicImpl_SetFcoeEnabled(self, *args)
    def IsFcoeBootable(self, *args) -> "bool" : return _vmkctl.FcoePnicImpl_IsFcoeBootable(self, *args)
    def IsDCBHWAssistMode(self) -> "bool" : return _vmkctl.FcoePnicImpl_IsDCBHWAssistMode(self)
    def SetFcoeCnaVN2VNEnabled(self, *args) -> "void" : return _vmkctl.FcoePnicImpl_SetFcoeCnaVN2VNEnabled(self, *args)
    def IsFcoeCnaVN2VNEnabled(self) -> "bool" : return _vmkctl.FcoePnicImpl_IsFcoeCnaVN2VNEnabled(self)
FcoePnicImpl_swigregister = _vmkctl.FcoePnicImpl_swigregister
FcoePnicImpl_swigregister(FcoePnicImpl)

class DVFilter(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVFilter, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DVFilter, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetWorldId(self) -> "uint32" : return _vmkctl.DVFilter_GetWorldId(self)
    def GetVNicIndex(self) -> "uint32" : return _vmkctl.DVFilter_GetVNicIndex(self)
    def GetFilterIndex(self) -> "uint32" : return _vmkctl.DVFilter_GetFilterIndex(self)
    def GetPortId(self) -> "uint32" : return _vmkctl.DVFilter_GetPortId(self)
    def GetRefCount(self) -> "uint32" : return _vmkctl.DVFilter_GetRefCount(self)
    def GetAgentName(self) -> "std::string" : return _vmkctl.DVFilter_GetAgentName(self)
    __swig_destroy__ = _vmkctl.delete_DVFilter
    __del__ = lambda self : None;
DVFilter_swigregister = _vmkctl.DVFilter_swigregister
DVFilter_swigregister(DVFilter)

class Port(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Port, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Port, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    PORT_TYPE_NONE = _vmkctl.Port_PORT_TYPE_NONE
    PORT_TYPE_TEST = _vmkctl.Port_PORT_TYPE_TEST
    PORT_TYPE_COS = _vmkctl.Port_PORT_TYPE_COS
    PORT_TYPE_TCPIP = _vmkctl.Port_PORT_TYPE_TCPIP
    PORT_TYPE_PNIC = _vmkctl.Port_PORT_TYPE_PNIC
    PORT_TYPE_VMM = _vmkctl.Port_PORT_TYPE_VMM
    PORT_TYPE_VLANCE = _vmkctl.Port_PORT_TYPE_VLANCE
    PORT_TYPE_E1000 = _vmkctl.Port_PORT_TYPE_E1000
    PORT_TYPE_VMXNET2 = _vmkctl.Port_PORT_TYPE_VMXNET2
    PORT_TYPE_VMXNET3 = _vmkctl.Port_PORT_TYPE_VMXNET3
    PORT_TYPE_SRIOV = _vmkctl.Port_PORT_TYPE_SRIOV
    PORT_TYPE_LAG = _vmkctl.Port_PORT_TYPE_LAG
    PORT_TYPE_ASSOC = _vmkctl.Port_PORT_TYPE_ASSOC
    def GetId(self) -> "uint32" : return _vmkctl.Port_GetId(self)
    def GetPortGroupName(self) -> "std::string" : return _vmkctl.Port_GetPortGroupName(self)
    def GetPortGroup(self) -> "HostCtl::Network::PortGroupPtr" : return _vmkctl.Port_GetPortGroup(self)
    def GetPortsetName(self) -> "std::string" : return _vmkctl.Port_GetPortsetName(self)
    def GetMacAddresses(self) -> "std::vector< HostCtl::Network::MacAddress,std::allocator< HostCtl::Network::MacAddress > >" : return _vmkctl.Port_GetMacAddresses(self)
    def GetPortStats(self) -> "PortStats" : return _vmkctl.Port_GetPortStats(self)
    def GetPacketStats(self, *args) -> "void" : return _vmkctl.Port_GetPacketStats(self, *args)
    def GetWorldLeader(self) -> "uint32" : return _vmkctl.Port_GetWorldLeader(self)
    def GetType(self) -> "HostCtl::Network::Port::PortType" : return _vmkctl.Port_GetType(self)
    def GetTypeString(self) -> "std::string" : return _vmkctl.Port_GetTypeString(self)
    def GetClientName(self) -> "std::string" : return _vmkctl.Port_GetClientName(self)
    def GetDVFilters(self) -> "std::vector< HostCtl::Network::DVFilterPtr,std::allocator< HostCtl::Network::DVFilterPtr > >" : return _vmkctl.Port_GetDVFilters(self)
    def GetSchedTeamUplink(self) -> "std::string" : return _vmkctl.Port_GetSchedTeamUplink(self)
    def SetSchedTeamUplink(self, *args) -> "void" : return _vmkctl.Port_SetSchedTeamUplink(self, *args)
    __swig_destroy__ = _vmkctl.delete_Port
    __del__ = lambda self : None;
Port_swigregister = _vmkctl.Port_swigregister
Port_swigregister(Port)

class PortImpl(Port,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [Port,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [Port,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PortImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_PortImpl
    __del__ = lambda self : None;
    def GetId(self) -> "uint32" : return _vmkctl.PortImpl_GetId(self)
    def GetSchedTeamUplink(self) -> "std::string" : return _vmkctl.PortImpl_GetSchedTeamUplink(self)
    def SetSchedTeamUplink(self, *args) -> "void" : return _vmkctl.PortImpl_SetSchedTeamUplink(self, *args)
    def GetType(self) -> "HostCtl::Network::Port::PortType" : return _vmkctl.PortImpl_GetType(self)
    def GetTypeString(self) -> "std::string" : return _vmkctl.PortImpl_GetTypeString(self)
    def GetWorldLeader(self) -> "uint32" : return _vmkctl.PortImpl_GetWorldLeader(self)
    def GetPortGroup(self) -> "HostCtl::Network::PortGroupPtr" : return _vmkctl.PortImpl_GetPortGroup(self)
    def GetPortGroupName(self) -> "std::string" : return _vmkctl.PortImpl_GetPortGroupName(self)
    def GetMacAddresses(self) -> "std::vector< HostCtl::Network::MacAddress,std::allocator< HostCtl::Network::MacAddress > >" : return _vmkctl.PortImpl_GetMacAddresses(self)
    def GetPortClientIpv4Address(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.PortImpl_GetPortClientIpv4Address(self)
    def GetPortStats(self) -> "HostCtl::Network::PortStats" : return _vmkctl.PortImpl_GetPortStats(self)
    def GetPacketStats(self, *args) -> "void" : return _vmkctl.PortImpl_GetPacketStats(self, *args)
    def GetChainStats(self, *args) -> "HostCtl::Network::ChainStats" : return _vmkctl.PortImpl_GetChainStats(self, *args)
    def GetPortsetName(self) -> "std::string" : return _vmkctl.PortImpl_GetPortsetName(self)
    def GetBlocked(self) -> "bool" : return _vmkctl.PortImpl_GetBlocked(self)
    def Refresh(self) -> "void" : return _vmkctl.PortImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.PortImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.PortImpl_Print(self, *args)
    __swig_getmethods__["GetPortIdFromClientName"] = lambda x: _vmkctl.PortImpl_GetPortIdFromClientName
    if _newclass:GetPortIdFromClientName = staticmethod(_vmkctl.PortImpl_GetPortIdFromClientName)
    def GetClientName(self) -> "std::string" : return _vmkctl.PortImpl_GetClientName(self)
    def GetDVPortID(self) -> "std::string" : return _vmkctl.PortImpl_GetDVPortID(self)
    def GetDVFilters(self) -> "std::vector< HostCtl::Network::DVFilterPtr,std::allocator< HostCtl::Network::DVFilterPtr > >" : return _vmkctl.PortImpl_GetDVFilters(self)
PortImpl_swigregister = _vmkctl.PortImpl_swigregister
PortImpl_swigregister(PortImpl)

def PortImpl_GetPortIdFromClientName(*args) -> "uint32" :
  return _vmkctl.PortImpl_GetPortIdFromClientName(*args)
PortImpl_GetPortIdFromClientName = _vmkctl.PortImpl_GetPortIdFromClientName

PORTSET_TYPE_ETHERSWITCH = _vmkctl.PORTSET_TYPE_ETHERSWITCH
PORTSET_TYPE_HUB = _vmkctl.PORTSET_TYPE_HUB
PORTSET_TYPE_LOOPBACKDEV = _vmkctl.PORTSET_TYPE_LOOPBACKDEV
PORTSET_TYPE_NULLDEV = _vmkctl.PORTSET_TYPE_NULLDEV
class Portset(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Portset, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Portset, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Destroy(self) -> "void" : return _vmkctl.Portset_Destroy(self)
    def GetFlags(self) -> "uint32" : return _vmkctl.Portset_GetFlags(self)
    def GetName(self) -> "std::string" : return _vmkctl.Portset_GetName(self)
    def GetType(self) -> "std::string" : return _vmkctl.Portset_GetType(self)
    def SetType(self, *args) -> "void" : return _vmkctl.Portset_SetType(self, *args)
    def GetNumPorts(self) -> "uint32" : return _vmkctl.Portset_GetNumPorts(self)
    def SetNumPorts(self, *args) -> "void" : return _vmkctl.Portset_SetNumPorts(self, *args)
    def GetNumConfiguredPorts(self) -> "uint32" : return _vmkctl.Portset_GetNumConfiguredPorts(self)
    __swig_getmethods__["GetMaxNumPortsSystemWide"] = lambda x: _vmkctl.Portset_GetMaxNumPortsSystemWide
    if _newclass:GetMaxNumPortsSystemWide = staticmethod(_vmkctl.Portset_GetMaxNumPortsSystemWide)
    def GetPortsInUse(self) -> "uint32" : return _vmkctl.Portset_GetPortsInUse(self)
    def GetPortsAvailable(self) -> "uint32" : return _vmkctl.Portset_GetPortsAvailable(self)
    def GetNumAccessPorts(self) -> "uint32" : return _vmkctl.Portset_GetNumAccessPorts(self)
    def GetNumAccessPortsInUse(self) -> "uint32" : return _vmkctl.Portset_GetNumAccessPortsInUse(self)
    def GetUplinks(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.Portset_GetUplinks(self)
    def GetSwitchClass(self) -> "std::string" : return _vmkctl.Portset_GetSwitchClass(self)
    def SetUplinkVlanStatsEnabled(self, *args) -> "void" : return _vmkctl.Portset_SetUplinkVlanStatsEnabled(self, *args)
    def GetPortList(self) -> "std::vector< HostCtl::Network::PortPtr,std::allocator< HostCtl::Network::PortPtr > >" : return _vmkctl.Portset_GetPortList(self)
    __swig_destroy__ = _vmkctl.delete_Portset
    __del__ = lambda self : None;
Portset_swigregister = _vmkctl.Portset_swigregister
Portset_swigregister(Portset)
Portset.DEF_NUM_PORTS = _vmkctl.cvar.Portset_DEF_NUM_PORTS
Portset.MIN_NUM_PORTS = _vmkctl.cvar.Portset_MIN_NUM_PORTS
Portset.MAX_VSNAME_SZ = _vmkctl.cvar.Portset_MAX_VSNAME_SZ
Portset.DEF_BEACON_INTERVAL = _vmkctl.cvar.Portset_DEF_BEACON_INTERVAL
Portset.DEF_BEACON_THRESHOLD = _vmkctl.cvar.Portset_DEF_BEACON_THRESHOLD
Portset.DEF_MTU = _vmkctl.cvar.Portset_DEF_MTU

def Portset_GetMaxNumPortsSystemWide() -> "uint32" :
  return _vmkctl.Portset_GetMaxNumPortsSystemWide()
Portset_GetMaxNumPortsSystemWide = _vmkctl.Portset_GetMaxNumPortsSystemWide

class PortsetImpl(VmkCtlObject,Portset):
    __swig_setmethods__ = {}
    for _s in [VmkCtlObject,Portset]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortsetImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [VmkCtlObject,Portset]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PortsetImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_PortsetImpl
    __del__ = lambda self : None;
    def Destroy(self) -> "void" : return _vmkctl.PortsetImpl_Destroy(self)
    __swig_getmethods__["IsValidVirtualSwitch"] = lambda x: _vmkctl.PortsetImpl_IsValidVirtualSwitch
    if _newclass:IsValidVirtualSwitch = staticmethod(_vmkctl.PortsetImpl_IsValidVirtualSwitch)
    def GetUplinks(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.PortsetImpl_GetUplinks(self)
    def GetFlags(self) -> "uint32" : return _vmkctl.PortsetImpl_GetFlags(self)
    def GetName(self) -> "std::string" : return _vmkctl.PortsetImpl_GetName(self)
    def GetType(self) -> "std::string" : return _vmkctl.PortsetImpl_GetType(self)
    def SetType(self, *args) -> "void" : return _vmkctl.PortsetImpl_SetType(self, *args)
    def GetNumPorts(self) -> "uint32" : return _vmkctl.PortsetImpl_GetNumPorts(self)
    def SetNumPorts(self, *args) -> "void" : return _vmkctl.PortsetImpl_SetNumPorts(self, *args)
    def GetNumAccessPorts(self) -> "uint32" : return _vmkctl.PortsetImpl_GetNumAccessPorts(self)
    def GetNumAccessPortsInUse(self) -> "uint32" : return _vmkctl.PortsetImpl_GetNumAccessPortsInUse(self)
    def GetNumConfiguredPorts(self) -> "uint32" : return _vmkctl.PortsetImpl_GetNumConfiguredPorts(self)
    def GetPortsInUse(self) -> "uint32" : return _vmkctl.PortsetImpl_GetPortsInUse(self)
    def GetPortsAvailable(self) -> "uint32" : return _vmkctl.PortsetImpl_GetPortsAvailable(self)
    def GetPortList(self) -> "std::vector< HostCtl::Network::PortPtr,std::allocator< HostCtl::Network::PortPtr > >" : return _vmkctl.PortsetImpl_GetPortList(self)
    def GetSwitchClass(self) -> "std::string" : return _vmkctl.PortsetImpl_GetSwitchClass(self)
    def GetDVSUUID(self) -> "std::string" : return _vmkctl.PortsetImpl_GetDVSUUID(self)
    def Restore(self) -> "void" : return _vmkctl.PortsetImpl_Restore(self)
    def Refresh(self) -> "void" : return _vmkctl.PortsetImpl_Refresh(self)
    def Print(self, *args) -> "void" : return _vmkctl.PortsetImpl_Print(self, *args)
    def SetUplinkVlanStatsEnabled(self, *args) -> "void" : return _vmkctl.PortsetImpl_SetUplinkVlanStatsEnabled(self, *args)
PortsetImpl_swigregister = _vmkctl.PortsetImpl_swigregister
PortsetImpl_swigregister(PortsetImpl)

def PortsetImpl_IsValidVirtualSwitch(*args) -> "bool" :
  return _vmkctl.PortsetImpl_IsValidVirtualSwitch(*args)
PortsetImpl_IsValidVirtualSwitch = _vmkctl.PortsetImpl_IsValidVirtualSwitch

class ConnectionPoint(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConnectionPoint, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConnectionPoint, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    CONN_TYPE_NONE = _vmkctl.ConnectionPoint_CONN_TYPE_NONE
    CONN_TYPE_PG = _vmkctl.ConnectionPoint_CONN_TYPE_PG
    CONN_TYPE_DVP = _vmkctl.ConnectionPoint_CONN_TYPE_DVP
    CONN_TYPE_OPAQUE_NET = _vmkctl.ConnectionPoint_CONN_TYPE_OPAQUE_NET
    def GetPortsetName(self) -> "std::string" : return _vmkctl.ConnectionPoint_GetPortsetName(self)
    def GetPortset(self) -> "HostCtl::Network::PortsetPtr" : return _vmkctl.ConnectionPoint_GetPortset(self)
    def GetPorts(self) -> "std::vector< HostCtl::Network::PortPtr,std::allocator< HostCtl::Network::PortPtr > >" : return _vmkctl.ConnectionPoint_GetPorts(self)
    def SetName(self, *args) -> "void" : return _vmkctl.ConnectionPoint_SetName(self, *args)
    def IsInUse(self, *args) -> "bool" : return _vmkctl.ConnectionPoint_IsInUse(self, *args)
    def IsValid(self) -> "bool" : return _vmkctl.ConnectionPoint_IsValid(self)
    def GetType(self) -> "HostCtl::Network::ConnectionPoint::ConnectionType" : return _vmkctl.ConnectionPoint_GetType(self)
    def GetPortGroupName(self) -> "std::string" : return _vmkctl.ConnectionPoint_GetPortGroupName(self)
    def GetDVPortParam(self) -> "HostCtl::Network::DVPortParam const &" : return _vmkctl.ConnectionPoint_GetDVPortParam(self)
    def GetOpaqueNetworkParam(self) -> "HostCtl::Network::OpaqueNetworkParam const &" : return _vmkctl.ConnectionPoint_GetOpaqueNetworkParam(self)
    __swig_destroy__ = _vmkctl.delete_ConnectionPoint
    __del__ = lambda self : None;
ConnectionPoint_swigregister = _vmkctl.ConnectionPoint_swigregister
ConnectionPoint_swigregister(ConnectionPoint)

class PortRange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortRange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortRange, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min"] = _vmkctl.PortRange_min_set
    __swig_getmethods__["min"] = _vmkctl.PortRange_min_get
    if _newclass:min = _swig_property(_vmkctl.PortRange_min_get, _vmkctl.PortRange_min_set)
    __swig_setmethods__["max"] = _vmkctl.PortRange_max_set
    __swig_getmethods__["max"] = _vmkctl.PortRange_max_get
    if _newclass:max = _swig_property(_vmkctl.PortRange_max_get, _vmkctl.PortRange_max_set)
    def __init__(self): 
        this = _vmkctl.new_PortRange()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PortRange
    __del__ = lambda self : None;
PortRange_swigregister = _vmkctl.PortRange_swigregister
PortRange_swigregister(PortRange)

class PortGroup(ConnectionPoint):
    __swig_setmethods__ = {}
    for _s in [ConnectionPoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [ConnectionPoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PortGroup, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetVlanId(self) -> "uint16" : return _vmkctl.PortGroup_GetVlanId(self)
    def SetVlanId(self, *args) -> "void" : return _vmkctl.PortGroup_SetVlanId(self, *args)
    def GetConfiguredNetPolicy(self, *args) -> "void" : return _vmkctl.PortGroup_GetConfiguredNetPolicy(self, *args)
    def GetSecurityPolicy(self) -> "HostCtl::Network::PortSecurityPolicy" : return _vmkctl.PortGroup_GetSecurityPolicy(self)
    def GetConfiguredSecurityPolicy(self) -> "HostCtl::Network::PortSecurityPolicy" : return _vmkctl.PortGroup_GetConfiguredSecurityPolicy(self)
    def SetSecurityPolicy(self, *args) -> "void" : return _vmkctl.PortGroup_SetSecurityPolicy(self, *args)
    def GetNicCapabilities(self) -> "HostCtl::Network::NicCapabilities" : return _vmkctl.PortGroup_GetNicCapabilities(self)
    def GetConfiguredNicCapabilities(self) -> "HostCtl::Network::NicCapabilities" : return _vmkctl.PortGroup_GetConfiguredNicCapabilities(self)
    def SetNicCapabilities(self, *args) -> "void" : return _vmkctl.PortGroup_SetNicCapabilities(self, *args)
    def GetTeamingPolicy(self) -> "HostCtl::Network::NicTeamingPolicy" : return _vmkctl.PortGroup_GetTeamingPolicy(self)
    def GetConfiguredTeamingPolicy(self) -> "HostCtl::Network::NicTeamingPolicy" : return _vmkctl.PortGroup_GetConfiguredTeamingPolicy(self)
    def SetTeamingPolicy(self, *args) -> "void" : return _vmkctl.PortGroup_SetTeamingPolicy(self, *args)
    def GetShapingPolicy(self) -> "HostCtl::Network::ShapingPolicy" : return _vmkctl.PortGroup_GetShapingPolicy(self)
    def GetConfiguredShapingPolicy(self) -> "HostCtl::Network::ShapingPolicy" : return _vmkctl.PortGroup_GetConfiguredShapingPolicy(self)
    def SetShapingPolicy(self, *args) -> "void" : return _vmkctl.PortGroup_SetShapingPolicy(self, *args)
    def GetVirtualSwitch(self) -> "HostCtl::Network::VirtualSwitchPtr" : return _vmkctl.PortGroup_GetVirtualSwitch(self)
    def SetGuestVlanFilters(self, *args) -> "void" : return _vmkctl.PortGroup_SetGuestVlanFilters(self, *args)
    def GetGuestVlanFilters(self) -> "std::vector< HostCtl::Network::PortRange,std::allocator< HostCtl::Network::PortRange > >" : return _vmkctl.PortGroup_GetGuestVlanFilters(self)
    def GetUidold(self, exists : 'bool' = None) -> "std::string" : return _vmkctl.PortGroup_GetUidold(self, exists)
    def RemoveUidold(self) -> "void" : return _vmkctl.PortGroup_RemoveUidold(self)
    def GetActiveClients(self) -> "uint32" : return _vmkctl.PortGroup_GetActiveClients(self)
    __swig_destroy__ = _vmkctl.delete_PortGroup
    __del__ = lambda self : None;
PortGroup_swigregister = _vmkctl.PortGroup_swigregister
PortGroup_swigregister(PortGroup)
PortGroup.MIN_VLAN_ID = _vmkctl.cvar.PortGroup_MIN_VLAN_ID
PortGroup.MAX_VLAN_ID = _vmkctl.cvar.PortGroup_MAX_VLAN_ID

class PortGroupImpl(PortGroup,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [PortGroup,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortGroupImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [PortGroup,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PortGroupImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PortGroupImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PortGroupImpl
    __del__ = lambda self : None;
    __swig_getmethods__["CreatePortGroup"] = lambda x: _vmkctl.PortGroupImpl_CreatePortGroup
    if _newclass:CreatePortGroup = staticmethod(_vmkctl.PortGroupImpl_CreatePortGroup)
    __swig_getmethods__["CreatePortGroupEx"] = lambda x: _vmkctl.PortGroupImpl_CreatePortGroupEx
    if _newclass:CreatePortGroupEx = staticmethod(_vmkctl.PortGroupImpl_CreatePortGroupEx)
    def Destroy(self) -> "void" : return _vmkctl.PortGroupImpl_Destroy(self)
    def GetPortGroupName(self) -> "std::string" : return _vmkctl.PortGroupImpl_GetPortGroupName(self)
    def GetName(self) -> "std::string" : return _vmkctl.PortGroupImpl_GetName(self)
    def SetName(self, *args) -> "void" : return _vmkctl.PortGroupImpl_SetName(self, *args)
    def GetUidold(self, exists : 'bool' = None) -> "std::string" : return _vmkctl.PortGroupImpl_GetUidold(self, exists)
    def RemoveUidold(self) -> "void" : return _vmkctl.PortGroupImpl_RemoveUidold(self)
    def IsZombie(self) -> "bool" : return _vmkctl.PortGroupImpl_IsZombie(self)
    def GetVlanId(self) -> "uint16" : return _vmkctl.PortGroupImpl_GetVlanId(self)
    def SetVlanId(self, *args) -> "void" : return _vmkctl.PortGroupImpl_SetVlanId(self, *args)
    def GetConfiguredNetPolicy(self, *args) -> "void" : return _vmkctl.PortGroupImpl_GetConfiguredNetPolicy(self, *args)
    def GetSecurityPolicy(self) -> "HostCtl::Network::PortSecurityPolicy" : return _vmkctl.PortGroupImpl_GetSecurityPolicy(self)
    def GetConfiguredSecurityPolicy(self) -> "HostCtl::Network::PortSecurityPolicy" : return _vmkctl.PortGroupImpl_GetConfiguredSecurityPolicy(self)
    def SetSecurityPolicy(self, *args) -> "void" : return _vmkctl.PortGroupImpl_SetSecurityPolicy(self, *args)
    def SetDerivedSecurityPolicy(self, *args) -> "void" : return _vmkctl.PortGroupImpl_SetDerivedSecurityPolicy(self, *args)
    def GetNicCapabilities(self) -> "HostCtl::Network::NicCapabilities" : return _vmkctl.PortGroupImpl_GetNicCapabilities(self)
    def GetConfiguredNicCapabilities(self) -> "HostCtl::Network::NicCapabilities" : return _vmkctl.PortGroupImpl_GetConfiguredNicCapabilities(self)
    def SetNicCapabilities(self, *args) -> "void" : return _vmkctl.PortGroupImpl_SetNicCapabilities(self, *args)
    def SetDerivedNicCapabilities(self, *args) -> "void" : return _vmkctl.PortGroupImpl_SetDerivedNicCapabilities(self, *args)
    def GetTeamingPolicy(self) -> "HostCtl::Network::NicTeamingPolicy" : return _vmkctl.PortGroupImpl_GetTeamingPolicy(self)
    def GetConfiguredTeamingPolicy(self) -> "HostCtl::Network::NicTeamingPolicy" : return _vmkctl.PortGroupImpl_GetConfiguredTeamingPolicy(self)
    def SetTeamingPolicy(self, *args) -> "void" : return _vmkctl.PortGroupImpl_SetTeamingPolicy(self, *args)
    def SetDerivedTeamingPolicy(self, *args) -> "void" : return _vmkctl.PortGroupImpl_SetDerivedTeamingPolicy(self, *args)
    def GetShapingPolicy(self) -> "HostCtl::Network::ShapingPolicy" : return _vmkctl.PortGroupImpl_GetShapingPolicy(self)
    def GetConfiguredShapingPolicy(self) -> "HostCtl::Network::ShapingPolicy" : return _vmkctl.PortGroupImpl_GetConfiguredShapingPolicy(self)
    def SetShapingPolicy(self, *args) -> "void" : return _vmkctl.PortGroupImpl_SetShapingPolicy(self, *args)
    def SetDerivedShapingPolicy(self, *args) -> "void" : return _vmkctl.PortGroupImpl_SetDerivedShapingPolicy(self, *args)
    def SetGuestVlanFilters(self, *args) -> "void" : return _vmkctl.PortGroupImpl_SetGuestVlanFilters(self, *args)
    def GetGuestVlanFilters(self) -> "std::vector< HostCtl::Network::PortRange,std::allocator< HostCtl::Network::PortRange > >" : return _vmkctl.PortGroupImpl_GetGuestVlanFilters(self)
    def GetVirtualSwitch(self) -> "HostCtl::Network::VirtualSwitchPtr" : return _vmkctl.PortGroupImpl_GetVirtualSwitch(self)
    def GetPortset(self) -> "HostCtl::Network::PortsetPtr" : return _vmkctl.PortGroupImpl_GetPortset(self)
    def GetPortsetName(self) -> "std::string" : return _vmkctl.PortGroupImpl_GetPortsetName(self)
    def GetFenceId(self) -> "int" : return _vmkctl.PortGroupImpl_GetFenceId(self)
    def SetFenceId(self, *args) -> "void" : return _vmkctl.PortGroupImpl_SetFenceId(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.PortGroupImpl_Refresh(self)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.PortGroupImpl_GetChildren(self)
    def LoadConfig(self) -> "void" : return _vmkctl.PortGroupImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.PortGroupImpl_Print(self, *args)
    __swig_getmethods__["IsValidPortGroup"] = lambda x: _vmkctl.PortGroupImpl_IsValidPortGroup
    if _newclass:IsValidPortGroup = staticmethod(_vmkctl.PortGroupImpl_IsValidPortGroup)
    def IsValid(self) -> "bool" : return _vmkctl.PortGroupImpl_IsValid(self)
    __swig_getmethods__["GetAllPortGroupNames"] = lambda x: _vmkctl.PortGroupImpl_GetAllPortGroupNames
    if _newclass:GetAllPortGroupNames = staticmethod(_vmkctl.PortGroupImpl_GetAllPortGroupNames)
    def GetActiveClients(self) -> "uint32" : return _vmkctl.PortGroupImpl_GetActiveClients(self)
    def GetType(self) -> "HostCtl::Network::ConnectionPoint::ConnectionType" : return _vmkctl.PortGroupImpl_GetType(self)
PortGroupImpl_swigregister = _vmkctl.PortGroupImpl_swigregister
PortGroupImpl_swigregister(PortGroupImpl)

def PortGroupImpl_CreatePortGroup(*args) -> "HostCtl::Network::PortGroupPtr" :
  return _vmkctl.PortGroupImpl_CreatePortGroup(*args)
PortGroupImpl_CreatePortGroup = _vmkctl.PortGroupImpl_CreatePortGroup

def PortGroupImpl_CreatePortGroupEx(*args) -> "HostCtl::Network::PortGroupPtr" :
  return _vmkctl.PortGroupImpl_CreatePortGroupEx(*args)
PortGroupImpl_CreatePortGroupEx = _vmkctl.PortGroupImpl_CreatePortGroupEx

def PortGroupImpl_IsValidPortGroup(*args) -> "bool" :
  return _vmkctl.PortGroupImpl_IsValidPortGroup(*args)
PortGroupImpl_IsValidPortGroup = _vmkctl.PortGroupImpl_IsValidPortGroup

def PortGroupImpl_GetAllPortGroupNames() -> "std::set< std::string,std::less< std::string >,std::allocator< std::string > >" :
  return _vmkctl.PortGroupImpl_GetAllPortGroupNames()
PortGroupImpl_GetAllPortGroupNames = _vmkctl.PortGroupImpl_GetAllPortGroupNames

class NetworkInterface(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    INTERFACE_TYPE_VSWIF = _vmkctl.NetworkInterface_INTERFACE_TYPE_VSWIF
    INTERFACE_TYPE_VMKNIC = _vmkctl.NetworkInterface_INTERFACE_TYPE_VMKNIC
    def GetInterfaceName(self) -> "std::string" : return _vmkctl.NetworkInterface_GetInterfaceName(self)
    def GetType(self) -> "HostCtl::Network::NetworkInterface::NetworkInterfaceType" : return _vmkctl.NetworkInterface_GetType(self)
    def GetMtu(self) -> "uint32" : return _vmkctl.NetworkInterface_GetMtu(self)
    def SetMtu(self, *args) -> "void" : return _vmkctl.NetworkInterface_SetMtu(self, *args)
    def GetMacAddress(self) -> "HostCtl::Network::MacAddress" : return _vmkctl.NetworkInterface_GetMacAddress(self)
    def SetMacAddress(self, *args) -> "void" : return _vmkctl.NetworkInterface_SetMacAddress(self, *args)
    def GetIpConfig(self) -> "HostCtl::Network::IpConfig" : return _vmkctl.NetworkInterface_GetIpConfig(self)
    def GetConfiguredIpConfig(self) -> "HostCtl::Network::IpConfig" : return _vmkctl.NetworkInterface_GetConfiguredIpConfig(self)
    def SetIpConfig(self, *args) -> "void" : return _vmkctl.NetworkInterface_SetIpConfig(self, *args)
    def SetIpv4Config(self, *args) -> "void" : return _vmkctl.NetworkInterface_SetIpv4Config(self, *args)
    def AddIpv6Address(self, *args) -> "void" : return _vmkctl.NetworkInterface_AddIpv6Address(self, *args)
    def RemoveIpv6Address(self, *args) -> "void" : return _vmkctl.NetworkInterface_RemoveIpv6Address(self, *args)
    def SetIpv6AutoConf(self, *args) -> "void" : return _vmkctl.NetworkInterface_SetIpv6AutoConf(self, *args)
    def SetDHCPv6(self, *args) -> "void" : return _vmkctl.NetworkInterface_SetDHCPv6(self, *args)
    def GetPortGroup(self) -> "HostCtl::Network::PortGroupPtr" : return _vmkctl.NetworkInterface_GetPortGroup(self)
    def GetPortGroupName(self) -> "std::string" : return _vmkctl.NetworkInterface_GetPortGroupName(self)
    def GetConnectionPoint(self) -> "HostCtl::Network::ConnectionPointPtr" : return _vmkctl.NetworkInterface_GetConnectionPoint(self)
    def SetPortGroup(self, *args) -> "void" : return _vmkctl.NetworkInterface_SetPortGroup(self, *args)
    def SetConnectionPoint(self, *args) -> "void" : return _vmkctl.NetworkInterface_SetConnectionPoint(self, *args)
    def Enable(self) -> "void" : return _vmkctl.NetworkInterface_Enable(self)
    def Disable(self) -> "void" : return _vmkctl.NetworkInterface_Disable(self)
    def IsEnabled(self) -> "bool" : return _vmkctl.NetworkInterface_IsEnabled(self)
    def Destroy(self) -> "void" : return _vmkctl.NetworkInterface_Destroy(self)
    __swig_destroy__ = _vmkctl.delete_NetworkInterface
    __del__ = lambda self : None;
NetworkInterface_swigregister = _vmkctl.NetworkInterface_swigregister
NetworkInterface_swigregister(NetworkInterface)

class DVSwitch(Portset):
    __swig_setmethods__ = {}
    for _s in [Portset]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVSwitch, name, value)
    __swig_getmethods__ = {}
    for _s in [Portset]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DVSwitch, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetVersion(self) -> "VDSVersion" : return _vmkctl.DVSwitch_GetVersion(self)
    def SetVersion(self, *args) -> "void" : return _vmkctl.DVSwitch_SetVersion(self, *args)
    def SetUplinkPorts(self, *args) -> "void" : return _vmkctl.DVSwitch_SetUplinkPorts(self, *args)
    def GetUplinkPorts(self, *args) -> "void" : return _vmkctl.DVSwitch_GetUplinkPorts(self, *args)
    def AddUplink(self, *args) -> "void" : return _vmkctl.DVSwitch_AddUplink(self, *args)
    def RemoveUplink(self, *args) -> "void" : return _vmkctl.DVSwitch_RemoveUplink(self, *args)
    def AddDVPort(self, *args) -> "HostCtl::Network::DVPortPtr" : return _vmkctl.DVSwitch_AddDVPort(self, *args)
    def RemoveDVPort(self, *args) -> "void" : return _vmkctl.DVSwitch_RemoveDVPort(self, *args)
    def GetDVPort(self, *args) -> "HostCtl::Network::DVPortPtr" : return _vmkctl.DVSwitch_GetDVPort(self, *args)
    def GetDVPorts(self) -> "std::vector< HostCtl::Network::DVPortPtr,std::allocator< HostCtl::Network::DVPortPtr > >" : return _vmkctl.DVSwitch_GetDVPorts(self)
    def GetShadowDVPorts(self) -> "std::vector< HostCtl::Network::DVPortPtr,std::allocator< HostCtl::Network::DVPortPtr > >" : return _vmkctl.DVSwitch_GetShadowDVPorts(self)
    def GetZombieDVPorts(self) -> "std::vector< HostCtl::Network::DVPortPtr,std::allocator< HostCtl::Network::DVPortPtr > >" : return _vmkctl.DVSwitch_GetZombieDVPorts(self)
    def GetDvsId(self) -> "std::string" : return _vmkctl.DVSwitch_GetDvsId(self)
    def GetStatus(self, *args) -> "bool" : return _vmkctl.DVSwitch_GetStatus(self, *args)
    def GetDvsName(self) -> "std::string" : return _vmkctl.DVSwitch_GetDvsName(self)
    def SetDvsName(self, *args) -> "void" : return _vmkctl.DVSwitch_SetDvsName(self, *args)
    def GetDvsIpAddress(self, *args) -> "void" : return _vmkctl.DVSwitch_GetDvsIpAddress(self, *args)
    def SetDvsIpAddress(self, *args) -> "void" : return _vmkctl.DVSwitch_SetDvsIpAddress(self, *args)
    def GetMTU(self) -> "uint32" : return _vmkctl.DVSwitch_GetMTU(self)
    def SetMTU(self, *args) -> "void" : return _vmkctl.DVSwitch_SetMTU(self, *args)
    def GetBeaconTimeout(self) -> "int" : return _vmkctl.DVSwitch_GetBeaconTimeout(self)
    def SetBeaconTimeout(self, *args) -> "void" : return _vmkctl.DVSwitch_SetBeaconTimeout(self, *args)
    def SetCdpStatus(self, *args) -> "void" : return _vmkctl.DVSwitch_SetCdpStatus(self, *args)
    def GetCdpStatus(self) -> "HostCtl::Network::CdpParam" : return _vmkctl.DVSwitch_GetCdpStatus(self)
    def SetLacpTimeout(self, *args) -> "void" : return _vmkctl.DVSwitch_SetLacpTimeout(self, *args)
    def SetPvlanMap(self, *args) -> "void" : return _vmkctl.DVSwitch_SetPvlanMap(self, *args)
    def GetPvlanMap(self) -> "std::vector< HostCtl::Network::PvlanProp,std::allocator< HostCtl::Network::PvlanProp > >" : return _vmkctl.DVSwitch_GetPvlanMap(self)
    def SetVspanTable(self, *args) -> "void" : return _vmkctl.DVSwitch_SetVspanTable(self, *args)
    def GetVspanTable(self) -> "std::vector< HostCtl::Network::VspanSession,std::allocator< HostCtl::Network::VspanSession > >" : return _vmkctl.DVSwitch_GetVspanTable(self)
    def SetIpfixProp(self, *args) -> "void" : return _vmkctl.DVSwitch_SetIpfixProp(self, *args)
    def SetMulticastFilteringMode(self, *args) -> "void" : return _vmkctl.DVSwitch_SetMulticastFilteringMode(self, *args)
    def GetMulticastFilteringMode(self) -> "std::string" : return _vmkctl.DVSwitch_GetMulticastFilteringMode(self)
    def SetOverlayInstances(self, *args) -> "void" : return _vmkctl.DVSwitch_SetOverlayInstances(self, *args)
    def GetOverlayInstances(self, *args) -> "void" : return _vmkctl.DVSwitch_GetOverlayInstances(self, *args)
    def GetOverlayClasses(self, *args) -> "void" : return _vmkctl.DVSwitch_GetOverlayClasses(self, *args)
    def SetVendorData(self, *args) -> "void" : return _vmkctl.DVSwitch_SetVendorData(self, *args)
    def GetVendorData(self, *args) -> "void" : return _vmkctl.DVSwitch_GetVendorData(self, *args)
    def SetVLANMTUCheckCmd(self, *args) -> "void" : return _vmkctl.DVSwitch_SetVLANMTUCheckCmd(self, *args)
    def GetVLANMTUCheckCmd(self, *args) -> "void" : return _vmkctl.DVSwitch_GetVLANMTUCheckCmd(self, *args)
    def SetTeamingCheckCmd(self, *args) -> "void" : return _vmkctl.DVSwitch_SetTeamingCheckCmd(self, *args)
    def GetTeamingCheckCmd(self, *args) -> "void" : return _vmkctl.DVSwitch_GetTeamingCheckCmd(self, *args)
    def SetLacpGroupConfig(self, *args) -> "void" : return _vmkctl.DVSwitch_SetLacpGroupConfig(self, *args)
    def GetLacpGroupConfig(self, *args) -> "void" : return _vmkctl.DVSwitch_GetLacpGroupConfig(self, *args)
    def SetResPoolsList(self, *args) -> "void" : return _vmkctl.DVSwitch_SetResPoolsList(self, *args)
    def GetResPoolsList(self, *args) -> "void" : return _vmkctl.DVSwitch_GetResPoolsList(self, *args)
    def SetResPoolsCfg(self, *args) -> "void" : return _vmkctl.DVSwitch_SetResPoolsCfg(self, *args)
    def GetResPoolsCfg(self, *args) -> "void" : return _vmkctl.DVSwitch_GetResPoolsCfg(self, *args)
    def SetResPoolsSchedActive(self, *args) -> "void" : return _vmkctl.DVSwitch_SetResPoolsSchedActive(self, *args)
    def GetResPoolsSchedActive(self) -> "bool" : return _vmkctl.DVSwitch_GetResPoolsSchedActive(self)
    def SetNetIOCVersion(self, *args) -> "void" : return _vmkctl.DVSwitch_SetNetIOCVersion(self, *args)
    def GetNetIOCVersion(self) -> "std::string" : return _vmkctl.DVSwitch_GetNetIOCVersion(self)
    def SetNetIOCResvThreshold(self, *args) -> "void" : return _vmkctl.DVSwitch_SetNetIOCResvThreshold(self, *args)
    def GetNetIOCResvThreshold(self) -> "uint32" : return _vmkctl.DVSwitch_GetNetIOCResvThreshold(self)
    def GetNetworkResourceInfo(self, *args) -> "void" : return _vmkctl.DVSwitch_GetNetworkResourceInfo(self, *args)
    def GetPendingVnicInfo(self, *args) -> "void" : return _vmkctl.DVSwitch_GetPendingVnicInfo(self, *args)
    def GetUplinkInfo(self) -> "std::map< std::string,HostCtl::Network::DVPortParam,std::less< std::string >,std::allocator< std::pair< std::string const,HostCtl::Network::DVPortParam > > >" : return _vmkctl.DVSwitch_GetUplinkInfo(self)
    def IsVmwareBranded(self) -> "bool" : return _vmkctl.DVSwitch_IsVmwareBranded(self)
    def IsLacpEnabled(self) -> "bool" : return _vmkctl.DVSwitch_IsLacpEnabled(self)
    def ClearProp(self, *args) -> "void" : return _vmkctl.DVSwitch_ClearProp(self, *args)
    def GetVendorProp(self, *args) -> "void" : return _vmkctl.DVSwitch_GetVendorProp(self, *args)
    def ExecuteDvsCommand(self, *args) -> "void" : return _vmkctl.DVSwitch_ExecuteDvsCommand(self, *args)
    def GetVxlanIds(self, *args) -> "void" : return _vmkctl.DVSwitch_GetVxlanIds(self, *args)
    def GetDvsHostConfig(self, *args) -> "bool" : return _vmkctl.DVSwitch_GetDvsHostConfig(self, *args)
    def GetDvsExtraConfig(self, *args) -> "void" : return _vmkctl.DVSwitch_GetDvsExtraConfig(self, *args)
    def SetDvsExtraConfig(self, *args) -> "void" : return _vmkctl.DVSwitch_SetDvsExtraConfig(self, *args)
    def GetDVPortByExternalId(self, *args) -> "std::string" : return _vmkctl.DVSwitch_GetDVPortByExternalId(self, *args)
    __swig_destroy__ = _vmkctl.delete_DVSwitch
    __del__ = lambda self : None;
DVSwitch_swigregister = _vmkctl.DVSwitch_swigregister
DVSwitch_swigregister(DVSwitch)

class DVSwitchImpl(DVSwitch,PortsetImpl):
    __swig_setmethods__ = {}
    for _s in [DVSwitch,PortsetImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVSwitchImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DVSwitch,PortsetImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DVSwitchImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DVSwitchImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DVSwitchImpl
    __del__ = lambda self : None;
    __swig_getmethods__["CreateDVSwitch"] = lambda x: _vmkctl.DVSwitchImpl_CreateDVSwitch
    if _newclass:CreateDVSwitch = staticmethod(_vmkctl.DVSwitchImpl_CreateDVSwitch)
    def GetVersion(self) -> "VDSVersion" : return _vmkctl.DVSwitchImpl_GetVersion(self)
    def SetVersion(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetVersion(self, *args)
    def Destroy(self) -> "void" : return _vmkctl.DVSwitchImpl_Destroy(self)
    def AddDVPort(self, *args) -> "HostCtl::Network::DVPortPtr" : return _vmkctl.DVSwitchImpl_AddDVPort(self, *args)
    def RemoveDVPort(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_RemoveDVPort(self, *args)
    def GetDVPort(self, *args) -> "HostCtl::Network::DVPortPtr" : return _vmkctl.DVSwitchImpl_GetDVPort(self, *args)
    def GetDVPorts(self) -> "std::vector< HostCtl::Network::DVPortPtr,std::allocator< HostCtl::Network::DVPortPtr > >" : return _vmkctl.DVSwitchImpl_GetDVPorts(self)
    def GetShadowDVPorts(self) -> "std::vector< HostCtl::Network::DVPortPtr,std::allocator< HostCtl::Network::DVPortPtr > >" : return _vmkctl.DVSwitchImpl_GetShadowDVPorts(self)
    def GetZombieDVPorts(self) -> "std::vector< HostCtl::Network::DVPortPtr,std::allocator< HostCtl::Network::DVPortPtr > >" : return _vmkctl.DVSwitchImpl_GetZombieDVPorts(self)
    def SetUplinkPorts(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetUplinkPorts(self, *args)
    def GetUplinkPorts(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetUplinkPorts(self, *args)
    def AddUplink(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_AddUplink(self, *args)
    def RemoveUplink(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_RemoveUplink(self, *args)
    def GetDvsId(self) -> "std::string" : return _vmkctl.DVSwitchImpl_GetDvsId(self)
    def GetStatus(self, *args) -> "bool" : return _vmkctl.DVSwitchImpl_GetStatus(self, *args)
    def GetDvsName(self) -> "std::string" : return _vmkctl.DVSwitchImpl_GetDvsName(self)
    def SetDvsName(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetDvsName(self, *args)
    def GetDvsIpAddress(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetDvsIpAddress(self, *args)
    def SetDvsIpAddress(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetDvsIpAddress(self, *args)
    def GetMTU(self) -> "uint32" : return _vmkctl.DVSwitchImpl_GetMTU(self)
    def SetMTU(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetMTU(self, *args)
    def GetBeaconTimeout(self) -> "int" : return _vmkctl.DVSwitchImpl_GetBeaconTimeout(self)
    def SetBeaconTimeout(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetBeaconTimeout(self, *args)
    def GetCdpStatus(self) -> "HostCtl::Network::CdpParam" : return _vmkctl.DVSwitchImpl_GetCdpStatus(self)
    def SetCdpStatus(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetCdpStatus(self, *args)
    def GetCdpStatusString(self) -> "std::string" : return _vmkctl.DVSwitchImpl_GetCdpStatusString(self)
    def GetLacpStatus(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetLacpStatus(self, *args)
    def SetLacpTimeout(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetLacpTimeout(self, *args)
    def GetPvlanMap(self) -> "std::vector< HostCtl::Network::PvlanProp,std::allocator< HostCtl::Network::PvlanProp > >" : return _vmkctl.DVSwitchImpl_GetPvlanMap(self)
    def SetPvlanMap(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetPvlanMap(self, *args)
    def GetVspanTable(self) -> "std::vector< HostCtl::Network::VspanSession,std::allocator< HostCtl::Network::VspanSession > >" : return _vmkctl.DVSwitchImpl_GetVspanTable(self)
    def SetVspanTable(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetVspanTable(self, *args)
    def SetIpfixProp(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetIpfixProp(self, *args)
    def GetMulticastFilteringMode(self) -> "std::string" : return _vmkctl.DVSwitchImpl_GetMulticastFilteringMode(self)
    def SetMulticastFilteringMode(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetMulticastFilteringMode(self, *args)
    def GetUplinkInfo(self) -> "std::map< std::string,HostCtl::Network::DVPortParam,std::less< std::string >,std::allocator< std::pair< std::string const,HostCtl::Network::DVPortParam > > >" : return _vmkctl.DVSwitchImpl_GetUplinkInfo(self)
    def IsVmwareBranded(self) -> "bool" : return _vmkctl.DVSwitchImpl_IsVmwareBranded(self)
    def IsLacpEnabled(self) -> "bool" : return _vmkctl.DVSwitchImpl_IsLacpEnabled(self)
    def SetOverlayInstances(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetOverlayInstances(self, *args)
    def GetOverlayInstances(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetOverlayInstances(self, *args)
    def GetOverlayClasses(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetOverlayClasses(self, *args)
    def SetVendorData(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetVendorData(self, *args)
    def GetVendorData(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetVendorData(self, *args)
    def SetVLANMTUCheckCmd(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetVLANMTUCheckCmd(self, *args)
    def GetVLANMTUCheckCmd(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetVLANMTUCheckCmd(self, *args)
    def SetTeamingCheckCmd(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetTeamingCheckCmd(self, *args)
    def GetTeamingCheckCmd(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetTeamingCheckCmd(self, *args)
    def SetResPoolsList(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetResPoolsList(self, *args)
    def GetResPoolsList(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetResPoolsList(self, *args)
    def SetResPoolsCfg(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetResPoolsCfg(self, *args)
    def GetResPoolsCfg(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetResPoolsCfg(self, *args)
    def SetResPoolsSchedActive(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetResPoolsSchedActive(self, *args)
    def GetResPoolsSchedActive(self) -> "bool" : return _vmkctl.DVSwitchImpl_GetResPoolsSchedActive(self)
    def GetNetworkResourceInfo(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetNetworkResourceInfo(self, *args)
    def GetPendingVnicInfo(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetPendingVnicInfo(self, *args)
    def SetNetIOCVersion(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetNetIOCVersion(self, *args)
    def GetNetIOCVersion(self) -> "std::string" : return _vmkctl.DVSwitchImpl_GetNetIOCVersion(self)
    def SetNetIOCResvThreshold(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetNetIOCResvThreshold(self, *args)
    def GetNetIOCResvThreshold(self) -> "uint32" : return _vmkctl.DVSwitchImpl_GetNetIOCResvThreshold(self)
    def SetLacpGroupConfig(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetLacpGroupConfig(self, *args)
    def GetLacpGroupConfig(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetLacpGroupConfig(self, *args)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.DVSwitchImpl_GetChildren(self)
    def LoadConfig(self) -> "void" : return _vmkctl.DVSwitchImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_Print(self, *args)
    def SetNumPorts(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetNumPorts(self, *args)
    def ClearProp(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_ClearProp(self, *args)
    def GetVendorProp(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetVendorProp(self, *args)
    def ExecuteDvsCommand(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_ExecuteDvsCommand(self, *args)
    def GetVxlanIds(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetVxlanIds(self, *args)
    def GetDvsHostConfig(self, *args) -> "bool" : return _vmkctl.DVSwitchImpl_GetDvsHostConfig(self, *args)
    def GetDvsExtraConfig(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_GetDvsExtraConfig(self, *args)
    def SetDvsExtraConfig(self, *args) -> "void" : return _vmkctl.DVSwitchImpl_SetDvsExtraConfig(self, *args)
    __swig_getmethods__["SetDvsExtraConfigInt"] = lambda x: _vmkctl.DVSwitchImpl_SetDvsExtraConfigInt
    if _newclass:SetDvsExtraConfigInt = staticmethod(_vmkctl.DVSwitchImpl_SetDvsExtraConfigInt)
DVSwitchImpl_swigregister = _vmkctl.DVSwitchImpl_swigregister
DVSwitchImpl_swigregister(DVSwitchImpl)

def DVSwitchImpl_CreateDVSwitch(*args) -> "HostCtl::Network::DVSwitchPtr" :
  return _vmkctl.DVSwitchImpl_CreateDVSwitch(*args)
DVSwitchImpl_CreateDVSwitch = _vmkctl.DVSwitchImpl_CreateDVSwitch

def DVSwitchImpl_SetDvsExtraConfigInt(*args) -> "void" :
  return _vmkctl.DVSwitchImpl_SetDvsExtraConfigInt(*args)
DVSwitchImpl_SetDvsExtraConfigInt = _vmkctl.DVSwitchImpl_SetDvsExtraConfigInt

class DVPort(ConnectionPoint):
    __swig_setmethods__ = {}
    for _s in [ConnectionPoint]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVPort, name, value)
    __swig_getmethods__ = {}
    for _s in [ConnectionPoint]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DVPort, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetDVSwitch(self) -> "HostCtl::Network::DVSwitchPtr" : return _vmkctl.DVPort_GetDVSwitch(self)
    def GetDvsId(self) -> "std::string" : return _vmkctl.DVPort_GetDvsId(self)
    def GetDvPortId(self) -> "std::string" : return _vmkctl.DVPort_GetDvPortId(self)
    def SetName(self, *args) -> "void" : return _vmkctl.DVPort_SetName(self, *args)
    def GetName(self) -> "std::string" : return _vmkctl.DVPort_GetName(self)
    def SetConnectionId(self, *args) -> "void" : return _vmkctl.DVPort_SetConnectionId(self, *args)
    def GetConnectionId(self) -> "uint32" : return _vmkctl.DVPort_GetConnectionId(self)
    def SetBlocked(self, *args) -> "void" : return _vmkctl.DVPort_SetBlocked(self, *args)
    def GetBlocked(self) -> "bool" : return _vmkctl.DVPort_GetBlocked(self)
    def SetVmDirectPathGen2Allowed(self, *args) -> "void" : return _vmkctl.DVPort_SetVmDirectPathGen2Allowed(self, *args)
    def GetVmDirectPathGen2Allowed(self) -> "bool" : return _vmkctl.DVPort_GetVmDirectPathGen2Allowed(self)
    def SetTxUplink(self, *args) -> "void" : return _vmkctl.DVPort_SetTxUplink(self, *args)
    def GetTxUplink(self) -> "bool" : return _vmkctl.DVPort_GetTxUplink(self)
    def SetDVPortgroupId(self, *args) -> "void" : return _vmkctl.DVPort_SetDVPortgroupId(self, *args)
    def GetDVPortgroupId(self) -> "std::string" : return _vmkctl.DVPort_GetDVPortgroupId(self)
    def SetTeamingPolicy(self, *args) -> "void" : return _vmkctl.DVPort_SetTeamingPolicy(self, *args)
    def GetTeamingPolicy(self) -> "HostCtl::Network::DVPortTeamPolicy" : return _vmkctl.DVPort_GetTeamingPolicy(self)
    def SetVlanPolicy(self, *args) -> "void" : return _vmkctl.DVPort_SetVlanPolicy(self, *args)
    def GetVlanPolicy(self) -> "HostCtl::Network::DVPortVlanPolicy" : return _vmkctl.DVPort_GetVlanPolicy(self)
    def SetPriority(self, *args) -> "void" : return _vmkctl.DVPort_SetPriority(self, *args)
    def GetPriority(self) -> "uint32" : return _vmkctl.DVPort_GetPriority(self)
    def SetIpfixEnabled(self, *args) -> "void" : return _vmkctl.DVPort_SetIpfixEnabled(self, *args)
    def IsIpfixEnabled(self) -> "bool" : return _vmkctl.DVPort_IsIpfixEnabled(self)
    def SetShapingPolicy(self, *args) -> "void" : return _vmkctl.DVPort_SetShapingPolicy(self, *args)
    def GetShapingPolicy(self, *args) -> "HostCtl::Network::DVPortShapingPolicy" : return _vmkctl.DVPort_GetShapingPolicy(self, *args)
    def SetSecurityPolicy(self, *args) -> "void" : return _vmkctl.DVPort_SetSecurityPolicy(self, *args)
    def GetSecurityPolicy(self) -> "HostCtl::Network::DVPortSecurityPolicy" : return _vmkctl.DVPort_GetSecurityPolicy(self)
    def SetLacpPolicy(self, *args) -> "void" : return _vmkctl.DVPort_SetLacpPolicy(self, *args)
    def GetLacpPolicy(self) -> "HostCtl::Network::DVPortLacpPolicy" : return _vmkctl.DVPort_GetLacpPolicy(self)
    def SetOverlayParams(self, *args) -> "void" : return _vmkctl.DVPort_SetOverlayParams(self, *args)
    def GetOverlayParams(self, *args) -> "void" : return _vmkctl.DVPort_GetOverlayParams(self, *args)
    def SetSwitchSecurityConfig(self, *args) -> "void" : return _vmkctl.DVPort_SetSwitchSecurityConfig(self, *args)
    def GetSwitchSecurityConfig(self, *args) -> "void" : return _vmkctl.DVPort_GetSwitchSecurityConfig(self, *args)
    def SetTrafficFilterRulesetConfig(self, *args) -> "void" : return _vmkctl.DVPort_SetTrafficFilterRulesetConfig(self, *args)
    def GetTrafficFilterRulesetConfig(self, *args) -> "void" : return _vmkctl.DVPort_GetTrafficFilterRulesetConfig(self, *args)
    def FetchBindingDb(self, *args) -> "void" : return _vmkctl.DVPort_FetchBindingDb(self, *args)
    def ClearBindingDbEntries(self, *args) -> "void" : return _vmkctl.DVPort_ClearBindingDbEntries(self, *args)
    def SetVendorData(self, *args) -> "void" : return _vmkctl.DVPort_SetVendorData(self, *args)
    def GetVendorData(self, *args) -> "void" : return _vmkctl.DVPort_GetVendorData(self, *args)
    def GetExtraConfigProp(self, *args) -> "void" : return _vmkctl.DVPort_GetExtraConfigProp(self, *args)
    def SetExtraConfig(self, *args) -> "void" : return _vmkctl.DVPort_SetExtraConfig(self, *args)
    def GetExtraConfig(self, *args) -> "void" : return _vmkctl.DVPort_GetExtraConfig(self, *args)
    def GetTeamingOverride(self) -> "std::string" : return _vmkctl.DVPort_GetTeamingOverride(self)
    def SetTeamingOverride(self, *args) -> "void" : return _vmkctl.DVPort_SetTeamingOverride(self, *args)
    def SetStats(self, *args) -> "void" : return _vmkctl.DVPort_SetStats(self, *args)
    def GetStats(self) -> "HostCtl::Network::DVPortStats" : return _vmkctl.DVPort_GetStats(self)
    def GetStatus(self, statusDetail : 'string' = None) -> "DVPortStatus" : return _vmkctl.DVPort_GetStatus(self, statusDetail)
    def GetRuntimeVlanInfo(self) -> "HostCtl::Network::DVPortRuntimeVlanInfo" : return _vmkctl.DVPort_GetRuntimeVlanInfo(self)
    def SetPortPersistencePath(self, *args) -> "void" : return _vmkctl.DVPort_SetPortPersistencePath(self, *args)
    def GetPortPersistencePath(self) -> "std::string" : return _vmkctl.DVPort_GetPortPersistencePath(self)
    def SetResPoolsCfg(self, *args) -> "void" : return _vmkctl.DVPort_SetResPoolsCfg(self, *args)
    def GetResPoolsCfg(self, *args) -> "void" : return _vmkctl.DVPort_GetResPoolsCfg(self, *args)
    def SetResPoolAssoc(self, *args) -> "void" : return _vmkctl.DVPort_SetResPoolAssoc(self, *args)
    def GetResPoolAssoc(self, *args) -> "void" : return _vmkctl.DVPort_GetResPoolAssoc(self, *args)
    def ClearProp(self, *args) -> "void" : return _vmkctl.DVPort_ClearProp(self, *args)
    def GetVendorProp(self, *args) -> "void" : return _vmkctl.DVPort_GetVendorProp(self, *args)
    def TestDVPortVob(self) -> "void" : return _vmkctl.DVPort_TestDVPortVob(self)
    def GetHealthCheckVlanResult(self, *args) -> "void" : return _vmkctl.DVPort_GetHealthCheckVlanResult(self, *args)
    def GetHealthCheckMtuResult(self, *args) -> "void" : return _vmkctl.DVPort_GetHealthCheckMtuResult(self, *args)
    def GetVspanTable(self) -> "std::vector< HostCtl::Network::VspanSession,std::allocator< HostCtl::Network::VspanSession > >" : return _vmkctl.DVPort_GetVspanTable(self)
    def SetVspanTable(self, *args) -> "void" : return _vmkctl.DVPort_SetVspanTable(self, *args)
    __swig_destroy__ = _vmkctl.delete_DVPort
    __del__ = lambda self : None;
DVPort_swigregister = _vmkctl.DVPort_swigregister
DVPort_swigregister(DVPort)

class PortSecurityPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortSecurityPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortSecurityPolicy, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_PortSecurityPolicy()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["GetDefaultPolicy"] = lambda x: _vmkctl.PortSecurityPolicy_GetDefaultPolicy
    if _newclass:GetDefaultPolicy = staticmethod(_vmkctl.PortSecurityPolicy_GetDefaultPolicy)
    __swig_destroy__ = _vmkctl.delete_PortSecurityPolicy
    __del__ = lambda self : None;
    def Derive(self, *args) -> "void" : return _vmkctl.PortSecurityPolicy_Derive(self, *args)
    def IsSet(self) -> "bool" : return _vmkctl.PortSecurityPolicy_IsSet(self)
    def UnsetAll(self) -> "void" : return _vmkctl.PortSecurityPolicy_UnsetAll(self)
    def SetAllowPromiscuous(self, *args) -> "void" : return _vmkctl.PortSecurityPolicy_SetAllowPromiscuous(self, *args)
    def UnsetAllowPromiscuous(self) -> "void" : return _vmkctl.PortSecurityPolicy_UnsetAllowPromiscuous(self)
    def HasAllowPromiscuous(self) -> "bool" : return _vmkctl.PortSecurityPolicy_HasAllowPromiscuous(self)
    def GetAllowPromiscuous(self) -> "bool" : return _vmkctl.PortSecurityPolicy_GetAllowPromiscuous(self)
    def SetAllowMacAddressChange(self, *args) -> "void" : return _vmkctl.PortSecurityPolicy_SetAllowMacAddressChange(self, *args)
    def UnsetAllowMacAddressChange(self) -> "void" : return _vmkctl.PortSecurityPolicy_UnsetAllowMacAddressChange(self)
    def HasAllowMacAddressChange(self) -> "bool" : return _vmkctl.PortSecurityPolicy_HasAllowMacAddressChange(self)
    def GetAllowMacAddressChange(self) -> "bool" : return _vmkctl.PortSecurityPolicy_GetAllowMacAddressChange(self)
    def SetAllowForgedTransmits(self, *args) -> "void" : return _vmkctl.PortSecurityPolicy_SetAllowForgedTransmits(self, *args)
    def UnsetAllowForgedTransmits(self) -> "void" : return _vmkctl.PortSecurityPolicy_UnsetAllowForgedTransmits(self)
    def HasAllowForgedTransmits(self) -> "bool" : return _vmkctl.PortSecurityPolicy_HasAllowForgedTransmits(self)
    def GetAllowForgedTransmits(self) -> "bool" : return _vmkctl.PortSecurityPolicy_GetAllowForgedTransmits(self)
PortSecurityPolicy_swigregister = _vmkctl.PortSecurityPolicy_swigregister
PortSecurityPolicy_swigregister(PortSecurityPolicy)

def PortSecurityPolicy_GetDefaultPolicy() -> "HostCtl::Network::PortSecurityPolicy" :
  return _vmkctl.PortSecurityPolicy_GetDefaultPolicy()
PortSecurityPolicy_GetDefaultPolicy = _vmkctl.PortSecurityPolicy_GetDefaultPolicy

class PortStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PortStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PortStats, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_PortStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["pktsTxOK"] = _vmkctl.PortStats_pktsTxOK_set
    __swig_getmethods__["pktsTxOK"] = _vmkctl.PortStats_pktsTxOK_get
    if _newclass:pktsTxOK = _swig_property(_vmkctl.PortStats_pktsTxOK_get, _vmkctl.PortStats_pktsTxOK_set)
    __swig_setmethods__["bytesTxOK"] = _vmkctl.PortStats_bytesTxOK_set
    __swig_getmethods__["bytesTxOK"] = _vmkctl.PortStats_bytesTxOK_get
    if _newclass:bytesTxOK = _swig_property(_vmkctl.PortStats_bytesTxOK_get, _vmkctl.PortStats_bytesTxOK_set)
    __swig_setmethods__["pktsRxOK"] = _vmkctl.PortStats_pktsRxOK_set
    __swig_getmethods__["pktsRxOK"] = _vmkctl.PortStats_pktsRxOK_get
    if _newclass:pktsRxOK = _swig_property(_vmkctl.PortStats_pktsRxOK_get, _vmkctl.PortStats_pktsRxOK_set)
    __swig_setmethods__["bytesRxOK"] = _vmkctl.PortStats_bytesRxOK_set
    __swig_getmethods__["bytesRxOK"] = _vmkctl.PortStats_bytesRxOK_get
    if _newclass:bytesRxOK = _swig_property(_vmkctl.PortStats_bytesRxOK_get, _vmkctl.PortStats_bytesRxOK_set)
    __swig_setmethods__["droppedTx"] = _vmkctl.PortStats_droppedTx_set
    __swig_getmethods__["droppedTx"] = _vmkctl.PortStats_droppedTx_get
    if _newclass:droppedTx = _swig_property(_vmkctl.PortStats_droppedTx_get, _vmkctl.PortStats_droppedTx_set)
    __swig_setmethods__["droppedRx"] = _vmkctl.PortStats_droppedRx_set
    __swig_getmethods__["droppedRx"] = _vmkctl.PortStats_droppedRx_get
    if _newclass:droppedRx = _swig_property(_vmkctl.PortStats_droppedRx_get, _vmkctl.PortStats_droppedRx_set)
    __swig_setmethods__["pktsTsoTxOK"] = _vmkctl.PortStats_pktsTsoTxOK_set
    __swig_getmethods__["pktsTsoTxOK"] = _vmkctl.PortStats_pktsTsoTxOK_get
    if _newclass:pktsTsoTxOK = _swig_property(_vmkctl.PortStats_pktsTsoTxOK_get, _vmkctl.PortStats_pktsTsoTxOK_set)
    __swig_setmethods__["bytesTsoTxOK"] = _vmkctl.PortStats_bytesTsoTxOK_set
    __swig_getmethods__["bytesTsoTxOK"] = _vmkctl.PortStats_bytesTsoTxOK_get
    if _newclass:bytesTsoTxOK = _swig_property(_vmkctl.PortStats_bytesTsoTxOK_get, _vmkctl.PortStats_bytesTsoTxOK_set)
    __swig_setmethods__["droppedTsoTx"] = _vmkctl.PortStats_droppedTsoTx_set
    __swig_getmethods__["droppedTsoTx"] = _vmkctl.PortStats_droppedTsoTx_get
    if _newclass:droppedTsoTx = _swig_property(_vmkctl.PortStats_droppedTsoTx_get, _vmkctl.PortStats_droppedTsoTx_set)
    __swig_setmethods__["pktsSwTsoTx"] = _vmkctl.PortStats_pktsSwTsoTx_set
    __swig_getmethods__["pktsSwTsoTx"] = _vmkctl.PortStats_pktsSwTsoTx_get
    if _newclass:pktsSwTsoTx = _swig_property(_vmkctl.PortStats_pktsSwTsoTx_get, _vmkctl.PortStats_pktsSwTsoTx_set)
    __swig_setmethods__["droppedSwTsoTx"] = _vmkctl.PortStats_droppedSwTsoTx_set
    __swig_getmethods__["droppedSwTsoTx"] = _vmkctl.PortStats_droppedSwTsoTx_get
    if _newclass:droppedSwTsoTx = _swig_property(_vmkctl.PortStats_droppedSwTsoTx_get, _vmkctl.PortStats_droppedSwTsoTx_set)
    __swig_setmethods__["pktsZerocopyTxOK"] = _vmkctl.PortStats_pktsZerocopyTxOK_set
    __swig_getmethods__["pktsZerocopyTxOK"] = _vmkctl.PortStats_pktsZerocopyTxOK_get
    if _newclass:pktsZerocopyTxOK = _swig_property(_vmkctl.PortStats_pktsZerocopyTxOK_get, _vmkctl.PortStats_pktsZerocopyTxOK_set)
    __swig_setmethods__["pktsSwTsoRx"] = _vmkctl.PortStats_pktsSwTsoRx_set
    __swig_getmethods__["pktsSwTsoRx"] = _vmkctl.PortStats_pktsSwTsoRx_get
    if _newclass:pktsSwTsoRx = _swig_property(_vmkctl.PortStats_pktsSwTsoRx_get, _vmkctl.PortStats_pktsSwTsoRx_set)
    __swig_setmethods__["droppedSwTsoRx"] = _vmkctl.PortStats_droppedSwTsoRx_set
    __swig_getmethods__["droppedSwTsoRx"] = _vmkctl.PortStats_droppedSwTsoRx_get
    if _newclass:droppedSwTsoRx = _swig_property(_vmkctl.PortStats_droppedSwTsoRx_get, _vmkctl.PortStats_droppedSwTsoRx_set)
    __swig_setmethods__["actions"] = _vmkctl.PortStats_actions_set
    __swig_getmethods__["actions"] = _vmkctl.PortStats_actions_get
    if _newclass:actions = _swig_property(_vmkctl.PortStats_actions_get, _vmkctl.PortStats_actions_set)
    __swig_setmethods__["uplinkRxPkts"] = _vmkctl.PortStats_uplinkRxPkts_set
    __swig_getmethods__["uplinkRxPkts"] = _vmkctl.PortStats_uplinkRxPkts_get
    if _newclass:uplinkRxPkts = _swig_property(_vmkctl.PortStats_uplinkRxPkts_get, _vmkctl.PortStats_uplinkRxPkts_set)
    __swig_setmethods__["pktsBilled"] = _vmkctl.PortStats_pktsBilled_set
    __swig_getmethods__["pktsBilled"] = _vmkctl.PortStats_pktsBilled_get
    if _newclass:pktsBilled = _swig_property(_vmkctl.PortStats_pktsBilled_get, _vmkctl.PortStats_pktsBilled_set)
    __swig_setmethods__["droppedRxDueToPageAbsent"] = _vmkctl.PortStats_droppedRxDueToPageAbsent_set
    __swig_getmethods__["droppedRxDueToPageAbsent"] = _vmkctl.PortStats_droppedRxDueToPageAbsent_get
    if _newclass:droppedRxDueToPageAbsent = _swig_property(_vmkctl.PortStats_droppedRxDueToPageAbsent_get, _vmkctl.PortStats_droppedRxDueToPageAbsent_set)
    __swig_setmethods__["droppedTxDueToPageAbsent"] = _vmkctl.PortStats_droppedTxDueToPageAbsent_set
    __swig_getmethods__["droppedTxDueToPageAbsent"] = _vmkctl.PortStats_droppedTxDueToPageAbsent_get
    if _newclass:droppedTxDueToPageAbsent = _swig_property(_vmkctl.PortStats_droppedTxDueToPageAbsent_get, _vmkctl.PortStats_droppedTxDueToPageAbsent_set)
    __swig_setmethods__["pnicBytesTxOK"] = _vmkctl.PortStats_pnicBytesTxOK_set
    __swig_getmethods__["pnicBytesTxOK"] = _vmkctl.PortStats_pnicBytesTxOK_get
    if _newclass:pnicBytesTxOK = _swig_property(_vmkctl.PortStats_pnicBytesTxOK_get, _vmkctl.PortStats_pnicBytesTxOK_set)
    __swig_setmethods__["pnicBytesRxOK"] = _vmkctl.PortStats_pnicBytesRxOK_set
    __swig_getmethods__["pnicBytesRxOK"] = _vmkctl.PortStats_pnicBytesRxOK_get
    if _newclass:pnicBytesRxOK = _swig_property(_vmkctl.PortStats_pnicBytesRxOK_get, _vmkctl.PortStats_pnicBytesRxOK_set)
    __swig_destroy__ = _vmkctl.delete_PortStats
    __del__ = lambda self : None;
PortStats_swigregister = _vmkctl.PortStats_swigregister
PortStats_swigregister(PortStats)

class PacketStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PacketStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PacketStats, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_PacketStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["pktsTx"] = _vmkctl.PacketStats_pktsTx_set
    __swig_getmethods__["pktsTx"] = _vmkctl.PacketStats_pktsTx_get
    if _newclass:pktsTx = _swig_property(_vmkctl.PacketStats_pktsTx_get, _vmkctl.PacketStats_pktsTx_set)
    __swig_setmethods__["pktsTxMulticast"] = _vmkctl.PacketStats_pktsTxMulticast_set
    __swig_getmethods__["pktsTxMulticast"] = _vmkctl.PacketStats_pktsTxMulticast_get
    if _newclass:pktsTxMulticast = _swig_property(_vmkctl.PacketStats_pktsTxMulticast_get, _vmkctl.PacketStats_pktsTxMulticast_set)
    __swig_setmethods__["pktsTxBroadcast"] = _vmkctl.PacketStats_pktsTxBroadcast_set
    __swig_getmethods__["pktsTxBroadcast"] = _vmkctl.PacketStats_pktsTxBroadcast_get
    if _newclass:pktsTxBroadcast = _swig_property(_vmkctl.PacketStats_pktsTxBroadcast_get, _vmkctl.PacketStats_pktsTxBroadcast_set)
    __swig_setmethods__["pktsRx"] = _vmkctl.PacketStats_pktsRx_set
    __swig_getmethods__["pktsRx"] = _vmkctl.PacketStats_pktsRx_get
    if _newclass:pktsRx = _swig_property(_vmkctl.PacketStats_pktsRx_get, _vmkctl.PacketStats_pktsRx_set)
    __swig_setmethods__["pktsRxMulticast"] = _vmkctl.PacketStats_pktsRxMulticast_set
    __swig_getmethods__["pktsRxMulticast"] = _vmkctl.PacketStats_pktsRxMulticast_get
    if _newclass:pktsRxMulticast = _swig_property(_vmkctl.PacketStats_pktsRxMulticast_get, _vmkctl.PacketStats_pktsRxMulticast_set)
    __swig_setmethods__["pktsRxBroadcast"] = _vmkctl.PacketStats_pktsRxBroadcast_set
    __swig_getmethods__["pktsRxBroadcast"] = _vmkctl.PacketStats_pktsRxBroadcast_get
    if _newclass:pktsRxBroadcast = _swig_property(_vmkctl.PacketStats_pktsRxBroadcast_get, _vmkctl.PacketStats_pktsRxBroadcast_set)
    __swig_setmethods__["droppedTx"] = _vmkctl.PacketStats_droppedTx_set
    __swig_getmethods__["droppedTx"] = _vmkctl.PacketStats_droppedTx_get
    if _newclass:droppedTx = _swig_property(_vmkctl.PacketStats_droppedTx_get, _vmkctl.PacketStats_droppedTx_set)
    __swig_setmethods__["droppedRx"] = _vmkctl.PacketStats_droppedRx_set
    __swig_getmethods__["droppedRx"] = _vmkctl.PacketStats_droppedRx_get
    if _newclass:droppedRx = _swig_property(_vmkctl.PacketStats_droppedRx_get, _vmkctl.PacketStats_droppedRx_set)
    __swig_destroy__ = _vmkctl.delete_PacketStats
    __del__ = lambda self : None;
PacketStats_swigregister = _vmkctl.PacketStats_swigregister
PacketStats_swigregister(PacketStats)

class ChainStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChainStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ChainStats, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_ChainStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["starts"] = _vmkctl.ChainStats_starts_set
    __swig_getmethods__["starts"] = _vmkctl.ChainStats_starts_get
    if _newclass:starts = _swig_property(_vmkctl.ChainStats_starts_get, _vmkctl.ChainStats_starts_set)
    __swig_setmethods__["resumes"] = _vmkctl.ChainStats_resumes_set
    __swig_getmethods__["resumes"] = _vmkctl.ChainStats_resumes_get
    if _newclass:resumes = _swig_property(_vmkctl.ChainStats_resumes_get, _vmkctl.ChainStats_resumes_set)
    __swig_setmethods__["errors"] = _vmkctl.ChainStats_errors_set
    __swig_getmethods__["errors"] = _vmkctl.ChainStats_errors_get
    if _newclass:errors = _swig_property(_vmkctl.ChainStats_errors_get, _vmkctl.ChainStats_errors_set)
    __swig_setmethods__["pktsStarted"] = _vmkctl.ChainStats_pktsStarted_set
    __swig_getmethods__["pktsStarted"] = _vmkctl.ChainStats_pktsStarted_get
    if _newclass:pktsStarted = _swig_property(_vmkctl.ChainStats_pktsStarted_get, _vmkctl.ChainStats_pktsStarted_set)
    __swig_setmethods__["pktsPassed"] = _vmkctl.ChainStats_pktsPassed_set
    __swig_getmethods__["pktsPassed"] = _vmkctl.ChainStats_pktsPassed_get
    if _newclass:pktsPassed = _swig_property(_vmkctl.ChainStats_pktsPassed_get, _vmkctl.ChainStats_pktsPassed_set)
    __swig_setmethods__["pktsDropped"] = _vmkctl.ChainStats_pktsDropped_set
    __swig_getmethods__["pktsDropped"] = _vmkctl.ChainStats_pktsDropped_get
    if _newclass:pktsDropped = _swig_property(_vmkctl.ChainStats_pktsDropped_get, _vmkctl.ChainStats_pktsDropped_set)
    __swig_destroy__ = _vmkctl.delete_ChainStats
    __del__ = lambda self : None;
ChainStats_swigregister = _vmkctl.ChainStats_swigregister
ChainStats_swigregister(ChainStats)

class VlanStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VlanStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VlanStats, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_VlanStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["vlanId"] = _vmkctl.VlanStats_vlanId_set
    __swig_getmethods__["vlanId"] = _vmkctl.VlanStats_vlanId_get
    if _newclass:vlanId = _swig_property(_vmkctl.VlanStats_vlanId_get, _vmkctl.VlanStats_vlanId_set)
    __swig_setmethods__["pktsRx"] = _vmkctl.VlanStats_pktsRx_set
    __swig_getmethods__["pktsRx"] = _vmkctl.VlanStats_pktsRx_get
    if _newclass:pktsRx = _swig_property(_vmkctl.VlanStats_pktsRx_get, _vmkctl.VlanStats_pktsRx_set)
    __swig_setmethods__["pktsTx"] = _vmkctl.VlanStats_pktsTx_set
    __swig_getmethods__["pktsTx"] = _vmkctl.VlanStats_pktsTx_get
    if _newclass:pktsTx = _swig_property(_vmkctl.VlanStats_pktsTx_get, _vmkctl.VlanStats_pktsTx_set)
    __swig_destroy__ = _vmkctl.delete_VlanStats
    __del__ = lambda self : None;
VlanStats_swigregister = _vmkctl.VlanStats_swigregister
VlanStats_swigregister(VlanStats)

class FilterStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FilterStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FilterStats, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_FilterStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["filterName"] = _vmkctl.FilterStats_filterName_set
    __swig_getmethods__["filterName"] = _vmkctl.FilterStats_filterName_get
    if _newclass:filterName = _swig_property(_vmkctl.FilterStats_filterName_get, _vmkctl.FilterStats_filterName_set)
    __swig_setmethods__["filterRank"] = _vmkctl.FilterStats_filterRank_set
    __swig_getmethods__["filterRank"] = _vmkctl.FilterStats_filterRank_get
    if _newclass:filterRank = _swig_property(_vmkctl.FilterStats_filterRank_get, _vmkctl.FilterStats_filterRank_set)
    __swig_setmethods__["isPublic"] = _vmkctl.FilterStats_isPublic_set
    __swig_getmethods__["isPublic"] = _vmkctl.FilterStats_isPublic_get
    if _newclass:isPublic = _swig_property(_vmkctl.FilterStats_isPublic_get, _vmkctl.FilterStats_isPublic_set)
    __swig_setmethods__["isInput"] = _vmkctl.FilterStats_isInput_set
    __swig_getmethods__["isInput"] = _vmkctl.FilterStats_isInput_get
    if _newclass:isInput = _swig_property(_vmkctl.FilterStats_isInput_get, _vmkctl.FilterStats_isInput_set)
    __swig_setmethods__["hasClientStats"] = _vmkctl.FilterStats_hasClientStats_set
    __swig_getmethods__["hasClientStats"] = _vmkctl.FilterStats_hasClientStats_get
    if _newclass:hasClientStats = _swig_property(_vmkctl.FilterStats_hasClientStats_get, _vmkctl.FilterStats_hasClientStats_set)
    __swig_setmethods__["pktsIn"] = _vmkctl.FilterStats_pktsIn_set
    __swig_getmethods__["pktsIn"] = _vmkctl.FilterStats_pktsIn_get
    if _newclass:pktsIn = _swig_property(_vmkctl.FilterStats_pktsIn_get, _vmkctl.FilterStats_pktsIn_set)
    __swig_setmethods__["pktsOut"] = _vmkctl.FilterStats_pktsOut_set
    __swig_getmethods__["pktsOut"] = _vmkctl.FilterStats_pktsOut_get
    if _newclass:pktsOut = _swig_property(_vmkctl.FilterStats_pktsOut_get, _vmkctl.FilterStats_pktsOut_set)
    __swig_setmethods__["pktsDropped"] = _vmkctl.FilterStats_pktsDropped_set
    __swig_getmethods__["pktsDropped"] = _vmkctl.FilterStats_pktsDropped_get
    if _newclass:pktsDropped = _swig_property(_vmkctl.FilterStats_pktsDropped_get, _vmkctl.FilterStats_pktsDropped_set)
    __swig_setmethods__["pktsFiltered"] = _vmkctl.FilterStats_pktsFiltered_set
    __swig_getmethods__["pktsFiltered"] = _vmkctl.FilterStats_pktsFiltered_get
    if _newclass:pktsFiltered = _swig_property(_vmkctl.FilterStats_pktsFiltered_get, _vmkctl.FilterStats_pktsFiltered_set)
    __swig_setmethods__["pktsFaulted"] = _vmkctl.FilterStats_pktsFaulted_set
    __swig_getmethods__["pktsFaulted"] = _vmkctl.FilterStats_pktsFaulted_get
    if _newclass:pktsFaulted = _swig_property(_vmkctl.FilterStats_pktsFaulted_get, _vmkctl.FilterStats_pktsFaulted_set)
    __swig_setmethods__["pktsQueued"] = _vmkctl.FilterStats_pktsQueued_set
    __swig_getmethods__["pktsQueued"] = _vmkctl.FilterStats_pktsQueued_get
    if _newclass:pktsQueued = _swig_property(_vmkctl.FilterStats_pktsQueued_get, _vmkctl.FilterStats_pktsQueued_set)
    __swig_setmethods__["pktsInjected"] = _vmkctl.FilterStats_pktsInjected_set
    __swig_getmethods__["pktsInjected"] = _vmkctl.FilterStats_pktsInjected_get
    if _newclass:pktsInjected = _swig_property(_vmkctl.FilterStats_pktsInjected_get, _vmkctl.FilterStats_pktsInjected_set)
    __swig_setmethods__["pktErrors"] = _vmkctl.FilterStats_pktErrors_set
    __swig_getmethods__["pktErrors"] = _vmkctl.FilterStats_pktErrors_get
    if _newclass:pktErrors = _swig_property(_vmkctl.FilterStats_pktErrors_get, _vmkctl.FilterStats_pktErrors_set)
    __swig_destroy__ = _vmkctl.delete_FilterStats
    __del__ = lambda self : None;
FilterStats_swigregister = _vmkctl.FilterStats_swigregister
FilterStats_swigregister(FilterStats)

class Ipv4Route(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv4Route, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv4Route, name)
    __repr__ = _swig_repr
    __swig_setmethods__["network"] = _vmkctl.Ipv4Route_network_set
    __swig_getmethods__["network"] = _vmkctl.Ipv4Route_network_get
    if _newclass:network = _swig_property(_vmkctl.Ipv4Route_network_get, _vmkctl.Ipv4Route_network_set)
    __swig_setmethods__["gateway"] = _vmkctl.Ipv4Route_gateway_set
    __swig_getmethods__["gateway"] = _vmkctl.Ipv4Route_gateway_get
    if _newclass:gateway = _swig_property(_vmkctl.Ipv4Route_gateway_get, _vmkctl.Ipv4Route_gateway_set)
    __swig_setmethods__["iface"] = _vmkctl.Ipv4Route_iface_set
    __swig_getmethods__["iface"] = _vmkctl.Ipv4Route_iface_get
    if _newclass:iface = _swig_property(_vmkctl.Ipv4Route_iface_get, _vmkctl.Ipv4Route_iface_set)
    def __init__(self): 
        this = _vmkctl.new_Ipv4Route()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_Ipv4Route
    __del__ = lambda self : None;
Ipv4Route_swigregister = _vmkctl.Ipv4Route_swigregister
Ipv4Route_swigregister(Ipv4Route)

class Ipv6Route(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv6Route, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv6Route, name)
    __repr__ = _swig_repr
    __swig_setmethods__["network"] = _vmkctl.Ipv6Route_network_set
    __swig_getmethods__["network"] = _vmkctl.Ipv6Route_network_get
    if _newclass:network = _swig_property(_vmkctl.Ipv6Route_network_get, _vmkctl.Ipv6Route_network_set)
    __swig_setmethods__["gateway"] = _vmkctl.Ipv6Route_gateway_set
    __swig_getmethods__["gateway"] = _vmkctl.Ipv6Route_gateway_get
    if _newclass:gateway = _swig_property(_vmkctl.Ipv6Route_gateway_get, _vmkctl.Ipv6Route_gateway_set)
    __swig_setmethods__["iface"] = _vmkctl.Ipv6Route_iface_set
    __swig_getmethods__["iface"] = _vmkctl.Ipv6Route_iface_get
    if _newclass:iface = _swig_property(_vmkctl.Ipv6Route_iface_get, _vmkctl.Ipv6Route_iface_set)
    def __init__(self): 
        this = _vmkctl.new_Ipv6Route()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_Ipv6Route
    __del__ = lambda self : None;
Ipv6Route_swigregister = _vmkctl.Ipv6Route_swigregister
Ipv6Route_swigregister(Ipv6Route)

NBR_TYPE_OTHER = _vmkctl.NBR_TYPE_OTHER
NBR_TYPE_INVALID = _vmkctl.NBR_TYPE_INVALID
NBR_TYPE_DYNAMIC = _vmkctl.NBR_TYPE_DYNAMIC
NBR_TYPE_STATIC = _vmkctl.NBR_TYPE_STATIC
NBR_TYPE_LOCAL = _vmkctl.NBR_TYPE_LOCAL
NBR_TYPE_AUTOREFRESH = _vmkctl.NBR_TYPE_AUTOREFRESH
NBR_TYPE_RESOLVE = _vmkctl.NBR_TYPE_RESOLVE
class Ipv4Neighbor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv4Neighbor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv4Neighbor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["neighbor"] = _vmkctl.Ipv4Neighbor_neighbor_set
    __swig_getmethods__["neighbor"] = _vmkctl.Ipv4Neighbor_neighbor_get
    if _newclass:neighbor = _swig_property(_vmkctl.Ipv4Neighbor_neighbor_get, _vmkctl.Ipv4Neighbor_neighbor_set)
    __swig_setmethods__["mac"] = _vmkctl.Ipv4Neighbor_mac_set
    __swig_getmethods__["mac"] = _vmkctl.Ipv4Neighbor_mac_get
    if _newclass:mac = _swig_property(_vmkctl.Ipv4Neighbor_mac_get, _vmkctl.Ipv4Neighbor_mac_set)
    __swig_setmethods__["iface"] = _vmkctl.Ipv4Neighbor_iface_set
    __swig_getmethods__["iface"] = _vmkctl.Ipv4Neighbor_iface_get
    if _newclass:iface = _swig_property(_vmkctl.Ipv4Neighbor_iface_get, _vmkctl.Ipv4Neighbor_iface_set)
    __swig_setmethods__["expiry"] = _vmkctl.Ipv4Neighbor_expiry_set
    __swig_getmethods__["expiry"] = _vmkctl.Ipv4Neighbor_expiry_get
    if _newclass:expiry = _swig_property(_vmkctl.Ipv4Neighbor_expiry_get, _vmkctl.Ipv4Neighbor_expiry_set)
    __swig_setmethods__["type"] = _vmkctl.Ipv4Neighbor_type_set
    __swig_getmethods__["type"] = _vmkctl.Ipv4Neighbor_type_get
    if _newclass:type = _swig_property(_vmkctl.Ipv4Neighbor_type_get, _vmkctl.Ipv4Neighbor_type_set)
    def __init__(self): 
        this = _vmkctl.new_Ipv4Neighbor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_Ipv4Neighbor
    __del__ = lambda self : None;
Ipv4Neighbor_swigregister = _vmkctl.Ipv4Neighbor_swigregister
Ipv4Neighbor_swigregister(Ipv4Neighbor)

NBR_UNKNOWN = _vmkctl.NBR_UNKNOWN
NBR_NONE = _vmkctl.NBR_NONE
NBR_REACHABLE = _vmkctl.NBR_REACHABLE
NBR_STALE = _vmkctl.NBR_STALE
NBR_DELAY = _vmkctl.NBR_DELAY
NBR_PROBE = _vmkctl.NBR_PROBE
class Ipv6Neighbor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ipv6Neighbor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ipv6Neighbor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["neighbor"] = _vmkctl.Ipv6Neighbor_neighbor_set
    __swig_getmethods__["neighbor"] = _vmkctl.Ipv6Neighbor_neighbor_get
    if _newclass:neighbor = _swig_property(_vmkctl.Ipv6Neighbor_neighbor_get, _vmkctl.Ipv6Neighbor_neighbor_set)
    __swig_setmethods__["mac"] = _vmkctl.Ipv6Neighbor_mac_set
    __swig_getmethods__["mac"] = _vmkctl.Ipv6Neighbor_mac_get
    if _newclass:mac = _swig_property(_vmkctl.Ipv6Neighbor_mac_get, _vmkctl.Ipv6Neighbor_mac_set)
    __swig_setmethods__["iface"] = _vmkctl.Ipv6Neighbor_iface_set
    __swig_getmethods__["iface"] = _vmkctl.Ipv6Neighbor_iface_get
    if _newclass:iface = _swig_property(_vmkctl.Ipv6Neighbor_iface_get, _vmkctl.Ipv6Neighbor_iface_set)
    __swig_setmethods__["expiry"] = _vmkctl.Ipv6Neighbor_expiry_set
    __swig_getmethods__["expiry"] = _vmkctl.Ipv6Neighbor_expiry_get
    if _newclass:expiry = _swig_property(_vmkctl.Ipv6Neighbor_expiry_get, _vmkctl.Ipv6Neighbor_expiry_set)
    __swig_setmethods__["state"] = _vmkctl.Ipv6Neighbor_state_set
    __swig_getmethods__["state"] = _vmkctl.Ipv6Neighbor_state_get
    if _newclass:state = _swig_property(_vmkctl.Ipv6Neighbor_state_get, _vmkctl.Ipv6Neighbor_state_set)
    __swig_setmethods__["type"] = _vmkctl.Ipv6Neighbor_type_set
    __swig_getmethods__["type"] = _vmkctl.Ipv6Neighbor_type_get
    if _newclass:type = _swig_property(_vmkctl.Ipv6Neighbor_type_get, _vmkctl.Ipv6Neighbor_type_set)
    def __init__(self): 
        this = _vmkctl.new_Ipv6Neighbor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_Ipv6Neighbor
    __del__ = lambda self : None;
Ipv6Neighbor_swigregister = _vmkctl.Ipv6Neighbor_swigregister
Ipv6Neighbor_swigregister(Ipv6Neighbor)

class RoutingInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutingInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoutingInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetConsoleDefaultGatewayDevice(self) -> "std::string" : return _vmkctl.RoutingInfo_GetConsoleDefaultGatewayDevice(self)
    def GetVmKernelDefaultGateway(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.RoutingInfo_GetVmKernelDefaultGateway(self)
    def GetVmKernelConfigDefaultGateway(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.RoutingInfo_GetVmKernelConfigDefaultGateway(self)
    def SetVmKernelDefaultGateway(self, *args) -> "void" : return _vmkctl.RoutingInfo_SetVmKernelDefaultGateway(self, *args)
    def GetIpv6VmKernelDefaultGateway(self) -> "HostCtl::Network::Ipv6Address" : return _vmkctl.RoutingInfo_GetIpv6VmKernelDefaultGateway(self)
    def GetIpv6VmKernelConfigDefaultGateway(self) -> "HostCtl::Network::Ipv6Address" : return _vmkctl.RoutingInfo_GetIpv6VmKernelConfigDefaultGateway(self)
    def SetIpv6VmKernelDefaultGateway(self, *args) -> "void" : return _vmkctl.RoutingInfo_SetIpv6VmKernelDefaultGateway(self, *args)
    def GetCurrentVMkernelRoutes(self) -> "std::vector< HostCtl::Network::Ipv4Route,std::allocator< HostCtl::Network::Ipv4Route > >" : return _vmkctl.RoutingInfo_GetCurrentVMkernelRoutes(self)
    def GetCurrentIpv6VMkernelRoutes(self) -> "std::vector< HostCtl::Network::Ipv6Route,std::allocator< HostCtl::Network::Ipv6Route > >" : return _vmkctl.RoutingInfo_GetCurrentIpv6VMkernelRoutes(self)
    def AddVMkernelRoute(self, *args) -> "void" : return _vmkctl.RoutingInfo_AddVMkernelRoute(self, *args)
    def AddIpv6VMkernelRoute(self, *args) -> "void" : return _vmkctl.RoutingInfo_AddIpv6VMkernelRoute(self, *args)
    def RemoveVMkernelRoute(self, *args) -> "void" : return _vmkctl.RoutingInfo_RemoveVMkernelRoute(self, *args)
    def RemoveIpv6VMkernelRoute(self, *args) -> "void" : return _vmkctl.RoutingInfo_RemoveIpv6VMkernelRoute(self, *args)
    def GetCurrentIpv4VMkernelNeighbors(self, *args) -> "void" : return _vmkctl.RoutingInfo_GetCurrentIpv4VMkernelNeighbors(self, *args)
    def GetCurrentIpv6VMkernelNeighbors(self, *args) -> "void" : return _vmkctl.RoutingInfo_GetCurrentIpv6VMkernelNeighbors(self, *args)
    def RemoveIpv4Neighbor(self, *args) -> "void" : return _vmkctl.RoutingInfo_RemoveIpv4Neighbor(self, *args)
    def RemoveIpv6Neighbor(self, *args) -> "void" : return _vmkctl.RoutingInfo_RemoveIpv6Neighbor(self, *args)
    def GetIpv4NeighborType(self, *args) -> "std::string" : return _vmkctl.RoutingInfo_GetIpv4NeighborType(self, *args)
    def GetIpv6NeighborType(self, *args) -> "std::string" : return _vmkctl.RoutingInfo_GetIpv6NeighborType(self, *args)
    def GetIpv6NeighborState(self, *args) -> "std::string" : return _vmkctl.RoutingInfo_GetIpv6NeighborState(self, *args)
    def SetNetstackInstanceKey(self, *args) -> "void" : return _vmkctl.RoutingInfo_SetNetstackInstanceKey(self, *args)
    def GetNetstackInstanceKey(self) -> "std::string" : return _vmkctl.RoutingInfo_GetNetstackInstanceKey(self)
    __swig_destroy__ = _vmkctl.delete_RoutingInfo
    __del__ = lambda self : None;
RoutingInfo_swigregister = _vmkctl.RoutingInfo_swigregister
RoutingInfo_swigregister(RoutingInfo)

class RoutingInfoImpl(RoutingInfo,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [RoutingInfo,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoutingInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [RoutingInfo,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoutingInfoImpl, name)
    __repr__ = _swig_repr
    __swig_setmethods__["DEFAULT_IPV4_ROUTE"] = _vmkctl.RoutingInfoImpl_DEFAULT_IPV4_ROUTE_set
    __swig_getmethods__["DEFAULT_IPV4_ROUTE"] = _vmkctl.RoutingInfoImpl_DEFAULT_IPV4_ROUTE_get
    if _newclass:DEFAULT_IPV4_ROUTE = _swig_property(_vmkctl.RoutingInfoImpl_DEFAULT_IPV4_ROUTE_get, _vmkctl.RoutingInfoImpl_DEFAULT_IPV4_ROUTE_set)
    __swig_setmethods__["DEFAULT_IPV6_ROUTE"] = _vmkctl.RoutingInfoImpl_DEFAULT_IPV6_ROUTE_set
    __swig_getmethods__["DEFAULT_IPV6_ROUTE"] = _vmkctl.RoutingInfoImpl_DEFAULT_IPV6_ROUTE_get
    if _newclass:DEFAULT_IPV6_ROUTE = _swig_property(_vmkctl.RoutingInfoImpl_DEFAULT_IPV6_ROUTE_get, _vmkctl.RoutingInfoImpl_DEFAULT_IPV6_ROUTE_set)
    __swig_getmethods__["SortRoutesByNetmask"] = lambda x: _vmkctl.RoutingInfoImpl_SortRoutesByNetmask
    if _newclass:SortRoutesByNetmask = staticmethod(_vmkctl.RoutingInfoImpl_SortRoutesByNetmask)
    def __init__(self, *args): 
        this = _vmkctl.new_RoutingInfoImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_RoutingInfoImpl
    __del__ = lambda self : None;
    def GetConsoleDefaultGatewayDevice(self) -> "std::string" : return _vmkctl.RoutingInfoImpl_GetConsoleDefaultGatewayDevice(self)
    def GetVmKernelDefaultGateway(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.RoutingInfoImpl_GetVmKernelDefaultGateway(self)
    def GetVmKernelConfigDefaultGateway(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.RoutingInfoImpl_GetVmKernelConfigDefaultGateway(self)
    def SetVmKernelDefaultGateway(self, *args) -> "void" : return _vmkctl.RoutingInfoImpl_SetVmKernelDefaultGateway(self, *args)
    def GetIpv6VmKernelDefaultGateway(self) -> "HostCtl::Network::Ipv6Address" : return _vmkctl.RoutingInfoImpl_GetIpv6VmKernelDefaultGateway(self)
    def GetIpv6VmKernelConfigDefaultGateway(self) -> "HostCtl::Network::Ipv6Address" : return _vmkctl.RoutingInfoImpl_GetIpv6VmKernelConfigDefaultGateway(self)
    def SetIpv6VmKernelDefaultGateway(self, *args) -> "void" : return _vmkctl.RoutingInfoImpl_SetIpv6VmKernelDefaultGateway(self, *args)
    def GetVMkernelIpv4DefaultGatewayInterface(self) -> "std::string" : return _vmkctl.RoutingInfoImpl_GetVMkernelIpv4DefaultGatewayInterface(self)
    def GetVMkernelIpv6DefaultGatewayInterface(self) -> "std::string" : return _vmkctl.RoutingInfoImpl_GetVMkernelIpv6DefaultGatewayInterface(self)
    def Refresh(self) -> "void" : return _vmkctl.RoutingInfoImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.RoutingInfoImpl_GetName(self)
    def SaveConfig(self) -> "void" : return _vmkctl.RoutingInfoImpl_SaveConfig(self)
    def LoadConfig(self) -> "void" : return _vmkctl.RoutingInfoImpl_LoadConfig(self)
    def RemoveConfig(self, throwOnError : 'bool' = False) -> "void" : return _vmkctl.RoutingInfoImpl_RemoveConfig(self, throwOnError)
    def Print(self, *args) -> "void" : return _vmkctl.RoutingInfoImpl_Print(self, *args)
    def GetCurrentSystemRoutes(self) -> "std::map< HostCtl::Network::Ipv4Network,HostCtl::Network::Ipv4Address,std::less< HostCtl::Network::Ipv4Network >,std::allocator< std::pair< HostCtl::Network::Ipv4Network const,HostCtl::Network::Ipv4Address > > >" : return _vmkctl.RoutingInfoImpl_GetCurrentSystemRoutes(self)
    def GetIpv6CurrentSystemRoutes(self) -> "std::vector< std::pair< HostCtl::Network::Ipv6Network,HostCtl::Network::Ipv6Address >,std::allocator< std::pair< HostCtl::Network::Ipv6Network,HostCtl::Network::Ipv6Address > > >" : return _vmkctl.RoutingInfoImpl_GetIpv6CurrentSystemRoutes(self)
    def GetCurrentVMkernelRoutes(self) -> "std::vector< HostCtl::Network::Ipv4Route,std::allocator< HostCtl::Network::Ipv4Route > >" : return _vmkctl.RoutingInfoImpl_GetCurrentVMkernelRoutes(self)
    def GetCurrentIpv6VMkernelRoutes(self) -> "std::vector< HostCtl::Network::Ipv6Route,std::allocator< HostCtl::Network::Ipv6Route > >" : return _vmkctl.RoutingInfoImpl_GetCurrentIpv6VMkernelRoutes(self)
    def AddVMkernelRoute(self, *args) -> "void" : return _vmkctl.RoutingInfoImpl_AddVMkernelRoute(self, *args)
    def AddIpv6VMkernelRoute(self, *args) -> "void" : return _vmkctl.RoutingInfoImpl_AddIpv6VMkernelRoute(self, *args)
    def RemoveVMkernelRoute(self, *args) -> "void" : return _vmkctl.RoutingInfoImpl_RemoveVMkernelRoute(self, *args)
    def RemoveIpv6VMkernelRoute(self, *args) -> "void" : return _vmkctl.RoutingInfoImpl_RemoveIpv6VMkernelRoute(self, *args)
    def GetCurrentIpv4VMkernelNeighbors(self, *args) -> "void" : return _vmkctl.RoutingInfoImpl_GetCurrentIpv4VMkernelNeighbors(self, *args)
    def GetCurrentIpv6VMkernelNeighbors(self, *args) -> "void" : return _vmkctl.RoutingInfoImpl_GetCurrentIpv6VMkernelNeighbors(self, *args)
    def RemoveIpv4Neighbor(self, *args) -> "void" : return _vmkctl.RoutingInfoImpl_RemoveIpv4Neighbor(self, *args)
    def RemoveIpv6Neighbor(self, *args) -> "void" : return _vmkctl.RoutingInfoImpl_RemoveIpv6Neighbor(self, *args)
    def GetIpv4NeighborType(self, *args) -> "std::string" : return _vmkctl.RoutingInfoImpl_GetIpv4NeighborType(self, *args)
    def GetIpv6NeighborType(self, *args) -> "std::string" : return _vmkctl.RoutingInfoImpl_GetIpv6NeighborType(self, *args)
    def GetIpv6NeighborState(self, *args) -> "std::string" : return _vmkctl.RoutingInfoImpl_GetIpv6NeighborState(self, *args)
    def GetDefaultGatewaySource(self, *args) -> "std::string" : return _vmkctl.RoutingInfoImpl_GetDefaultGatewaySource(self, *args)
    def SetNetstackInstanceKey(self, *args) -> "void" : return _vmkctl.RoutingInfoImpl_SetNetstackInstanceKey(self, *args)
    def GetNetstackInstanceKey(self) -> "std::string" : return _vmkctl.RoutingInfoImpl_GetNetstackInstanceKey(self)
    def GetConfigLocation(self, *args) -> "bool" : return _vmkctl.RoutingInfoImpl_GetConfigLocation(self, *args)
RoutingInfoImpl_swigregister = _vmkctl.RoutingInfoImpl_swigregister
RoutingInfoImpl_swigregister(RoutingInfoImpl)

def RoutingInfoImpl_SortRoutesByNetmask(*args) -> "bool" :
  return _vmkctl.RoutingInfoImpl_SortRoutesByNetmask(*args)
RoutingInfoImpl_SortRoutesByNetmask = _vmkctl.RoutingInfoImpl_SortRoutesByNetmask

class ShapingPolicy(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShapingPolicy, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShapingPolicy, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_ShapingPolicy()
        try: self.this.append(this)
        except: self.this = this
    __swig_getmethods__["GetDefaultPolicy"] = lambda x: _vmkctl.ShapingPolicy_GetDefaultPolicy
    if _newclass:GetDefaultPolicy = staticmethod(_vmkctl.ShapingPolicy_GetDefaultPolicy)
    def Derive(self, *args) -> "void" : return _vmkctl.ShapingPolicy_Derive(self, *args)
    def IsSet(self) -> "bool" : return _vmkctl.ShapingPolicy_IsSet(self)
    def UnsetAll(self) -> "void" : return _vmkctl.ShapingPolicy_UnsetAll(self)
    def IsValid(self) -> "bool" : return _vmkctl.ShapingPolicy_IsValid(self)
    def FillValues(self) -> "HostCtl::Network::ShapingPolicy" : return _vmkctl.ShapingPolicy_FillValues(self)
    def SetEnabled(self, *args) -> "void" : return _vmkctl.ShapingPolicy_SetEnabled(self, *args)
    def UnsetEnabled(self) -> "void" : return _vmkctl.ShapingPolicy_UnsetEnabled(self)
    def HasEnabled(self) -> "bool" : return _vmkctl.ShapingPolicy_HasEnabled(self)
    def GetEnabled(self) -> "bool" : return _vmkctl.ShapingPolicy_GetEnabled(self)
    def SetPeakBps(self, *args) -> "void" : return _vmkctl.ShapingPolicy_SetPeakBps(self, *args)
    def UnsetPeakBps(self) -> "void" : return _vmkctl.ShapingPolicy_UnsetPeakBps(self)
    def HasPeakBps(self) -> "bool" : return _vmkctl.ShapingPolicy_HasPeakBps(self)
    def GetPeakBps(self) -> "uint64" : return _vmkctl.ShapingPolicy_GetPeakBps(self)
    def SetAverageBps(self, *args) -> "void" : return _vmkctl.ShapingPolicy_SetAverageBps(self, *args)
    def UnsetAverageBps(self) -> "void" : return _vmkctl.ShapingPolicy_UnsetAverageBps(self)
    def HasAverageBps(self) -> "bool" : return _vmkctl.ShapingPolicy_HasAverageBps(self)
    def GetAverageBps(self) -> "uint64" : return _vmkctl.ShapingPolicy_GetAverageBps(self)
    def SetBurstSize(self, *args) -> "void" : return _vmkctl.ShapingPolicy_SetBurstSize(self, *args)
    def UnsetBurstSize(self) -> "void" : return _vmkctl.ShapingPolicy_UnsetBurstSize(self)
    def HasBurstSize(self) -> "bool" : return _vmkctl.ShapingPolicy_HasBurstSize(self)
    def GetBurstSize(self) -> "uint64" : return _vmkctl.ShapingPolicy_GetBurstSize(self)
    __swig_destroy__ = _vmkctl.delete_ShapingPolicy
    __del__ = lambda self : None;
ShapingPolicy_swigregister = _vmkctl.ShapingPolicy_swigregister
ShapingPolicy_swigregister(ShapingPolicy)

def ShapingPolicy_GetDefaultPolicy() -> "HostCtl::Network::ShapingPolicy" :
  return _vmkctl.ShapingPolicy_GetDefaultPolicy()
ShapingPolicy_GetDefaultPolicy = _vmkctl.ShapingPolicy_GetDefaultPolicy

class VirtualSwitch(Portset):
    __swig_setmethods__ = {}
    for _s in [Portset]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirtualSwitch, name, value)
    __swig_getmethods__ = {}
    for _s in [Portset]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirtualSwitch, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetPortGroups(self) -> "std::vector< HostCtl::Network::PortGroupPtr,std::allocator< HostCtl::Network::PortGroupPtr > >" : return _vmkctl.VirtualSwitch_GetPortGroups(self)
    def GetPortGroupByName(self, *args) -> "HostCtl::Network::PortGroupPtr" : return _vmkctl.VirtualSwitch_GetPortGroupByName(self, *args)
    def AddPortGroup(self, *args) -> "HostCtl::Network::PortGroupPtr" : return _vmkctl.VirtualSwitch_AddPortGroup(self, *args)
    def RemovePortGroup(self, *args) -> "void" : return _vmkctl.VirtualSwitch_RemovePortGroup(self, *args)
    def GetSecurityPolicy(self) -> "HostCtl::Network::PortSecurityPolicy" : return _vmkctl.VirtualSwitch_GetSecurityPolicy(self)
    def GetConfiguredSecurityPolicy(self) -> "HostCtl::Network::PortSecurityPolicy" : return _vmkctl.VirtualSwitch_GetConfiguredSecurityPolicy(self)
    def SetSecurityPolicy(self, *args) -> "void" : return _vmkctl.VirtualSwitch_SetSecurityPolicy(self, *args)
    def GetNicCapabilities(self) -> "HostCtl::Network::NicCapabilities" : return _vmkctl.VirtualSwitch_GetNicCapabilities(self)
    def GetConfiguredNicCapabilities(self) -> "HostCtl::Network::NicCapabilities" : return _vmkctl.VirtualSwitch_GetConfiguredNicCapabilities(self)
    def SetNicCapabilities(self, *args) -> "void" : return _vmkctl.VirtualSwitch_SetNicCapabilities(self, *args)
    def GetShapingPolicy(self) -> "HostCtl::Network::ShapingPolicy" : return _vmkctl.VirtualSwitch_GetShapingPolicy(self)
    def GetConfiguredShapingPolicy(self) -> "HostCtl::Network::ShapingPolicy" : return _vmkctl.VirtualSwitch_GetConfiguredShapingPolicy(self)
    def SetShapingPolicy(self, *args) -> "void" : return _vmkctl.VirtualSwitch_SetShapingPolicy(self, *args)
    def GetTeamingPolicy(self) -> "HostCtl::Network::NicTeamingPolicy" : return _vmkctl.VirtualSwitch_GetTeamingPolicy(self)
    def GetConfiguredTeamingPolicy(self) -> "HostCtl::Network::NicTeamingPolicy" : return _vmkctl.VirtualSwitch_GetConfiguredTeamingPolicy(self)
    def SetTeamingPolicy(self, *args) -> "void" : return _vmkctl.VirtualSwitch_SetTeamingPolicy(self, *args)
    def AddUplink(self, *args) -> "void" : return _vmkctl.VirtualSwitch_AddUplink(self, *args)
    def RemoveUplink(self, *args) -> "void" : return _vmkctl.VirtualSwitch_RemoveUplink(self, *args)
    def SetBeaconInterval(self, *args) -> "void" : return _vmkctl.VirtualSwitch_SetBeaconInterval(self, *args)
    def GetBeaconInterval(self) -> "uint32" : return _vmkctl.VirtualSwitch_GetBeaconInterval(self)
    def EnableBeacon(self, *args) -> "void" : return _vmkctl.VirtualSwitch_EnableBeacon(self, *args)
    def IsBeaconEnabled(self) -> "bool" : return _vmkctl.VirtualSwitch_IsBeaconEnabled(self)
    def SetBeaconThreshold(self, *args) -> "void" : return _vmkctl.VirtualSwitch_SetBeaconThreshold(self, *args)
    def GetBeaconThreshold(self) -> "uint32" : return _vmkctl.VirtualSwitch_GetBeaconThreshold(self)
    def NeedBeacon(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.VirtualSwitch_NeedBeacon(self)
    def GetCdpStatus(self) -> "HostCtl::Network::CdpStatus" : return _vmkctl.VirtualSwitch_GetCdpStatus(self)
    def SetCdpStatus(self, *args) -> "void" : return _vmkctl.VirtualSwitch_SetCdpStatus(self, *args)
    def GetOverlayForIndex(self, *args) -> "std::string" : return _vmkctl.VirtualSwitch_GetOverlayForIndex(self, *args)
    def SetOverlayForIndex(self, *args) -> "void" : return _vmkctl.VirtualSwitch_SetOverlayForIndex(self, *args)
    def GetMTU(self) -> "uint32" : return _vmkctl.VirtualSwitch_GetMTU(self)
    def SetMTU(self, *args) -> "void" : return _vmkctl.VirtualSwitch_SetMTU(self, *args)
    def RestoreUplinks(self) -> "void" : return _vmkctl.VirtualSwitch_RestoreUplinks(self)
    __swig_destroy__ = _vmkctl.delete_VirtualSwitch
    __del__ = lambda self : None;
VirtualSwitch_swigregister = _vmkctl.VirtualSwitch_swigregister
VirtualSwitch_swigregister(VirtualSwitch)

class VirtualSwitchImpl(VirtualSwitch,PortsetImpl):
    __swig_setmethods__ = {}
    for _s in [VirtualSwitch,PortsetImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirtualSwitchImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [VirtualSwitch,PortsetImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirtualSwitchImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VirtualSwitchImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VirtualSwitchImpl
    __del__ = lambda self : None;
    __swig_getmethods__["CreateVirtualSwitch"] = lambda x: _vmkctl.VirtualSwitchImpl_CreateVirtualSwitch
    if _newclass:CreateVirtualSwitch = staticmethod(_vmkctl.VirtualSwitchImpl_CreateVirtualSwitch)
    __swig_getmethods__["CreateVirtualSwitchWithPolicy"] = lambda x: _vmkctl.VirtualSwitchImpl_CreateVirtualSwitchWithPolicy
    if _newclass:CreateVirtualSwitchWithPolicy = staticmethod(_vmkctl.VirtualSwitchImpl_CreateVirtualSwitchWithPolicy)
    def FcoeTestBusySwitch(self) -> "void" : return _vmkctl.VirtualSwitchImpl_FcoeTestBusySwitch(self)
    def Destroy(self) -> "void" : return _vmkctl.VirtualSwitchImpl_Destroy(self)
    def GetPortGroups(self) -> "std::vector< HostCtl::Network::PortGroupPtr,std::allocator< HostCtl::Network::PortGroupPtr > >" : return _vmkctl.VirtualSwitchImpl_GetPortGroups(self)
    def GetPortGroupByName(self, *args) -> "HostCtl::Network::PortGroupPtr" : return _vmkctl.VirtualSwitchImpl_GetPortGroupByName(self, *args)
    def AddPortGroup(self, *args) -> "HostCtl::Network::PortGroupPtr" : return _vmkctl.VirtualSwitchImpl_AddPortGroup(self, *args)
    def RemovePortGroup(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_RemovePortGroup(self, *args)
    def AddUplink(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_AddUplink(self, *args)
    def RemoveUplink(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_RemoveUplink(self, *args)
    def SetNetPolicy(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_SetNetPolicy(self, *args)
    def GetSecurityPolicy(self) -> "HostCtl::Network::PortSecurityPolicy" : return _vmkctl.VirtualSwitchImpl_GetSecurityPolicy(self)
    def GetConfiguredSecurityPolicy(self) -> "HostCtl::Network::PortSecurityPolicy" : return _vmkctl.VirtualSwitchImpl_GetConfiguredSecurityPolicy(self)
    def SetSecurityPolicy(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_SetSecurityPolicy(self, *args)
    def GetTeamingPolicy(self) -> "HostCtl::Network::NicTeamingPolicy" : return _vmkctl.VirtualSwitchImpl_GetTeamingPolicy(self)
    def GetConfiguredTeamingPolicy(self) -> "HostCtl::Network::NicTeamingPolicy" : return _vmkctl.VirtualSwitchImpl_GetConfiguredTeamingPolicy(self)
    def SetTeamingPolicy(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_SetTeamingPolicy(self, *args)
    def GetNicCapabilities(self) -> "HostCtl::Network::NicCapabilities" : return _vmkctl.VirtualSwitchImpl_GetNicCapabilities(self)
    def GetConfiguredNicCapabilities(self) -> "HostCtl::Network::NicCapabilities" : return _vmkctl.VirtualSwitchImpl_GetConfiguredNicCapabilities(self)
    def SetNicCapabilities(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_SetNicCapabilities(self, *args)
    def GetShapingPolicy(self) -> "HostCtl::Network::ShapingPolicy" : return _vmkctl.VirtualSwitchImpl_GetShapingPolicy(self)
    def GetConfiguredShapingPolicy(self) -> "HostCtl::Network::ShapingPolicy" : return _vmkctl.VirtualSwitchImpl_GetConfiguredShapingPolicy(self)
    def SetShapingPolicy(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_SetShapingPolicy(self, *args)
    def GetBeaconInterval(self) -> "uint32" : return _vmkctl.VirtualSwitchImpl_GetBeaconInterval(self)
    def IsBeaconEnabled(self) -> "bool" : return _vmkctl.VirtualSwitchImpl_IsBeaconEnabled(self)
    def GetBeaconThreshold(self) -> "uint32" : return _vmkctl.VirtualSwitchImpl_GetBeaconThreshold(self)
    def SetBeaconInterval(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_SetBeaconInterval(self, *args)
    def EnableBeacon(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_EnableBeacon(self, *args)
    def SetBeaconThreshold(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_SetBeaconThreshold(self, *args)
    def CheckBeacon(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_CheckBeacon(self, *args)
    def NeedBeacon(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.VirtualSwitchImpl_NeedBeacon(self)
    def SetCdpStatus(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_SetCdpStatus(self, *args)
    def GetCdpStatus(self) -> "HostCtl::Network::CdpStatus" : return _vmkctl.VirtualSwitchImpl_GetCdpStatus(self)
    def GetCdpStatusString(self) -> "std::string" : return _vmkctl.VirtualSwitchImpl_GetCdpStatusString(self)
    __swig_getmethods__["ParseCdpStatus"] = lambda x: _vmkctl.VirtualSwitchImpl_ParseCdpStatus
    if _newclass:ParseCdpStatus = staticmethod(_vmkctl.VirtualSwitchImpl_ParseCdpStatus)
    def GetOverlayForIndex(self, *args) -> "std::string" : return _vmkctl.VirtualSwitchImpl_GetOverlayForIndex(self, *args)
    def SetOverlayForIndex(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_SetOverlayForIndex(self, *args)
    def GetMTU(self) -> "uint32" : return _vmkctl.VirtualSwitchImpl_GetMTU(self)
    def SetMTU(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_SetMTU(self, *args)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.VirtualSwitchImpl_GetChildren(self)
    def LoadConfig(self) -> "void" : return _vmkctl.VirtualSwitchImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_Print(self, *args)
    def RestoreUplinks(self) -> "void" : return _vmkctl.VirtualSwitchImpl_RestoreUplinks(self)
    def SetNumPorts(self, *args) -> "void" : return _vmkctl.VirtualSwitchImpl_SetNumPorts(self, *args)
VirtualSwitchImpl_swigregister = _vmkctl.VirtualSwitchImpl_swigregister
VirtualSwitchImpl_swigregister(VirtualSwitchImpl)

def VirtualSwitchImpl_CreateVirtualSwitch(*args) -> "HostCtl::Network::VirtualSwitchPtr" :
  return _vmkctl.VirtualSwitchImpl_CreateVirtualSwitch(*args)
VirtualSwitchImpl_CreateVirtualSwitch = _vmkctl.VirtualSwitchImpl_CreateVirtualSwitch

def VirtualSwitchImpl_CreateVirtualSwitchWithPolicy(*args) -> "HostCtl::Network::VirtualSwitchPtr" :
  return _vmkctl.VirtualSwitchImpl_CreateVirtualSwitchWithPolicy(*args)
VirtualSwitchImpl_CreateVirtualSwitchWithPolicy = _vmkctl.VirtualSwitchImpl_CreateVirtualSwitchWithPolicy

def VirtualSwitchImpl_ParseCdpStatus(*args) -> "HostCtl::Network::CdpStatus" :
  return _vmkctl.VirtualSwitchImpl_ParseCdpStatus(*args)
VirtualSwitchImpl_ParseCdpStatus = _vmkctl.VirtualSwitchImpl_ParseCdpStatus

class OpaqueSwitch(Portset):
    __swig_setmethods__ = {}
    for _s in [Portset]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OpaqueSwitch, name, value)
    __swig_getmethods__ = {}
    for _s in [Portset]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OpaqueSwitch, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_OpaqueSwitch
    __del__ = lambda self : None;
OpaqueSwitch_swigregister = _vmkctl.OpaqueSwitch_swigregister
OpaqueSwitch_swigregister(OpaqueSwitch)

class VirtualSwitchInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirtualSwitchInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirtualSwitchInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddVirtualSwitch(self, *args) -> "HostCtl::Network::VirtualSwitchPtr" : return _vmkctl.VirtualSwitchInfo_AddVirtualSwitch(self, *args)
    def AddVirtualSwitchWithPolicy(self, *args) -> "HostCtl::Network::VirtualSwitchPtr" : return _vmkctl.VirtualSwitchInfo_AddVirtualSwitchWithPolicy(self, *args)
    def AddDVSwitch(self, *args) -> "HostCtl::Network::DVSwitchPtr" : return _vmkctl.VirtualSwitchInfo_AddDVSwitch(self, *args)
    def RemoveVirtualSwitch(self, *args) -> "void" : return _vmkctl.VirtualSwitchInfo_RemoveVirtualSwitch(self, *args)
    def GetAllSwitches(self) -> "std::vector< HostCtl::Network::PortsetPtr,std::allocator< HostCtl::Network::PortsetPtr > >" : return _vmkctl.VirtualSwitchInfo_GetAllSwitches(self)
    def GetVirtualSwitches(self) -> "std::vector< HostCtl::Network::VirtualSwitchPtr,std::allocator< HostCtl::Network::VirtualSwitchPtr > >" : return _vmkctl.VirtualSwitchInfo_GetVirtualSwitches(self)
    def GetDVSwitches(self) -> "std::vector< HostCtl::Network::DVSwitchPtr,std::allocator< HostCtl::Network::DVSwitchPtr > >" : return _vmkctl.VirtualSwitchInfo_GetDVSwitches(self)
    def GetOpaqueDVSwitches(self) -> "std::vector< HostCtl::Network::DVSwitchPtr,std::allocator< HostCtl::Network::DVSwitchPtr > >" : return _vmkctl.VirtualSwitchInfo_GetOpaqueDVSwitches(self)
    def GetOpaqueSwitches(self) -> "std::vector< HostCtl::Network::OpaqueSwitchPtr,std::allocator< HostCtl::Network::OpaqueSwitchPtr > >" : return _vmkctl.VirtualSwitchInfo_GetOpaqueSwitches(self)
    def GetVirtualSwitchByName(self, *args) -> "HostCtl::Network::VirtualSwitchPtr" : return _vmkctl.VirtualSwitchInfo_GetVirtualSwitchByName(self, *args)
    def GetDVSwitchByName(self, *args) -> "HostCtl::Network::DVSwitchPtr" : return _vmkctl.VirtualSwitchInfo_GetDVSwitchByName(self, *args)
    def FindOpaqueDVSwitchByNicExternalId(self, *args) -> "std::string" : return _vmkctl.VirtualSwitchInfo_FindOpaqueDVSwitchByNicExternalId(self, *args)
    def SwitchExists(self, *args) -> "bool" : return _vmkctl.VirtualSwitchInfo_SwitchExists(self, *args)
    def IsDVSwitch(self, *args) -> "bool" : return _vmkctl.VirtualSwitchInfo_IsDVSwitch(self, *args)
    def IsLegacySwitch(self, *args) -> "bool" : return _vmkctl.VirtualSwitchInfo_IsLegacySwitch(self, *args)
    def GetSupportedPortsetClasses(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.VirtualSwitchInfo_GetSupportedPortsetClasses(self)
    def LoadDVSCache(self, *args) -> "void" : return _vmkctl.VirtualSwitchInfo_LoadDVSCache(self, *args)
    def SaveDVSCache(self, *args) -> "void" : return _vmkctl.VirtualSwitchInfo_SaveDVSCache(self, *args)
    def RemoveStaleDVSState(self) -> "void" : return _vmkctl.VirtualSwitchInfo_RemoveStaleDVSState(self)
    def LoadDVPort(self, *args) -> "void" : return _vmkctl.VirtualSwitchInfo_LoadDVPort(self, *args)
    def SaveDVPort(self, *args) -> "void" : return _vmkctl.VirtualSwitchInfo_SaveDVPort(self, *args)
    __swig_destroy__ = _vmkctl.delete_VirtualSwitchInfo
    __del__ = lambda self : None;
VirtualSwitchInfo_swigregister = _vmkctl.VirtualSwitchInfo_swigregister
VirtualSwitchInfo_swigregister(VirtualSwitchInfo)

class VirtualSwitchInfoImpl(VirtualSwitchInfo,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [VirtualSwitchInfo,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirtualSwitchInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [VirtualSwitchInfo,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirtualSwitchInfoImpl, name)
    __repr__ = _swig_repr
    def AddVirtualSwitch(self, *args) -> "HostCtl::Network::VirtualSwitchPtr" : return _vmkctl.VirtualSwitchInfoImpl_AddVirtualSwitch(self, *args)
    def AddVirtualSwitchWithPolicy(self, *args) -> "HostCtl::Network::VirtualSwitchPtr" : return _vmkctl.VirtualSwitchInfoImpl_AddVirtualSwitchWithPolicy(self, *args)
    def AddDVSwitch(self, *args) -> "HostCtl::Network::DVSwitchPtr" : return _vmkctl.VirtualSwitchInfoImpl_AddDVSwitch(self, *args)
    def RemoveVirtualSwitch(self, *args) -> "void" : return _vmkctl.VirtualSwitchInfoImpl_RemoveVirtualSwitch(self, *args)
    def GetAllSwitches(self) -> "std::vector< HostCtl::Network::PortsetPtr,std::allocator< HostCtl::Network::PortsetPtr > >" : return _vmkctl.VirtualSwitchInfoImpl_GetAllSwitches(self)
    def GetVirtualSwitches(self) -> "std::vector< HostCtl::Network::VirtualSwitchPtr,std::allocator< HostCtl::Network::VirtualSwitchPtr > >" : return _vmkctl.VirtualSwitchInfoImpl_GetVirtualSwitches(self)
    def GetOpaqueSwitches(self) -> "std::vector< HostCtl::Network::OpaqueSwitchPtr,std::allocator< HostCtl::Network::OpaqueSwitchPtr > >" : return _vmkctl.VirtualSwitchInfoImpl_GetOpaqueSwitches(self)
    def GetDVSwitches(self) -> "std::vector< HostCtl::Network::DVSwitchPtr,std::allocator< HostCtl::Network::DVSwitchPtr > >" : return _vmkctl.VirtualSwitchInfoImpl_GetDVSwitches(self)
    def GetOpaqueDVSwitches(self) -> "std::vector< HostCtl::Network::DVSwitchPtr,std::allocator< HostCtl::Network::DVSwitchPtr > >" : return _vmkctl.VirtualSwitchInfoImpl_GetOpaqueDVSwitches(self)
    def GetVirtualSwitchByName(self, *args) -> "HostCtl::Network::VirtualSwitchPtr" : return _vmkctl.VirtualSwitchInfoImpl_GetVirtualSwitchByName(self, *args)
    def GetDVSwitchByName(self, *args) -> "HostCtl::Network::DVSwitchPtr" : return _vmkctl.VirtualSwitchInfoImpl_GetDVSwitchByName(self, *args)
    def FindOpaqueDVSwitchByNicExternalId(self, *args) -> "std::string" : return _vmkctl.VirtualSwitchInfoImpl_FindOpaqueDVSwitchByNicExternalId(self, *args)
    def SwitchExists(self, *args) -> "bool" : return _vmkctl.VirtualSwitchInfoImpl_SwitchExists(self, *args)
    def IsDVSwitch(self, *args) -> "bool" : return _vmkctl.VirtualSwitchInfoImpl_IsDVSwitch(self, *args)
    def IsLegacySwitch(self, *args) -> "bool" : return _vmkctl.VirtualSwitchInfoImpl_IsLegacySwitch(self, *args)
    def IsOpaqueSwitch(self, *args) -> "bool" : return _vmkctl.VirtualSwitchInfoImpl_IsOpaqueSwitch(self, *args)
    def GetSupportedPortsetClasses(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.VirtualSwitchInfoImpl_GetSupportedPortsetClasses(self)
    def Refresh(self) -> "void" : return _vmkctl.VirtualSwitchInfoImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.VirtualSwitchInfoImpl_GetName(self)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.VirtualSwitchInfoImpl_GetChildren(self)
    def SaveConfig(self) -> "void" : return _vmkctl.VirtualSwitchInfoImpl_SaveConfig(self)
    def LoadConfig(self) -> "void" : return _vmkctl.VirtualSwitchInfoImpl_LoadConfig(self)
    def SaveDVSCache(self, *args) -> "void" : return _vmkctl.VirtualSwitchInfoImpl_SaveDVSCache(self, *args)
    def LoadDVSCache(self, *args) -> "void" : return _vmkctl.VirtualSwitchInfoImpl_LoadDVSCache(self, *args)
    def RemoveStaleDVSState(self) -> "void" : return _vmkctl.VirtualSwitchInfoImpl_RemoveStaleDVSState(self)
    def SaveDVPort(self, *args) -> "void" : return _vmkctl.VirtualSwitchInfoImpl_SaveDVPort(self, *args)
    def LoadDVPort(self, *args) -> "void" : return _vmkctl.VirtualSwitchInfoImpl_LoadDVPort(self, *args)
    def Print(self, *args) -> "void" : return _vmkctl.VirtualSwitchInfoImpl_Print(self, *args)
    def CreatePPS(self) -> "void" : return _vmkctl.VirtualSwitchInfoImpl_CreatePPS(self)
    def __init__(self): 
        this = _vmkctl.new_VirtualSwitchInfoImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VirtualSwitchInfoImpl
    __del__ = lambda self : None;
VirtualSwitchInfoImpl_swigregister = _vmkctl.VirtualSwitchInfoImpl_swigregister
VirtualSwitchInfoImpl_swigregister(VirtualSwitchInfoImpl)

class Vnic(NetworkInterface):
    __swig_setmethods__ = {}
    for _s in [NetworkInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vnic, name, value)
    __swig_getmethods__ = {}
    for _s in [NetworkInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Vnic, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetMtu(self, *args) -> "void" : return _vmkctl.Vnic_SetMtu(self, *args)
    def GetType(self) -> "HostCtl::Network::NetworkInterface::NetworkInterfaceType" : return _vmkctl.Vnic_GetType(self)
    __swig_destroy__ = _vmkctl.delete_Vnic
    __del__ = lambda self : None;
Vnic_swigregister = _vmkctl.Vnic_swigregister
Vnic_swigregister(Vnic)
Vnic.MAX_VNIC = _vmkctl.cvar.Vnic_MAX_VNIC

IPV6_ADDR_GLOBAL = _vmkctl.IPV6_ADDR_GLOBAL
IPV6_ADDR_LOOPBACK = _vmkctl.IPV6_ADDR_LOOPBACK
IPV6_ADDR_LINKLOCAL = _vmkctl.IPV6_ADDR_LINKLOCAL
IPV6_ADDR_SITELOCAL = _vmkctl.IPV6_ADDR_SITELOCAL
IPV6_ADDR_COMPATv4 = _vmkctl.IPV6_ADDR_COMPATv4
IPV6_ADDR_SCOPE_MASK = _vmkctl.IPV6_ADDR_SCOPE_MASK
class VnicImpl(Vnic,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [Vnic,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VnicImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [Vnic,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VnicImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VnicImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetId(self) -> "std::string" : return _vmkctl.VnicImpl_GetId(self)
    def GetInterfaceName(self) -> "std::string" : return _vmkctl.VnicImpl_GetInterfaceName(self)
    def GetPortGroupName(self) -> "std::string" : return _vmkctl.VnicImpl_GetPortGroupName(self)
    def GetPortGroup(self) -> "HostCtl::Network::PortGroupPtr" : return _vmkctl.VnicImpl_GetPortGroup(self)
    def SetPortGroup(self, *args) -> "void" : return _vmkctl.VnicImpl_SetPortGroup(self, *args)
    def GetConnectionPoint(self) -> "HostCtl::Network::ConnectionPointPtr" : return _vmkctl.VnicImpl_GetConnectionPoint(self)
    def SetConnectionPoint(self, *args) -> "void" : return _vmkctl.VnicImpl_SetConnectionPoint(self, *args)
    def Enable(self) -> "void" : return _vmkctl.VnicImpl_Enable(self)
    def IsEnabled(self) -> "bool" : return _vmkctl.VnicImpl_IsEnabled(self)
    def Disable(self) -> "void" : return _vmkctl.VnicImpl_Disable(self)
    def Destroy(self) -> "void" : return _vmkctl.VnicImpl_Destroy(self)
    def GetIpConfig(self) -> "HostCtl::Network::IpConfig" : return _vmkctl.VnicImpl_GetIpConfig(self)
    def GetConfiguredIpConfig(self) -> "HostCtl::Network::IpConfig" : return _vmkctl.VnicImpl_GetConfiguredIpConfig(self)
    def SetIpConfig(self, *args) -> "void" : return _vmkctl.VnicImpl_SetIpConfig(self, *args)
    def SetIpv4Config(self, *args) -> "void" : return _vmkctl.VnicImpl_SetIpv4Config(self, *args)
    def SetIpConfigOnly(self, *args) -> "void" : return _vmkctl.VnicImpl_SetIpConfigOnly(self, *args)
    def AddIpv6Address(self, *args) -> "void" : return _vmkctl.VnicImpl_AddIpv6Address(self, *args)
    def RemoveIpv6Address(self, *args) -> "void" : return _vmkctl.VnicImpl_RemoveIpv6Address(self, *args)
    def SetIpv6AutoConf(self, *args) -> "void" : return _vmkctl.VnicImpl_SetIpv6AutoConf(self, *args)
    def SetDHCPv6(self, *args) -> "void" : return _vmkctl.VnicImpl_SetDHCPv6(self, *args)
    def GetMacAddress(self) -> "HostCtl::Network::MacAddress" : return _vmkctl.VnicImpl_GetMacAddress(self)
    def SetMacAddress(self, *args) -> "void" : return _vmkctl.VnicImpl_SetMacAddress(self, *args)
    def GetMtu(self) -> "uint32" : return _vmkctl.VnicImpl_GetMtu(self)
    def SetMtu(self, *args) -> "void" : return _vmkctl.VnicImpl_SetMtu(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.VnicImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.VnicImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.VnicImpl_Print(self, *args)
    def SaveConfig(self) -> "void" : return _vmkctl.VnicImpl_SaveConfig(self)
    def LoadConfig(self) -> "void" : return _vmkctl.VnicImpl_LoadConfig(self)
    __swig_getmethods__["VnicExists"] = lambda x: _vmkctl.VnicImpl_VnicExists
    if _newclass:VnicExists = staticmethod(_vmkctl.VnicImpl_VnicExists)
    __swig_getmethods__["CheckInterfaceExists"] = lambda x: _vmkctl.VnicImpl_CheckInterfaceExists
    if _newclass:CheckInterfaceExists = staticmethod(_vmkctl.VnicImpl_CheckInterfaceExists)
    __swig_getmethods__["GetCurrentVswifs"] = lambda x: _vmkctl.VnicImpl_GetCurrentVswifs
    if _newclass:GetCurrentVswifs = staticmethod(_vmkctl.VnicImpl_GetCurrentVswifs)
    __swig_destroy__ = _vmkctl.delete_VnicImpl
    __del__ = lambda self : None;
VnicImpl_swigregister = _vmkctl.VnicImpl_swigregister
VnicImpl_swigregister(VnicImpl)

def VnicImpl_VnicExists(*args) -> "bool" :
  return _vmkctl.VnicImpl_VnicExists(*args)
VnicImpl_VnicExists = _vmkctl.VnicImpl_VnicExists

def VnicImpl_CheckInterfaceExists(*args) -> "bool" :
  return _vmkctl.VnicImpl_CheckInterfaceExists(*args)
VnicImpl_CheckInterfaceExists = _vmkctl.VnicImpl_CheckInterfaceExists

def VnicImpl_GetCurrentVswifs() -> "std::vector< std::string,std::allocator< std::string > >" :
  return _vmkctl.VnicImpl_GetCurrentVswifs()
VnicImpl_GetCurrentVswifs = _vmkctl.VnicImpl_GetCurrentVswifs

class ConsoleNicInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConsoleNicInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConsoleNicInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddServiceConsoleNic(self, *args) -> "HostCtl::Network::VnicPtr" : return _vmkctl.ConsoleNicInfo_AddServiceConsoleNic(self, *args)
    def RemoveServiceConsoleNic(self, *args) -> "void" : return _vmkctl.ConsoleNicInfo_RemoveServiceConsoleNic(self, *args)
    def GetServiceConsoleNics(self) -> "std::vector< HostCtl::Network::VnicPtr,std::allocator< HostCtl::Network::VnicPtr > >" : return _vmkctl.ConsoleNicInfo_GetServiceConsoleNics(self)
    __swig_destroy__ = _vmkctl.delete_ConsoleNicInfo
    __del__ = lambda self : None;
ConsoleNicInfo_swigregister = _vmkctl.ConsoleNicInfo_swigregister
ConsoleNicInfo_swigregister(ConsoleNicInfo)

class ConsoleNicInfoImpl(ConsoleNicInfo,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [ConsoleNicInfo,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConsoleNicInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [ConsoleNicInfo,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConsoleNicInfoImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_ConsoleNicInfoImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_ConsoleNicInfoImpl
    __del__ = lambda self : None;
    def AddServiceConsoleNic(self, *args) -> "HostCtl::Network::VnicPtr" : return _vmkctl.ConsoleNicInfoImpl_AddServiceConsoleNic(self, *args)
    def RemoveServiceConsoleNic(self, *args) -> "void" : return _vmkctl.ConsoleNicInfoImpl_RemoveServiceConsoleNic(self, *args)
    def GetServiceConsoleNics(self) -> "std::vector< HostCtl::Network::VnicPtr,std::allocator< HostCtl::Network::VnicPtr > >" : return _vmkctl.ConsoleNicInfoImpl_GetServiceConsoleNics(self)
    def GetServiceConsoleNic(self, *args) -> "HostCtl::Network::VnicPtr" : return _vmkctl.ConsoleNicInfoImpl_GetServiceConsoleNic(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.ConsoleNicInfoImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.ConsoleNicInfoImpl_GetName(self)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.ConsoleNicInfoImpl_GetChildren(self)
    def LoadConfig(self) -> "void" : return _vmkctl.ConsoleNicInfoImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.ConsoleNicInfoImpl_Print(self, *args)
ConsoleNicInfoImpl_swigregister = _vmkctl.ConsoleNicInfoImpl_swigregister
ConsoleNicInfoImpl_swigregister(ConsoleNicInfoImpl)

class VmkNicSwitchParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmkNicSwitchParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VmkNicSwitchParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vlanId"] = _vmkctl.VmkNicSwitchParam_vlanId_set
    __swig_getmethods__["vlanId"] = _vmkctl.VmkNicSwitchParam_vlanId_get
    if _newclass:vlanId = _swig_property(_vmkctl.VmkNicSwitchParam_vlanId_get, _vmkctl.VmkNicSwitchParam_vlanId_set)
    __swig_setmethods__["networkPolicy"] = _vmkctl.VmkNicSwitchParam_networkPolicy_set
    __swig_getmethods__["networkPolicy"] = _vmkctl.VmkNicSwitchParam_networkPolicy_get
    if _newclass:networkPolicy = _swig_property(_vmkctl.VmkNicSwitchParam_networkPolicy_get, _vmkctl.VmkNicSwitchParam_networkPolicy_set)
    __swig_setmethods__["activeUplinks"] = _vmkctl.VmkNicSwitchParam_activeUplinks_set
    __swig_getmethods__["activeUplinks"] = _vmkctl.VmkNicSwitchParam_activeUplinks_get
    if _newclass:activeUplinks = _swig_property(_vmkctl.VmkNicSwitchParam_activeUplinks_get, _vmkctl.VmkNicSwitchParam_activeUplinks_set)
    __swig_setmethods__["standbyUplinks"] = _vmkctl.VmkNicSwitchParam_standbyUplinks_set
    __swig_getmethods__["standbyUplinks"] = _vmkctl.VmkNicSwitchParam_standbyUplinks_get
    if _newclass:standbyUplinks = _swig_property(_vmkctl.VmkNicSwitchParam_standbyUplinks_get, _vmkctl.VmkNicSwitchParam_standbyUplinks_set)
    __swig_setmethods__["detachedUplinks"] = _vmkctl.VmkNicSwitchParam_detachedUplinks_set
    __swig_getmethods__["detachedUplinks"] = _vmkctl.VmkNicSwitchParam_detachedUplinks_get
    if _newclass:detachedUplinks = _swig_property(_vmkctl.VmkNicSwitchParam_detachedUplinks_get, _vmkctl.VmkNicSwitchParam_detachedUplinks_set)
    def __init__(self, *args): 
        this = _vmkctl.new_VmkNicSwitchParam(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VmkNicSwitchParam
    __del__ = lambda self : None;
VmkNicSwitchParam_swigregister = _vmkctl.VmkNicSwitchParam_swigregister
VmkNicSwitchParam_swigregister(VmkNicSwitchParam)

class VmkNic(NetworkInterface):
    __swig_setmethods__ = {}
    for _s in [NetworkInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmkNic, name, value)
    __swig_getmethods__ = {}
    for _s in [NetworkInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VmkNic, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    VMKNIC_TYPE_GENERIC = _vmkctl.VmkNic_VMKNIC_TYPE_GENERIC
    VMKNIC_TYPE_ISCSI = _vmkctl.VmkNic_VMKNIC_TYPE_ISCSI
    def GetTsoMss(self) -> "uint32" : return _vmkctl.VmkNic_GetTsoMss(self)
    def SetTsoMss(self, *args) -> "void" : return _vmkctl.VmkNic_SetTsoMss(self, *args)
    def Bind(self, *args) -> "void" : return _vmkctl.VmkNic_Bind(self, *args)
    def RenewDHCPLease(self) -> "void" : return _vmkctl.VmkNic_RenewDHCPLease(self)
    def RenewDHCPv6Lease(self) -> "void" : return _vmkctl.VmkNic_RenewDHCPv6Lease(self)
    def UnBind(self) -> "void" : return _vmkctl.VmkNic_UnBind(self)
    def SetDhcpServer(self, *args) -> "void" : return _vmkctl.VmkNic_SetDhcpServer(self, *args)
    def GetDhcpServer(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.VmkNic_GetDhcpServer(self)
    def SetDhcpBound(self, *args) -> "void" : return _vmkctl.VmkNic_SetDhcpBound(self, *args)
    def GetDhcpBound(self) -> "bool" : return _vmkctl.VmkNic_GetDhcpBound(self)
    def GetType(self) -> "HostCtl::Network::NetworkInterface::NetworkInterfaceType" : return _vmkctl.VmkNic_GetType(self)
    def SetVmkNicType(self, *args) -> "void" : return _vmkctl.VmkNic_SetVmkNicType(self, *args)
    def GetVmkNicType(self) -> "HostCtl::Network::VmkNic::VmkNicType" : return _vmkctl.VmkNic_GetVmkNicType(self)
    def SetNetstackInstanceKey(self, *args) -> "void" : return _vmkctl.VmkNic_SetNetstackInstanceKey(self, *args)
    def GetNetstackInstanceKey(self) -> "std::string" : return _vmkctl.VmkNic_GetNetstackInstanceKey(self)
    def WaitForIpv4Config(self) -> "bool" : return _vmkctl.VmkNic_WaitForIpv4Config(self)
    def WaitForIpv6DHCPAddress(self) -> "bool" : return _vmkctl.VmkNic_WaitForIpv6DHCPAddress(self)
    def WaitForIpv6AutoConfAddress(self) -> "bool" : return _vmkctl.VmkNic_WaitForIpv6AutoConfAddress(self)
    def WaitForIpv6DAD(self, *args) -> "bool" : return _vmkctl.VmkNic_WaitForIpv6DAD(self, *args)
    def GetTags(self, *args) -> "void" : return _vmkctl.VmkNic_GetTags(self, *args)
    def AddTag(self, *args) -> "void" : return _vmkctl.VmkNic_AddTag(self, *args)
    def RemoveTag(self, *args) -> "void" : return _vmkctl.VmkNic_RemoveTag(self, *args)
    def HasTag(self, *args) -> "bool" : return _vmkctl.VmkNic_HasTag(self, *args)
    def GetVmkNicConnectionPointParams(self, *args) -> "HostCtl::Network::ConnectionPoint::ConnectionType" : return _vmkctl.VmkNic_GetVmkNicConnectionPointParams(self, *args)
    __swig_destroy__ = _vmkctl.delete_VmkNic
    __del__ = lambda self : None;
VmkNic_swigregister = _vmkctl.VmkNic_swigregister
VmkNic_swigregister(VmkNic)
VmkNic.DEFAULT_TSOMSS = _vmkctl.cvar.VmkNic_DEFAULT_TSOMSS
VmkNic.MIN_MTU = _vmkctl.cvar.VmkNic_MIN_MTU
VmkNic.MAX_MTU = _vmkctl.cvar.VmkNic_MAX_MTU

class VmkNicImpl(VmkNic,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [VmkNic,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmkNicImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [VmkNic,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VmkNicImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_VmkNicImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VmkNicImpl
    __del__ = lambda self : None;
    __swig_getmethods__["CreateVmkNic"] = lambda x: _vmkctl.VmkNicImpl_CreateVmkNic
    if _newclass:CreateVmkNic = staticmethod(_vmkctl.VmkNicImpl_CreateVmkNic)
    __swig_getmethods__["KillDhcpClient"] = lambda x: _vmkctl.VmkNicImpl_KillDhcpClient
    if _newclass:KillDhcpClient = staticmethod(_vmkctl.VmkNicImpl_KillDhcpClient)
    def KillDhcpIpv6Client(self, *args) -> "void" : return _vmkctl.VmkNicImpl_KillDhcpIpv6Client(self, *args)
    __swig_getmethods__["ExecDhcpClient"] = lambda x: _vmkctl.VmkNicImpl_ExecDhcpClient
    if _newclass:ExecDhcpClient = staticmethod(_vmkctl.VmkNicImpl_ExecDhcpClient)
    def ExecDhcpIpv6Client(self, *args) -> "void" : return _vmkctl.VmkNicImpl_ExecDhcpIpv6Client(self, *args)
    def GetMtu(self) -> "uint32" : return _vmkctl.VmkNicImpl_GetMtu(self)
    def SetMtu(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetMtu(self, *args)
    def GetTsoMss(self) -> "uint32" : return _vmkctl.VmkNicImpl_GetTsoMss(self)
    def GetIndex(self) -> "uint32" : return _vmkctl.VmkNicImpl_GetIndex(self)
    def GetMacAddress(self) -> "HostCtl::Network::MacAddress" : return _vmkctl.VmkNicImpl_GetMacAddress(self)
    def SetMacAddress(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetMacAddress(self, *args)
    def SetMacAddressFromPnic(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetMacAddressFromPnic(self, *args)
    def GetIpConfig(self) -> "HostCtl::Network::IpConfig" : return _vmkctl.VmkNicImpl_GetIpConfig(self)
    def GetConfiguredIpConfig(self) -> "HostCtl::Network::IpConfig" : return _vmkctl.VmkNicImpl_GetConfiguredIpConfig(self)
    def SetIpConfig(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetIpConfig(self, *args)
    def SetIpv4Config(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetIpv4Config(self, *args)
    def AddIpv6Address(self, *args) -> "void" : return _vmkctl.VmkNicImpl_AddIpv6Address(self, *args)
    def GetCurrentMulticastGroups(self, *args) -> "void" : return _vmkctl.VmkNicImpl_GetCurrentMulticastGroups(self, *args)
    def RemoveIpv6Address(self, *args) -> "void" : return _vmkctl.VmkNicImpl_RemoveIpv6Address(self, *args)
    def SetIpv6AutoConf(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetIpv6AutoConf(self, *args)
    def SetDHCPv6(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetDHCPv6(self, *args)
    def Bind(self, *args) -> "void" : return _vmkctl.VmkNicImpl_Bind(self, *args)
    def GetDhcpServer(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.VmkNicImpl_GetDhcpServer(self)
    def SetDhcpServer(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetDhcpServer(self, *args)
    def GetDhcpBound(self) -> "bool" : return _vmkctl.VmkNicImpl_GetDhcpBound(self)
    def SetDhcpBound(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetDhcpBound(self, *args)
    def SetDhcpDns(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetDhcpDns(self, *args)
    def RenewDHCPLease(self) -> "void" : return _vmkctl.VmkNicImpl_RenewDHCPLease(self)
    def RenewDHCPv6Lease(self) -> "void" : return _vmkctl.VmkNicImpl_RenewDHCPv6Lease(self)
    def UnBind(self) -> "void" : return _vmkctl.VmkNicImpl_UnBind(self)
    def GetPortGroupName(self) -> "std::string" : return _vmkctl.VmkNicImpl_GetPortGroupName(self)
    def GetPortGroup(self) -> "HostCtl::Network::PortGroupPtr" : return _vmkctl.VmkNicImpl_GetPortGroup(self)
    def SetPortGroup(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetPortGroup(self, *args)
    def GetConnectionPoint(self) -> "HostCtl::Network::ConnectionPointPtr" : return _vmkctl.VmkNicImpl_GetConnectionPoint(self)
    def SetConnectionPoint(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetConnectionPoint(self, *args)
    def SetTsoMss(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetTsoMss(self, *args)
    def GetInterfaceName(self) -> "std::string" : return _vmkctl.VmkNicImpl_GetInterfaceName(self)
    def Enable(self) -> "void" : return _vmkctl.VmkNicImpl_Enable(self)
    def Disable(self) -> "void" : return _vmkctl.VmkNicImpl_Disable(self)
    def IsEnabled(self) -> "bool" : return _vmkctl.VmkNicImpl_IsEnabled(self)
    def IsNetDumpInterface(self) -> "bool" : return _vmkctl.VmkNicImpl_IsNetDumpInterface(self)
    def Destroy(self) -> "void" : return _vmkctl.VmkNicImpl_Destroy(self)
    def WaitForIpv4Config(self) -> "bool" : return _vmkctl.VmkNicImpl_WaitForIpv4Config(self)
    def WaitForIpv6AddressType(self, *args) -> "bool" : return _vmkctl.VmkNicImpl_WaitForIpv6AddressType(self, *args)
    def WaitForIpv6DHCPAddress(self) -> "bool" : return _vmkctl.VmkNicImpl_WaitForIpv6DHCPAddress(self)
    def WaitForIpv6AutoConfAddress(self) -> "bool" : return _vmkctl.VmkNicImpl_WaitForIpv6AutoConfAddress(self)
    def WaitForIpv6DAD(self, *args) -> "bool" : return _vmkctl.VmkNicImpl_WaitForIpv6DAD(self, *args)
    __swig_getmethods__["VmkNicExists"] = lambda x: _vmkctl.VmkNicImpl_VmkNicExists
    if _newclass:VmkNicExists = staticmethod(_vmkctl.VmkNicImpl_VmkNicExists)
    __swig_getmethods__["VmkNicConfigExists"] = lambda x: _vmkctl.VmkNicImpl_VmkNicConfigExists
    if _newclass:VmkNicConfigExists = staticmethod(_vmkctl.VmkNicImpl_VmkNicConfigExists)
    def SetVmkNicType(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetVmkNicType(self, *args)
    def GetVmkNicType(self) -> "HostCtl::Network::VmkNic::VmkNicType" : return _vmkctl.VmkNicImpl_GetVmkNicType(self)
    def SetNetstackInstanceKey(self, *args) -> "void" : return _vmkctl.VmkNicImpl_SetNetstackInstanceKey(self, *args)
    def GetNetstackInstanceKey(self) -> "std::string" : return _vmkctl.VmkNicImpl_GetNetstackInstanceKey(self)
    __swig_getmethods__["GetVmknicNetstackInstanceKey"] = lambda x: _vmkctl.VmkNicImpl_GetVmknicNetstackInstanceKey
    if _newclass:GetVmknicNetstackInstanceKey = staticmethod(_vmkctl.VmkNicImpl_GetVmknicNetstackInstanceKey)
    def RefreshIpConfig(self) -> "void" : return _vmkctl.VmkNicImpl_RefreshIpConfig(self)
    def Refresh(self) -> "void" : return _vmkctl.VmkNicImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.VmkNicImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.VmkNicImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.VmkNicImpl_Print(self, *args)
    def GetTags(self, *args) -> "void" : return _vmkctl.VmkNicImpl_GetTags(self, *args)
    def AddTag(self, *args) -> "void" : return _vmkctl.VmkNicImpl_AddTag(self, *args)
    def RemoveTag(self, *args) -> "void" : return _vmkctl.VmkNicImpl_RemoveTag(self, *args)
    def HasTag(self, *args) -> "bool" : return _vmkctl.VmkNicImpl_HasTag(self, *args)
    def GetVmkNicConnectionPointParams(self, *args) -> "HostCtl::Network::ConnectionPoint::ConnectionType" : return _vmkctl.VmkNicImpl_GetVmkNicConnectionPointParams(self, *args)
    def UpdateNetstackInstanceKey(self, *args) -> "void" : return _vmkctl.VmkNicImpl_UpdateNetstackInstanceKey(self, *args)
    __swig_getmethods__["AddVmkNicDestroyCallback"] = lambda x: _vmkctl.VmkNicImpl_AddVmkNicDestroyCallback
    if _newclass:AddVmkNicDestroyCallback = staticmethod(_vmkctl.VmkNicImpl_AddVmkNicDestroyCallback)
    __swig_getmethods__["AddVmkNicReconfigTagCallback"] = lambda x: _vmkctl.VmkNicImpl_AddVmkNicReconfigTagCallback
    if _newclass:AddVmkNicReconfigTagCallback = staticmethod(_vmkctl.VmkNicImpl_AddVmkNicReconfigTagCallback)
VmkNicImpl_swigregister = _vmkctl.VmkNicImpl_swigregister
VmkNicImpl_swigregister(VmkNicImpl)

def VmkNicImpl_CreateVmkNic(*args) -> "HostCtl::Network::VmkNicPtr" :
  return _vmkctl.VmkNicImpl_CreateVmkNic(*args)
VmkNicImpl_CreateVmkNic = _vmkctl.VmkNicImpl_CreateVmkNic

def VmkNicImpl_KillDhcpClient(*args) -> "void" :
  return _vmkctl.VmkNicImpl_KillDhcpClient(*args)
VmkNicImpl_KillDhcpClient = _vmkctl.VmkNicImpl_KillDhcpClient

def VmkNicImpl_ExecDhcpClient(*args) -> "void" :
  return _vmkctl.VmkNicImpl_ExecDhcpClient(*args)
VmkNicImpl_ExecDhcpClient = _vmkctl.VmkNicImpl_ExecDhcpClient

def VmkNicImpl_VmkNicExists(*args) -> "bool" :
  return _vmkctl.VmkNicImpl_VmkNicExists(*args)
VmkNicImpl_VmkNicExists = _vmkctl.VmkNicImpl_VmkNicExists

def VmkNicImpl_VmkNicConfigExists(*args) -> "bool" :
  return _vmkctl.VmkNicImpl_VmkNicConfigExists(*args)
VmkNicImpl_VmkNicConfigExists = _vmkctl.VmkNicImpl_VmkNicConfigExists

def VmkNicImpl_GetVmknicNetstackInstanceKey(*args) -> "std::string" :
  return _vmkctl.VmkNicImpl_GetVmknicNetstackInstanceKey(*args)
VmkNicImpl_GetVmknicNetstackInstanceKey = _vmkctl.VmkNicImpl_GetVmknicNetstackInstanceKey

def VmkNicImpl_AddVmkNicDestroyCallback(*args) -> "void" :
  return _vmkctl.VmkNicImpl_AddVmkNicDestroyCallback(*args)
VmkNicImpl_AddVmkNicDestroyCallback = _vmkctl.VmkNicImpl_AddVmkNicDestroyCallback

def VmkNicImpl_AddVmkNicReconfigTagCallback(*args) -> "void" :
  return _vmkctl.VmkNicImpl_AddVmkNicReconfigTagCallback(*args)
VmkNicImpl_AddVmkNicReconfigTagCallback = _vmkctl.VmkNicImpl_AddVmkNicReconfigTagCallback

class VmKernelNicInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmKernelNicInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VmKernelNicInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddVmKernelNic(self, *args) -> "HostCtl::Network::VmkNicPtr" : return _vmkctl.VmKernelNicInfo_AddVmKernelNic(self, *args)
    def RemoveVmKernelNic(self, *args) -> "void" : return _vmkctl.VmKernelNicInfo_RemoveVmKernelNic(self, *args)
    def GetVmKernelNics(self) -> "std::vector< HostCtl::Network::VmkNicPtr,std::allocator< HostCtl::Network::VmkNicPtr > >" : return _vmkctl.VmKernelNicInfo_GetVmKernelNics(self)
    def GetVmkernelNicNamesByInstanceKey(self, *args) -> "void" : return _vmkctl.VmKernelNicInfo_GetVmkernelNicNamesByInstanceKey(self, *args)
    def GetVmKernelNicsByType(self, *args) -> "std::vector< HostCtl::Network::VmkNicPtr,std::allocator< HostCtl::Network::VmkNicPtr > >" : return _vmkctl.VmKernelNicInfo_GetVmKernelNicsByType(self, *args)
    def GetVmKernelNicsByTag(self, *args) -> "std::vector< HostCtl::Network::VmkNicPtr,std::allocator< HostCtl::Network::VmkNicPtr > >" : return _vmkctl.VmKernelNicInfo_GetVmKernelNicsByTag(self, *args)
    def GetVmKernelNicsByInstanceKey(self, *args) -> "std::vector< HostCtl::Network::VmkNicPtr,std::allocator< HostCtl::Network::VmkNicPtr > >" : return _vmkctl.VmKernelNicInfo_GetVmKernelNicsByInstanceKey(self, *args)
    __swig_destroy__ = _vmkctl.delete_VmKernelNicInfo
    __del__ = lambda self : None;
VmKernelNicInfo_swigregister = _vmkctl.VmKernelNicInfo_swigregister
VmKernelNicInfo_swigregister(VmKernelNicInfo)

class VmKernelNicInfoImpl(VmKernelNicInfo,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [VmKernelNicInfo,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmKernelNicInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [VmKernelNicInfo,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VmKernelNicInfoImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_VmKernelNicInfoImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VmKernelNicInfoImpl
    __del__ = lambda self : None;
    def AddVmKernelNic(self, *args) -> "HostCtl::Network::VmkNicPtr" : return _vmkctl.VmKernelNicInfoImpl_AddVmKernelNic(self, *args)
    def RemoveVmKernelNic(self, *args) -> "void" : return _vmkctl.VmKernelNicInfoImpl_RemoveVmKernelNic(self, *args)
    def GetVmKernelNic(self, *args) -> "HostCtl::Network::VmkNicPtr" : return _vmkctl.VmKernelNicInfoImpl_GetVmKernelNic(self, *args)
    def GetVmKernelNicByInterface(self, *args) -> "HostCtl::Network::VmkNicPtr" : return _vmkctl.VmKernelNicInfoImpl_GetVmKernelNicByInterface(self, *args)
    def GetVmKernelNics(self) -> "std::vector< HostCtl::Network::VmkNicPtr,std::allocator< HostCtl::Network::VmkNicPtr > >" : return _vmkctl.VmKernelNicInfoImpl_GetVmKernelNics(self)
    def GetVmkernelNicNamesByInstanceKey(self, *args) -> "void" : return _vmkctl.VmKernelNicInfoImpl_GetVmkernelNicNamesByInstanceKey(self, *args)
    def GetVmKernelNicsByType(self, *args) -> "std::vector< HostCtl::Network::VmkNicPtr,std::allocator< HostCtl::Network::VmkNicPtr > >" : return _vmkctl.VmKernelNicInfoImpl_GetVmKernelNicsByType(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.VmKernelNicInfoImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.VmKernelNicInfoImpl_GetName(self)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.VmKernelNicInfoImpl_GetChildren(self)
    def GetVmkNicCountByNetstackInstance(self, *args) -> "int" : return _vmkctl.VmKernelNicInfoImpl_GetVmkNicCountByNetstackInstance(self, *args)
    def GetVmKernelNicsByTag(self, *args) -> "std::vector< HostCtl::Network::VmkNicPtr,std::allocator< HostCtl::Network::VmkNicPtr > >" : return _vmkctl.VmKernelNicInfoImpl_GetVmKernelNicsByTag(self, *args)
    def GetVmkNicCountWithTag(self, *args) -> "int" : return _vmkctl.VmKernelNicInfoImpl_GetVmkNicCountWithTag(self, *args)
    def GetVmKernelNicsByInstanceKey(self, *args) -> "std::vector< HostCtl::Network::VmkNicPtr,std::allocator< HostCtl::Network::VmkNicPtr > >" : return _vmkctl.VmKernelNicInfoImpl_GetVmKernelNicsByInstanceKey(self, *args)
    def LoadConfig(self) -> "void" : return _vmkctl.VmKernelNicInfoImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.VmKernelNicInfoImpl_Print(self, *args)
VmKernelNicInfoImpl_swigregister = _vmkctl.VmKernelNicInfoImpl_swigregister
VmKernelNicInfoImpl_swigregister(VmKernelNicInfoImpl)

DEFAULT_STACK_NAME = _vmkctl.DEFAULT_STACK_NAME
NETSTACK_INSTANCE_STATE_NOT_FOUND = _vmkctl.NETSTACK_INSTANCE_STATE_NOT_FOUND
NETSTACK_INSTANCE_STATE_INACTIVE = _vmkctl.NETSTACK_INSTANCE_STATE_INACTIVE
NETSTACK_INSTANCE_STATE_READY = _vmkctl.NETSTACK_INSTANCE_STATE_READY
class NetstackInstance(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetstackInstance, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetstackInstance, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetKey(self) -> "std::string" : return _vmkctl.NetstackInstance_GetKey(self)
    def SetKey(self, *args) -> "void" : return _vmkctl.NetstackInstance_SetKey(self, *args)
    def GetInstanceName(self) -> "std::string" : return _vmkctl.NetstackInstance_GetInstanceName(self)
    def SetInstanceName(self, *args) -> "void" : return _vmkctl.NetstackInstance_SetInstanceName(self, *args)
    def GetMaxConnections(self) -> "uint32" : return _vmkctl.NetstackInstance_GetMaxConnections(self)
    def SetMaxConnections(self, *args) -> "void" : return _vmkctl.NetstackInstance_SetMaxConnections(self, *args)
    def GetCongestionControlAlgorithm(self) -> "std::string" : return _vmkctl.NetstackInstance_GetCongestionControlAlgorithm(self)
    def SetCongestionControlAlgorithm(self, *args) -> "void" : return _vmkctl.NetstackInstance_SetCongestionControlAlgorithm(self, *args)
    def GetVmkNicNames(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.NetstackInstance_GetVmkNicNames(self)
    def GetCurrentIpv6Enabled(self) -> "bool" : return _vmkctl.NetstackInstance_GetCurrentIpv6Enabled(self)
    def SetIpv6Enabled(self, *args) -> "void" : return _vmkctl.NetstackInstance_SetIpv6Enabled(self, *args)
    def GetIpv6Enabled(self) -> "bool" : return _vmkctl.NetstackInstance_GetIpv6Enabled(self)
    def GetState(self) -> "uint32" : return _vmkctl.NetstackInstance_GetState(self)
    def GetCurrentMaxConnections(self) -> "uint32" : return _vmkctl.NetstackInstance_GetCurrentMaxConnections(self)
    def IsEnabled(self) -> "bool" : return _vmkctl.NetstackInstance_IsEnabled(self)
    def Enable(self) -> "bool" : return _vmkctl.NetstackInstance_Enable(self)
    def Create(self) -> "bool" : return _vmkctl.NetstackInstance_Create(self)
    def Disable(self) -> "void" : return _vmkctl.NetstackInstance_Disable(self)
    def Destroy(self, throwOnError : 'bool' = False) -> "bool" : return _vmkctl.NetstackInstance_Destroy(self, throwOnError)
    __swig_destroy__ = _vmkctl.delete_NetstackInstance
    __del__ = lambda self : None;
NetstackInstance_swigregister = _vmkctl.NetstackInstance_swigregister
NetstackInstance_swigregister(NetstackInstance)
NETSTACK_INST_MAX_CONNECTIONS_MIN = cvar.NETSTACK_INST_MAX_CONNECTIONS_MIN
NETSTACK_INST_MAX_CONNECTIONS_DEF = cvar.NETSTACK_INST_MAX_CONNECTIONS_DEF
NETSTACK_INST_MAX_CONNECTIONS_MAX = cvar.NETSTACK_INST_MAX_CONNECTIONS_MAX
NETSTACK_INST_IPV6_ENABLED_DEF = cvar.NETSTACK_INST_IPV6_ENABLED_DEF
NETSTACK_INST_CONGESTION_ALGO_DEF = cvar.NETSTACK_INST_CONGESTION_ALGO_DEF

class DVFilterFastPath(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DVFilterFastPath, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DVFilterFastPath, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetAgentName(self) -> "std::string" : return _vmkctl.DVFilterFastPath_GetAgentName(self)
    def GetApiRevision(self) -> "uint32" : return _vmkctl.DVFilterFastPath_GetApiRevision(self)
    def GetFastPathRevision(self) -> "uint32" : return _vmkctl.DVFilterFastPath_GetFastPathRevision(self)
    def GetRefCount(self) -> "uint32" : return _vmkctl.DVFilterFastPath_GetRefCount(self)
    __swig_destroy__ = _vmkctl.delete_DVFilterFastPath
    __del__ = lambda self : None;
DVFilterFastPath_swigregister = _vmkctl.DVFilterFastPath_swigregister
DVFilterFastPath_swigregister(DVFilterFastPath)

IPSEC_PROTO_TYPE_ANY = _vmkctl.IPSEC_PROTO_TYPE_ANY
IPSEC_PROTO_TYPE_TCP = _vmkctl.IPSEC_PROTO_TYPE_TCP
IPSEC_PROTO_TYPE_UDP = _vmkctl.IPSEC_PROTO_TYPE_UDP
IPSEC_PROTO_TYPE_ICMP6 = _vmkctl.IPSEC_PROTO_TYPE_ICMP6
IPSEC_PROTO_TYPE_UNKNOWN = _vmkctl.IPSEC_PROTO_TYPE_UNKNOWN
IPSEC_SA_MODE_TRANSPORT = _vmkctl.IPSEC_SA_MODE_TRANSPORT
IPSEC_SA_MODE_TUNNEL = _vmkctl.IPSEC_SA_MODE_TUNNEL
IPSEC_SA_MODE_UNKNOWN = _vmkctl.IPSEC_SA_MODE_UNKNOWN
IPSEC_ENCRYPT_ALG_NULL = _vmkctl.IPSEC_ENCRYPT_ALG_NULL
IPSEC_ENCRYPT_ALG_3DES_CBC = _vmkctl.IPSEC_ENCRYPT_ALG_3DES_CBC
IPSEC_ENCRYPT_ALG_AES128_CBC = _vmkctl.IPSEC_ENCRYPT_ALG_AES128_CBC
IPSEC_ENCRYPT_ALG_UNKNOWN = _vmkctl.IPSEC_ENCRYPT_ALG_UNKNOWN
IPSEC_AUTH_HMAC_SHA1 = _vmkctl.IPSEC_AUTH_HMAC_SHA1
IPSEC_AUTH_HMAC_SHA2_256 = _vmkctl.IPSEC_AUTH_HMAC_SHA2_256
IPSEC_AUTH_HMAC_UNKNOWN = _vmkctl.IPSEC_AUTH_HMAC_UNKNOWN
IPSEC_DIRECTION_IN = _vmkctl.IPSEC_DIRECTION_IN
IPSEC_DIRECTION_OUT = _vmkctl.IPSEC_DIRECTION_OUT
IPSEC_DIRECTION_UNKNOWN = _vmkctl.IPSEC_DIRECTION_UNKNOWN
IPSEC_ACTION_DISCARD = _vmkctl.IPSEC_ACTION_DISCARD
IPSEC_ACTION_NONE = _vmkctl.IPSEC_ACTION_NONE
IPSEC_ACTION_IPSEC = _vmkctl.IPSEC_ACTION_IPSEC
IPSEC_ACTION_UNKNOWN = _vmkctl.IPSEC_ACTION_UNKNOWN
IPSEC_STATE_LARVAL = _vmkctl.IPSEC_STATE_LARVAL
IPSEC_STATE_MATURE = _vmkctl.IPSEC_STATE_MATURE
IPSEC_STATE_DYING = _vmkctl.IPSEC_STATE_DYING
IPSEC_STATE_DEAD = _vmkctl.IPSEC_STATE_DEAD
IPSEC_STATE_UNKNOWN = _vmkctl.IPSEC_STATE_UNKNOWN
class IpSecSpdParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IpSecSpdParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IpSecSpdParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addTime"] = _vmkctl.IpSecSpdParam_addTime_set
    __swig_getmethods__["addTime"] = _vmkctl.IpSecSpdParam_addTime_get
    if _newclass:addTime = _swig_property(_vmkctl.IpSecSpdParam_addTime_get, _vmkctl.IpSecSpdParam_addTime_set)
    __swig_setmethods__["useTime"] = _vmkctl.IpSecSpdParam_useTime_set
    __swig_getmethods__["useTime"] = _vmkctl.IpSecSpdParam_useTime_get
    if _newclass:useTime = _swig_property(_vmkctl.IpSecSpdParam_useTime_get, _vmkctl.IpSecSpdParam_useTime_set)
    __swig_setmethods__["srcAddr"] = _vmkctl.IpSecSpdParam_srcAddr_set
    __swig_getmethods__["srcAddr"] = _vmkctl.IpSecSpdParam_srcAddr_get
    if _newclass:srcAddr = _swig_property(_vmkctl.IpSecSpdParam_srcAddr_get, _vmkctl.IpSecSpdParam_srcAddr_set)
    __swig_setmethods__["srcPrefix"] = _vmkctl.IpSecSpdParam_srcPrefix_set
    __swig_getmethods__["srcPrefix"] = _vmkctl.IpSecSpdParam_srcPrefix_get
    if _newclass:srcPrefix = _swig_property(_vmkctl.IpSecSpdParam_srcPrefix_get, _vmkctl.IpSecSpdParam_srcPrefix_set)
    __swig_setmethods__["srcPort"] = _vmkctl.IpSecSpdParam_srcPort_set
    __swig_getmethods__["srcPort"] = _vmkctl.IpSecSpdParam_srcPort_get
    if _newclass:srcPort = _swig_property(_vmkctl.IpSecSpdParam_srcPort_get, _vmkctl.IpSecSpdParam_srcPort_set)
    __swig_setmethods__["dstAddr"] = _vmkctl.IpSecSpdParam_dstAddr_set
    __swig_getmethods__["dstAddr"] = _vmkctl.IpSecSpdParam_dstAddr_get
    if _newclass:dstAddr = _swig_property(_vmkctl.IpSecSpdParam_dstAddr_get, _vmkctl.IpSecSpdParam_dstAddr_set)
    __swig_setmethods__["dstPrefix"] = _vmkctl.IpSecSpdParam_dstPrefix_set
    __swig_getmethods__["dstPrefix"] = _vmkctl.IpSecSpdParam_dstPrefix_get
    if _newclass:dstPrefix = _swig_property(_vmkctl.IpSecSpdParam_dstPrefix_get, _vmkctl.IpSecSpdParam_dstPrefix_set)
    __swig_setmethods__["dstPort"] = _vmkctl.IpSecSpdParam_dstPort_set
    __swig_getmethods__["dstPort"] = _vmkctl.IpSecSpdParam_dstPort_get
    if _newclass:dstPort = _swig_property(_vmkctl.IpSecSpdParam_dstPort_get, _vmkctl.IpSecSpdParam_dstPort_set)
    __swig_setmethods__["upperLayerProto"] = _vmkctl.IpSecSpdParam_upperLayerProto_set
    __swig_getmethods__["upperLayerProto"] = _vmkctl.IpSecSpdParam_upperLayerProto_get
    if _newclass:upperLayerProto = _swig_property(_vmkctl.IpSecSpdParam_upperLayerProto_get, _vmkctl.IpSecSpdParam_upperLayerProto_set)
    __swig_setmethods__["direction"] = _vmkctl.IpSecSpdParam_direction_set
    __swig_getmethods__["direction"] = _vmkctl.IpSecSpdParam_direction_get
    if _newclass:direction = _swig_property(_vmkctl.IpSecSpdParam_direction_get, _vmkctl.IpSecSpdParam_direction_set)
    __swig_setmethods__["action"] = _vmkctl.IpSecSpdParam_action_set
    __swig_getmethods__["action"] = _vmkctl.IpSecSpdParam_action_get
    if _newclass:action = _swig_property(_vmkctl.IpSecSpdParam_action_get, _vmkctl.IpSecSpdParam_action_set)
    __swig_setmethods__["mode"] = _vmkctl.IpSecSpdParam_mode_set
    __swig_getmethods__["mode"] = _vmkctl.IpSecSpdParam_mode_get
    if _newclass:mode = _swig_property(_vmkctl.IpSecSpdParam_mode_get, _vmkctl.IpSecSpdParam_mode_set)
    __swig_setmethods__["saName"] = _vmkctl.IpSecSpdParam_saName_set
    __swig_getmethods__["saName"] = _vmkctl.IpSecSpdParam_saName_get
    if _newclass:saName = _swig_property(_vmkctl.IpSecSpdParam_saName_get, _vmkctl.IpSecSpdParam_saName_set)
    __swig_setmethods__["spName"] = _vmkctl.IpSecSpdParam_spName_set
    __swig_getmethods__["spName"] = _vmkctl.IpSecSpdParam_spName_get
    if _newclass:spName = _swig_property(_vmkctl.IpSecSpdParam_spName_get, _vmkctl.IpSecSpdParam_spName_set)
    def __init__(self): 
        this = _vmkctl.new_IpSecSpdParam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_IpSecSpdParam
    __del__ = lambda self : None;
IpSecSpdParam_swigregister = _vmkctl.IpSecSpdParam_swigregister
IpSecSpdParam_swigregister(IpSecSpdParam)
NULL_IPV6_ADDRESS = cvar.NULL_IPV6_ADDRESS
DEFAULT_LOGLEVEL = cvar.DEFAULT_LOGLEVEL
ALG_3DES_KEY_LENGTH = cvar.ALG_3DES_KEY_LENGTH
ALG_AES_KEY_LENGTH = cvar.ALG_AES_KEY_LENGTH
ALG_SHA1_KEY_LENGTH = cvar.ALG_SHA1_KEY_LENGTH
ALG_SHA256_KEY_LENGTH = cvar.ALG_SHA256_KEY_LENGTH

class IpSecSadParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IpSecSadParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IpSecSadParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["saName"] = _vmkctl.IpSecSadParam_saName_set
    __swig_getmethods__["saName"] = _vmkctl.IpSecSadParam_saName_get
    if _newclass:saName = _swig_property(_vmkctl.IpSecSadParam_saName_get, _vmkctl.IpSecSadParam_saName_set)
    __swig_setmethods__["addTime"] = _vmkctl.IpSecSadParam_addTime_set
    __swig_getmethods__["addTime"] = _vmkctl.IpSecSadParam_addTime_get
    if _newclass:addTime = _swig_property(_vmkctl.IpSecSadParam_addTime_get, _vmkctl.IpSecSadParam_addTime_set)
    __swig_setmethods__["useTime"] = _vmkctl.IpSecSadParam_useTime_set
    __swig_getmethods__["useTime"] = _vmkctl.IpSecSadParam_useTime_get
    if _newclass:useTime = _swig_property(_vmkctl.IpSecSadParam_useTime_get, _vmkctl.IpSecSadParam_useTime_set)
    __swig_setmethods__["state"] = _vmkctl.IpSecSadParam_state_set
    __swig_getmethods__["state"] = _vmkctl.IpSecSadParam_state_get
    if _newclass:state = _swig_property(_vmkctl.IpSecSadParam_state_get, _vmkctl.IpSecSadParam_state_set)
    __swig_setmethods__["softLife"] = _vmkctl.IpSecSadParam_softLife_set
    __swig_getmethods__["softLife"] = _vmkctl.IpSecSadParam_softLife_get
    if _newclass:softLife = _swig_property(_vmkctl.IpSecSadParam_softLife_get, _vmkctl.IpSecSadParam_softLife_set)
    __swig_setmethods__["hardLife"] = _vmkctl.IpSecSadParam_hardLife_set
    __swig_getmethods__["hardLife"] = _vmkctl.IpSecSadParam_hardLife_get
    if _newclass:hardLife = _swig_property(_vmkctl.IpSecSadParam_hardLife_get, _vmkctl.IpSecSadParam_hardLife_set)
    __swig_setmethods__["spi"] = _vmkctl.IpSecSadParam_spi_set
    __swig_getmethods__["spi"] = _vmkctl.IpSecSadParam_spi_get
    if _newclass:spi = _swig_property(_vmkctl.IpSecSadParam_spi_get, _vmkctl.IpSecSadParam_spi_set)
    __swig_setmethods__["srcAddr"] = _vmkctl.IpSecSadParam_srcAddr_set
    __swig_getmethods__["srcAddr"] = _vmkctl.IpSecSadParam_srcAddr_get
    if _newclass:srcAddr = _swig_property(_vmkctl.IpSecSadParam_srcAddr_get, _vmkctl.IpSecSadParam_srcAddr_set)
    __swig_setmethods__["dstAddr"] = _vmkctl.IpSecSadParam_dstAddr_set
    __swig_getmethods__["dstAddr"] = _vmkctl.IpSecSadParam_dstAddr_get
    if _newclass:dstAddr = _swig_property(_vmkctl.IpSecSadParam_dstAddr_get, _vmkctl.IpSecSadParam_dstAddr_set)
    __swig_setmethods__["mode"] = _vmkctl.IpSecSadParam_mode_set
    __swig_getmethods__["mode"] = _vmkctl.IpSecSadParam_mode_get
    if _newclass:mode = _swig_property(_vmkctl.IpSecSadParam_mode_get, _vmkctl.IpSecSadParam_mode_set)
    __swig_setmethods__["encryptAlgo"] = _vmkctl.IpSecSadParam_encryptAlgo_set
    __swig_getmethods__["encryptAlgo"] = _vmkctl.IpSecSadParam_encryptAlgo_get
    if _newclass:encryptAlgo = _swig_property(_vmkctl.IpSecSadParam_encryptAlgo_get, _vmkctl.IpSecSadParam_encryptAlgo_set)
    __swig_setmethods__["encryptKey"] = _vmkctl.IpSecSadParam_encryptKey_set
    __swig_getmethods__["encryptKey"] = _vmkctl.IpSecSadParam_encryptKey_get
    if _newclass:encryptKey = _swig_property(_vmkctl.IpSecSadParam_encryptKey_get, _vmkctl.IpSecSadParam_encryptKey_set)
    __swig_setmethods__["authAlgo"] = _vmkctl.IpSecSadParam_authAlgo_set
    __swig_getmethods__["authAlgo"] = _vmkctl.IpSecSadParam_authAlgo_get
    if _newclass:authAlgo = _swig_property(_vmkctl.IpSecSadParam_authAlgo_get, _vmkctl.IpSecSadParam_authAlgo_set)
    __swig_setmethods__["authKey"] = _vmkctl.IpSecSadParam_authKey_set
    __swig_getmethods__["authKey"] = _vmkctl.IpSecSadParam_authKey_get
    if _newclass:authKey = _swig_property(_vmkctl.IpSecSadParam_authKey_get, _vmkctl.IpSecSadParam_authKey_set)
    def __init__(self): 
        this = _vmkctl.new_IpSecSadParam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_IpSecSadParam
    __del__ = lambda self : None;
IpSecSadParam_swigregister = _vmkctl.IpSecSadParam_swigregister
IpSecSadParam_swigregister(IpSecSadParam)

class IpSecConfig(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IpSecConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IpSecConfig, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSPDConfigList(self, *args) -> "void" : return _vmkctl.IpSecConfig_GetSPDConfigList(self, *args)
    def GetSPDConfig(self, *args) -> "HostCtl::Network::IpSecSpdParam" : return _vmkctl.IpSecConfig_GetSPDConfig(self, *args)
    def AddSPDConfig(self, *args) -> "void" : return _vmkctl.IpSecConfig_AddSPDConfig(self, *args)
    def RemoveSPDConfig(self, *args) -> "void" : return _vmkctl.IpSecConfig_RemoveSPDConfig(self, *args)
    def GetSADConfig(self, *args) -> "HostCtl::Network::IpSecSadParam" : return _vmkctl.IpSecConfig_GetSADConfig(self, *args)
    def GetSADConfigList(self, *args) -> "void" : return _vmkctl.IpSecConfig_GetSADConfigList(self, *args)
    def GetActiveSADConfigList(self, *args) -> "void" : return _vmkctl.IpSecConfig_GetActiveSADConfigList(self, *args)
    def AddSADConfig(self, *args) -> "void" : return _vmkctl.IpSecConfig_AddSADConfig(self, *args)
    def RemoveSADConfig(self, *args) -> "void" : return _vmkctl.IpSecConfig_RemoveSADConfig(self, *args)
    def RemoveAutoSADConfig(self, *args) -> "void" : return _vmkctl.IpSecConfig_RemoveAutoSADConfig(self, *args)
    def FlushSADConfig(self) -> "void" : return _vmkctl.IpSecConfig_FlushSADConfig(self)
    def FlushSPDConfig(self) -> "void" : return _vmkctl.IpSecConfig_FlushSPDConfig(self)
    __swig_destroy__ = _vmkctl.delete_IpSecConfig
    __del__ = lambda self : None;
IpSecConfig_swigregister = _vmkctl.IpSecConfig_swigregister
IpSecConfig_swigregister(IpSecConfig)

TCPSTATE_CLOSED = _vmkctl.TCPSTATE_CLOSED
TCPSTATE_LISTEN = _vmkctl.TCPSTATE_LISTEN
TCPSTATE_SYN_SENT = _vmkctl.TCPSTATE_SYN_SENT
TCPSTATE_RCVD = _vmkctl.TCPSTATE_RCVD
TCPSTATE_ESTABLISHED = _vmkctl.TCPSTATE_ESTABLISHED
TCPSTATE_CLOSE_WAIT = _vmkctl.TCPSTATE_CLOSE_WAIT
TCPSTATE_FIN_WAIT_1 = _vmkctl.TCPSTATE_FIN_WAIT_1
TCPSTATE_CLOSING = _vmkctl.TCPSTATE_CLOSING
TCPSTATE_LAST_ACK = _vmkctl.TCPSTATE_LAST_ACK
TCPSTATE_FIN_WAIT_2 = _vmkctl.TCPSTATE_FIN_WAIT_2
TCPSTATE_TIME_WAIT = _vmkctl.TCPSTATE_TIME_WAIT
class TcpIpConnection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TcpIpConnection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TcpIpConnection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["family"] = _vmkctl.TcpIpConnection_family_set
    __swig_getmethods__["family"] = _vmkctl.TcpIpConnection_family_get
    if _newclass:family = _swig_property(_vmkctl.TcpIpConnection_family_get, _vmkctl.TcpIpConnection_family_set)
    __swig_setmethods__["recvq"] = _vmkctl.TcpIpConnection_recvq_set
    __swig_getmethods__["recvq"] = _vmkctl.TcpIpConnection_recvq_get
    if _newclass:recvq = _swig_property(_vmkctl.TcpIpConnection_recvq_get, _vmkctl.TcpIpConnection_recvq_set)
    __swig_setmethods__["sendq"] = _vmkctl.TcpIpConnection_sendq_set
    __swig_getmethods__["sendq"] = _vmkctl.TcpIpConnection_sendq_get
    if _newclass:sendq = _swig_property(_vmkctl.TcpIpConnection_sendq_get, _vmkctl.TcpIpConnection_sendq_set)
    __swig_setmethods__["laddr"] = _vmkctl.TcpIpConnection_laddr_set
    __swig_getmethods__["laddr"] = _vmkctl.TcpIpConnection_laddr_get
    if _newclass:laddr = _swig_property(_vmkctl.TcpIpConnection_laddr_get, _vmkctl.TcpIpConnection_laddr_set)
    __swig_setmethods__["lport"] = _vmkctl.TcpIpConnection_lport_set
    __swig_getmethods__["lport"] = _vmkctl.TcpIpConnection_lport_get
    if _newclass:lport = _swig_property(_vmkctl.TcpIpConnection_lport_get, _vmkctl.TcpIpConnection_lport_set)
    __swig_setmethods__["faddr"] = _vmkctl.TcpIpConnection_faddr_set
    __swig_getmethods__["faddr"] = _vmkctl.TcpIpConnection_faddr_get
    if _newclass:faddr = _swig_property(_vmkctl.TcpIpConnection_faddr_get, _vmkctl.TcpIpConnection_faddr_set)
    __swig_setmethods__["fport"] = _vmkctl.TcpIpConnection_fport_set
    __swig_getmethods__["fport"] = _vmkctl.TcpIpConnection_fport_get
    if _newclass:fport = _swig_property(_vmkctl.TcpIpConnection_fport_get, _vmkctl.TcpIpConnection_fport_set)
    __swig_setmethods__["tcpstate"] = _vmkctl.TcpIpConnection_tcpstate_set
    __swig_getmethods__["tcpstate"] = _vmkctl.TcpIpConnection_tcpstate_get
    if _newclass:tcpstate = _swig_property(_vmkctl.TcpIpConnection_tcpstate_get, _vmkctl.TcpIpConnection_tcpstate_set)
    __swig_setmethods__["worldId"] = _vmkctl.TcpIpConnection_worldId_set
    __swig_getmethods__["worldId"] = _vmkctl.TcpIpConnection_worldId_get
    if _newclass:worldId = _swig_property(_vmkctl.TcpIpConnection_worldId_get, _vmkctl.TcpIpConnection_worldId_set)
    __swig_setmethods__["cc_algo"] = _vmkctl.TcpIpConnection_cc_algo_set
    __swig_getmethods__["cc_algo"] = _vmkctl.TcpIpConnection_cc_algo_get
    if _newclass:cc_algo = _swig_property(_vmkctl.TcpIpConnection_cc_algo_get, _vmkctl.TcpIpConnection_cc_algo_set)
    def __init__(self): 
        this = _vmkctl.new_TcpIpConnection()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_TcpIpConnection
    __del__ = lambda self : None;
TcpIpConnection_swigregister = _vmkctl.TcpIpConnection_swigregister
TcpIpConnection_swigregister(TcpIpConnection)

class NetworkInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetConsoleNicInfo(self) -> "HostCtl::Network::ConsoleNicInfoPtr" : return _vmkctl.NetworkInfo_GetConsoleNicInfo(self)
    def GetRoutingInfo(self, netstackInstanceKey : 'string' = "defaultTcpipStack") -> "HostCtl::Network::RoutingInfoPtr" : return _vmkctl.NetworkInfo_GetRoutingInfo(self, netstackInstanceKey)
    def GetDnsConfig(self, netstackInstanceKey : 'string' = "defaultTcpipStack") -> "HostCtl::Network::DnsConfigPtr" : return _vmkctl.NetworkInfo_GetDnsConfig(self, netstackInstanceKey)
    def GetIpSecConfig(self) -> "HostCtl::Network::IpSecConfigPtr" : return _vmkctl.NetworkInfo_GetIpSecConfig(self)
    def GetVirtualSwitchInfo(self) -> "HostCtl::Network::VirtualSwitchInfoPtr" : return _vmkctl.NetworkInfo_GetVirtualSwitchInfo(self)
    def GetVmKernelNicInfo(self) -> "HostCtl::Network::VmKernelNicInfoPtr" : return _vmkctl.NetworkInfo_GetVmKernelNicInfo(self)
    def GetPnics(self) -> "std::vector< HostCtl::Network::PnicPtr,std::allocator< HostCtl::Network::PnicPtr > >" : return _vmkctl.NetworkInfo_GetPnics(self)
    def GetPnicByName(self, *args) -> "HostCtl::Network::PnicPtr" : return _vmkctl.NetworkInfo_GetPnicByName(self, *args)
    def GetFcoeCapablePnics(self) -> "std::vector< HostCtl::Network::FcoePnicPtr,std::allocator< HostCtl::Network::FcoePnicPtr > >" : return _vmkctl.NetworkInfo_GetFcoeCapablePnics(self)
    def GetDVFilterFastPaths(self) -> "std::vector< HostCtl::Network::DVFilterFastPathPtr,std::allocator< HostCtl::Network::DVFilterFastPathPtr > >" : return _vmkctl.NetworkInfo_GetDVFilterFastPaths(self)
    def GetMaxVirtualSwitches(self) -> "uint32" : return _vmkctl.NetworkInfo_GetMaxVirtualSwitches(self)
    def GetConfiguredMaxVirtualSwitches(self) -> "uint32" : return _vmkctl.NetworkInfo_GetConfiguredMaxVirtualSwitches(self)
    def SetConfiguredMaxVirtualSwitches(self, *args) -> "void" : return _vmkctl.NetworkInfo_SetConfiguredMaxVirtualSwitches(self, *args)
    def GetSystemCapabilities(self) -> "HostCtl::Network::NicCapabilities" : return _vmkctl.NetworkInfo_GetSystemCapabilities(self)
    def GetAllPortGroupNames(self) -> "std::set< std::string,std::less< std::string >,std::allocator< std::string > >" : return _vmkctl.NetworkInfo_GetAllPortGroupNames(self)
    def SendWakeOnLAN(self, *args) -> "void" : return _vmkctl.NetworkInfo_SendWakeOnLAN(self, *args)
    def GetManagementInterface(self) -> "HostCtl::Network::NetworkInterfacePtr" : return _vmkctl.NetworkInfo_GetManagementInterface(self)
    def SetManagementInterface(self, *args) -> "void" : return _vmkctl.NetworkInfo_SetManagementInterface(self, *args)
    def IsCosIpv6Enabled(self) -> "bool" : return _vmkctl.NetworkInfo_IsCosIpv6Enabled(self)
    def SetCosIpv6Enabled(self, *args) -> "void" : return _vmkctl.NetworkInfo_SetCosIpv6Enabled(self, *args)
    def IsVmkIpv6Enabled(self) -> "bool" : return _vmkctl.NetworkInfo_IsVmkIpv6Enabled(self)
    def SetVmkIpv6Enabled(self, *args) -> "void" : return _vmkctl.NetworkInfo_SetVmkIpv6Enabled(self, *args)
    def GetVmkIpv6Enabled(self) -> "bool" : return _vmkctl.NetworkInfo_GetVmkIpv6Enabled(self)
    def IsVmkIpv6GlobalRouterAdvEnabled(self, netstackInstanceKey : 'string' = "defaultTcpipStack") -> "bool" : return _vmkctl.NetworkInfo_IsVmkIpv6GlobalRouterAdvEnabled(self, netstackInstanceKey)
    def SetVmkIpv6GlobalRouterAdvEnabled(self, *args) -> "void" : return _vmkctl.NetworkInfo_SetVmkIpv6GlobalRouterAdvEnabled(self, *args)
    def UpdateManagementInterface(self) -> "bool" : return _vmkctl.NetworkInfo_UpdateManagementInterface(self)
    def GetCurrentIpVMkernelConnections(self, *args) -> "void" : return _vmkctl.NetworkInfo_GetCurrentIpVMkernelConnections(self, *args)
    def GetCurrentTcpVMkernelConnections(self, *args) -> "void" : return _vmkctl.NetworkInfo_GetCurrentTcpVMkernelConnections(self, *args)
    def GetCurrentUdpVMkernelConnections(self, *args) -> "void" : return _vmkctl.NetworkInfo_GetCurrentUdpVMkernelConnections(self, *args)
    def GetAllSriovInfo(self) -> "std::map< std::string,std::map< uint32,std::string,std::less< uint32 >,std::allocator< std::pair< uint32 const,std::string > > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::map< uint32,std::string,std::less< uint32 >,std::allocator< std::pair< uint32 const,std::string > > > > > >" : return _vmkctl.NetworkInfo_GetAllSriovInfo(self)
    def GetSriovNics(self) -> "std::vector< HostCtl::Network::PnicPtr,std::allocator< HostCtl::Network::PnicPtr > >" : return _vmkctl.NetworkInfo_GetSriovNics(self)
    def GetSriovNicVFInfo(self, *args) -> "std::vector< HostCtl::Network::SriovNicVFInfo,std::allocator< HostCtl::Network::SriovNicVFInfo > >" : return _vmkctl.NetworkInfo_GetSriovNicVFInfo(self, *args)
    def GetSriovNicVFStats(self, *args) -> "void" : return _vmkctl.NetworkInfo_GetSriovNicVFStats(self, *args)
    def AddNetstackInstance(self, *args) -> "bool" : return _vmkctl.NetworkInfo_AddNetstackInstance(self, *args)
    def RemoveNetstackInstance(self, *args) -> "bool" : return _vmkctl.NetworkInfo_RemoveNetstackInstance(self, *args)
    def ListNetstackInstances(self) -> "std::vector< HostCtl::Network::NetstackInstancePtr,std::allocator< HostCtl::Network::NetstackInstancePtr > >" : return _vmkctl.NetworkInfo_ListNetstackInstances(self)
    def GetNetstackInstanceByKey(self, *args) -> "HostCtl::Network::NetstackInstancePtr" : return _vmkctl.NetworkInfo_GetNetstackInstanceByKey(self, *args)
    def LookupNetstackInstanceByKey(self, *args) -> "HostCtl::Network::NetstackInstancePtr" : return _vmkctl.NetworkInfo_LookupNetstackInstanceByKey(self, *args)
    def GetDefaultNetstackInstance(self) -> "HostCtl::Network::NetstackInstancePtr" : return _vmkctl.NetworkInfo_GetDefaultNetstackInstance(self)
    def GetNetstackInstanceState(self, *args) -> "uint32" : return _vmkctl.NetworkInfo_GetNetstackInstanceState(self, *args)
    def GetNetstackInstancePreDefinedKeys(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.NetworkInfo_GetNetstackInstancePreDefinedKeys(self)
    def GetNetstackInstanceMaxConnectionsDefault(self) -> "uint32" : return _vmkctl.NetworkInfo_GetNetstackInstanceMaxConnectionsDefault(self)
    def GetNetstackInstanceIpv6EnabledDefault(self) -> "bool" : return _vmkctl.NetworkInfo_GetNetstackInstanceIpv6EnabledDefault(self)
    def GetNetstackInstanceCongestionAlgoDefault(self) -> "std::string" : return _vmkctl.NetworkInfo_GetNetstackInstanceCongestionAlgoDefault(self)
    def GetNetDumperParams(self, *args) -> "void" : return _vmkctl.NetworkInfo_GetNetDumperParams(self, *args)
    def GetNetDumpServerIpv4(self, *args) -> "void" : return _vmkctl.NetworkInfo_GetNetDumpServerIpv4(self, *args)
    def SetNetDumperParams(self, *args) -> "void" : return _vmkctl.NetworkInfo_SetNetDumperParams(self, *args)
    def EnableNetDumper(self) -> "void" : return _vmkctl.NetworkInfo_EnableNetDumper(self)
    def DisableNetDumper(self) -> "void" : return _vmkctl.NetworkInfo_DisableNetDumper(self)
    def GetNetDumperEnabled(self) -> "bool" : return _vmkctl.NetworkInfo_GetNetDumperEnabled(self)
    def RunNetDumperCheck(self, *args) -> "void" : return _vmkctl.NetworkInfo_RunNetDumperCheck(self, *args)
    def IsNetDumperRestorable(self) -> "bool" : return _vmkctl.NetworkInfo_IsNetDumperRestorable(self)
    def RestoreNetDumper(self) -> "void" : return _vmkctl.NetworkInfo_RestoreNetDumper(self)
    __swig_destroy__ = _vmkctl.delete_NetworkInfo
    __del__ = lambda self : None;
NetworkInfo_swigregister = _vmkctl.NetworkInfo_swigregister
NetworkInfo_swigregister(NetworkInfo)

class NetworkInfoImpl(NetworkInfo,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [NetworkInfo,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [NetworkInfo,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkInfoImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_NetworkInfoImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_NetworkInfoImpl
    __del__ = lambda self : None;
    __swig_getmethods__["IsNetworkObjectNameValid"] = lambda x: _vmkctl.NetworkInfoImpl_IsNetworkObjectNameValid
    if _newclass:IsNetworkObjectNameValid = staticmethod(_vmkctl.NetworkInfoImpl_IsNetworkObjectNameValid)
    def GetConsoleNicInfo(self) -> "HostCtl::Network::ConsoleNicInfoPtr" : return _vmkctl.NetworkInfoImpl_GetConsoleNicInfo(self)
    def GetRoutingInfo(self, netstackInstanceKey : 'string' = "defaultTcpipStack") -> "HostCtl::Network::RoutingInfoPtr" : return _vmkctl.NetworkInfoImpl_GetRoutingInfo(self, netstackInstanceKey)
    def GetDnsConfig(self, netstackInstanceKey : 'string' = "defaultTcpipStack") -> "HostCtl::Network::DnsConfigPtr" : return _vmkctl.NetworkInfoImpl_GetDnsConfig(self, netstackInstanceKey)
    def GetIpSecConfig(self) -> "HostCtl::Network::IpSecConfigPtr" : return _vmkctl.NetworkInfoImpl_GetIpSecConfig(self)
    def GetVirtualSwitchInfo(self) -> "HostCtl::Network::VirtualSwitchInfoPtr" : return _vmkctl.NetworkInfoImpl_GetVirtualSwitchInfo(self)
    def GetVmKernelNicInfo(self) -> "HostCtl::Network::VmKernelNicInfoPtr" : return _vmkctl.NetworkInfoImpl_GetVmKernelNicInfo(self)
    def GetMaxVirtualSwitches(self) -> "uint32" : return _vmkctl.NetworkInfoImpl_GetMaxVirtualSwitches(self)
    def GetConfiguredMaxVirtualSwitches(self) -> "uint32" : return _vmkctl.NetworkInfoImpl_GetConfiguredMaxVirtualSwitches(self)
    def SetConfiguredMaxVirtualSwitches(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_SetConfiguredMaxVirtualSwitches(self, *args)
    def GetPnics(self) -> "std::vector< HostCtl::Network::PnicPtr,std::allocator< HostCtl::Network::PnicPtr > >" : return _vmkctl.NetworkInfoImpl_GetPnics(self)
    def GetPnicByName(self, *args) -> "HostCtl::Network::PnicPtr" : return _vmkctl.NetworkInfoImpl_GetPnicByName(self, *args)
    def GetAllSriovInfo(self) -> "std::map< std::string,std::map< uint32,std::string,std::less< uint32 >,std::allocator< std::pair< uint32 const,std::string > > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::map< uint32,std::string,std::less< uint32 >,std::allocator< std::pair< uint32 const,std::string > > > > > >" : return _vmkctl.NetworkInfoImpl_GetAllSriovInfo(self)
    def GetSriovNics(self) -> "std::vector< HostCtl::Network::PnicPtr,std::allocator< HostCtl::Network::PnicPtr > >" : return _vmkctl.NetworkInfoImpl_GetSriovNics(self)
    def GetSriovNicVFInfo(self, *args) -> "std::vector< HostCtl::Network::SriovNicVFInfo,std::allocator< HostCtl::Network::SriovNicVFInfo > >" : return _vmkctl.NetworkInfoImpl_GetSriovNicVFInfo(self, *args)
    def GetSriovNicVFStats(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_GetSriovNicVFStats(self, *args)
    def AddNetstackInstance(self, *args) -> "bool" : return _vmkctl.NetworkInfoImpl_AddNetstackInstance(self, *args)
    def RemoveNetstackInstance(self, *args) -> "bool" : return _vmkctl.NetworkInfoImpl_RemoveNetstackInstance(self, *args)
    def ListNetstackInstances(self) -> "std::vector< HostCtl::Network::NetstackInstancePtr,std::allocator< HostCtl::Network::NetstackInstancePtr > >" : return _vmkctl.NetworkInfoImpl_ListNetstackInstances(self)
    def GetNetstackInstanceRTByKey(self, *args) -> "HostCtl::Network::NetstackInstancePtr" : return _vmkctl.NetworkInfoImpl_GetNetstackInstanceRTByKey(self, *args)
    def GetNetstackInstanceByKey(self, *args) -> "HostCtl::Network::NetstackInstancePtr" : return _vmkctl.NetworkInfoImpl_GetNetstackInstanceByKey(self, *args)
    def LookupNetstackInstanceByKey(self, *args) -> "HostCtl::Network::NetstackInstancePtr" : return _vmkctl.NetworkInfoImpl_LookupNetstackInstanceByKey(self, *args)
    def GetDefaultNetstackInstance(self) -> "HostCtl::Network::NetstackInstancePtr" : return _vmkctl.NetworkInfoImpl_GetDefaultNetstackInstance(self)
    def GetNetstackInstanceState(self, *args) -> "uint32" : return _vmkctl.NetworkInfoImpl_GetNetstackInstanceState(self, *args)
    def GetFcoeCapablePnics(self) -> "std::vector< HostCtl::Network::FcoePnicPtr,std::allocator< HostCtl::Network::FcoePnicPtr > >" : return _vmkctl.NetworkInfoImpl_GetFcoeCapablePnics(self)
    def GetSystemCapabilities(self) -> "HostCtl::Network::NicCapabilities" : return _vmkctl.NetworkInfoImpl_GetSystemCapabilities(self)
    def GetDVFilterFastPaths(self) -> "std::vector< HostCtl::Network::DVFilterFastPathPtr,std::allocator< HostCtl::Network::DVFilterFastPathPtr > >" : return _vmkctl.NetworkInfoImpl_GetDVFilterFastPaths(self)
    def GetManagementInterface(self) -> "HostCtl::Network::NetworkInterfacePtr" : return _vmkctl.NetworkInfoImpl_GetManagementInterface(self)
    def SelectManagementInterface(self) -> "HostCtl::Network::NetworkInterfacePtr" : return _vmkctl.NetworkInfoImpl_SelectManagementInterface(self)
    def UpdateManagementInterface(self) -> "bool" : return _vmkctl.NetworkInfoImpl_UpdateManagementInterface(self)
    def GetInterfaceByName(self, *args) -> "HostCtl::Network::NetworkInterfacePtr" : return _vmkctl.NetworkInfoImpl_GetInterfaceByName(self, *args)
    def SetManagementInterface(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_SetManagementInterface(self, *args)
    def IsCosIpv6Enabled(self) -> "bool" : return _vmkctl.NetworkInfoImpl_IsCosIpv6Enabled(self)
    def SetCosIpv6Enabled(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_SetCosIpv6Enabled(self, *args)
    def IsVmkIpv6Enabled(self) -> "bool" : return _vmkctl.NetworkInfoImpl_IsVmkIpv6Enabled(self)
    def SetVmkIpv6Enabled(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_SetVmkIpv6Enabled(self, *args)
    def GetVmkIpv6Enabled(self) -> "bool" : return _vmkctl.NetworkInfoImpl_GetVmkIpv6Enabled(self)
    def IsVmkIpv6GlobalRouterAdvEnabled(self, netstackInstanceKey : 'string' = "defaultTcpipStack") -> "bool" : return _vmkctl.NetworkInfoImpl_IsVmkIpv6GlobalRouterAdvEnabled(self, netstackInstanceKey)
    def SetVmkIpv6GlobalRouterAdvEnabled(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_SetVmkIpv6GlobalRouterAdvEnabled(self, *args)
    def GetAllPorts(self) -> "std::vector< HostCtl::Network::PortPtr,std::allocator< HostCtl::Network::PortPtr > >" : return _vmkctl.NetworkInfoImpl_GetAllPorts(self)
    def Refresh(self) -> "void" : return _vmkctl.NetworkInfoImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.NetworkInfoImpl_GetName(self)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.NetworkInfoImpl_GetChildren(self)
    def LoadConfig(self) -> "void" : return _vmkctl.NetworkInfoImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_Print(self, *args)
    def GetAllPortGroupNames(self) -> "std::set< std::string,std::less< std::string >,std::allocator< std::string > >" : return _vmkctl.NetworkInfoImpl_GetAllPortGroupNames(self)
    def GetAllPortGroups(self) -> "std::vector< HostCtl::Network::PortGroupPtr,std::allocator< HostCtl::Network::PortGroupPtr > >" : return _vmkctl.NetworkInfoImpl_GetAllPortGroups(self)
    def SendWakeOnLAN(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_SendWakeOnLAN(self, *args)
    def RestorePnics(self) -> "void" : return _vmkctl.NetworkInfoImpl_RestorePnics(self)
    def GetBootNic(self) -> "HostCtl::Network::PnicPtr" : return _vmkctl.NetworkInfoImpl_GetBootNic(self)
    def GetSriovNicByName(self, *args) -> "HostCtl::Network::PnicPtr" : return _vmkctl.NetworkInfoImpl_GetSriovNicByName(self, *args)
    def FindPnicByMAC(self, *args) -> "HostCtl::Network::PnicPtr" : return _vmkctl.NetworkInfoImpl_FindPnicByMAC(self, *args)
    def AutoConfigNetwork(self) -> "void" : return _vmkctl.NetworkInfoImpl_AutoConfigNetwork(self)
    def ClearNetworkConfig(self) -> "void" : return _vmkctl.NetworkInfoImpl_ClearNetworkConfig(self)
    def GetCurrentIpVMkernelConnections(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_GetCurrentIpVMkernelConnections(self, *args)
    def GetCurrentTcpVMkernelConnections(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_GetCurrentTcpVMkernelConnections(self, *args)
    def GetCurrentUdpVMkernelConnections(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_GetCurrentUdpVMkernelConnections(self, *args)
    def GetNetDumperParams(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_GetNetDumperParams(self, *args)
    def GetNetDumpServerIpv4(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_GetNetDumpServerIpv4(self, *args)
    def SetNetDumperParams(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_SetNetDumperParams(self, *args)
    def EnableNetDumper(self) -> "void" : return _vmkctl.NetworkInfoImpl_EnableNetDumper(self)
    def DisableNetDumper(self) -> "void" : return _vmkctl.NetworkInfoImpl_DisableNetDumper(self)
    def GetNetDumperEnabled(self) -> "bool" : return _vmkctl.NetworkInfoImpl_GetNetDumperEnabled(self)
    def RunNetDumperCheck(self, *args) -> "void" : return _vmkctl.NetworkInfoImpl_RunNetDumperCheck(self, *args)
    def IsNetDumperRestorable(self) -> "bool" : return _vmkctl.NetworkInfoImpl_IsNetDumperRestorable(self)
    def RestoreNetDumper(self) -> "void" : return _vmkctl.NetworkInfoImpl_RestoreNetDumper(self)
    def RestoreFcoePnics(self) -> "void" : return _vmkctl.NetworkInfoImpl_RestoreFcoePnics(self)
    def RestoreNetstackInstances(self) -> "void" : return _vmkctl.NetworkInfoImpl_RestoreNetstackInstances(self)
NetworkInfoImpl_swigregister = _vmkctl.NetworkInfoImpl_swigregister
NetworkInfoImpl_swigregister(NetworkInfoImpl)
NetworkInfoImpl.DefaultDVSCacheFile = _vmkctl.cvar.NetworkInfoImpl_DefaultDVSCacheFile
NetworkInfoImpl.NetworkNameBlacklistChar = _vmkctl.cvar.NetworkInfoImpl_NetworkNameBlacklistChar

def NetworkInfoImpl_IsNetworkObjectNameValid(*args) -> "bool" :
  return _vmkctl.NetworkInfoImpl_IsNetworkObjectNameValid(*args)
NetworkInfoImpl_IsNetworkObjectNameValid = _vmkctl.NetworkInfoImpl_IsNetworkObjectNameValid

class AffinityInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AffinityInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AffinityInfo, name)
    __repr__ = _swig_repr
    HT_SHARE_ANY = _vmkctl.AffinityInfo_HT_SHARE_ANY
    HT_SHARE_INTERNAL = _vmkctl.AffinityInfo_HT_SHARE_INTERNAL
    HT_SHARE_NONE = _vmkctl.AffinityInfo_HT_SHARE_NONE
    HT_SHARE_INVALID = _vmkctl.AffinityInfo_HT_SHARE_INVALID
    __swig_setmethods__["hyperThreading"] = _vmkctl.AffinityInfo_hyperThreading_set
    __swig_getmethods__["hyperThreading"] = _vmkctl.AffinityInfo_hyperThreading_get
    if _newclass:hyperThreading = _swig_property(_vmkctl.AffinityInfo_hyperThreading_get, _vmkctl.AffinityInfo_hyperThreading_set)
    def __init__(self): 
        this = _vmkctl.new_AffinityInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_AffinityInfo
    __del__ = lambda self : None;
AffinityInfo_swigregister = _vmkctl.AffinityInfo_swigregister
AffinityInfo_swigregister(AffinityInfo)

class CpuLoad(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuLoad, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuLoad, name)
    __repr__ = _swig_repr
    __swig_setmethods__["avgRunTime"] = _vmkctl.CpuLoad_avgRunTime_set
    __swig_getmethods__["avgRunTime"] = _vmkctl.CpuLoad_avgRunTime_get
    if _newclass:avgRunTime = _swig_property(_vmkctl.CpuLoad_avgRunTime_get, _vmkctl.CpuLoad_avgRunTime_set)
    __swig_setmethods__["avgActiveTime"] = _vmkctl.CpuLoad_avgActiveTime_set
    __swig_getmethods__["avgActiveTime"] = _vmkctl.CpuLoad_avgActiveTime_get
    if _newclass:avgActiveTime = _swig_property(_vmkctl.CpuLoad_avgActiveTime_get, _vmkctl.CpuLoad_avgActiveTime_set)
    __swig_setmethods__["avgMaxLimited"] = _vmkctl.CpuLoad_avgMaxLimited_set
    __swig_getmethods__["avgMaxLimited"] = _vmkctl.CpuLoad_avgMaxLimited_get
    if _newclass:avgMaxLimited = _swig_property(_vmkctl.CpuLoad_avgMaxLimited_get, _vmkctl.CpuLoad_avgMaxLimited_set)
    NumQuantiles = _vmkctl.CpuLoad_NumQuantiles
    __swig_setmethods__["activeQuantile"] = _vmkctl.CpuLoad_activeQuantile_set
    __swig_getmethods__["activeQuantile"] = _vmkctl.CpuLoad_activeQuantile_get
    if _newclass:activeQuantile = _swig_property(_vmkctl.CpuLoad_activeQuantile_get, _vmkctl.CpuLoad_activeQuantile_set)
    __swig_setmethods__["runQuantile"] = _vmkctl.CpuLoad_runQuantile_set
    __swig_getmethods__["runQuantile"] = _vmkctl.CpuLoad_runQuantile_get
    if _newclass:runQuantile = _swig_property(_vmkctl.CpuLoad_runQuantile_get, _vmkctl.CpuLoad_runQuantile_set)
    __swig_setmethods__["limitedQuantile"] = _vmkctl.CpuLoad_limitedQuantile_set
    __swig_getmethods__["limitedQuantile"] = _vmkctl.CpuLoad_limitedQuantile_get
    if _newclass:limitedQuantile = _swig_property(_vmkctl.CpuLoad_limitedQuantile_get, _vmkctl.CpuLoad_limitedQuantile_set)
    def __init__(self): 
        this = _vmkctl.new_CpuLoad()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_CpuLoad
    __del__ = lambda self : None;
CpuLoad_swigregister = _vmkctl.CpuLoad_swigregister
CpuLoad_swigregister(CpuLoad)

class CpuLoadHistory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuLoadHistory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuLoadHistory, name)
    __repr__ = _swig_repr
    __swig_setmethods__["loadHistory_1min"] = _vmkctl.CpuLoadHistory_loadHistory_1min_set
    __swig_getmethods__["loadHistory_1min"] = _vmkctl.CpuLoadHistory_loadHistory_1min_get
    if _newclass:loadHistory_1min = _swig_property(_vmkctl.CpuLoadHistory_loadHistory_1min_get, _vmkctl.CpuLoadHistory_loadHistory_1min_set)
    __swig_setmethods__["loadHistory_5min"] = _vmkctl.CpuLoadHistory_loadHistory_5min_set
    __swig_getmethods__["loadHistory_5min"] = _vmkctl.CpuLoadHistory_loadHistory_5min_get
    if _newclass:loadHistory_5min = _swig_property(_vmkctl.CpuLoadHistory_loadHistory_5min_get, _vmkctl.CpuLoadHistory_loadHistory_5min_set)
    __swig_setmethods__["loadHistory_15min"] = _vmkctl.CpuLoadHistory_loadHistory_15min_set
    __swig_getmethods__["loadHistory_15min"] = _vmkctl.CpuLoadHistory_loadHistory_15min_get
    if _newclass:loadHistory_15min = _swig_property(_vmkctl.CpuLoadHistory_loadHistory_15min_get, _vmkctl.CpuLoadHistory_loadHistory_15min_set)
    __swig_setmethods__["sampleCount"] = _vmkctl.CpuLoadHistory_sampleCount_set
    __swig_getmethods__["sampleCount"] = _vmkctl.CpuLoadHistory_sampleCount_get
    if _newclass:sampleCount = _swig_property(_vmkctl.CpuLoadHistory_sampleCount_get, _vmkctl.CpuLoadHistory_sampleCount_set)
    __swig_setmethods__["samplePeriod"] = _vmkctl.CpuLoadHistory_samplePeriod_set
    __swig_getmethods__["samplePeriod"] = _vmkctl.CpuLoadHistory_samplePeriod_get
    if _newclass:samplePeriod = _swig_property(_vmkctl.CpuLoadHistory_samplePeriod_get, _vmkctl.CpuLoadHistory_samplePeriod_set)
    def __init__(self): 
        this = _vmkctl.new_CpuLoadHistory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_CpuLoadHistory
    __del__ = lambda self : None;
CpuLoadHistory_swigregister = _vmkctl.CpuLoadHistory_swigregister
CpuLoadHistory_swigregister(CpuLoadHistory)

class CpuLoadUnit(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuLoadUnit, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuLoadUnit, name)
    __repr__ = _swig_repr
    MSEC = _vmkctl.CpuLoadUnit_MSEC
    PCT = _vmkctl.CpuLoadUnit_PCT
    MHZ = _vmkctl.CpuLoadUnit_MHZ
    def __init__(self, *args): 
        this = _vmkctl.new_CpuLoadUnit(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["unit"] = _vmkctl.CpuLoadUnit_unit_set
    __swig_getmethods__["unit"] = _vmkctl.CpuLoadUnit_unit_get
    if _newclass:unit = _swig_property(_vmkctl.CpuLoadUnit_unit_get, _vmkctl.CpuLoadUnit_unit_set)
    __swig_destroy__ = _vmkctl.delete_CpuLoadUnit
    __del__ = lambda self : None;
CpuLoadUnit_swigregister = _vmkctl.CpuLoadUnit_swigregister
CpuLoadUnit_swigregister(CpuLoadUnit)

class CpuLoadHistoryAggregated(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuLoadHistoryAggregated, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuLoadHistoryAggregated, name)
    __repr__ = _swig_repr
    __swig_setmethods__["loadHistory_msec"] = _vmkctl.CpuLoadHistoryAggregated_loadHistory_msec_set
    __swig_getmethods__["loadHistory_msec"] = _vmkctl.CpuLoadHistoryAggregated_loadHistory_msec_get
    if _newclass:loadHistory_msec = _swig_property(_vmkctl.CpuLoadHistoryAggregated_loadHistory_msec_get, _vmkctl.CpuLoadHistoryAggregated_loadHistory_msec_set)
    __swig_setmethods__["loadHistory_pct"] = _vmkctl.CpuLoadHistoryAggregated_loadHistory_pct_set
    __swig_getmethods__["loadHistory_pct"] = _vmkctl.CpuLoadHistoryAggregated_loadHistory_pct_get
    if _newclass:loadHistory_pct = _swig_property(_vmkctl.CpuLoadHistoryAggregated_loadHistory_pct_get, _vmkctl.CpuLoadHistoryAggregated_loadHistory_pct_set)
    __swig_setmethods__["loadHistory_mhz"] = _vmkctl.CpuLoadHistoryAggregated_loadHistory_mhz_set
    __swig_getmethods__["loadHistory_mhz"] = _vmkctl.CpuLoadHistoryAggregated_loadHistory_mhz_get
    if _newclass:loadHistory_mhz = _swig_property(_vmkctl.CpuLoadHistoryAggregated_loadHistory_mhz_get, _vmkctl.CpuLoadHistoryAggregated_loadHistory_mhz_set)
    def __init__(self): 
        this = _vmkctl.new_CpuLoadHistoryAggregated()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_CpuLoadHistoryAggregated
    __del__ = lambda self : None;
CpuLoadHistoryAggregated_swigregister = _vmkctl.CpuLoadHistoryAggregated_swigregister
CpuLoadHistoryAggregated_swigregister(CpuLoadHistoryAggregated)

class CpuStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["groupSize"] = _vmkctl.CpuStats_groupSize_set
    __swig_getmethods__["groupSize"] = _vmkctl.CpuStats_groupSize_get
    if _newclass:groupSize = _swig_property(_vmkctl.CpuStats_groupSize_get, _vmkctl.CpuStats_groupSize_set)
    __swig_setmethods__["numVsmps"] = _vmkctl.CpuStats_numVsmps_set
    __swig_getmethods__["numVsmps"] = _vmkctl.CpuStats_numVsmps_get
    if _newclass:numVsmps = _swig_property(_vmkctl.CpuStats_numVsmps_get, _vmkctl.CpuStats_numVsmps_set)
    __swig_setmethods__["usedTime"] = _vmkctl.CpuStats_usedTime_set
    __swig_getmethods__["usedTime"] = _vmkctl.CpuStats_usedTime_get
    if _newclass:usedTime = _swig_property(_vmkctl.CpuStats_usedTime_get, _vmkctl.CpuStats_usedTime_set)
    __swig_setmethods__["cpuLatency"] = _vmkctl.CpuStats_cpuLatency_set
    __swig_getmethods__["cpuLatency"] = _vmkctl.CpuStats_cpuLatency_get
    if _newclass:cpuLatency = _swig_property(_vmkctl.CpuStats_cpuLatency_get, _vmkctl.CpuStats_cpuLatency_set)
    __swig_setmethods__["swapLatency"] = _vmkctl.CpuStats_swapLatency_set
    __swig_getmethods__["swapLatency"] = _vmkctl.CpuStats_swapLatency_get
    if _newclass:swapLatency = _swig_property(_vmkctl.CpuStats_swapLatency_get, _vmkctl.CpuStats_swapLatency_set)
    __swig_setmethods__["compressLatency"] = _vmkctl.CpuStats_compressLatency_set
    __swig_getmethods__["compressLatency"] = _vmkctl.CpuStats_compressLatency_get
    if _newclass:compressLatency = _swig_property(_vmkctl.CpuStats_compressLatency_get, _vmkctl.CpuStats_compressLatency_set)
    __swig_setmethods__["effectiveMin"] = _vmkctl.CpuStats_effectiveMin_set
    __swig_getmethods__["effectiveMin"] = _vmkctl.CpuStats_effectiveMin_get
    if _newclass:effectiveMin = _swig_property(_vmkctl.CpuStats_effectiveMin_get, _vmkctl.CpuStats_effectiveMin_set)
    __swig_setmethods__["virtualTime"] = _vmkctl.CpuStats_virtualTime_set
    __swig_getmethods__["virtualTime"] = _vmkctl.CpuStats_virtualTime_get
    if _newclass:virtualTime = _swig_property(_vmkctl.CpuStats_virtualTime_get, _vmkctl.CpuStats_virtualTime_set)
    __swig_setmethods__["virtualTimeLimit"] = _vmkctl.CpuStats_virtualTimeLimit_set
    __swig_getmethods__["virtualTimeLimit"] = _vmkctl.CpuStats_virtualTimeLimit_get
    if _newclass:virtualTimeLimit = _swig_property(_vmkctl.CpuStats_virtualTimeLimit_get, _vmkctl.CpuStats_virtualTimeLimit_set)
    __swig_setmethods__["virtualTimeAged"] = _vmkctl.CpuStats_virtualTimeAged_set
    __swig_getmethods__["virtualTimeAged"] = _vmkctl.CpuStats_virtualTimeAged_get
    if _newclass:virtualTimeAged = _swig_property(_vmkctl.CpuStats_virtualTimeAged_get, _vmkctl.CpuStats_virtualTimeAged_set)
    __swig_setmethods__["entitlementRatio"] = _vmkctl.CpuStats_entitlementRatio_set
    __swig_getmethods__["entitlementRatio"] = _vmkctl.CpuStats_entitlementRatio_get
    if _newclass:entitlementRatio = _swig_property(_vmkctl.CpuStats_entitlementRatio_get, _vmkctl.CpuStats_entitlementRatio_set)
    def __init__(self): 
        this = _vmkctl.new_CpuStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_CpuStats
    __del__ = lambda self : None;
CpuStats_swigregister = _vmkctl.CpuStats_swigregister
CpuStats_swigregister(CpuStats)

class CpuTimes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuTimes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CpuTimes, name)
    __repr__ = _swig_repr
    __swig_setmethods__["upTime"] = _vmkctl.CpuTimes_upTime_set
    __swig_getmethods__["upTime"] = _vmkctl.CpuTimes_upTime_get
    if _newclass:upTime = _swig_property(_vmkctl.CpuTimes_upTime_get, _vmkctl.CpuTimes_upTime_set)
    __swig_setmethods__["usedTime"] = _vmkctl.CpuTimes_usedTime_set
    __swig_getmethods__["usedTime"] = _vmkctl.CpuTimes_usedTime_get
    if _newclass:usedTime = _swig_property(_vmkctl.CpuTimes_usedTime_get, _vmkctl.CpuTimes_usedTime_set)
    __swig_setmethods__["systemTime"] = _vmkctl.CpuTimes_systemTime_set
    __swig_getmethods__["systemTime"] = _vmkctl.CpuTimes_systemTime_get
    if _newclass:systemTime = _swig_property(_vmkctl.CpuTimes_systemTime_get, _vmkctl.CpuTimes_systemTime_set)
    __swig_setmethods__["sysOverlapTime"] = _vmkctl.CpuTimes_sysOverlapTime_set
    __swig_getmethods__["sysOverlapTime"] = _vmkctl.CpuTimes_sysOverlapTime_get
    if _newclass:sysOverlapTime = _swig_property(_vmkctl.CpuTimes_sysOverlapTime_get, _vmkctl.CpuTimes_sysOverlapTime_set)
    __swig_setmethods__["runTime"] = _vmkctl.CpuTimes_runTime_set
    __swig_getmethods__["runTime"] = _vmkctl.CpuTimes_runTime_get
    if _newclass:runTime = _swig_property(_vmkctl.CpuTimes_runTime_get, _vmkctl.CpuTimes_runTime_set)
    __swig_setmethods__["waitTime"] = _vmkctl.CpuTimes_waitTime_set
    __swig_getmethods__["waitTime"] = _vmkctl.CpuTimes_waitTime_get
    if _newclass:waitTime = _swig_property(_vmkctl.CpuTimes_waitTime_get, _vmkctl.CpuTimes_waitTime_set)
    __swig_setmethods__["busyWaitTime"] = _vmkctl.CpuTimes_busyWaitTime_set
    __swig_getmethods__["busyWaitTime"] = _vmkctl.CpuTimes_busyWaitTime_get
    if _newclass:busyWaitTime = _swig_property(_vmkctl.CpuTimes_busyWaitTime_get, _vmkctl.CpuTimes_busyWaitTime_set)
    __swig_setmethods__["totalWaitTime"] = _vmkctl.CpuTimes_totalWaitTime_set
    __swig_getmethods__["totalWaitTime"] = _vmkctl.CpuTimes_totalWaitTime_get
    if _newclass:totalWaitTime = _swig_property(_vmkctl.CpuTimes_totalWaitTime_get, _vmkctl.CpuTimes_totalWaitTime_set)
    __swig_setmethods__["coStopTime"] = _vmkctl.CpuTimes_coStopTime_set
    __swig_getmethods__["coStopTime"] = _vmkctl.CpuTimes_coStopTime_get
    if _newclass:coStopTime = _swig_property(_vmkctl.CpuTimes_coStopTime_get, _vmkctl.CpuTimes_coStopTime_set)
    __swig_setmethods__["idleTime"] = _vmkctl.CpuTimes_idleTime_set
    __swig_getmethods__["idleTime"] = _vmkctl.CpuTimes_idleTime_get
    if _newclass:idleTime = _swig_property(_vmkctl.CpuTimes_idleTime_get, _vmkctl.CpuTimes_idleTime_set)
    __swig_setmethods__["readyTime"] = _vmkctl.CpuTimes_readyTime_set
    __swig_getmethods__["readyTime"] = _vmkctl.CpuTimes_readyTime_get
    if _newclass:readyTime = _swig_property(_vmkctl.CpuTimes_readyTime_get, _vmkctl.CpuTimes_readyTime_set)
    __swig_setmethods__["maxLimitedTime"] = _vmkctl.CpuTimes_maxLimitedTime_set
    __swig_getmethods__["maxLimitedTime"] = _vmkctl.CpuTimes_maxLimitedTime_get
    if _newclass:maxLimitedTime = _swig_property(_vmkctl.CpuTimes_maxLimitedTime_get, _vmkctl.CpuTimes_maxLimitedTime_set)
    __swig_setmethods__["vmkTime"] = _vmkctl.CpuTimes_vmkTime_set
    __swig_getmethods__["vmkTime"] = _vmkctl.CpuTimes_vmkTime_get
    if _newclass:vmkTime = _swig_property(_vmkctl.CpuTimes_vmkTime_get, _vmkctl.CpuTimes_vmkTime_set)
    __swig_setmethods__["guestTime"] = _vmkctl.CpuTimes_guestTime_set
    __swig_getmethods__["guestTime"] = _vmkctl.CpuTimes_guestTime_get
    if _newclass:guestTime = _swig_property(_vmkctl.CpuTimes_guestTime_get, _vmkctl.CpuTimes_guestTime_set)
    def __init__(self): 
        this = _vmkctl.new_CpuTimes()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_CpuTimes
    __del__ = lambda self : None;
CpuTimes_swigregister = _vmkctl.CpuTimes_swigregister
CpuTimes_swigregister(CpuTimes)

class VcpuStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VcpuStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VcpuStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["swapLatency"] = _vmkctl.VcpuStats_swapLatency_set
    __swig_getmethods__["swapLatency"] = _vmkctl.VcpuStats_swapLatency_get
    if _newclass:swapLatency = _swig_property(_vmkctl.VcpuStats_swapLatency_get, _vmkctl.VcpuStats_swapLatency_set)
    __swig_setmethods__["compressLatency"] = _vmkctl.VcpuStats_compressLatency_set
    __swig_getmethods__["compressLatency"] = _vmkctl.VcpuStats_compressLatency_get
    if _newclass:compressLatency = _swig_property(_vmkctl.VcpuStats_compressLatency_get, _vmkctl.VcpuStats_compressLatency_set)
    def __init__(self): 
        this = _vmkctl.new_VcpuStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VcpuStats
    __del__ = lambda self : None;
VcpuStats_swigregister = _vmkctl.VcpuStats_swigregister
VcpuStats_swigregister(VcpuStats)

class HostCpuStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostCpuStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostCpuStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["usedTime"] = _vmkctl.HostCpuStats_usedTime_set
    __swig_getmethods__["usedTime"] = _vmkctl.HostCpuStats_usedTime_get
    if _newclass:usedTime = _swig_property(_vmkctl.HostCpuStats_usedTime_get, _vmkctl.HostCpuStats_usedTime_set)
    __swig_setmethods__["idleTime"] = _vmkctl.HostCpuStats_idleTime_set
    __swig_getmethods__["idleTime"] = _vmkctl.HostCpuStats_idleTime_get
    if _newclass:idleTime = _swig_property(_vmkctl.HostCpuStats_idleTime_get, _vmkctl.HostCpuStats_idleTime_set)
    __swig_setmethods__["haltTime"] = _vmkctl.HostCpuStats_haltTime_set
    __swig_getmethods__["haltTime"] = _vmkctl.HostCpuStats_haltTime_get
    if _newclass:haltTime = _swig_property(_vmkctl.HostCpuStats_haltTime_get, _vmkctl.HostCpuStats_haltTime_set)
    __swig_setmethods__["coreHaltTime"] = _vmkctl.HostCpuStats_coreHaltTime_set
    __swig_getmethods__["coreHaltTime"] = _vmkctl.HostCpuStats_coreHaltTime_get
    if _newclass:coreHaltTime = _swig_property(_vmkctl.HostCpuStats_coreHaltTime_get, _vmkctl.HostCpuStats_coreHaltTime_set)
    __swig_setmethods__["elapsedTime"] = _vmkctl.HostCpuStats_elapsedTime_set
    __swig_getmethods__["elapsedTime"] = _vmkctl.HostCpuStats_elapsedTime_get
    if _newclass:elapsedTime = _swig_property(_vmkctl.HostCpuStats_elapsedTime_get, _vmkctl.HostCpuStats_elapsedTime_set)
    def __init__(self): 
        this = _vmkctl.new_HostCpuStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_HostCpuStats
    __del__ = lambda self : None;
HostCpuStats_swigregister = _vmkctl.HostCpuStats_swigregister
HostCpuStats_swigregister(HostCpuStats)

class HostGpuStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostGpuStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostGpuStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["segment"] = _vmkctl.HostGpuStats_segment_set
    __swig_getmethods__["segment"] = _vmkctl.HostGpuStats_segment_get
    if _newclass:segment = _swig_property(_vmkctl.HostGpuStats_segment_get, _vmkctl.HostGpuStats_segment_set)
    __swig_setmethods__["bus"] = _vmkctl.HostGpuStats_bus_set
    __swig_getmethods__["bus"] = _vmkctl.HostGpuStats_bus_get
    if _newclass:bus = _swig_property(_vmkctl.HostGpuStats_bus_get, _vmkctl.HostGpuStats_bus_set)
    __swig_setmethods__["slot"] = _vmkctl.HostGpuStats_slot_set
    __swig_getmethods__["slot"] = _vmkctl.HostGpuStats_slot_get
    if _newclass:slot = _swig_property(_vmkctl.HostGpuStats_slot_get, _vmkctl.HostGpuStats_slot_set)
    __swig_setmethods__["func"] = _vmkctl.HostGpuStats_func_set
    __swig_getmethods__["func"] = _vmkctl.HostGpuStats_func_get
    if _newclass:func = _swig_property(_vmkctl.HostGpuStats_func_get, _vmkctl.HostGpuStats_func_set)
    __swig_setmethods__["utilization"] = _vmkctl.HostGpuStats_utilization_set
    __swig_getmethods__["utilization"] = _vmkctl.HostGpuStats_utilization_get
    if _newclass:utilization = _swig_property(_vmkctl.HostGpuStats_utilization_get, _vmkctl.HostGpuStats_utilization_set)
    __swig_setmethods__["memoryUsed"] = _vmkctl.HostGpuStats_memoryUsed_set
    __swig_getmethods__["memoryUsed"] = _vmkctl.HostGpuStats_memoryUsed_get
    if _newclass:memoryUsed = _swig_property(_vmkctl.HostGpuStats_memoryUsed_get, _vmkctl.HostGpuStats_memoryUsed_set)
    __swig_setmethods__["memoryTotal"] = _vmkctl.HostGpuStats_memoryTotal_set
    __swig_getmethods__["memoryTotal"] = _vmkctl.HostGpuStats_memoryTotal_get
    if _newclass:memoryTotal = _swig_property(_vmkctl.HostGpuStats_memoryTotal_get, _vmkctl.HostGpuStats_memoryTotal_set)
    __swig_setmethods__["temperature"] = _vmkctl.HostGpuStats_temperature_set
    __swig_getmethods__["temperature"] = _vmkctl.HostGpuStats_temperature_get
    if _newclass:temperature = _swig_property(_vmkctl.HostGpuStats_temperature_get, _vmkctl.HostGpuStats_temperature_set)
    __swig_setmethods__["driverVersion"] = _vmkctl.HostGpuStats_driverVersion_set
    __swig_getmethods__["driverVersion"] = _vmkctl.HostGpuStats_driverVersion_get
    if _newclass:driverVersion = _swig_property(_vmkctl.HostGpuStats_driverVersion_get, _vmkctl.HostGpuStats_driverVersion_set)
    def __init__(self): 
        this = _vmkctl.new_HostGpuStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_HostGpuStats
    __del__ = lambda self : None;
HostGpuStats_swigregister = _vmkctl.HostGpuStats_swigregister
HostGpuStats_swigregister(HostGpuStats)

class HostMemoryStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostMemoryStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostMemoryStats, name)
    __repr__ = _swig_repr
    MEMSTATE_HIGH = _vmkctl.HostMemoryStats_MEMSTATE_HIGH
    MEMSTATE_SOFT = _vmkctl.HostMemoryStats_MEMSTATE_SOFT
    MEMSTATE_HARD = _vmkctl.HostMemoryStats_MEMSTATE_HARD
    MEMSTATE_LOW = _vmkctl.HostMemoryStats_MEMSTATE_LOW
    MEMSTATE_UNKNOWN = _vmkctl.HostMemoryStats_MEMSTATE_UNKNOWN
    __swig_setmethods__["managed"] = _vmkctl.HostMemoryStats_managed_set
    __swig_getmethods__["managed"] = _vmkctl.HostMemoryStats_managed_get
    if _newclass:managed = _swig_property(_vmkctl.HostMemoryStats_managed_get, _vmkctl.HostMemoryStats_managed_set)
    __swig_setmethods__["kernel"] = _vmkctl.HostMemoryStats_kernel_set
    __swig_getmethods__["kernel"] = _vmkctl.HostMemoryStats_kernel_get
    if _newclass:kernel = _swig_property(_vmkctl.HostMemoryStats_kernel_get, _vmkctl.HostMemoryStats_kernel_set)
    __swig_setmethods__["free"] = _vmkctl.HostMemoryStats_free_set
    __swig_getmethods__["free"] = _vmkctl.HostMemoryStats_free_get
    if _newclass:free = _swig_property(_vmkctl.HostMemoryStats_free_get, _vmkctl.HostMemoryStats_free_set)
    __swig_setmethods__["minFree"] = _vmkctl.HostMemoryStats_minFree_set
    __swig_getmethods__["minFree"] = _vmkctl.HostMemoryStats_minFree_get
    if _newclass:minFree = _swig_property(_vmkctl.HostMemoryStats_minFree_get, _vmkctl.HostMemoryStats_minFree_set)
    __swig_setmethods__["excess"] = _vmkctl.HostMemoryStats_excess_set
    __swig_getmethods__["excess"] = _vmkctl.HostMemoryStats_excess_get
    if _newclass:excess = _swig_property(_vmkctl.HostMemoryStats_excess_get, _vmkctl.HostMemoryStats_excess_set)
    __swig_setmethods__["reservedMem"] = _vmkctl.HostMemoryStats_reservedMem_set
    __swig_getmethods__["reservedMem"] = _vmkctl.HostMemoryStats_reservedMem_get
    if _newclass:reservedMem = _swig_property(_vmkctl.HostMemoryStats_reservedMem_get, _vmkctl.HostMemoryStats_reservedMem_set)
    __swig_setmethods__["availMem"] = _vmkctl.HostMemoryStats_availMem_set
    __swig_getmethods__["availMem"] = _vmkctl.HostMemoryStats_availMem_get
    if _newclass:availMem = _swig_property(_vmkctl.HostMemoryStats_availMem_get, _vmkctl.HostMemoryStats_availMem_set)
    __swig_setmethods__["state"] = _vmkctl.HostMemoryStats_state_set
    __swig_getmethods__["state"] = _vmkctl.HostMemoryStats_state_get
    if _newclass:state = _swig_property(_vmkctl.HostMemoryStats_state_get, _vmkctl.HostMemoryStats_state_set)
    __swig_setmethods__["totalSwapRead"] = _vmkctl.HostMemoryStats_totalSwapRead_set
    __swig_getmethods__["totalSwapRead"] = _vmkctl.HostMemoryStats_totalSwapRead_get
    if _newclass:totalSwapRead = _swig_property(_vmkctl.HostMemoryStats_totalSwapRead_get, _vmkctl.HostMemoryStats_totalSwapRead_set)
    __swig_setmethods__["totalSwapWritten"] = _vmkctl.HostMemoryStats_totalSwapWritten_set
    __swig_getmethods__["totalSwapWritten"] = _vmkctl.HostMemoryStats_totalSwapWritten_get
    if _newclass:totalSwapWritten = _swig_property(_vmkctl.HostMemoryStats_totalSwapWritten_get, _vmkctl.HostMemoryStats_totalSwapWritten_set)
    __swig_setmethods__["totalLLSwapRead"] = _vmkctl.HostMemoryStats_totalLLSwapRead_set
    __swig_getmethods__["totalLLSwapRead"] = _vmkctl.HostMemoryStats_totalLLSwapRead_get
    if _newclass:totalLLSwapRead = _swig_property(_vmkctl.HostMemoryStats_totalLLSwapRead_get, _vmkctl.HostMemoryStats_totalLLSwapRead_set)
    __swig_setmethods__["totalLLSwapWritten"] = _vmkctl.HostMemoryStats_totalLLSwapWritten_set
    __swig_getmethods__["totalLLSwapWritten"] = _vmkctl.HostMemoryStats_totalLLSwapWritten_get
    if _newclass:totalLLSwapWritten = _swig_property(_vmkctl.HostMemoryStats_totalLLSwapWritten_get, _vmkctl.HostMemoryStats_totalLLSwapWritten_set)
    __swig_setmethods__["totalOvhd"] = _vmkctl.HostMemoryStats_totalOvhd_set
    __swig_getmethods__["totalOvhd"] = _vmkctl.HostMemoryStats_totalOvhd_get
    if _newclass:totalOvhd = _swig_property(_vmkctl.HostMemoryStats_totalOvhd_get, _vmkctl.HostMemoryStats_totalOvhd_set)
    __swig_setmethods__["totalSize"] = _vmkctl.HostMemoryStats_totalSize_set
    __swig_getmethods__["totalSize"] = _vmkctl.HostMemoryStats_totalSize_get
    if _newclass:totalSize = _swig_property(_vmkctl.HostMemoryStats_totalSize_get, _vmkctl.HostMemoryStats_totalSize_set)
    __swig_setmethods__["totalCow"] = _vmkctl.HostMemoryStats_totalCow_set
    __swig_getmethods__["totalCow"] = _vmkctl.HostMemoryStats_totalCow_get
    if _newclass:totalCow = _swig_property(_vmkctl.HostMemoryStats_totalCow_get, _vmkctl.HostMemoryStats_totalCow_set)
    __swig_setmethods__["totalZero"] = _vmkctl.HostMemoryStats_totalZero_set
    __swig_getmethods__["totalZero"] = _vmkctl.HostMemoryStats_totalZero_get
    if _newclass:totalZero = _swig_property(_vmkctl.HostMemoryStats_totalZero_get, _vmkctl.HostMemoryStats_totalZero_set)
    __swig_setmethods__["totalShared"] = _vmkctl.HostMemoryStats_totalShared_set
    __swig_getmethods__["totalShared"] = _vmkctl.HostMemoryStats_totalShared_get
    if _newclass:totalShared = _swig_property(_vmkctl.HostMemoryStats_totalShared_get, _vmkctl.HostMemoryStats_totalShared_set)
    __swig_setmethods__["totalBalloon"] = _vmkctl.HostMemoryStats_totalBalloon_set
    __swig_getmethods__["totalBalloon"] = _vmkctl.HostMemoryStats_totalBalloon_get
    if _newclass:totalBalloon = _swig_property(_vmkctl.HostMemoryStats_totalBalloon_get, _vmkctl.HostMemoryStats_totalBalloon_set)
    __swig_setmethods__["totalSwapped"] = _vmkctl.HostMemoryStats_totalSwapped_set
    __swig_getmethods__["totalSwapped"] = _vmkctl.HostMemoryStats_totalSwapped_get
    if _newclass:totalSwapped = _swig_property(_vmkctl.HostMemoryStats_totalSwapped_get, _vmkctl.HostMemoryStats_totalSwapped_set)
    __swig_setmethods__["totalLLSwapped"] = _vmkctl.HostMemoryStats_totalLLSwapped_set
    __swig_getmethods__["totalLLSwapped"] = _vmkctl.HostMemoryStats_totalLLSwapped_get
    if _newclass:totalLLSwapped = _swig_property(_vmkctl.HostMemoryStats_totalLLSwapped_get, _vmkctl.HostMemoryStats_totalLLSwapped_set)
    __swig_setmethods__["totalTouched"] = _vmkctl.HostMemoryStats_totalTouched_set
    __swig_getmethods__["totalTouched"] = _vmkctl.HostMemoryStats_totalTouched_get
    if _newclass:totalTouched = _swig_property(_vmkctl.HostMemoryStats_totalTouched_get, _vmkctl.HostMemoryStats_totalTouched_set)
    __swig_setmethods__["totalTouchedWrite"] = _vmkctl.HostMemoryStats_totalTouchedWrite_set
    __swig_getmethods__["totalTouchedWrite"] = _vmkctl.HostMemoryStats_totalTouchedWrite_get
    if _newclass:totalTouchedWrite = _swig_property(_vmkctl.HostMemoryStats_totalTouchedWrite_get, _vmkctl.HostMemoryStats_totalTouchedWrite_set)
    __swig_setmethods__["totalAlloc"] = _vmkctl.HostMemoryStats_totalAlloc_set
    __swig_getmethods__["totalAlloc"] = _vmkctl.HostMemoryStats_totalAlloc_get
    if _newclass:totalAlloc = _swig_property(_vmkctl.HostMemoryStats_totalAlloc_get, _vmkctl.HostMemoryStats_totalAlloc_set)
    __swig_setmethods__["totalTarget"] = _vmkctl.HostMemoryStats_totalTarget_set
    __swig_getmethods__["totalTarget"] = _vmkctl.HostMemoryStats_totalTarget_get
    if _newclass:totalTarget = _swig_property(_vmkctl.HostMemoryStats_totalTarget_get, _vmkctl.HostMemoryStats_totalTarget_set)
    __swig_setmethods__["totalSwapTarget"] = _vmkctl.HostMemoryStats_totalSwapTarget_set
    __swig_getmethods__["totalSwapTarget"] = _vmkctl.HostMemoryStats_totalSwapTarget_get
    if _newclass:totalSwapTarget = _swig_property(_vmkctl.HostMemoryStats_totalSwapTarget_get, _vmkctl.HostMemoryStats_totalSwapTarget_set)
    __swig_setmethods__["totalBalloonTarget"] = _vmkctl.HostMemoryStats_totalBalloonTarget_set
    __swig_getmethods__["totalBalloonTarget"] = _vmkctl.HostMemoryStats_totalBalloonTarget_get
    if _newclass:totalBalloonTarget = _swig_property(_vmkctl.HostMemoryStats_totalBalloonTarget_get, _vmkctl.HostMemoryStats_totalBalloonTarget_set)
    def __init__(self): 
        this = _vmkctl.new_HostMemoryStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_HostMemoryStats
    __del__ = lambda self : None;
HostMemoryStats_swigregister = _vmkctl.HostMemoryStats_swigregister
HostMemoryStats_swigregister(HostMemoryStats)

class HostMemMapStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostMemMapStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostMemMapStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["totalMemory"] = _vmkctl.HostMemMapStats_totalMemory_set
    __swig_getmethods__["totalMemory"] = _vmkctl.HostMemMapStats_totalMemory_get
    if _newclass:totalMemory = _swig_property(_vmkctl.HostMemMapStats_totalMemory_get, _vmkctl.HostMemMapStats_totalMemory_set)
    __swig_setmethods__["sharedCow"] = _vmkctl.HostMemMapStats_sharedCow_set
    __swig_getmethods__["sharedCow"] = _vmkctl.HostMemMapStats_sharedCow_get
    if _newclass:sharedCow = _swig_property(_vmkctl.HostMemMapStats_sharedCow_get, _vmkctl.HostMemMapStats_sharedCow_set)
    __swig_setmethods__["sharedCommon"] = _vmkctl.HostMemMapStats_sharedCommon_set
    __swig_getmethods__["sharedCommon"] = _vmkctl.HostMemMapStats_sharedCommon_get
    if _newclass:sharedCommon = _swig_property(_vmkctl.HostMemMapStats_sharedCommon_get, _vmkctl.HostMemMapStats_sharedCommon_set)
    __swig_setmethods__["sysHeapSize"] = _vmkctl.HostMemMapStats_sysHeapSize_set
    __swig_getmethods__["sysHeapSize"] = _vmkctl.HostMemMapStats_sysHeapSize_get
    if _newclass:sysHeapSize = _swig_property(_vmkctl.HostMemMapStats_sysHeapSize_get, _vmkctl.HostMemMapStats_sysHeapSize_set)
    __swig_setmethods__["sysHeapFree"] = _vmkctl.HostMemMapStats_sysHeapFree_set
    __swig_getmethods__["sysHeapFree"] = _vmkctl.HostMemMapStats_sysHeapFree_get
    if _newclass:sysHeapFree = _swig_property(_vmkctl.HostMemMapStats_sysHeapFree_get, _vmkctl.HostMemMapStats_sysHeapFree_set)
    __swig_setmethods__["sysCodeSize"] = _vmkctl.HostMemMapStats_sysCodeSize_set
    __swig_getmethods__["sysCodeSize"] = _vmkctl.HostMemMapStats_sysCodeSize_get
    if _newclass:sysCodeSize = _swig_property(_vmkctl.HostMemMapStats_sysCodeSize_get, _vmkctl.HostMemMapStats_sysCodeSize_set)
    __swig_setmethods__["sysMemUsage"] = _vmkctl.HostMemMapStats_sysMemUsage_set
    __swig_getmethods__["sysMemUsage"] = _vmkctl.HostMemMapStats_sysMemUsage_get
    if _newclass:sysMemUsage = _swig_property(_vmkctl.HostMemMapStats_sysMemUsage_get, _vmkctl.HostMemMapStats_sysMemUsage_set)
    def __init__(self): 
        this = _vmkctl.new_HostMemMapStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_HostMemMapStats
    __del__ = lambda self : None;
HostMemMapStats_swigregister = _vmkctl.HostMemMapStats_swigregister
HostMemMapStats_swigregister(HostMemMapStats)

class HostPowerStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostPowerStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostPowerStats, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_HostPowerStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["power"] = _vmkctl.HostPowerStats_power_set
    __swig_getmethods__["power"] = _vmkctl.HostPowerStats_power_get
    if _newclass:power = _swig_property(_vmkctl.HostPowerStats_power_get, _vmkctl.HostPowerStats_power_set)
    __swig_setmethods__["powerCap"] = _vmkctl.HostPowerStats_powerCap_set
    __swig_getmethods__["powerCap"] = _vmkctl.HostPowerStats_powerCap_get
    if _newclass:powerCap = _swig_property(_vmkctl.HostPowerStats_powerCap_get, _vmkctl.HostPowerStats_powerCap_set)
    __swig_setmethods__["energy"] = _vmkctl.HostPowerStats_energy_set
    __swig_getmethods__["energy"] = _vmkctl.HostPowerStats_energy_get
    if _newclass:energy = _swig_property(_vmkctl.HostPowerStats_energy_get, _vmkctl.HostPowerStats_energy_set)
    __swig_destroy__ = _vmkctl.delete_HostPowerStats
    __del__ = lambda self : None;
HostPowerStats_swigregister = _vmkctl.HostPowerStats_swigregister
HostPowerStats_swigregister(HostPowerStats)

class HostCapacity(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostCapacity, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostCapacity, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cpu"] = _vmkctl.HostCapacity_cpu_set
    __swig_getmethods__["cpu"] = _vmkctl.HostCapacity_cpu_get
    if _newclass:cpu = _swig_property(_vmkctl.HostCapacity_cpu_get, _vmkctl.HostCapacity_cpu_set)
    __swig_setmethods__["memory"] = _vmkctl.HostCapacity_memory_set
    __swig_getmethods__["memory"] = _vmkctl.HostCapacity_memory_get
    if _newclass:memory = _swig_property(_vmkctl.HostCapacity_memory_get, _vmkctl.HostCapacity_memory_set)
    __swig_setmethods__["cpuReserved"] = _vmkctl.HostCapacity_cpuReserved_set
    __swig_getmethods__["cpuReserved"] = _vmkctl.HostCapacity_cpuReserved_get
    if _newclass:cpuReserved = _swig_property(_vmkctl.HostCapacity_cpuReserved_get, _vmkctl.HostCapacity_cpuReserved_set)
    __swig_setmethods__["memoryReserved"] = _vmkctl.HostCapacity_memoryReserved_set
    __swig_getmethods__["memoryReserved"] = _vmkctl.HostCapacity_memoryReserved_get
    if _newclass:memoryReserved = _swig_property(_vmkctl.HostCapacity_memoryReserved_get, _vmkctl.HostCapacity_memoryReserved_set)
    def __init__(self): 
        this = _vmkctl.new_HostCapacity()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_HostCapacity
    __del__ = lambda self : None;
HostCapacity_swigregister = _vmkctl.HostCapacity_swigregister
HostCapacity_swigregister(HostCapacity)

class MemoryStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["numClients"] = _vmkctl.MemoryStats_numClients_set
    __swig_getmethods__["numClients"] = _vmkctl.MemoryStats_numClients_get
    if _newclass:numClients = _swig_property(_vmkctl.MemoryStats_numClients_get, _vmkctl.MemoryStats_numClients_set)
    __swig_setmethods__["sharedMemory"] = _vmkctl.MemoryStats_sharedMemory_set
    __swig_getmethods__["sharedMemory"] = _vmkctl.MemoryStats_sharedMemory_get
    if _newclass:sharedMemory = _swig_property(_vmkctl.MemoryStats_sharedMemory_get, _vmkctl.MemoryStats_sharedMemory_set)
    __swig_setmethods__["sharedZeroMemory"] = _vmkctl.MemoryStats_sharedZeroMemory_set
    __swig_getmethods__["sharedZeroMemory"] = _vmkctl.MemoryStats_sharedZeroMemory_get
    if _newclass:sharedZeroMemory = _swig_property(_vmkctl.MemoryStats_sharedZeroMemory_get, _vmkctl.MemoryStats_sharedZeroMemory_set)
    __swig_setmethods__["cowMemory"] = _vmkctl.MemoryStats_cowMemory_set
    __swig_getmethods__["cowMemory"] = _vmkctl.MemoryStats_cowMemory_get
    if _newclass:cowMemory = _swig_property(_vmkctl.MemoryStats_cowMemory_get, _vmkctl.MemoryStats_cowMemory_set)
    __swig_setmethods__["balloonedMemory"] = _vmkctl.MemoryStats_balloonedMemory_set
    __swig_getmethods__["balloonedMemory"] = _vmkctl.MemoryStats_balloonedMemory_get
    if _newclass:balloonedMemory = _swig_property(_vmkctl.MemoryStats_balloonedMemory_get, _vmkctl.MemoryStats_balloonedMemory_set)
    __swig_setmethods__["swappedMemory"] = _vmkctl.MemoryStats_swappedMemory_set
    __swig_getmethods__["swappedMemory"] = _vmkctl.MemoryStats_swappedMemory_get
    if _newclass:swappedMemory = _swig_property(_vmkctl.MemoryStats_swappedMemory_get, _vmkctl.MemoryStats_swappedMemory_set)
    __swig_setmethods__["mappedMemory"] = _vmkctl.MemoryStats_mappedMemory_set
    __swig_getmethods__["mappedMemory"] = _vmkctl.MemoryStats_mappedMemory_get
    if _newclass:mappedMemory = _swig_property(_vmkctl.MemoryStats_mappedMemory_get, _vmkctl.MemoryStats_mappedMemory_set)
    __swig_setmethods__["touched"] = _vmkctl.MemoryStats_touched_set
    __swig_getmethods__["touched"] = _vmkctl.MemoryStats_touched_get
    if _newclass:touched = _swig_property(_vmkctl.MemoryStats_touched_get, _vmkctl.MemoryStats_touched_set)
    __swig_setmethods__["overheadMemory"] = _vmkctl.MemoryStats_overheadMemory_set
    __swig_getmethods__["overheadMemory"] = _vmkctl.MemoryStats_overheadMemory_get
    if _newclass:overheadMemory = _swig_property(_vmkctl.MemoryStats_overheadMemory_get, _vmkctl.MemoryStats_overheadMemory_set)
    __swig_setmethods__["baseMin"] = _vmkctl.MemoryStats_baseMin_set
    __swig_getmethods__["baseMin"] = _vmkctl.MemoryStats_baseMin_get
    if _newclass:baseMin = _swig_property(_vmkctl.MemoryStats_baseMin_get, _vmkctl.MemoryStats_baseMin_set)
    __swig_setmethods__["baseMax"] = _vmkctl.MemoryStats_baseMax_set
    __swig_getmethods__["baseMax"] = _vmkctl.MemoryStats_baseMax_get
    if _newclass:baseMax = _swig_property(_vmkctl.MemoryStats_baseMax_get, _vmkctl.MemoryStats_baseMax_set)
    __swig_setmethods__["effectiveMin"] = _vmkctl.MemoryStats_effectiveMin_set
    __swig_getmethods__["effectiveMin"] = _vmkctl.MemoryStats_effectiveMin_get
    if _newclass:effectiveMin = _swig_property(_vmkctl.MemoryStats_effectiveMin_get, _vmkctl.MemoryStats_effectiveMin_set)
    __swig_setmethods__["targetAllocation"] = _vmkctl.MemoryStats_targetAllocation_set
    __swig_getmethods__["targetAllocation"] = _vmkctl.MemoryStats_targetAllocation_get
    if _newclass:targetAllocation = _swig_property(_vmkctl.MemoryStats_targetAllocation_get, _vmkctl.MemoryStats_targetAllocation_set)
    __swig_setmethods__["consumedMemory"] = _vmkctl.MemoryStats_consumedMemory_set
    __swig_getmethods__["consumedMemory"] = _vmkctl.MemoryStats_consumedMemory_get
    if _newclass:consumedMemory = _swig_property(_vmkctl.MemoryStats_consumedMemory_get, _vmkctl.MemoryStats_consumedMemory_set)
    __swig_setmethods__["overheadReserved"] = _vmkctl.MemoryStats_overheadReserved_set
    __swig_getmethods__["overheadReserved"] = _vmkctl.MemoryStats_overheadReserved_get
    if _newclass:overheadReserved = _swig_property(_vmkctl.MemoryStats_overheadReserved_get, _vmkctl.MemoryStats_overheadReserved_set)
    __swig_setmethods__["requestedMinPeak"] = _vmkctl.MemoryStats_requestedMinPeak_set
    __swig_getmethods__["requestedMinPeak"] = _vmkctl.MemoryStats_requestedMinPeak_get
    if _newclass:requestedMinPeak = _swig_property(_vmkctl.MemoryStats_requestedMinPeak_get, _vmkctl.MemoryStats_requestedMinPeak_set)
    def __init__(self): 
        this = _vmkctl.new_MemoryStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_MemoryStats
    __del__ = lambda self : None;
MemoryStats_swigregister = _vmkctl.MemoryStats_swigregister
MemoryStats_swigregister(MemoryStats)

class MemoryClientStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryClientStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryClientStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["touched"] = _vmkctl.MemoryClientStats_touched_set
    __swig_getmethods__["touched"] = _vmkctl.MemoryClientStats_touched_get
    if _newclass:touched = _swig_property(_vmkctl.MemoryClientStats_touched_get, _vmkctl.MemoryClientStats_touched_set)
    __swig_setmethods__["mapped"] = _vmkctl.MemoryClientStats_mapped_set
    __swig_getmethods__["mapped"] = _vmkctl.MemoryClientStats_mapped_get
    if _newclass:mapped = _swig_property(_vmkctl.MemoryClientStats_mapped_get, _vmkctl.MemoryClientStats_mapped_set)
    __swig_setmethods__["memSize"] = _vmkctl.MemoryClientStats_memSize_set
    __swig_getmethods__["memSize"] = _vmkctl.MemoryClientStats_memSize_get
    if _newclass:memSize = _swig_property(_vmkctl.MemoryClientStats_memSize_get, _vmkctl.MemoryClientStats_memSize_set)
    __swig_setmethods__["targetSize"] = _vmkctl.MemoryClientStats_targetSize_set
    __swig_getmethods__["targetSize"] = _vmkctl.MemoryClientStats_targetSize_get
    if _newclass:targetSize = _swig_property(_vmkctl.MemoryClientStats_targetSize_get, _vmkctl.MemoryClientStats_targetSize_set)
    __swig_setmethods__["shared"] = _vmkctl.MemoryClientStats_shared_set
    __swig_getmethods__["shared"] = _vmkctl.MemoryClientStats_shared_get
    if _newclass:shared = _swig_property(_vmkctl.MemoryClientStats_shared_get, _vmkctl.MemoryClientStats_shared_set)
    __swig_setmethods__["zero"] = _vmkctl.MemoryClientStats_zero_set
    __swig_getmethods__["zero"] = _vmkctl.MemoryClientStats_zero_get
    if _newclass:zero = _swig_property(_vmkctl.MemoryClientStats_zero_get, _vmkctl.MemoryClientStats_zero_set)
    __swig_setmethods__["sharedSaved"] = _vmkctl.MemoryClientStats_sharedSaved_set
    __swig_getmethods__["sharedSaved"] = _vmkctl.MemoryClientStats_sharedSaved_get
    if _newclass:sharedSaved = _swig_property(_vmkctl.MemoryClientStats_sharedSaved_get, _vmkctl.MemoryClientStats_sharedSaved_set)
    __swig_setmethods__["overhead"] = _vmkctl.MemoryClientStats_overhead_set
    __swig_getmethods__["overhead"] = _vmkctl.MemoryClientStats_overhead_get
    if _newclass:overhead = _swig_property(_vmkctl.MemoryClientStats_overhead_get, _vmkctl.MemoryClientStats_overhead_set)
    __swig_setmethods__["overheadMax"] = _vmkctl.MemoryClientStats_overheadMax_set
    __swig_getmethods__["overheadMax"] = _vmkctl.MemoryClientStats_overheadMax_get
    if _newclass:overheadMax = _swig_property(_vmkctl.MemoryClientStats_overheadMax_get, _vmkctl.MemoryClientStats_overheadMax_set)
    __swig_setmethods__["overheadTouched"] = _vmkctl.MemoryClientStats_overheadTouched_set
    __swig_getmethods__["overheadTouched"] = _vmkctl.MemoryClientStats_overheadTouched_get
    if _newclass:overheadTouched = _swig_property(_vmkctl.MemoryClientStats_overheadTouched_get, _vmkctl.MemoryClientStats_overheadTouched_set)
    __swig_setmethods__["minCommitTarget"] = _vmkctl.MemoryClientStats_minCommitTarget_set
    __swig_getmethods__["minCommitTarget"] = _vmkctl.MemoryClientStats_minCommitTarget_get
    if _newclass:minCommitTarget = _swig_property(_vmkctl.MemoryClientStats_minCommitTarget_get, _vmkctl.MemoryClientStats_minCommitTarget_set)
    __swig_setmethods__["commitTarget"] = _vmkctl.MemoryClientStats_commitTarget_set
    __swig_getmethods__["commitTarget"] = _vmkctl.MemoryClientStats_commitTarget_get
    if _newclass:commitTarget = _swig_property(_vmkctl.MemoryClientStats_commitTarget_get, _vmkctl.MemoryClientStats_commitTarget_set)
    __swig_setmethods__["commitCharged"] = _vmkctl.MemoryClientStats_commitCharged_set
    __swig_getmethods__["commitCharged"] = _vmkctl.MemoryClientStats_commitCharged_get
    if _newclass:commitCharged = _swig_property(_vmkctl.MemoryClientStats_commitCharged_get, _vmkctl.MemoryClientStats_commitCharged_set)
    __swig_setmethods__["clientResponsive"] = _vmkctl.MemoryClientStats_clientResponsive_set
    __swig_getmethods__["clientResponsive"] = _vmkctl.MemoryClientStats_clientResponsive_get
    if _newclass:clientResponsive = _swig_property(_vmkctl.MemoryClientStats_clientResponsive_get, _vmkctl.MemoryClientStats_clientResponsive_set)
    __swig_setmethods__["touchedWrite"] = _vmkctl.MemoryClientStats_touchedWrite_set
    __swig_getmethods__["touchedWrite"] = _vmkctl.MemoryClientStats_touchedWrite_get
    if _newclass:touchedWrite = _swig_property(_vmkctl.MemoryClientStats_touchedWrite_get, _vmkctl.MemoryClientStats_touchedWrite_set)
    __swig_setmethods__["swapped"] = _vmkctl.MemoryClientStats_swapped_set
    __swig_getmethods__["swapped"] = _vmkctl.MemoryClientStats_swapped_get
    if _newclass:swapped = _swig_property(_vmkctl.MemoryClientStats_swapped_get, _vmkctl.MemoryClientStats_swapped_set)
    __swig_setmethods__["zipped"] = _vmkctl.MemoryClientStats_zipped_set
    __swig_getmethods__["zipped"] = _vmkctl.MemoryClientStats_zipped_get
    if _newclass:zipped = _swig_property(_vmkctl.MemoryClientStats_zipped_get, _vmkctl.MemoryClientStats_zipped_set)
    __swig_setmethods__["zipSaved"] = _vmkctl.MemoryClientStats_zipSaved_set
    __swig_getmethods__["zipSaved"] = _vmkctl.MemoryClientStats_zipSaved_get
    if _newclass:zipSaved = _swig_property(_vmkctl.MemoryClientStats_zipSaved_get, _vmkctl.MemoryClientStats_zipSaved_set)
    __swig_setmethods__["balloonActive"] = _vmkctl.MemoryClientStats_balloonActive_set
    __swig_getmethods__["balloonActive"] = _vmkctl.MemoryClientStats_balloonActive_get
    if _newclass:balloonActive = _swig_property(_vmkctl.MemoryClientStats_balloonActive_get, _vmkctl.MemoryClientStats_balloonActive_set)
    __swig_setmethods__["balloonSize"] = _vmkctl.MemoryClientStats_balloonSize_set
    __swig_getmethods__["balloonSize"] = _vmkctl.MemoryClientStats_balloonSize_get
    if _newclass:balloonSize = _swig_property(_vmkctl.MemoryClientStats_balloonSize_get, _vmkctl.MemoryClientStats_balloonSize_set)
    __swig_setmethods__["balloonTarget"] = _vmkctl.MemoryClientStats_balloonTarget_set
    __swig_getmethods__["balloonTarget"] = _vmkctl.MemoryClientStats_balloonTarget_get
    if _newclass:balloonTarget = _swig_property(_vmkctl.MemoryClientStats_balloonTarget_get, _vmkctl.MemoryClientStats_balloonTarget_set)
    __swig_setmethods__["balloonMax"] = _vmkctl.MemoryClientStats_balloonMax_set
    __swig_getmethods__["balloonMax"] = _vmkctl.MemoryClientStats_balloonMax_get
    if _newclass:balloonMax = _swig_property(_vmkctl.MemoryClientStats_balloonMax_get, _vmkctl.MemoryClientStats_balloonMax_set)
    __swig_setmethods__["cptRead"] = _vmkctl.MemoryClientStats_cptRead_set
    __swig_getmethods__["cptRead"] = _vmkctl.MemoryClientStats_cptRead_get
    if _newclass:cptRead = _swig_property(_vmkctl.MemoryClientStats_cptRead_get, _vmkctl.MemoryClientStats_cptRead_set)
    __swig_setmethods__["cptTarget"] = _vmkctl.MemoryClientStats_cptTarget_set
    __swig_getmethods__["cptTarget"] = _vmkctl.MemoryClientStats_cptTarget_get
    if _newclass:cptTarget = _swig_property(_vmkctl.MemoryClientStats_cptTarget_get, _vmkctl.MemoryClientStats_cptTarget_set)
    __swig_setmethods__["cowHint"] = _vmkctl.MemoryClientStats_cowHint_set
    __swig_getmethods__["cowHint"] = _vmkctl.MemoryClientStats_cowHint_get
    if _newclass:cowHint = _swig_property(_vmkctl.MemoryClientStats_cowHint_get, _vmkctl.MemoryClientStats_cowHint_set)
    __swig_setmethods__["usedCacheSize"] = _vmkctl.MemoryClientStats_usedCacheSize_set
    __swig_getmethods__["usedCacheSize"] = _vmkctl.MemoryClientStats_usedCacheSize_get
    if _newclass:usedCacheSize = _swig_property(_vmkctl.MemoryClientStats_usedCacheSize_get, _vmkctl.MemoryClientStats_usedCacheSize_set)
    __swig_setmethods__["compressed"] = _vmkctl.MemoryClientStats_compressed_set
    __swig_getmethods__["compressed"] = _vmkctl.MemoryClientStats_compressed_get
    if _newclass:compressed = _swig_property(_vmkctl.MemoryClientStats_compressed_get, _vmkctl.MemoryClientStats_compressed_set)
    __swig_setmethods__["decompressed"] = _vmkctl.MemoryClientStats_decompressed_set
    __swig_getmethods__["decompressed"] = _vmkctl.MemoryClientStats_decompressed_get
    if _newclass:decompressed = _swig_property(_vmkctl.MemoryClientStats_decompressed_get, _vmkctl.MemoryClientStats_decompressed_set)
    __swig_setmethods__["userMin"] = _vmkctl.MemoryClientStats_userMin_set
    __swig_getmethods__["userMin"] = _vmkctl.MemoryClientStats_userMin_get
    if _newclass:userMin = _swig_property(_vmkctl.MemoryClientStats_userMin_get, _vmkctl.MemoryClientStats_userMin_set)
    __swig_setmethods__["userMax"] = _vmkctl.MemoryClientStats_userMax_set
    __swig_getmethods__["userMax"] = _vmkctl.MemoryClientStats_userMax_get
    if _newclass:userMax = _swig_property(_vmkctl.MemoryClientStats_userMax_get, _vmkctl.MemoryClientStats_userMax_set)
    __swig_setmethods__["userMinLimit"] = _vmkctl.MemoryClientStats_userMinLimit_set
    __swig_getmethods__["userMinLimit"] = _vmkctl.MemoryClientStats_userMinLimit_get
    if _newclass:userMinLimit = _swig_property(_vmkctl.MemoryClientStats_userMinLimit_get, _vmkctl.MemoryClientStats_userMinLimit_set)
    __swig_setmethods__["consumed"] = _vmkctl.MemoryClientStats_consumed_set
    __swig_getmethods__["consumed"] = _vmkctl.MemoryClientStats_consumed_get
    if _newclass:consumed = _swig_property(_vmkctl.MemoryClientStats_consumed_get, _vmkctl.MemoryClientStats_consumed_set)
    def __init__(self): 
        this = _vmkctl.new_MemoryClientStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_MemoryClientStats
    __del__ = lambda self : None;
MemoryClientStats_swigregister = _vmkctl.MemoryClientStats_swigregister
MemoryClientStats_swigregister(MemoryClientStats)

class NumaStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NumaStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NumaStats, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_NumaStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_NumaStats
    __del__ = lambda self : None;
NumaStats_swigregister = _vmkctl.NumaStats_swigregister
NumaStats_swigregister(NumaStats)


def Resgrp_SizeString(*args) -> "std::string" :
  return _vmkctl.Resgrp_SizeString(*args)
Resgrp_SizeString = _vmkctl.Resgrp_SizeString
class ResourceAllocation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceAllocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceAllocation, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    RESOURCE_UNITS_PERCENT = _vmkctl.ResourceAllocation_RESOURCE_UNITS_PERCENT
    RESOURCE_UNITS_MHZ = _vmkctl.ResourceAllocation_RESOURCE_UNITS_MHZ
    RESOURCE_UNITS_BSHARES = _vmkctl.ResourceAllocation_RESOURCE_UNITS_BSHARES
    RESOURCE_UNITS_MB = _vmkctl.ResourceAllocation_RESOURCE_UNITS_MB
    RESOURCE_UNITS_KB = _vmkctl.ResourceAllocation_RESOURCE_UNITS_KB
    RESOURCE_UNITS_PAGES = _vmkctl.ResourceAllocation_RESOURCE_UNITS_PAGES
    RESOURCE_UNITS_BYTES = _vmkctl.ResourceAllocation_RESOURCE_UNITS_BYTES
    RESOURCE_UNITS_INVALID = _vmkctl.ResourceAllocation_RESOURCE_UNITS_INVALID
    RESOURCE_SHARES_NONE = _vmkctl.ResourceAllocation_RESOURCE_SHARES_NONE
    RESOURCE_SHARES_LOW = _vmkctl.ResourceAllocation_RESOURCE_SHARES_LOW
    RESOURCE_SHARES_NORMAL = _vmkctl.ResourceAllocation_RESOURCE_SHARES_NORMAL
    RESOURCE_SHARES_HIGH = _vmkctl.ResourceAllocation_RESOURCE_SHARES_HIGH
    RESOURCE_VALUE_UNLIMITED = _vmkctl.ResourceAllocation_RESOURCE_VALUE_UNLIMITED
    RA_OK = _vmkctl.ResourceAllocation_RA_OK
    RA_EMPTY = _vmkctl.ResourceAllocation_RA_EMPTY
    RA_UNITS_NOT_SET = _vmkctl.ResourceAllocation_RA_UNITS_NOT_SET
    RA_ONLY_UNITS_SET = _vmkctl.ResourceAllocation_RA_ONLY_UNITS_SET
    RA_MIN_GT_MAX = _vmkctl.ResourceAllocation_RA_MIN_GT_MAX
    RA_MINLIMIT_LT_MIN = _vmkctl.ResourceAllocation_RA_MINLIMIT_LT_MIN
    __swig_destroy__ = _vmkctl.delete_ResourceAllocation
    __del__ = lambda self : None;
    def IsValid(self) -> "bool" : return _vmkctl.ResourceAllocation_IsValid(self)
    def IsInitialized(self) -> "bool" : return _vmkctl.ResourceAllocation_IsInitialized(self)
    def CheckIfValid(self) -> "HostCtl::Resource::ResourceAllocation::ValidityResult" : return _vmkctl.ResourceAllocation_CheckIfValid(self)
    __swig_getmethods__["GetCheckResultString"] = lambda x: _vmkctl.ResourceAllocation_GetCheckResultString
    if _newclass:GetCheckResultString = staticmethod(_vmkctl.ResourceAllocation_GetCheckResultString)
    def GetMinimum(self) -> "uint64" : return _vmkctl.ResourceAllocation_GetMinimum(self)
    def HasMinimum(self) -> "bool" : return _vmkctl.ResourceAllocation_HasMinimum(self)
    def SetMinimum(self, *args) -> "void" : return _vmkctl.ResourceAllocation_SetMinimum(self, *args)
    def GetMaximum(self) -> "uint64" : return _vmkctl.ResourceAllocation_GetMaximum(self)
    def HasMaximum(self) -> "bool" : return _vmkctl.ResourceAllocation_HasMaximum(self)
    def GetMaximumString(self) -> "std::string" : return _vmkctl.ResourceAllocation_GetMaximumString(self)
    def GetShares(self) -> "uint32" : return _vmkctl.ResourceAllocation_GetShares(self)
    def HasShares(self) -> "bool" : return _vmkctl.ResourceAllocation_HasShares(self)
    def GetSharesString(self) -> "std::string" : return _vmkctl.ResourceAllocation_GetSharesString(self)
    def GetMinLimit(self) -> "uint64" : return _vmkctl.ResourceAllocation_GetMinLimit(self)
    def HasMinLimit(self) -> "bool" : return _vmkctl.ResourceAllocation_HasMinLimit(self)
    def GetMinLimitString(self) -> "std::string" : return _vmkctl.ResourceAllocation_GetMinLimitString(self)
    def GetUnits(self) -> "HostCtl::Resource::ResourceAllocation::ResourceUnits" : return _vmkctl.ResourceAllocation_GetUnits(self)
    def HasUnits(self) -> "bool" : return _vmkctl.ResourceAllocation_HasUnits(self)
    def GetUnitsString(self) -> "std::string" : return _vmkctl.ResourceAllocation_GetUnitsString(self)
    def SetMaximum(self, *args) -> "void" : return _vmkctl.ResourceAllocation_SetMaximum(self, *args)
    def SetMinLimit(self, *args) -> "void" : return _vmkctl.ResourceAllocation_SetMinLimit(self, *args)
    def SetShares(self, *args) -> "void" : return _vmkctl.ResourceAllocation_SetShares(self, *args)
    def SetUnits(self, *args) -> "void" : return _vmkctl.ResourceAllocation_SetUnits(self, *args)
ResourceAllocation_swigregister = _vmkctl.ResourceAllocation_swigregister
ResourceAllocation_swigregister(ResourceAllocation)

def Resgrp_Print(*args) -> "void" :
  return _vmkctl.Resgrp_Print(*args)
Resgrp_Print = _vmkctl.Resgrp_Print
ResourceAllocation.ResourceUnitStr = _vmkctl.cvar.ResourceAllocation_ResourceUnitStr
ResourceAllocation.RESOURCE_SHARES_LOW_STR = _vmkctl.cvar.ResourceAllocation_RESOURCE_SHARES_LOW_STR
ResourceAllocation.RESOURCE_SHARES_NORMAL_STR = _vmkctl.cvar.ResourceAllocation_RESOURCE_SHARES_NORMAL_STR
ResourceAllocation.RESOURCE_SHARES_HIGH_STR = _vmkctl.cvar.ResourceAllocation_RESOURCE_SHARES_HIGH_STR
ResourceAllocation.RESOURCE_VALUE_UNLIMITED_STR = _vmkctl.cvar.ResourceAllocation_RESOURCE_VALUE_UNLIMITED_STR

def ResourceAllocation_GetCheckResultString(*args) -> "char const *" :
  return _vmkctl.ResourceAllocation_GetCheckResultString(*args)
ResourceAllocation_GetCheckResultString = _vmkctl.ResourceAllocation_GetCheckResultString

class MemoryResourceAllocation(ResourceAllocation):
    __swig_setmethods__ = {}
    for _s in [ResourceAllocation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MemoryResourceAllocation, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourceAllocation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MemoryResourceAllocation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_MemoryResourceAllocation(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetUnits(self, *args) -> "void" : return _vmkctl.MemoryResourceAllocation_SetUnits(self, *args)
    def IsValid(self) -> "bool" : return _vmkctl.MemoryResourceAllocation_IsValid(self)
    __swig_destroy__ = _vmkctl.delete_MemoryResourceAllocation
    __del__ = lambda self : None;
MemoryResourceAllocation_swigregister = _vmkctl.MemoryResourceAllocation_swigregister
MemoryResourceAllocation_swigregister(MemoryResourceAllocation)

class CpuResourceAllocation(ResourceAllocation):
    __swig_setmethods__ = {}
    for _s in [ResourceAllocation]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CpuResourceAllocation, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourceAllocation]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CpuResourceAllocation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_CpuResourceAllocation(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetUnits(self, *args) -> "void" : return _vmkctl.CpuResourceAllocation_SetUnits(self, *args)
    def IsValid(self) -> "bool" : return _vmkctl.CpuResourceAllocation_IsValid(self)
    __swig_destroy__ = _vmkctl.delete_CpuResourceAllocation
    __del__ = lambda self : None;
CpuResourceAllocation_swigregister = _vmkctl.CpuResourceAllocation_swigregister
CpuResourceAllocation_swigregister(CpuResourceAllocation)

class DiskResourceAllocation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiskResourceAllocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiskResourceAllocation, name)
    __repr__ = _swig_repr
    def __init__(self, shares : 'uint32' = 0): 
        this = _vmkctl.new_DiskResourceAllocation(shares)
        try: self.this.append(this)
        except: self.this = this
    def GetShares(self) -> "uint32" : return _vmkctl.DiskResourceAllocation_GetShares(self)
    def GetSharesString(self) -> "std::string" : return _vmkctl.DiskResourceAllocation_GetSharesString(self)
    def SetShares(self, *args) -> "void" : return _vmkctl.DiskResourceAllocation_SetShares(self, *args)
    __swig_destroy__ = _vmkctl.delete_DiskResourceAllocation
    __del__ = lambda self : None;
DiskResourceAllocation_swigregister = _vmkctl.DiskResourceAllocation_swigregister
DiskResourceAllocation_swigregister(DiskResourceAllocation)

WORLD_TYPE_INVALID = _vmkctl.WORLD_TYPE_INVALID
WORLD_TYPE_SYSTEM = _vmkctl.WORLD_TYPE_SYSTEM
WORLD_TYPE_IDLE = _vmkctl.WORLD_TYPE_IDLE
WORLD_TYPE_USER = _vmkctl.WORLD_TYPE_USER
WORLD_TYPE_VMM = _vmkctl.WORLD_TYPE_VMM
WORLD_TYPE_HELPER = _vmkctl.WORLD_TYPE_HELPER
WORLD_TYPE_HOST = _vmkctl.WORLD_TYPE_HOST
WORLD_TYPE_THREAD = _vmkctl.WORLD_TYPE_THREAD
WORLD_TYPE_TEST = _vmkctl.WORLD_TYPE_TEST
WORLD_TYPE_POST = _vmkctl.WORLD_TYPE_POST
WORLD_TYPE_NATIVE = _vmkctl.WORLD_TYPE_NATIVE
WORLD_TYPE_UWVCPU = _vmkctl.WORLD_TYPE_UWVCPU
WORLD_TYPE_ASSISTANT = _vmkctl.WORLD_TYPE_ASSISTANT
WORLD_TYPE_UTILITY_VM = _vmkctl.WORLD_TYPE_UTILITY_VM
WORLD_TYPE_VMM64 = _vmkctl.WORLD_TYPE_VMM64
WORLD_STATE_NEW = _vmkctl.WORLD_STATE_NEW
WORLD_STATE_ZOMBIE = _vmkctl.WORLD_STATE_ZOMBIE
WORLD_STATE_RUN = _vmkctl.WORLD_STATE_RUN
WORLD_STATE_READY = _vmkctl.WORLD_STATE_READY
WORLD_STATE_READY_COSTOP = _vmkctl.WORLD_STATE_READY_COSTOP
WORLD_STATE_WAIT = _vmkctl.WORLD_STATE_WAIT
WORLD_STATE_INVALID = _vmkctl.WORLD_STATE_INVALID
INVALID_SCHED_GROUP_ID = _vmkctl.INVALID_SCHED_GROUP_ID
class World(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, World, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, World, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetWorldId(self) -> "uint64" : return _vmkctl.World_GetWorldId(self)
    def GetCartelId(self) -> "uint64" : return _vmkctl.World_GetCartelId(self)
    def GetParentCartelId(self) -> "uint64" : return _vmkctl.World_GetParentCartelId(self)
    def GetSchedGroupId(self) -> "uint64" : return _vmkctl.World_GetSchedGroupId(self)
    def GetWorldName(self) -> "std::string" : return _vmkctl.World_GetWorldName(self)
    def GetCommandLine(self) -> "std::string" : return _vmkctl.World_GetCommandLine(self)
    def GetWorldGroupId(self) -> "uint64" : return _vmkctl.World_GetWorldGroupId(self)
    def GetCartelGroupId(self) -> "uint64" : return _vmkctl.World_GetCartelGroupId(self)
    def GetSessionId(self) -> "uint64" : return _vmkctl.World_GetSessionId(self)
    def GetWorldFlags(self) -> "uint64" : return _vmkctl.World_GetWorldFlags(self)
    def GetWorldTypeString(self) -> "std::string" : return _vmkctl.World_GetWorldTypeString(self)
    def GetWorldState(self) -> "HostCtl::Resource::WorldState" : return _vmkctl.World_GetWorldState(self)
    def GetWorldStateString(self) -> "std::string" : return _vmkctl.World_GetWorldStateString(self)
    def GetWaitReason(self) -> "std::string" : return _vmkctl.World_GetWaitReason(self)
    def GetUsedTime(self) -> "uint64" : return _vmkctl.World_GetUsedTime(self)
    def GetWorldSecurityDomain(self) -> "uint32" : return _vmkctl.World_GetWorldSecurityDomain(self)
    __swig_destroy__ = _vmkctl.delete_World
    __del__ = lambda self : None;
World_swigregister = _vmkctl.World_swigregister
World_swigregister(World)

CPULOADINTERVAL_MIN1 = _vmkctl.CPULOADINTERVAL_MIN1
CPULOADINTERVAL_MIN5 = _vmkctl.CPULOADINTERVAL_MIN5
CPULOADINTERVAL_MIN15 = _vmkctl.CPULOADINTERVAL_MIN15
class ResourceGroupSpec(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceGroupSpec, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceGroupSpec, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _vmkctl.ResourceGroupSpec_name_set
    __swig_getmethods__["name"] = _vmkctl.ResourceGroupSpec_name_get
    if _newclass:name = _swig_property(_vmkctl.ResourceGroupSpec_name_get, _vmkctl.ResourceGroupSpec_name_set)
    __swig_setmethods__["cpu"] = _vmkctl.ResourceGroupSpec_cpu_set
    __swig_getmethods__["cpu"] = _vmkctl.ResourceGroupSpec_cpu_get
    if _newclass:cpu = _swig_property(_vmkctl.ResourceGroupSpec_cpu_get, _vmkctl.ResourceGroupSpec_cpu_set)
    __swig_setmethods__["memory"] = _vmkctl.ResourceGroupSpec_memory_set
    __swig_getmethods__["memory"] = _vmkctl.ResourceGroupSpec_memory_get
    if _newclass:memory = _swig_property(_vmkctl.ResourceGroupSpec_memory_get, _vmkctl.ResourceGroupSpec_memory_set)
    def __init__(self): 
        this = _vmkctl.new_ResourceGroupSpec()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_ResourceGroupSpec
    __del__ = lambda self : None;
ResourceGroupSpec_swigregister = _vmkctl.ResourceGroupSpec_swigregister
ResourceGroupSpec_swigregister(ResourceGroupSpec)

class ResourceGroup(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceGroup, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceGroup, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    RES_GROUP_PREDEFINED = _vmkctl.ResourceGroup_RES_GROUP_PREDEFINED
    RES_GROUP_LEAF = _vmkctl.ResourceGroup_RES_GROUP_LEAF
    RES_GROUP_VM = _vmkctl.ResourceGroup_RES_GROUP_VM
    RES_GROUP_UW = _vmkctl.ResourceGroup_RES_GROUP_UW
    RES_GROUP_SYSTEM = _vmkctl.ResourceGroup_RES_GROUP_SYSTEM
    RES_GROUP_TESTWORLD = _vmkctl.ResourceGroup_RES_GROUP_TESTWORLD
    RES_GROUP_PROTECTED = _vmkctl.ResourceGroup_RES_GROUP_PROTECTED
    RES_GROUP_SELF_DESTRUCT = _vmkctl.ResourceGroup_RES_GROUP_SELF_DESTRUCT
    RES_GROUP_NON_PERSISTENT = _vmkctl.ResourceGroup_RES_GROUP_NON_PERSISTENT
    RES_GROUP_KERNEL = _vmkctl.ResourceGroup_RES_GROUP_KERNEL
    RES_GROUP_USER_GROUP = _vmkctl.ResourceGroup_RES_GROUP_USER_GROUP
    RES_GROUP_CONTAINER = _vmkctl.ResourceGroup_RES_GROUP_CONTAINER
    RES_GROUP_SUB_CONTAINER = _vmkctl.ResourceGroup_RES_GROUP_SUB_CONTAINER
    RES_GROUP_VMM_SUB_CONTAINER = _vmkctl.ResourceGroup_RES_GROUP_VMM_SUB_CONTAINER
    RES_GROUP_USER_SUB_CONTAINER = _vmkctl.ResourceGroup_RES_GROUP_USER_SUB_CONTAINER
    def GetGroupId(self) -> "uint64" : return _vmkctl.ResourceGroup_GetGroupId(self)
    def GetPathName(self) -> "std::string" : return _vmkctl.ResourceGroup_GetPathName(self)
    def GetGroupName(self) -> "std::string" : return _vmkctl.ResourceGroup_GetGroupName(self)
    def SetGroupName(self, *args) -> "void" : return _vmkctl.ResourceGroup_SetGroupName(self, *args)
    def GetLeaderId(self) -> "uint64" : return _vmkctl.ResourceGroup_GetLeaderId(self)
    def GetParentId(self) -> "uint64" : return _vmkctl.ResourceGroup_GetParentId(self)
    def SetParentId(self, *args) -> "void" : return _vmkctl.ResourceGroup_SetParentId(self, *args)
    def GetGroupFlags(self) -> "uint32" : return _vmkctl.ResourceGroup_GetGroupFlags(self)
    def DeleteGroup(self) -> "void" : return _vmkctl.ResourceGroup_DeleteGroup(self)
    def GetMemoryAllocation(self, *args) -> "HostCtl::Resource::MemoryResourceAllocation" : return _vmkctl.ResourceGroup_GetMemoryAllocation(self, *args)
    def SetMemoryAllocation(self, *args) -> "void" : return _vmkctl.ResourceGroup_SetMemoryAllocation(self, *args)
    def SetCpuAllocation(self, *args) -> "void" : return _vmkctl.ResourceGroup_SetCpuAllocation(self, *args)
    def GetCpuAllocation(self, *args) -> "HostCtl::Resource::CpuResourceAllocation" : return _vmkctl.ResourceGroup_GetCpuAllocation(self, *args)
    def SetCpuMemoryAllocation(self, *args) -> "void" : return _vmkctl.ResourceGroup_SetCpuMemoryAllocation(self, *args)
    def GetMemoryStats(self) -> "HostCtl::Resource::MemoryStatsPtr" : return _vmkctl.ResourceGroup_GetMemoryStats(self)
    def GetCpuStats(self) -> "HostCtl::Resource::CpuStatsPtr" : return _vmkctl.ResourceGroup_GetCpuStats(self)
    def GetCpuLoadHistory(self, *args) -> "void" : return _vmkctl.ResourceGroup_GetCpuLoadHistory(self, *args)
    def GetCpuLoadHistoryAggregated(self, *args) -> "void" : return _vmkctl.ResourceGroup_GetCpuLoadHistoryAggregated(self, *args)
    def GetCpuTimes(self, *args) -> "HostCtl::Resource::CpuTimesPtr" : return _vmkctl.ResourceGroup_GetCpuTimes(self, *args)
    def GetVcpuStats(self, *args) -> "HostCtl::Resource::VcpuStatsPtr" : return _vmkctl.ResourceGroup_GetVcpuStats(self, *args)
    def GetPowerStats(self, *args) -> "void" : return _vmkctl.ResourceGroup_GetPowerStats(self, *args)
    def GetVirtualMachines(self) -> "std::vector< HostCtl::Resource::VirtualMachinePtr,std::allocator< HostCtl::Resource::VirtualMachinePtr > >" : return _vmkctl.ResourceGroup_GetVirtualMachines(self)
    def GetGroupMembers(self) -> "std::vector< HostCtl::Resource::ResourceGroupPtr,std::allocator< HostCtl::Resource::ResourceGroupPtr > >" : return _vmkctl.ResourceGroup_GetGroupMembers(self)
    def GetVcpuList(self) -> "std::vector< uint32,std::allocator< uint32 > >" : return _vmkctl.ResourceGroup_GetVcpuList(self)
    def GetLatencySensitivity(self) -> "int64" : return _vmkctl.ResourceGroup_GetLatencySensitivity(self)
    def SetLatencySensitivity(self, *args) -> "void" : return _vmkctl.ResourceGroup_SetLatencySensitivity(self, *args)
    def GetLatencySensitivityString(self) -> "std::string" : return _vmkctl.ResourceGroup_GetLatencySensitivityString(self)
    def SetLatencySensitivityString(self, *args) -> "void" : return _vmkctl.ResourceGroup_SetLatencySensitivityString(self, *args)
    def AddGroupMember(self, *args) -> "HostCtl::Resource::ResourceGroupPtr" : return _vmkctl.ResourceGroup_AddGroupMember(self, *args)
    def GetGroupCapacity(self) -> "HostCtl::Resource::GroupCapacity" : return _vmkctl.ResourceGroup_GetGroupCapacity(self)
    def GetCpuNumericShareValue(self) -> "uint32" : return _vmkctl.ResourceGroup_GetCpuNumericShareValue(self)
    def GetMemNumericShareValue(self) -> "uint64" : return _vmkctl.ResourceGroup_GetMemNumericShareValue(self)
    __swig_destroy__ = _vmkctl.delete_ResourceGroup
    __del__ = lambda self : None;
ResourceGroup_swigregister = _vmkctl.ResourceGroup_swigregister
ResourceGroup_swigregister(ResourceGroup)
ResourceGroup.MAX_RGNAME_SZ = _vmkctl.cvar.ResourceGroup_MAX_RGNAME_SZ
ResourceGroup.MAX_RGPATH_SZ = _vmkctl.cvar.ResourceGroup_MAX_RGPATH_SZ
ResourceGroup.LATENCY_SENSITIVE_UNDEF = _vmkctl.cvar.ResourceGroup_LATENCY_SENSITIVE_UNDEF
ResourceGroup.LATENCY_SENSITIVE_HIGH = _vmkctl.cvar.ResourceGroup_LATENCY_SENSITIVE_HIGH
ResourceGroup.LATENCY_SENSITIVE_MEDIUM = _vmkctl.cvar.ResourceGroup_LATENCY_SENSITIVE_MEDIUM
ResourceGroup.LATENCY_SENSITIVE_NORMAL = _vmkctl.cvar.ResourceGroup_LATENCY_SENSITIVE_NORMAL
ResourceGroup.LATENCY_SENSITIVE_LOW = _vmkctl.cvar.ResourceGroup_LATENCY_SENSITIVE_LOW
ResourceGroup.LATENCY_SENSITIVE_AUTO = _vmkctl.cvar.ResourceGroup_LATENCY_SENSITIVE_AUTO
ResourceGroup.LATENCY_SENSITIVE_UNDEF_STR = _vmkctl.cvar.ResourceGroup_LATENCY_SENSITIVE_UNDEF_STR
ResourceGroup.LATENCY_SENSITIVE_HIGH_STR = _vmkctl.cvar.ResourceGroup_LATENCY_SENSITIVE_HIGH_STR
ResourceGroup.LATENCY_SENSITIVE_MEDIUM_STR = _vmkctl.cvar.ResourceGroup_LATENCY_SENSITIVE_MEDIUM_STR
ResourceGroup.LATENCY_SENSITIVE_NORMAL_STR = _vmkctl.cvar.ResourceGroup_LATENCY_SENSITIVE_NORMAL_STR
ResourceGroup.LATENCY_SENSITIVE_LOW_STR = _vmkctl.cvar.ResourceGroup_LATENCY_SENSITIVE_LOW_STR
ResourceGroup.LATENCY_SENSITIVE_AUTO_STR = _vmkctl.cvar.ResourceGroup_LATENCY_SENSITIVE_AUTO_STR

class ResourceGroupImpl(ResourceGroup,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [ResourceGroup,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceGroupImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourceGroup,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceGroupImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_getmethods__["GetResourceGroup"] = lambda x: _vmkctl.ResourceGroupImpl_GetResourceGroup
    if _newclass:GetResourceGroup = staticmethod(_vmkctl.ResourceGroupImpl_GetResourceGroup)
    def GetGroupId(self) -> "uint64" : return _vmkctl.ResourceGroupImpl_GetGroupId(self)
    def GetPathName(self) -> "std::string" : return _vmkctl.ResourceGroupImpl_GetPathName(self)
    def GetGroupName(self) -> "std::string" : return _vmkctl.ResourceGroupImpl_GetGroupName(self)
    def SetGroupName(self, *args) -> "void" : return _vmkctl.ResourceGroupImpl_SetGroupName(self, *args)
    def GetLeaderId(self) -> "uint64" : return _vmkctl.ResourceGroupImpl_GetLeaderId(self)
    def GetParentId(self) -> "uint64" : return _vmkctl.ResourceGroupImpl_GetParentId(self)
    def SetParentId(self, *args) -> "void" : return _vmkctl.ResourceGroupImpl_SetParentId(self, *args)
    def GetGroupFlags(self) -> "uint32" : return _vmkctl.ResourceGroupImpl_GetGroupFlags(self)
    def GetMemoryAllocation(self, *args) -> "HostCtl::Resource::MemoryResourceAllocation" : return _vmkctl.ResourceGroupImpl_GetMemoryAllocation(self, *args)
    def SetMemoryAllocation(self, *args) -> "void" : return _vmkctl.ResourceGroupImpl_SetMemoryAllocation(self, *args)
    def GetCpuAllocation(self, *args) -> "HostCtl::Resource::CpuResourceAllocation" : return _vmkctl.ResourceGroupImpl_GetCpuAllocation(self, *args)
    def SetCpuAllocation(self, *args) -> "void" : return _vmkctl.ResourceGroupImpl_SetCpuAllocation(self, *args)
    def SetCpuMemoryAllocation(self, *args) -> "void" : return _vmkctl.ResourceGroupImpl_SetCpuMemoryAllocation(self, *args)
    def GetMemoryStats(self) -> "HostCtl::Resource::MemoryStatsPtr" : return _vmkctl.ResourceGroupImpl_GetMemoryStats(self)
    def GetCpuStats(self) -> "HostCtl::Resource::CpuStatsPtr" : return _vmkctl.ResourceGroupImpl_GetCpuStats(self)
    def GetCpuLoadHistory(self, *args) -> "void" : return _vmkctl.ResourceGroupImpl_GetCpuLoadHistory(self, *args)
    def GetCpuLoadHistoryAggregated(self, *args) -> "void" : return _vmkctl.ResourceGroupImpl_GetCpuLoadHistoryAggregated(self, *args)
    def GetCpuTimes(self, *args) -> "HostCtl::Resource::CpuTimesPtr" : return _vmkctl.ResourceGroupImpl_GetCpuTimes(self, *args)
    def GetVcpuStats(self, *args) -> "HostCtl::Resource::VcpuStatsPtr" : return _vmkctl.ResourceGroupImpl_GetVcpuStats(self, *args)
    def GetPowerStats(self, *args) -> "void" : return _vmkctl.ResourceGroupImpl_GetPowerStats(self, *args)
    def GetVirtualMachines(self) -> "std::vector< HostCtl::Resource::VirtualMachinePtr,std::allocator< HostCtl::Resource::VirtualMachinePtr > >" : return _vmkctl.ResourceGroupImpl_GetVirtualMachines(self)
    def GetVcpuList(self) -> "std::vector< uint32,std::allocator< uint32 > >" : return _vmkctl.ResourceGroupImpl_GetVcpuList(self)
    def GetLatencySensitivity(self) -> "int64" : return _vmkctl.ResourceGroupImpl_GetLatencySensitivity(self)
    def SetLatencySensitivity(self, *args) -> "void" : return _vmkctl.ResourceGroupImpl_SetLatencySensitivity(self, *args)
    def GetLatencySensitivityString(self) -> "std::string" : return _vmkctl.ResourceGroupImpl_GetLatencySensitivityString(self)
    def SetLatencySensitivityString(self, *args) -> "void" : return _vmkctl.ResourceGroupImpl_SetLatencySensitivityString(self, *args)
    def GetGroupMembers(self) -> "std::vector< HostCtl::Resource::ResourceGroupPtr,std::allocator< HostCtl::Resource::ResourceGroupPtr > >" : return _vmkctl.ResourceGroupImpl_GetGroupMembers(self)
    def AddGroupMember(self, *args) -> "HostCtl::Resource::ResourceGroupPtr" : return _vmkctl.ResourceGroupImpl_AddGroupMember(self, *args)
    def DeleteGroup(self) -> "void" : return _vmkctl.ResourceGroupImpl_DeleteGroup(self)
    def GetGroupCapacity(self) -> "HostCtl::Resource::GroupCapacity" : return _vmkctl.ResourceGroupImpl_GetGroupCapacity(self)
    def Refresh(self) -> "void" : return _vmkctl.ResourceGroupImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.ResourceGroupImpl_GetName(self)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.ResourceGroupImpl_GetChildren(self)
    def LoadConfig(self) -> "void" : return _vmkctl.ResourceGroupImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.ResourceGroupImpl_Print(self, *args)
    def GetGroupList(self, *args) -> "std::vector< HostCtl::Resource::ResourceGroupPtr,std::allocator< HostCtl::Resource::ResourceGroupPtr > >" : return _vmkctl.ResourceGroupImpl_GetGroupList(self, *args)
    __swig_destroy__ = _vmkctl.delete_ResourceGroupImpl
    __del__ = lambda self : None;
ResourceGroupImpl_swigregister = _vmkctl.ResourceGroupImpl_swigregister
ResourceGroupImpl_swigregister(ResourceGroupImpl)

def ResourceGroupImpl_GetResourceGroup(*args) -> "HostCtl::Resource::ResourceGroupPtr" :
  return _vmkctl.ResourceGroupImpl_GetResourceGroup(*args)
ResourceGroupImpl_GetResourceGroup = _vmkctl.ResourceGroupImpl_GetResourceGroup

class ContentBasedReadCacheInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContentBasedReadCacheInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContentBasedReadCacheInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetContentBasedReadCacheVscsiNames(self, *args) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.ContentBasedReadCacheInfo_GetContentBasedReadCacheVscsiNames(self, *args)
    def ContentBasedReadCacheRecomputeDigest(self, *args) -> "uint32" : return _vmkctl.ContentBasedReadCacheInfo_ContentBasedReadCacheRecomputeDigest(self, *args)
    __swig_destroy__ = _vmkctl.delete_ContentBasedReadCacheInfo
    __del__ = lambda self : None;
ContentBasedReadCacheInfo_swigregister = _vmkctl.ContentBasedReadCacheInfo_swigregister
ContentBasedReadCacheInfo_swigregister(ContentBasedReadCacheInfo)

class ResourceInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def ResourceGroupRoot(self) -> "HostCtl::Resource::ResourceGroupPtr" : return _vmkctl.ResourceInfo_ResourceGroupRoot(self)
    def FindResourceGroup(self, *args) -> "HostCtl::Resource::ResourceGroupPtr" : return _vmkctl.ResourceInfo_FindResourceGroup(self, *args)
    def GetHostCpuStats(self) -> "std::vector< HostCtl::Resource::HostCpuStats,std::allocator< HostCtl::Resource::HostCpuStats > >" : return _vmkctl.ResourceInfo_GetHostCpuStats(self)
    def GetHostGpuStats(self) -> "std::vector< HostCtl::Resource::HostGpuStats,std::allocator< HostCtl::Resource::HostGpuStats > >" : return _vmkctl.ResourceInfo_GetHostGpuStats(self)
    def GetHostMemoryStats(self) -> "HostCtl::Resource::HostMemoryStats" : return _vmkctl.ResourceInfo_GetHostMemoryStats(self)
    def GetHostMemMapStats(self) -> "HostCtl::Resource::HostMemMapStats" : return _vmkctl.ResourceInfo_GetHostMemMapStats(self)
    def GetHostPowerStats(self, *args) -> "void" : return _vmkctl.ResourceInfo_GetHostPowerStats(self, *args)
    def GetHostCapacity(self) -> "HostCtl::Resource::HostCapacity" : return _vmkctl.ResourceInfo_GetHostCapacity(self)
    def GetHostUptime(self) -> "uint64" : return _vmkctl.ResourceInfo_GetHostUptime(self)
    def GetHostHardwareUptime(self) -> "uint64" : return _vmkctl.ResourceInfo_GetHostHardwareUptime(self)
    def GetMemoryStatsForWorld(self, *args) -> "HostCtl::Resource::MemoryClientStatsPtr" : return _vmkctl.ResourceInfo_GetMemoryStatsForWorld(self, *args)
    def GetFdUsageForWorld(self, *args) -> "uint32" : return _vmkctl.ResourceInfo_GetFdUsageForWorld(self, *args)
    def GetWorldName(self, *args) -> "std::string" : return _vmkctl.ResourceInfo_GetWorldName(self, *args)
    def GetVirtualMachineByWorldId(self, *args) -> "HostCtl::Resource::VirtualMachinePtr" : return _vmkctl.ResourceInfo_GetVirtualMachineByWorldId(self, *args)
    def GetParentByWorldId(self, *args) -> "HostCtl::Resource::ResourceGroupPtr" : return _vmkctl.ResourceInfo_GetParentByWorldId(self, *args)
    def GetRunningVirtualMachines(self) -> "std::vector< HostCtl::Resource::VirtualMachinePtr,std::allocator< HostCtl::Resource::VirtualMachinePtr > >" : return _vmkctl.ResourceInfo_GetRunningVirtualMachines(self)
    def HasRunningVirtualMachines(self) -> "bool" : return _vmkctl.ResourceInfo_HasRunningVirtualMachines(self)
    def GetWorldIdByCartelId(self, *args) -> "uint64" : return _vmkctl.ResourceInfo_GetWorldIdByCartelId(self, *args)
    def GetCartelIdByConfigPath(self, *args) -> "uint32" : return _vmkctl.ResourceInfo_GetCartelIdByConfigPath(self, *args)
    def GetAllWorlds(self) -> "std::vector< HostCtl::Resource::WorldPtr,std::allocator< HostCtl::Resource::WorldPtr > >" : return _vmkctl.ResourceInfo_GetAllWorlds(self)
    def GetAllCartels(self) -> "std::vector< HostCtl::Resource::WorldPtr,std::allocator< HostCtl::Resource::WorldPtr > >" : return _vmkctl.ResourceInfo_GetAllCartels(self)
    def GetContentBasedReadCacheInfo(self) -> "HostCtl::Resource::ContentBasedReadCacheInfoPtr" : return _vmkctl.ResourceInfo_GetContentBasedReadCacheInfo(self)
    def AvoidCollisionWithStorageRM(self) -> "void" : return _vmkctl.ResourceInfo_AvoidCollisionWithStorageRM(self)
    def SetStorageRMInjectorFlag2(self, *args) -> "void" : return _vmkctl.ResourceInfo_SetStorageRMInjectorFlag2(self, *args)
    def GetStorageRMInjectorFlag2(self) -> "int32" : return _vmkctl.ResourceInfo_GetStorageRMInjectorFlag2(self)
    def IncrementStorageRMInjectorFlag2(self) -> "void" : return _vmkctl.ResourceInfo_IncrementStorageRMInjectorFlag2(self)
    def DecrementStorageRMInjectorFlag2(self) -> "void" : return _vmkctl.ResourceInfo_DecrementStorageRMInjectorFlag2(self)
    def GetHostParameters(self, *args) -> "void" : return _vmkctl.ResourceInfo_GetHostParameters(self, *args)
    __swig_destroy__ = _vmkctl.delete_ResourceInfo
    __del__ = lambda self : None;
ResourceInfo_swigregister = _vmkctl.ResourceInfo_swigregister
ResourceInfo_swigregister(ResourceInfo)

class ResourceInfoImpl(ResourceInfo,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [ResourceInfo,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ResourceInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourceInfo,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ResourceInfoImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_ResourceInfoImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_ResourceInfoImpl
    __del__ = lambda self : None;
    def ResourceGroupRoot(self) -> "HostCtl::Resource::ResourceGroupPtr" : return _vmkctl.ResourceInfoImpl_ResourceGroupRoot(self)
    def FindResourceGroup(self, *args) -> "HostCtl::Resource::ResourceGroupPtr" : return _vmkctl.ResourceInfoImpl_FindResourceGroup(self, *args)
    def GetVirtualMachineByWorldId(self, *args) -> "HostCtl::Resource::VirtualMachinePtr" : return _vmkctl.ResourceInfoImpl_GetVirtualMachineByWorldId(self, *args)
    def GetParentByWorldId(self, *args) -> "HostCtl::Resource::ResourceGroupPtr" : return _vmkctl.ResourceInfoImpl_GetParentByWorldId(self, *args)
    def GetRunningVirtualMachines(self) -> "std::vector< HostCtl::Resource::VirtualMachinePtr,std::allocator< HostCtl::Resource::VirtualMachinePtr > >" : return _vmkctl.ResourceInfoImpl_GetRunningVirtualMachines(self)
    def HasRunningVirtualMachines(self) -> "bool" : return _vmkctl.ResourceInfoImpl_HasRunningVirtualMachines(self)
    def GetWorldIdByCartelId(self, *args) -> "uint64" : return _vmkctl.ResourceInfoImpl_GetWorldIdByCartelId(self, *args)
    def GetCartelIdByConfigPath(self, *args) -> "uint32" : return _vmkctl.ResourceInfoImpl_GetCartelIdByConfigPath(self, *args)
    def GetHostCpuStats(self) -> "std::vector< HostCtl::Resource::HostCpuStats,std::allocator< HostCtl::Resource::HostCpuStats > >" : return _vmkctl.ResourceInfoImpl_GetHostCpuStats(self)
    def GetHostGpuStats(self) -> "std::vector< HostCtl::Resource::HostGpuStats,std::allocator< HostCtl::Resource::HostGpuStats > >" : return _vmkctl.ResourceInfoImpl_GetHostGpuStats(self)
    def GetHostMemoryStats(self) -> "HostCtl::Resource::HostMemoryStats" : return _vmkctl.ResourceInfoImpl_GetHostMemoryStats(self)
    def GetHostMemMapStats(self) -> "HostCtl::Resource::HostMemMapStats" : return _vmkctl.ResourceInfoImpl_GetHostMemMapStats(self)
    def GetHostPowerStats(self, *args) -> "void" : return _vmkctl.ResourceInfoImpl_GetHostPowerStats(self, *args)
    def GetHostCapacity(self) -> "HostCtl::Resource::HostCapacity" : return _vmkctl.ResourceInfoImpl_GetHostCapacity(self)
    def GetHostUptime(self) -> "uint64" : return _vmkctl.ResourceInfoImpl_GetHostUptime(self)
    def GetHostHardwareUptime(self) -> "uint64" : return _vmkctl.ResourceInfoImpl_GetHostHardwareUptime(self)
    def GetMemoryStatsForWorld(self, *args) -> "HostCtl::Resource::MemoryClientStatsPtr" : return _vmkctl.ResourceInfoImpl_GetMemoryStatsForWorld(self, *args)
    def GetFdUsageForWorld(self, *args) -> "uint32" : return _vmkctl.ResourceInfoImpl_GetFdUsageForWorld(self, *args)
    def GetWorldName(self, *args) -> "std::string" : return _vmkctl.ResourceInfoImpl_GetWorldName(self, *args)
    def GetAllWorlds(self) -> "std::vector< HostCtl::Resource::WorldPtr,std::allocator< HostCtl::Resource::WorldPtr > >" : return _vmkctl.ResourceInfoImpl_GetAllWorlds(self)
    def GetAllCartels(self) -> "std::vector< HostCtl::Resource::WorldPtr,std::allocator< HostCtl::Resource::WorldPtr > >" : return _vmkctl.ResourceInfoImpl_GetAllCartels(self)
    def Refresh(self) -> "void" : return _vmkctl.ResourceInfoImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.ResourceInfoImpl_GetName(self)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.ResourceInfoImpl_GetChildren(self)
    def LoadConfig(self) -> "void" : return _vmkctl.ResourceInfoImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.ResourceInfoImpl_Print(self, *args)
    def GetContentBasedReadCacheInfo(self) -> "HostCtl::Resource::ContentBasedReadCacheInfoPtr" : return _vmkctl.ResourceInfoImpl_GetContentBasedReadCacheInfo(self)
    def AvoidCollisionWithStorageRM(self) -> "void" : return _vmkctl.ResourceInfoImpl_AvoidCollisionWithStorageRM(self)
    def SetStorageRMInjectorFlag2(self, *args) -> "void" : return _vmkctl.ResourceInfoImpl_SetStorageRMInjectorFlag2(self, *args)
    def GetStorageRMInjectorFlag2(self) -> "int32" : return _vmkctl.ResourceInfoImpl_GetStorageRMInjectorFlag2(self)
    def IncrementStorageRMInjectorFlag2(self) -> "void" : return _vmkctl.ResourceInfoImpl_IncrementStorageRMInjectorFlag2(self)
    def DecrementStorageRMInjectorFlag2(self) -> "void" : return _vmkctl.ResourceInfoImpl_DecrementStorageRMInjectorFlag2(self)
    def GetHostParameters(self, *args) -> "void" : return _vmkctl.ResourceInfoImpl_GetHostParameters(self, *args)
ResourceInfoImpl_swigregister = _vmkctl.ResourceInfoImpl_swigregister
ResourceInfoImpl_swigregister(ResourceInfoImpl)

class VscsiInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VscsiInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VscsiInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _vmkctl.VscsiInfo_name_set
    __swig_getmethods__["name"] = _vmkctl.VscsiInfo_name_get
    if _newclass:name = _swig_property(_vmkctl.VscsiInfo_name_get, _vmkctl.VscsiInfo_name_set)
    __swig_setmethods__["stats"] = _vmkctl.VscsiInfo_stats_set
    __swig_getmethods__["stats"] = _vmkctl.VscsiInfo_stats_get
    if _newclass:stats = _swig_property(_vmkctl.VscsiInfo_stats_get, _vmkctl.VscsiInfo_stats_set)
    def __init__(self): 
        this = _vmkctl.new_VscsiInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VscsiInfo
    __del__ = lambda self : None;
VscsiInfo_swigregister = _vmkctl.VscsiInfo_swigregister
VscsiInfo_swigregister(VscsiInfo)

VM_KILL_SIGTERM = _vmkctl.VM_KILL_SIGTERM
VM_KILL_SIGKILL = _vmkctl.VM_KILL_SIGKILL
VM_KILL_VSIKILL = _vmkctl.VM_KILL_VSIKILL
VM_KILL_VSIHARDKILL = _vmkctl.VM_KILL_VSIHARDKILL
class VirtualMachine(ResourceGroup):
    __swig_setmethods__ = {}
    for _s in [ResourceGroup]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VirtualMachine, name, value)
    __swig_getmethods__ = {}
    for _s in [ResourceGroup]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VirtualMachine, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSwapInfo(self) -> "HostCtl::Resource::VMSwapInfoPtr" : return _vmkctl.VirtualMachine_GetSwapInfo(self)
    def GetMemoryClientStats(self) -> "HostCtl::Resource::MemoryClientStatsPtr" : return _vmkctl.VirtualMachine_GetMemoryClientStats(self)
    def GetNumVcpus(self) -> "uint32" : return _vmkctl.VirtualMachine_GetNumVcpus(self)
    def GetVMOverheadStats(self) -> "HostCtl::Resource::VMOverheadStatsPtr" : return _vmkctl.VirtualMachine_GetVMOverheadStats(self)
    def GetAffinity(self) -> "std::vector< uint32,std::allocator< uint32 > >" : return _vmkctl.VirtualMachine_GetAffinity(self)
    def SetAffinity(self, *args) -> "void" : return _vmkctl.VirtualMachine_SetAffinity(self, *args)
    def GetUuid(self) -> "std::string" : return _vmkctl.VirtualMachine_GetUuid(self)
    def GetVcUuid(self) -> "std::string" : return _vmkctl.VirtualMachine_GetVcUuid(self)
    def GetConfigFile(self) -> "std::string" : return _vmkctl.VirtualMachine_GetConfigFile(self)
    def IsFsrReady(self) -> "bool" : return _vmkctl.VirtualMachine_IsFsrReady(self)
    def GetFaultToleranceStats(self) -> "HostCtl::Resource::FaultToleranceStatsPtr" : return _vmkctl.VirtualMachine_GetFaultToleranceStats(self)
    def GoLivePeerVM(self) -> "void" : return _vmkctl.VirtualMachine_GoLivePeerVM(self)
    def SetLocalVMComponentHealth(self, *args) -> "void" : return _vmkctl.VirtualMachine_SetLocalVMComponentHealth(self, *args)
    def GetPeerVMComponentHealth(self, *args) -> "void" : return _vmkctl.VirtualMachine_GetPeerVMComponentHealth(self, *args)
    def GetVscsiIds(self) -> "std::vector< uint64,std::allocator< uint64 > >" : return _vmkctl.VirtualMachine_GetVscsiIds(self)
    def GetIOFilterClassNames(self, *args) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.VirtualMachine_GetIOFilterClassNames(self, *args)
    def GetIOFilterStats(self, *args) -> "HostCtl::Resource::VscsiDiskIOFilterStatsPtr" : return _vmkctl.VirtualMachine_GetIOFilterStats(self, *args)
    def GetVscsiStats(self, *args) -> "HostCtl::Resource::VscsiStatsPtr" : return _vmkctl.VirtualMachine_GetVscsiStats(self, *args)
    def GetVscsiName(self, *args) -> "std::string" : return _vmkctl.VirtualMachine_GetVscsiName(self, *args)
    def GetVscsiInfo(self, *args) -> "HostCtl::Resource::VscsiInfoPtr" : return _vmkctl.VirtualMachine_GetVscsiInfo(self, *args)
    def GetVmxCartelId(self) -> "uint64" : return _vmkctl.VirtualMachine_GetVmxCartelId(self)
    def GetDisplayName(self) -> "std::string" : return _vmkctl.VirtualMachine_GetDisplayName(self)
    def GetVmmWorldId(self) -> "uint64" : return _vmkctl.VirtualMachine_GetVmmWorldId(self)
    def Kill(self, *args) -> "void" : return _vmkctl.VirtualMachine_Kill(self, *args)
    __swig_destroy__ = _vmkctl.delete_VirtualMachine
    __del__ = lambda self : None;
VirtualMachine_swigregister = _vmkctl.VirtualMachine_swigregister
VirtualMachine_swigregister(VirtualMachine)

class ScsiInterface(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScsiInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScsiInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SCSI_IFACE_TYPE_UNKNOWN = _vmkctl.ScsiInterface_SCSI_IFACE_TYPE_UNKNOWN
    SCSI_IFACE_TYPE_BLOCK = _vmkctl.ScsiInterface_SCSI_IFACE_TYPE_BLOCK
    SCSI_IFACE_TYPE_FC = _vmkctl.ScsiInterface_SCSI_IFACE_TYPE_FC
    SCSI_IFACE_TYPE_ISCSI = _vmkctl.ScsiInterface_SCSI_IFACE_TYPE_ISCSI
    SCSI_IFACE_TYPE_IDE = _vmkctl.ScsiInterface_SCSI_IFACE_TYPE_IDE
    SCSI_IFACE_TYPE_ISCSI_VENDOR_SUPPLIED_IMA = _vmkctl.ScsiInterface_SCSI_IFACE_TYPE_ISCSI_VENDOR_SUPPLIED_IMA
    SCSI_IFACE_TYPE_SAS = _vmkctl.ScsiInterface_SCSI_IFACE_TYPE_SAS
    SCSI_IFACE_TYPE_SATA = _vmkctl.ScsiInterface_SCSI_IFACE_TYPE_SATA
    SCSI_IFACE_TYPE_USB = _vmkctl.ScsiInterface_SCSI_IFACE_TYPE_USB
    SCSI_IFACE_TYPE_PARALLEL = _vmkctl.ScsiInterface_SCSI_IFACE_TYPE_PARALLEL
    SCSI_IFACE_TYPE_XSAN = _vmkctl.ScsiInterface_SCSI_IFACE_TYPE_XSAN
    SCSI_IFACE_TYPE_FCOE = _vmkctl.ScsiInterface_SCSI_IFACE_TYPE_FCOE
    SCSI_IFACE_CAP_SECONDLEVEL_ADDRESSING = _vmkctl.ScsiInterface_SCSI_IFACE_CAP_SECONDLEVEL_ADDRESSING
    SCSI_IFACE_CAP_DATA_INTEGRITY = _vmkctl.ScsiInterface_SCSI_IFACE_CAP_DATA_INTEGRITY
    SCSI_ADAPTER_CAP_DRIVER_COMPL_WORLDS = _vmkctl.ScsiInterface_SCSI_ADAPTER_CAP_DRIVER_COMPL_WORLDS
    SCSI_IFACE_CAP_DRIVER_SENSE_DATA_WITH_GOOD_STATUS = _vmkctl.ScsiInterface_SCSI_IFACE_CAP_DRIVER_SENSE_DATA_WITH_GOOD_STATUS
    SCSI_IFACE_CAP_ALL_VALID = _vmkctl.ScsiInterface_SCSI_IFACE_CAP_ALL_VALID
    def GetIdentifier(self) -> "std::string" : return _vmkctl.ScsiInterface_GetIdentifier(self)
    def GetAdapterUid(self) -> "std::string" : return _vmkctl.ScsiInterface_GetAdapterUid(self)
    def GetAdapterCapabilities(self) -> "uint32" : return _vmkctl.ScsiInterface_GetAdapterCapabilities(self)
    def GetDriver(self) -> "std::string" : return _vmkctl.ScsiInterface_GetDriver(self)
    def GetQueueDepth(self) -> "uint32" : return _vmkctl.ScsiInterface_GetQueueDepth(self)
    def GetScsiPaths(self) -> "std::vector< HostCtl::Storage::ScsiPathPtr,std::allocator< HostCtl::Storage::ScsiPathPtr > >" : return _vmkctl.ScsiInterface_GetScsiPaths(self)
    def GetStorageStatistics(self) -> "StorageStatistics" : return _vmkctl.ScsiInterface_GetStorageStatistics(self)
    def GetScsiStats(self, *args) -> "void" : return _vmkctl.ScsiInterface_GetScsiStats(self, *args)
    def GetPciDevice(self) -> "HostCtl::Hardware::PciDevicePtr" : return _vmkctl.ScsiInterface_GetPciDevice(self)
    def GetInterfaceType(self) -> "HostCtl::Storage::ScsiInterface::ScsiInterfaceType" : return _vmkctl.ScsiInterface_GetInterfaceType(self)
    def Rescan(self, *args) -> "void" : return _vmkctl.ScsiInterface_Rescan(self, *args)
    def RescanDiscoverNewDevices(self) -> "void" : return _vmkctl.ScsiInterface_RescanDiscoverNewDevices(self)
    def RescanRemoveDeadDevices(self) -> "Bool" : return _vmkctl.ScsiInterface_RescanRemoveDeadDevices(self)
    def RescanUpdatePathState(self) -> "void" : return _vmkctl.ScsiInterface_RescanUpdatePathState(self)
    def IsVirtual(self) -> "bool" : return _vmkctl.ScsiInterface_IsVirtual(self)
    def IsLocalOnly(self) -> "bool" : return _vmkctl.ScsiInterface_IsLocalOnly(self)
    __swig_getmethods__["GetValidInterfaceType"] = lambda x: _vmkctl.ScsiInterface_GetValidInterfaceType
    if _newclass:GetValidInterfaceType = staticmethod(_vmkctl.ScsiInterface_GetValidInterfaceType)
    __swig_getmethods__["GetInterfaceTypeString"] = lambda x: _vmkctl.ScsiInterface_GetInterfaceTypeString
    if _newclass:GetInterfaceTypeString = staticmethod(_vmkctl.ScsiInterface_GetInterfaceTypeString)
    __swig_destroy__ = _vmkctl.delete_ScsiInterface
    __del__ = lambda self : None;
ScsiInterface_swigregister = _vmkctl.ScsiInterface_swigregister
ScsiInterface_swigregister(ScsiInterface)

def ScsiInterface_GetValidInterfaceType(*args) -> "HostCtl::Storage::ScsiInterface::ScsiInterfaceType" :
  return _vmkctl.ScsiInterface_GetValidInterfaceType(*args)
ScsiInterface_GetValidInterfaceType = _vmkctl.ScsiInterface_GetValidInterfaceType

def ScsiInterface_GetInterfaceTypeString(*args) -> "std::string" :
  return _vmkctl.ScsiInterface_GetInterfaceTypeString(*args)
ScsiInterface_GetInterfaceTypeString = _vmkctl.ScsiInterface_GetInterfaceTypeString

class ScsiInterfaceImpl(ScsiInterface,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [ScsiInterface,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScsiInterfaceImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [ScsiInterface,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScsiInterfaceImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_ScsiInterfaceImpl
    __del__ = lambda self : None;
    def GetIdentifier(self) -> "std::string" : return _vmkctl.ScsiInterfaceImpl_GetIdentifier(self)
    def GetAdapterUid(self) -> "std::string" : return _vmkctl.ScsiInterfaceImpl_GetAdapterUid(self)
    def GetAdapterCapabilities(self) -> "uint32" : return _vmkctl.ScsiInterfaceImpl_GetAdapterCapabilities(self)
    def ProtMask(self) -> "uint32" : return _vmkctl.ScsiInterfaceImpl_ProtMask(self)
    def GuardType(self) -> "std::string" : return _vmkctl.ScsiInterfaceImpl_GuardType(self)
    def GetDriver(self) -> "std::string" : return _vmkctl.ScsiInterfaceImpl_GetDriver(self)
    def GetQueueDepth(self) -> "uint32" : return _vmkctl.ScsiInterfaceImpl_GetQueueDepth(self)
    def GetScsiPaths(self) -> "std::vector< HostCtl::Storage::ScsiPathPtr,std::allocator< HostCtl::Storage::ScsiPathPtr > >" : return _vmkctl.ScsiInterfaceImpl_GetScsiPaths(self)
    def GetStorageStatistics(self) -> "HostCtl::Storage::StorageStatistics" : return _vmkctl.ScsiInterfaceImpl_GetStorageStatistics(self)
    def GetScsiStats(self, *args) -> "void" : return _vmkctl.ScsiInterfaceImpl_GetScsiStats(self, *args)
    def GetPciDevice(self) -> "HostCtl::Hardware::PciDevicePtr" : return _vmkctl.ScsiInterfaceImpl_GetPciDevice(self)
    def GetInterfaceType(self) -> "HostCtl::Storage::ScsiInterface::ScsiInterfaceType" : return _vmkctl.ScsiInterfaceImpl_GetInterfaceType(self)
    def Rescan(self, *args) -> "void" : return _vmkctl.ScsiInterfaceImpl_Rescan(self, *args)
    def RescanDiscoverNewDevices(self) -> "void" : return _vmkctl.ScsiInterfaceImpl_RescanDiscoverNewDevices(self)
    def RescanRemoveDeadDevices(self) -> "Bool" : return _vmkctl.ScsiInterfaceImpl_RescanRemoveDeadDevices(self)
    def RescanUpdatePathState(self) -> "void" : return _vmkctl.ScsiInterfaceImpl_RescanUpdatePathState(self)
    def IsLocalOnly(self) -> "bool" : return _vmkctl.ScsiInterfaceImpl_IsLocalOnly(self)
    def Refresh(self) -> "void" : return _vmkctl.ScsiInterfaceImpl_Refresh(self)
    def IsVirtual(self) -> "bool" : return _vmkctl.ScsiInterfaceImpl_IsVirtual(self)
    def Print(self, *args) -> "void" : return _vmkctl.ScsiInterfaceImpl_Print(self, *args)
    def GetTransportMapping(self, *args) -> "HostCtl::Storage::TransportMappingPtr" : return _vmkctl.ScsiInterfaceImpl_GetTransportMapping(self, *args)
ScsiInterfaceImpl_swigregister = _vmkctl.ScsiInterfaceImpl_swigregister
ScsiInterfaceImpl_swigregister(ScsiInterfaceImpl)

class BlockScsiInterface(ScsiInterface):
    __swig_setmethods__ = {}
    for _s in [ScsiInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockScsiInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [ScsiInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockScsiInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_BlockScsiInterface
    __del__ = lambda self : None;
BlockScsiInterface_swigregister = _vmkctl.BlockScsiInterface_swigregister
BlockScsiInterface_swigregister(BlockScsiInterface)

class BlockScsiInterfaceImpl(BlockScsiInterface,ScsiInterfaceImpl):
    __swig_setmethods__ = {}
    for _s in [BlockScsiInterface,ScsiInterfaceImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockScsiInterfaceImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [BlockScsiInterface,ScsiInterfaceImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockScsiInterfaceImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_BlockScsiInterfaceImpl
    __del__ = lambda self : None;
    def GetInterfaceType(self) -> "HostCtl::Storage::ScsiInterface::ScsiInterfaceType" : return _vmkctl.BlockScsiInterfaceImpl_GetInterfaceType(self)
    def Rescan(self, *args) -> "void" : return _vmkctl.BlockScsiInterfaceImpl_Rescan(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.BlockScsiInterfaceImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.BlockScsiInterfaceImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.BlockScsiInterfaceImpl_Print(self, *args)
BlockScsiInterfaceImpl_swigregister = _vmkctl.BlockScsiInterfaceImpl_swigregister
BlockScsiInterfaceImpl_swigregister(BlockScsiInterfaceImpl)

class TransportMapping(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransportMapping, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransportMapping, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    TRANSPORT_TYPE_FC = _vmkctl.TransportMapping_TRANSPORT_TYPE_FC
    TRANSPORT_TYPE_ISCSI = _vmkctl.TransportMapping_TRANSPORT_TYPE_ISCSI
    TRANSPORT_TYPE_GENERIC = _vmkctl.TransportMapping_TRANSPORT_TYPE_GENERIC
    TRANSPORT_TYPE_FCOE = _vmkctl.TransportMapping_TRANSPORT_TYPE_FCOE
    __swig_destroy__ = _vmkctl.delete_TransportMapping
    __del__ = lambda self : None;
    def GetType(self) -> "HostCtl::Storage::TransportMapping::TransportType" : return _vmkctl.TransportMapping_GetType(self)
    def GetPathString(self) -> "std::string" : return _vmkctl.TransportMapping_GetPathString(self)
    def GetTargetString(self) -> "std::string" : return _vmkctl.TransportMapping_GetTargetString(self)
    def GetAdapterString(self) -> "std::string" : return _vmkctl.TransportMapping_GetAdapterString(self)
TransportMapping_swigregister = _vmkctl.TransportMapping_swigregister
TransportMapping_swigregister(TransportMapping)

class TransportMappingImpl(TransportMapping):
    __swig_setmethods__ = {}
    for _s in [TransportMapping]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransportMappingImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [TransportMapping]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransportMappingImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Print(self, *args) -> "void" : return _vmkctl.TransportMappingImpl_Print(self, *args)
    __swig_destroy__ = _vmkctl.delete_TransportMappingImpl
    __del__ = lambda self : None;
TransportMappingImpl_swigregister = _vmkctl.TransportMappingImpl_swigregister
TransportMappingImpl_swigregister(TransportMappingImpl)

class FibreChannelTransportMapping(TransportMapping):
    __swig_setmethods__ = {}
    for _s in [TransportMapping]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FibreChannelTransportMapping, name, value)
    __swig_getmethods__ = {}
    for _s in [TransportMapping]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FibreChannelTransportMapping, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetTargetWorldWidePortName(self) -> "uint64" : return _vmkctl.FibreChannelTransportMapping_GetTargetWorldWidePortName(self)
    def GetTargetWorldWidePortNameString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMapping_GetTargetWorldWidePortNameString(self)
    def GetTargetWorldWideNodeName(self) -> "uint64" : return _vmkctl.FibreChannelTransportMapping_GetTargetWorldWideNodeName(self)
    def GetTargetWorldWideNodeNameString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMapping_GetTargetWorldWideNodeNameString(self)
    def GetAdapterWorldWidePortName(self) -> "uint64" : return _vmkctl.FibreChannelTransportMapping_GetAdapterWorldWidePortName(self)
    def GetAdapterWorldWidePortNameString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMapping_GetAdapterWorldWidePortNameString(self)
    def GetAdapterWorldWideNodeName(self) -> "uint64" : return _vmkctl.FibreChannelTransportMapping_GetAdapterWorldWideNodeName(self)
    def GetAdapterWorldWideNodeNameString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMapping_GetAdapterWorldWideNodeNameString(self)
    def GetType(self) -> "HostCtl::Storage::TransportMapping::TransportType" : return _vmkctl.FibreChannelTransportMapping_GetType(self)
    def GetPathString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMapping_GetPathString(self)
    def GetTargetString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMapping_GetTargetString(self)
    def GetAdapterString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMapping_GetAdapterString(self)
    __swig_destroy__ = _vmkctl.delete_FibreChannelTransportMapping
    __del__ = lambda self : None;
FibreChannelTransportMapping_swigregister = _vmkctl.FibreChannelTransportMapping_swigregister
FibreChannelTransportMapping_swigregister(FibreChannelTransportMapping)

class FibreChannelTransportMappingImpl(TransportMappingImpl,FibreChannelTransportMapping):
    __swig_setmethods__ = {}
    for _s in [TransportMappingImpl,FibreChannelTransportMapping]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FibreChannelTransportMappingImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [TransportMappingImpl,FibreChannelTransportMapping]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FibreChannelTransportMappingImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_FibreChannelTransportMappingImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_FibreChannelTransportMappingImpl
    __del__ = lambda self : None;
    def GetTargetWorldWidePortName(self) -> "uint64" : return _vmkctl.FibreChannelTransportMappingImpl_GetTargetWorldWidePortName(self)
    def GetTargetWorldWidePortNameString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMappingImpl_GetTargetWorldWidePortNameString(self)
    def GetTargetWorldWideNodeName(self) -> "uint64" : return _vmkctl.FibreChannelTransportMappingImpl_GetTargetWorldWideNodeName(self)
    def GetTargetWorldWideNodeNameString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMappingImpl_GetTargetWorldWideNodeNameString(self)
    def GetAdapterWorldWidePortName(self) -> "uint64" : return _vmkctl.FibreChannelTransportMappingImpl_GetAdapterWorldWidePortName(self)
    def GetAdapterWorldWidePortNameString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMappingImpl_GetAdapterWorldWidePortNameString(self)
    def GetAdapterWorldWideNodeName(self) -> "uint64" : return _vmkctl.FibreChannelTransportMappingImpl_GetAdapterWorldWideNodeName(self)
    def GetAdapterWorldWideNodeNameString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMappingImpl_GetAdapterWorldWideNodeNameString(self)
    def GetType(self) -> "TransportMapping::TransportType" : return _vmkctl.FibreChannelTransportMappingImpl_GetType(self)
    def GetPathString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMappingImpl_GetPathString(self)
    def GetTargetString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMappingImpl_GetTargetString(self)
    def GetAdapterString(self) -> "std::string" : return _vmkctl.FibreChannelTransportMappingImpl_GetAdapterString(self)
    def Print(self, *args) -> "void" : return _vmkctl.FibreChannelTransportMappingImpl_Print(self, *args)
FibreChannelTransportMappingImpl_swigregister = _vmkctl.FibreChannelTransportMappingImpl_swigregister
FibreChannelTransportMappingImpl_swigregister(FibreChannelTransportMappingImpl)

class iScsiTransportMapping(TransportMapping):
    __swig_setmethods__ = {}
    for _s in [TransportMapping]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiTransportMapping, name, value)
    __swig_getmethods__ = {}
    for _s in [TransportMapping]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiTransportMapping, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetPortAddressList(self) -> "std::vector< HostCtl::Network::PortAddress,std::allocator< HostCtl::Network::PortAddress > >" : return _vmkctl.iScsiTransportMapping_GetPortAddressList(self)
    def SetPortAddressList(self, *args) -> "void" : return _vmkctl.iScsiTransportMapping_SetPortAddressList(self, *args)
    def GetiScsiTargetName(self) -> "std::string" : return _vmkctl.iScsiTransportMapping_GetiScsiTargetName(self)
    def GetiScsiTargetAlias(self) -> "std::string" : return _vmkctl.iScsiTransportMapping_GetiScsiTargetAlias(self)
    def SetiScsiTargetAlias(self, *args) -> "void" : return _vmkctl.iScsiTransportMapping_SetiScsiTargetAlias(self, *args)
    def GetSessionId(self) -> "std::string" : return _vmkctl.iScsiTransportMapping_GetSessionId(self)
    def GetPortalTag(self) -> "std::string" : return _vmkctl.iScsiTransportMapping_GetPortalTag(self)
    def GetPathString(self) -> "std::string" : return _vmkctl.iScsiTransportMapping_GetPathString(self)
    def GetTargetString(self) -> "std::string" : return _vmkctl.iScsiTransportMapping_GetTargetString(self)
    def GetAdapterString(self) -> "std::string" : return _vmkctl.iScsiTransportMapping_GetAdapterString(self)
    __swig_destroy__ = _vmkctl.delete_iScsiTransportMapping
    __del__ = lambda self : None;
iScsiTransportMapping_swigregister = _vmkctl.iScsiTransportMapping_swigregister
iScsiTransportMapping_swigregister(iScsiTransportMapping)

class iScsiTransportMappingImpl(TransportMappingImpl,iScsiTransportMapping):
    __swig_setmethods__ = {}
    for _s in [TransportMappingImpl,iScsiTransportMapping]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiTransportMappingImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [TransportMappingImpl,iScsiTransportMapping]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiTransportMappingImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_iScsiTransportMappingImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetType(self) -> "TransportMapping::TransportType" : return _vmkctl.iScsiTransportMappingImpl_GetType(self)
    def GetPortAddressList(self) -> "std::vector< HostCtl::Network::PortAddress,std::allocator< HostCtl::Network::PortAddress > >" : return _vmkctl.iScsiTransportMappingImpl_GetPortAddressList(self)
    def SetPortAddressList(self, *args) -> "void" : return _vmkctl.iScsiTransportMappingImpl_SetPortAddressList(self, *args)
    def GetiScsiTargetName(self) -> "std::string" : return _vmkctl.iScsiTransportMappingImpl_GetiScsiTargetName(self)
    def GetiScsiTargetAlias(self) -> "std::string" : return _vmkctl.iScsiTransportMappingImpl_GetiScsiTargetAlias(self)
    def SetiScsiTargetAlias(self, *args) -> "void" : return _vmkctl.iScsiTransportMappingImpl_SetiScsiTargetAlias(self, *args)
    def GetSessionId(self) -> "std::string" : return _vmkctl.iScsiTransportMappingImpl_GetSessionId(self)
    def GetPortalTag(self) -> "std::string" : return _vmkctl.iScsiTransportMappingImpl_GetPortalTag(self)
    def GetPathString(self) -> "std::string" : return _vmkctl.iScsiTransportMappingImpl_GetPathString(self)
    def GetTargetString(self) -> "std::string" : return _vmkctl.iScsiTransportMappingImpl_GetTargetString(self)
    def GetAdapterString(self) -> "std::string" : return _vmkctl.iScsiTransportMappingImpl_GetAdapterString(self)
    def Print(self, *args) -> "void" : return _vmkctl.iScsiTransportMappingImpl_Print(self, *args)
    __swig_destroy__ = _vmkctl.delete_iScsiTransportMappingImpl
    __del__ = lambda self : None;
iScsiTransportMappingImpl_swigregister = _vmkctl.iScsiTransportMappingImpl_swigregister
iScsiTransportMappingImpl_swigregister(iScsiTransportMappingImpl)

class IdeScsiInterface(ScsiInterface):
    __swig_setmethods__ = {}
    for _s in [ScsiInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdeScsiInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [ScsiInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdeScsiInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_IdeScsiInterface
    __del__ = lambda self : None;
IdeScsiInterface_swigregister = _vmkctl.IdeScsiInterface_swigregister
IdeScsiInterface_swigregister(IdeScsiInterface)

class IdeScsiInterfaceImpl(IdeScsiInterface,ScsiInterfaceImpl):
    __swig_setmethods__ = {}
    for _s in [IdeScsiInterface,ScsiInterfaceImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdeScsiInterfaceImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [IdeScsiInterface,ScsiInterfaceImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdeScsiInterfaceImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_IdeScsiInterfaceImpl
    __del__ = lambda self : None;
    def GetInterfaceType(self) -> "HostCtl::Storage::ScsiInterface::ScsiInterfaceType" : return _vmkctl.IdeScsiInterfaceImpl_GetInterfaceType(self)
    def CheckProcDevice(self, *args) -> "bool" : return _vmkctl.IdeScsiInterfaceImpl_CheckProcDevice(self, *args)
    def Rescan(self, *args) -> "void" : return _vmkctl.IdeScsiInterfaceImpl_Rescan(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.IdeScsiInterfaceImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.IdeScsiInterfaceImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.IdeScsiInterfaceImpl_Print(self, *args)
IdeScsiInterfaceImpl_swigregister = _vmkctl.IdeScsiInterfaceImpl_swigregister
IdeScsiInterfaceImpl_swigregister(IdeScsiInterfaceImpl)

ISCSI_CHAP_PROHIBITED = _vmkctl.ISCSI_CHAP_PROHIBITED
ISCSI_CHAP_DISCOURAGED = _vmkctl.ISCSI_CHAP_DISCOURAGED
ISCSI_CHAP_PREFERRED = _vmkctl.ISCSI_CHAP_PREFERRED
ISCSI_CHAP_REQUIRED = _vmkctl.ISCSI_CHAP_REQUIRED
class iScsiChapParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiChapParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiChapParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["retries"] = _vmkctl.iScsiChapParameters_retries_set
    __swig_getmethods__["retries"] = _vmkctl.iScsiChapParameters_retries_get
    if _newclass:retries = _swig_property(_vmkctl.iScsiChapParameters_retries_get, _vmkctl.iScsiChapParameters_retries_set)
    __swig_setmethods__["name"] = _vmkctl.iScsiChapParameters_name_set
    __swig_getmethods__["name"] = _vmkctl.iScsiChapParameters_name_get
    if _newclass:name = _swig_property(_vmkctl.iScsiChapParameters_name_get, _vmkctl.iScsiChapParameters_name_set)
    __swig_setmethods__["minValueLength"] = _vmkctl.iScsiChapParameters_minValueLength_set
    __swig_getmethods__["minValueLength"] = _vmkctl.iScsiChapParameters_minValueLength_get
    if _newclass:minValueLength = _swig_property(_vmkctl.iScsiChapParameters_minValueLength_get, _vmkctl.iScsiChapParameters_minValueLength_set)
    __swig_setmethods__["maxValueLength"] = _vmkctl.iScsiChapParameters_maxValueLength_set
    __swig_getmethods__["maxValueLength"] = _vmkctl.iScsiChapParameters_maxValueLength_get
    if _newclass:maxValueLength = _swig_property(_vmkctl.iScsiChapParameters_maxValueLength_get, _vmkctl.iScsiChapParameters_maxValueLength_set)
    __swig_setmethods__["challengeSecret"] = _vmkctl.iScsiChapParameters_challengeSecret_set
    __swig_getmethods__["challengeSecret"] = _vmkctl.iScsiChapParameters_challengeSecret_get
    if _newclass:challengeSecret = _swig_property(_vmkctl.iScsiChapParameters_challengeSecret_get, _vmkctl.iScsiChapParameters_challengeSecret_set)
    __swig_setmethods__["chapType"] = _vmkctl.iScsiChapParameters_chapType_set
    __swig_getmethods__["chapType"] = _vmkctl.iScsiChapParameters_chapType_get
    if _newclass:chapType = _swig_property(_vmkctl.iScsiChapParameters_chapType_get, _vmkctl.iScsiChapParameters_chapType_set)
    def __init__(self): 
        this = _vmkctl.new_iScsiChapParameters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiChapParameters
    __del__ = lambda self : None;
iScsiChapParameters_swigregister = _vmkctl.iScsiChapParameters_swigregister
iScsiChapParameters_swigregister(iScsiChapParameters)

class iScsiSrpParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiSrpParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiSrpParameters, name)
    __repr__ = _swig_repr
    __swig_setmethods__["userName"] = _vmkctl.iScsiSrpParameters_userName_set
    __swig_getmethods__["userName"] = _vmkctl.iScsiSrpParameters_userName_get
    if _newclass:userName = _swig_property(_vmkctl.iScsiSrpParameters_userName_get, _vmkctl.iScsiSrpParameters_userName_set)
    def __init__(self): 
        this = _vmkctl.new_iScsiSrpParameters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiSrpParameters
    __del__ = lambda self : None;
iScsiSrpParameters_swigregister = _vmkctl.iScsiSrpParameters_swigregister
iScsiSrpParameters_swigregister(iScsiSrpParameters)

class iScsiKrb5Parameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiKrb5Parameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiKrb5Parameters, name)
    __repr__ = _swig_repr
    KEY_LENGTH = _vmkctl.iScsiKrb5Parameters_KEY_LENGTH
    __swig_setmethods__["clientKey"] = _vmkctl.iScsiKrb5Parameters_clientKey_set
    __swig_getmethods__["clientKey"] = _vmkctl.iScsiKrb5Parameters_clientKey_get
    if _newclass:clientKey = _swig_property(_vmkctl.iScsiKrb5Parameters_clientKey_get, _vmkctl.iScsiKrb5Parameters_clientKey_set)
    __swig_setmethods__["clientKeyLength"] = _vmkctl.iScsiKrb5Parameters_clientKeyLength_set
    __swig_getmethods__["clientKeyLength"] = _vmkctl.iScsiKrb5Parameters_clientKeyLength_get
    if _newclass:clientKeyLength = _swig_property(_vmkctl.iScsiKrb5Parameters_clientKeyLength_get, _vmkctl.iScsiKrb5Parameters_clientKeyLength_set)
    def __init__(self): 
        this = _vmkctl.new_iScsiKrb5Parameters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiKrb5Parameters
    __del__ = lambda self : None;
iScsiKrb5Parameters_swigregister = _vmkctl.iScsiKrb5Parameters_swigregister
iScsiKrb5Parameters_swigregister(iScsiKrb5Parameters)

class iScsiSpkmParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiSpkmParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiSpkmParameters, name)
    __repr__ = _swig_repr
    KEY_LENGTH = _vmkctl.iScsiSpkmParameters_KEY_LENGTH
    __swig_setmethods__["privateKey"] = _vmkctl.iScsiSpkmParameters_privateKey_set
    __swig_getmethods__["privateKey"] = _vmkctl.iScsiSpkmParameters_privateKey_get
    if _newclass:privateKey = _swig_property(_vmkctl.iScsiSpkmParameters_privateKey_get, _vmkctl.iScsiSpkmParameters_privateKey_set)
    __swig_setmethods__["privateKeyLength"] = _vmkctl.iScsiSpkmParameters_privateKeyLength_set
    __swig_getmethods__["privateKeyLength"] = _vmkctl.iScsiSpkmParameters_privateKeyLength_get
    if _newclass:privateKeyLength = _swig_property(_vmkctl.iScsiSpkmParameters_privateKeyLength_get, _vmkctl.iScsiSpkmParameters_privateKeyLength_set)
    __swig_setmethods__["publicKey"] = _vmkctl.iScsiSpkmParameters_publicKey_set
    __swig_getmethods__["publicKey"] = _vmkctl.iScsiSpkmParameters_publicKey_get
    if _newclass:publicKey = _swig_property(_vmkctl.iScsiSpkmParameters_publicKey_get, _vmkctl.iScsiSpkmParameters_publicKey_set)
    __swig_setmethods__["publicKeyLength"] = _vmkctl.iScsiSpkmParameters_publicKeyLength_set
    __swig_getmethods__["publicKeyLength"] = _vmkctl.iScsiSpkmParameters_publicKeyLength_get
    if _newclass:publicKeyLength = _swig_property(_vmkctl.iScsiSpkmParameters_publicKeyLength_get, _vmkctl.iScsiSpkmParameters_publicKeyLength_set)
    def __init__(self): 
        this = _vmkctl.new_iScsiSpkmParameters()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiSpkmParameters
    __del__ = lambda self : None;
iScsiSpkmParameters_swigregister = _vmkctl.iScsiSpkmParameters_swigregister
iScsiSpkmParameters_swigregister(iScsiSpkmParameters)

class TargetAddress(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TargetAddress, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TargetAddress, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_TargetAddress(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetHostAddress(self) -> "HostCtl::Network::HostAddress" : return _vmkctl.TargetAddress_GetHostAddress(self)
    def GetPortNumber(self) -> "uint16" : return _vmkctl.TargetAddress_GetPortNumber(self)
    def __eq__(self, *args) -> "bool" : return _vmkctl.TargetAddress___eq__(self, *args)
    __swig_destroy__ = _vmkctl.delete_TargetAddress
    __del__ = lambda self : None;
TargetAddress_swigregister = _vmkctl.TargetAddress_swigregister
TargetAddress_swigregister(TargetAddress)

class StaticTarget(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StaticTarget, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StaticTarget, name)
    __repr__ = _swig_repr
    STATIC_DISCOVERY = _vmkctl.StaticTarget_STATIC_DISCOVERY
    SENDTARGET_DISCOVERY = _vmkctl.StaticTarget_SENDTARGET_DISCOVERY
    SLP_DISCOVERY = _vmkctl.StaticTarget_SLP_DISCOVERY
    ISNS_DISCOVERY = _vmkctl.StaticTarget_ISNS_DISCOVERY
    UNKNOWN_DISCOVERY = _vmkctl.StaticTarget_UNKNOWN_DISCOVERY
    def __init__(self, *args): 
        this = _vmkctl.new_StaticTarget(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetName(self) -> "std::string" : return _vmkctl.StaticTarget_GetName(self)
    def GetAddress(self) -> "HostCtl::Storage::TargetAddress" : return _vmkctl.StaticTarget_GetAddress(self)
    def GetSeqNo(self) -> "uint64" : return _vmkctl.StaticTarget_GetSeqNo(self)
    def GetDiscoveryMethod(self) -> "HostCtl::Storage::StaticTarget::DiscoveryMethod" : return _vmkctl.StaticTarget_GetDiscoveryMethod(self)
    def __eq__(self, *args) -> "bool" : return _vmkctl.StaticTarget___eq__(self, *args)
    __swig_destroy__ = _vmkctl.delete_StaticTarget
    __del__ = lambda self : None;
StaticTarget_swigregister = _vmkctl.StaticTarget_swigregister
StaticTarget_swigregister(StaticTarget)

ISCSI_AUTH_TYPE_INITIATOR = _vmkctl.ISCSI_AUTH_TYPE_INITIATOR
ISCSI_AUTH_TYPE_MUTUAL = _vmkctl.ISCSI_AUTH_TYPE_MUTUAL
class iScsiInterface(ScsiInterface):
    __swig_setmethods__ = {}
    for _s in [ScsiInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [ScsiInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    OPERATION_OK = _vmkctl.iScsiInterface_OPERATION_OK
    REBOOT_REQUIRED = _vmkctl.iScsiInterface_REBOOT_REQUIRED
    RESET_REQUIRED = _vmkctl.iScsiInterface_RESET_REQUIRED
    NOT_SUPPORTED = _vmkctl.iScsiInterface_NOT_SUPPORTED
    HBA_STATUS_ONLINE = _vmkctl.iScsiInterface_HBA_STATUS_ONLINE
    HBA_STATUS_OFFLINE = _vmkctl.iScsiInterface_HBA_STATUS_OFFLINE
    HBA_STATUS_UNBOUND = _vmkctl.iScsiInterface_HBA_STATUS_UNBOUND
    HBA_STATUS_UNKNOWN = _vmkctl.iScsiInterface_HBA_STATUS_UNKNOWN
    DISCOVERY_SUCCESS = _vmkctl.iScsiInterface_DISCOVERY_SUCCESS
    DISCOVERY_TIMEOUT = _vmkctl.iScsiInterface_DISCOVERY_TIMEOUT
    DISCOVERY_FAILURE = _vmkctl.iScsiInterface_DISCOVERY_FAILURE
    DISCOVERY_UNKNOWN = _vmkctl.iScsiInterface_DISCOVERY_UNKNOWN
    NETWORK_BINDING_NOT_SUPPORTED = _vmkctl.iScsiInterface_NETWORK_BINDING_NOT_SUPPORTED
    NETWORK_BINDING_OPTIONAL = _vmkctl.iScsiInterface_NETWORK_BINDING_OPTIONAL
    NETWORK_BINDING_REQUIRED = _vmkctl.iScsiInterface_NETWORK_BINDING_REQUIRED
    def IsSoftwareiScsi(self) -> "bool" : return _vmkctl.iScsiInterface_IsSoftwareiScsi(self)
    def CanBeDisabled(self) -> "bool" : return _vmkctl.iScsiInterface_CanBeDisabled(self)
    def GetNetworkBindingSupport(self) -> "HostCtl::Storage::iScsiInterface::iScsiNetworkBindingSupport" : return _vmkctl.iScsiInterface_GetNetworkBindingSupport(self)
    def SoftReset(self) -> "void" : return _vmkctl.iScsiInterface_SoftReset(self)
    def HardReset(self) -> "void" : return _vmkctl.iScsiInterface_HardReset(self)
    def DiscoverTargets(self) -> "void" : return _vmkctl.iScsiInterface_DiscoverTargets(self)
    def GetDiscoveryStatus(self) -> "HostCtl::Storage::iScsiInterface::iScsiDiscoveryStatus" : return _vmkctl.iScsiInterface_GetDiscoveryStatus(self)
    def GetiScsiBoundNicList(self, *args) -> "void" : return _vmkctl.iScsiInterface_GetiScsiBoundNicList(self, *args)
    def CheckiScsiNicCompliance(self, *args) -> "void" : return _vmkctl.iScsiInterface_CheckiScsiNicCompliance(self, *args)
    def GetiScsiCandidateNicList(self, *args) -> "void" : return _vmkctl.iScsiInterface_GetiScsiCandidateNicList(self, *args)
    def GetiScsiPnicList(self, *args) -> "void" : return _vmkctl.iScsiInterface_GetiScsiPnicList(self, *args)
    def GetiScsiVnicList(self, *args) -> "void" : return _vmkctl.iScsiInterface_GetiScsiVnicList(self, *args)
    def AddiScsiBoundNic(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_AddiScsiBoundNic(self, *args)
    def RemoveiScsiBoundNic(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_RemoveiScsiBoundNic(self, *args)
    def GetiScsiCapabilities(self) -> "iScsiCapabilities" : return _vmkctl.iScsiInterface_GetiScsiCapabilities(self)
    def GetPhysicalHbaProperties(self) -> "iScsiPhysicalHbaProperties" : return _vmkctl.iScsiInterface_GetPhysicalHbaProperties(self)
    def GetTargetProperties(self, *args) -> "iScsiTargetProperties" : return _vmkctl.iScsiInterface_GetTargetProperties(self, *args)
    def GetiScsiName(self) -> "std::string" : return _vmkctl.iScsiInterface_GetiScsiName(self)
    def SetiScsiName(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetiScsiName(self, *args)
    def GetiScsiAlias(self) -> "std::string" : return _vmkctl.iScsiInterface_GetiScsiAlias(self)
    def SetiScsiAlias(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetiScsiAlias(self, *args)
    def EnableSlpDiscovery(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_EnableSlpDiscovery(self, *args)
    def DisableSlpDiscovery(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_DisableSlpDiscovery(self)
    def HasSlpDiscovery(self, *args) -> "bool" : return _vmkctl.iScsiInterface_HasSlpDiscovery(self, *args)
    def EnableiSnsDiscovery(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_EnableiSnsDiscovery(self, *args)
    def DisableiSnsDiscovery(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_DisableiSnsDiscovery(self)
    def RemoveiSnsDiscovery(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_RemoveiSnsDiscovery(self, *args)
    def HasiSnsDiscovery(self, *args) -> "bool" : return _vmkctl.iScsiInterface_HasiSnsDiscovery(self, *args)
    def GetIsnsDiscAddrParms(self, *args) -> "iSnsParms" : return _vmkctl.iScsiInterface_GetIsnsDiscAddrParms(self, *args)
    def SetIsnsDiscAddrParms(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetIsnsDiscAddrParms(self, *args)
    def GetAdapterIsnsParms(self) -> "iSnsParms" : return _vmkctl.iScsiInterface_GetAdapterIsnsParms(self)
    def SetAdapterIsnsParms(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetAdapterIsnsParms(self, *args)
    def EnableStaticDiscovery(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_EnableStaticDiscovery(self)
    def DisableStaticDiscovery(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_DisableStaticDiscovery(self)
    def HasStaticDiscovery(self) -> "bool" : return _vmkctl.iScsiInterface_HasStaticDiscovery(self)
    def AddStaticDiscoveryTarget(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_AddStaticDiscoveryTarget(self, *args)
    def RemoveStaticDiscoveryTarget(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_RemoveStaticDiscoveryTarget(self, *args)
    def EnableSendTargetsDiscovery(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_EnableSendTargetsDiscovery(self)
    def DisableSendTargetsDiscovery(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_DisableSendTargetsDiscovery(self)
    def HasSendTargetsDiscovery(self) -> "bool" : return _vmkctl.iScsiInterface_HasSendTargetsDiscovery(self)
    def AddSendTargetsDiscoveryAddress(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_AddSendTargetsDiscoveryAddress(self, *args)
    def RemoveSendTargetsDiscoveryAddress(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_RemoveSendTargetsDiscoveryAddress(self, *args)
    def GetNetworkProperties(self) -> "iScsiNetworkProperties" : return _vmkctl.iScsiInterface_GetNetworkProperties(self)
    def GetNetworkStatus(self) -> "iScsiNetworkStatus" : return _vmkctl.iScsiInterface_GetNetworkStatus(self)
    def GetPnpProperties(self) -> "iScsiPnpProperties" : return _vmkctl.iScsiInterface_GetPnpProperties(self)
    def SetIpConfig(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetIpConfig(self, *args)
    def SetIpv4Address(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetIpv4Address(self, *args)
    def SetIpv4Netmask(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetIpv4Netmask(self, *args)
    def SetGateway(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetGateway(self, *args)
    def SetGateway6(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetGateway6(self, *args)
    def SetDnsServer(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetDnsServer(self, *args)
    def ConfigIpv6Address(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_ConfigIpv6Address(self, *args)
    def SetIpv6ConfigMethod(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetIpv6ConfigMethod(self, *args)
    def EnableDhcpv4(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_EnableDhcpv4(self, *args)
    def EnableIP(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_EnableIP(self, *args)
    def GetHbaStatus(self) -> "HostCtl::Storage::iScsiInterface::iScsiHbaStatus" : return _vmkctl.iScsiInterface_GetHbaStatus(self)
    def SetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetChapAuthorization(self, *args)
    def SetStaticTargetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetStaticTargetChapAuthorization(self, *args)
    def SetSendTargetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetSendTargetChapAuthorization(self, *args)
    def EnableChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_EnableChapAuthorization(self, *args)
    def EnableStaticTargetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_EnableStaticTargetChapAuthorization(self, *args)
    def EnableSendTargetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_EnableSendTargetChapAuthorization(self, *args)
    def DisableChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_DisableChapAuthorization(self, *args)
    def DisableStaticTargetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_DisableStaticTargetChapAuthorization(self, *args)
    def DisableSendTargetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_DisableSendTargetChapAuthorization(self, *args)
    def HasChapAuthorization(self, *args) -> "bool" : return _vmkctl.iScsiInterface_HasChapAuthorization(self, *args)
    def HasStaticTargetChapAuthorization(self, *args) -> "bool" : return _vmkctl.iScsiInterface_HasStaticTargetChapAuthorization(self, *args)
    def HasSendTargetChapAuthorization(self, *args) -> "bool" : return _vmkctl.iScsiInterface_HasSendTargetChapAuthorization(self, *args)
    def EnableSrpAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_EnableSrpAuthorization(self, *args)
    def DisableSrpAuthorization(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_DisableSrpAuthorization(self)
    def HasSrpAuthorization(self, *args) -> "bool" : return _vmkctl.iScsiInterface_HasSrpAuthorization(self, *args)
    def EnableKrb5Authorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_EnableKrb5Authorization(self, *args)
    def DisableKrb5Authorization(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_DisableKrb5Authorization(self)
    def HasKrb5Authorization(self, *args) -> "bool" : return _vmkctl.iScsiInterface_HasKrb5Authorization(self, *args)
    def EnableSpkm1Authorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_EnableSpkm1Authorization(self, *args)
    def DisableSpkm1Authorization(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_DisableSpkm1Authorization(self)
    def HasSpkm1Authorization(self, *args) -> "bool" : return _vmkctl.iScsiInterface_HasSpkm1Authorization(self, *args)
    def EnableSpkm2Authorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_EnableSpkm2Authorization(self, *args)
    def DisableSpkm2Authorization(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_DisableSpkm2Authorization(self)
    def HasSpkm2Authorization(self, *args) -> "bool" : return _vmkctl.iScsiInterface_HasSpkm2Authorization(self, *args)
    def DisableAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_DisableAuthorization(self, *args)
    def SetHeaderDigest(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetHeaderDigest(self, *args)
    def SetTargetHeaderDigest(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetTargetHeaderDigest(self, *args)
    def GetHeaderDigest(self) -> "iScsiDigestType" : return _vmkctl.iScsiInterface_GetHeaderDigest(self)
    def GetTargetHeaderDigest(self, *args) -> "iScsiDigestType" : return _vmkctl.iScsiInterface_GetTargetHeaderDigest(self, *args)
    def SetDataDigest(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetDataDigest(self, *args)
    def SetTargetDataDigest(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetTargetDataDigest(self, *args)
    def GetDataDigest(self) -> "iScsiDigestType" : return _vmkctl.iScsiInterface_GetDataDigest(self)
    def GetTargetDataDigest(self, *args) -> "iScsiDigestType" : return _vmkctl.iScsiInterface_GetTargetDataDigest(self, *args)
    def SetArpRedirectEnabled(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetArpRedirectEnabled(self, *args)
    def IsArpRedirectEnabled(self) -> "bool" : return _vmkctl.iScsiInterface_IsArpRedirectEnabled(self)
    def SetMtu(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetMtu(self, *args)
    def GetMtu(self) -> "int" : return _vmkctl.iScsiInterface_GetMtu(self)
    def SetMtuEnabled(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetMtuEnabled(self, *args)
    def IsMtuEnabled(self) -> "bool" : return _vmkctl.iScsiInterface_IsMtuEnabled(self)
    def SetAdapterParms(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetAdapterParms(self, *args)
    def GetAdapterParms(self) -> "iScsiParms" : return _vmkctl.iScsiInterface_GetAdapterParms(self)
    def SetTargetParms(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetTargetParms(self, *args)
    def GetTargetParms(self, *args) -> "iScsiParms" : return _vmkctl.iScsiInterface_GetTargetParms(self, *args)
    def ClearBootFlag(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_ClearBootFlag(self, *args)
    def SetBootFlag(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterface_SetBootFlag(self, *args)
    def CreateVnicSessionMap(self) -> "void" : return _vmkctl.iScsiInterface_CreateVnicSessionMap(self)
    def ReleaseVnicSessionMap(self) -> "void" : return _vmkctl.iScsiInterface_ReleaseVnicSessionMap(self)
    def GetVnicForPath(self, *args) -> "void" : return _vmkctl.iScsiInterface_GetVnicForPath(self, *args)
    def GetAdapterStats(self) -> "iScsiAdapterStats" : return _vmkctl.iScsiInterface_GetAdapterStats(self)
    __swig_destroy__ = _vmkctl.delete_iScsiInterface
    __del__ = lambda self : None;
iScsiInterface_swigregister = _vmkctl.iScsiInterface_swigregister
iScsiInterface_swigregister(iScsiInterface)

class iScsiInterfaceCache(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiInterfaceCache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiInterfaceCache, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_iScsiInterfaceCache()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiInterfaceCache
    __del__ = lambda self : None;
iScsiInterfaceCache_swigregister = _vmkctl.iScsiInterfaceCache_swigregister
iScsiInterfaceCache_swigregister(iScsiInterfaceCache)

class iScsiPathInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiPathInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiPathInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["targetName"] = _vmkctl.iScsiPathInfo_targetName_set
    __swig_getmethods__["targetName"] = _vmkctl.iScsiPathInfo_targetName_get
    if _newclass:targetName = _swig_property(_vmkctl.iScsiPathInfo_targetName_get, _vmkctl.iScsiPathInfo_targetName_set)
    __swig_setmethods__["isid"] = _vmkctl.iScsiPathInfo_isid_set
    __swig_getmethods__["isid"] = _vmkctl.iScsiPathInfo_isid_get
    if _newclass:isid = _swig_property(_vmkctl.iScsiPathInfo_isid_get, _vmkctl.iScsiPathInfo_isid_set)
    __swig_setmethods__["tpgt"] = _vmkctl.iScsiPathInfo_tpgt_set
    __swig_getmethods__["tpgt"] = _vmkctl.iScsiPathInfo_tpgt_get
    if _newclass:tpgt = _swig_property(_vmkctl.iScsiPathInfo_tpgt_get, _vmkctl.iScsiPathInfo_tpgt_set)
    def __init__(self): 
        this = _vmkctl.new_iScsiPathInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiPathInfo
    __del__ = lambda self : None;
iScsiPathInfo_swigregister = _vmkctl.iScsiPathInfo_swigregister
iScsiPathInfo_swigregister(iScsiPathInfo)

class iScsiInterfaceImpl(iScsiInterface,ScsiInterfaceImpl):
    __swig_setmethods__ = {}
    for _s in [iScsiInterface,ScsiInterfaceImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiInterfaceImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [iScsiInterface,ScsiInterfaceImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiInterfaceImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ISCSI_MTU_DISABLE = _vmkctl.iScsiInterfaceImpl_ISCSI_MTU_DISABLE
    ISCSI_MTU_ENABLE = _vmkctl.iScsiInterfaceImpl_ISCSI_MTU_ENABLE
    __swig_destroy__ = _vmkctl.delete_iScsiInterfaceImpl
    __del__ = lambda self : None;
    def GetInterfaceType(self) -> "ScsiInterface::ScsiInterfaceType" : return _vmkctl.iScsiInterfaceImpl_GetInterfaceType(self)
    def Refresh(self) -> "void" : return _vmkctl.iScsiInterfaceImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.iScsiInterfaceImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.iScsiInterfaceImpl_Print(self, *args)
    def GetPciDevice(self) -> "HostCtl::Hardware::PciDevicePtr" : return _vmkctl.iScsiInterfaceImpl_GetPciDevice(self)
    def Rescan(self, *args) -> "void" : return _vmkctl.iScsiInterfaceImpl_Rescan(self, *args)
    def GetTransportMapping(self, *args) -> "HostCtl::Storage::TransportMappingPtr" : return _vmkctl.iScsiInterfaceImpl_GetTransportMapping(self, *args)
    def IsSoftwareiScsi(self) -> "bool" : return _vmkctl.iScsiInterfaceImpl_IsSoftwareiScsi(self)
    def CanBeDisabled(self) -> "bool" : return _vmkctl.iScsiInterfaceImpl_CanBeDisabled(self)
    def GetNetworkBindingSupport(self) -> "HostCtl::Storage::iScsiInterface::iScsiNetworkBindingSupport" : return _vmkctl.iScsiInterfaceImpl_GetNetworkBindingSupport(self)
    def SoftReset(self) -> "void" : return _vmkctl.iScsiInterfaceImpl_SoftReset(self)
    def HardReset(self) -> "void" : return _vmkctl.iScsiInterfaceImpl_HardReset(self)
    def GetiScsiBoundNicList(self, *args) -> "void" : return _vmkctl.iScsiInterfaceImpl_GetiScsiBoundNicList(self, *args)
    def CheckiScsiNicCompliance(self, *args) -> "void" : return _vmkctl.iScsiInterfaceImpl_CheckiScsiNicCompliance(self, *args)
    def GetiScsiCandidateNicList(self, *args) -> "void" : return _vmkctl.iScsiInterfaceImpl_GetiScsiCandidateNicList(self, *args)
    def GetiScsiPnicList(self, *args) -> "void" : return _vmkctl.iScsiInterfaceImpl_GetiScsiPnicList(self, *args)
    def GetiScsiVnicList(self, *args) -> "void" : return _vmkctl.iScsiInterfaceImpl_GetiScsiVnicList(self, *args)
    def AddiScsiBoundNic(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_AddiScsiBoundNic(self, *args)
    def RemoveiScsiBoundNic(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_RemoveiScsiBoundNic(self, *args)
    def GetiScsiCapabilities(self) -> "HostCtl::Storage::iScsiCapabilities" : return _vmkctl.iScsiInterfaceImpl_GetiScsiCapabilities(self)
    def GetPhysicalHbaProperties(self) -> "HostCtl::Storage::iScsiPhysicalHbaProperties" : return _vmkctl.iScsiInterfaceImpl_GetPhysicalHbaProperties(self)
    def GetTargetProperties(self, *args) -> "HostCtl::Storage::iScsiTargetProperties" : return _vmkctl.iScsiInterfaceImpl_GetTargetProperties(self, *args)
    def GetiScsiName(self) -> "std::string" : return _vmkctl.iScsiInterfaceImpl_GetiScsiName(self)
    def SetiScsiName(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetiScsiName(self, *args)
    def GetiScsiAlias(self) -> "std::string" : return _vmkctl.iScsiInterfaceImpl_GetiScsiAlias(self)
    def SetiScsiAlias(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetiScsiAlias(self, *args)
    def DiscoverTargets(self) -> "void" : return _vmkctl.iScsiInterfaceImpl_DiscoverTargets(self)
    def GetDiscoveryStatus(self) -> "HostCtl::Storage::iScsiInterface::iScsiDiscoveryStatus" : return _vmkctl.iScsiInterfaceImpl_GetDiscoveryStatus(self)
    def EnableSlpDiscovery(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_EnableSlpDiscovery(self, *args)
    def DisableSlpDiscovery(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_DisableSlpDiscovery(self)
    def HasSlpDiscovery(self, *args) -> "bool" : return _vmkctl.iScsiInterfaceImpl_HasSlpDiscovery(self, *args)
    def EnableiSnsDiscovery(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_EnableiSnsDiscovery(self, *args)
    def DisableiSnsDiscovery(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_DisableiSnsDiscovery(self)
    def RemoveiSnsDiscovery(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_RemoveiSnsDiscovery(self, *args)
    def HasiSnsDiscovery(self, *args) -> "bool" : return _vmkctl.iScsiInterfaceImpl_HasiSnsDiscovery(self, *args)
    def GetIsnsDiscoveryAddrOid(self, *args) -> "IMA_OID" : return _vmkctl.iScsiInterfaceImpl_GetIsnsDiscoveryAddrOid(self, *args)
    def GetIsnsParmsCommon(self, *args) -> "HostCtl::Storage::iSnsParms" : return _vmkctl.iScsiInterfaceImpl_GetIsnsParmsCommon(self, *args)
    def GetIsnsDiscAddrParms(self, *args) -> "HostCtl::Storage::iSnsParms" : return _vmkctl.iScsiInterfaceImpl_GetIsnsDiscAddrParms(self, *args)
    def SetIsnsDiscAddrParms(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetIsnsDiscAddrParms(self, *args)
    def IsnsSetParmsCommon(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_IsnsSetParmsCommon(self, *args)
    def GetAdapterIsnsParms(self) -> "HostCtl::Storage::iSnsParms" : return _vmkctl.iScsiInterfaceImpl_GetAdapterIsnsParms(self)
    def SetAdapterIsnsParms(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetAdapterIsnsParms(self, *args)
    def EnableStaticDiscovery(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_EnableStaticDiscovery(self)
    def DisableStaticDiscovery(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_DisableStaticDiscovery(self)
    def HasStaticDiscovery(self) -> "bool" : return _vmkctl.iScsiInterfaceImpl_HasStaticDiscovery(self)
    def AddStaticDiscoveryTarget(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_AddStaticDiscoveryTarget(self, *args)
    def RemoveStaticDiscoveryTarget(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_RemoveStaticDiscoveryTarget(self, *args)
    def EnableSendTargetsDiscovery(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_EnableSendTargetsDiscovery(self)
    def DisableSendTargetsDiscovery(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_DisableSendTargetsDiscovery(self)
    def HasSendTargetsDiscovery(self) -> "bool" : return _vmkctl.iScsiInterfaceImpl_HasSendTargetsDiscovery(self)
    def AddSendTargetsDiscoveryAddress(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_AddSendTargetsDiscoveryAddress(self, *args)
    def RemoveSendTargetsDiscoveryAddress(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_RemoveSendTargetsDiscoveryAddress(self, *args)
    def GetNetworkProperties(self) -> "HostCtl::Storage::iScsiNetworkProperties" : return _vmkctl.iScsiInterfaceImpl_GetNetworkProperties(self)
    def GetNetworkStatus(self) -> "HostCtl::Storage::iScsiNetworkStatus" : return _vmkctl.iScsiInterfaceImpl_GetNetworkStatus(self)
    def GetPnpProperties(self) -> "HostCtl::Storage::iScsiPnpProperties" : return _vmkctl.iScsiInterfaceImpl_GetPnpProperties(self)
    def SetIpConfig(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetIpConfig(self, *args)
    def SetIpv4Address(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetIpv4Address(self, *args)
    def SetIpv4Netmask(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetIpv4Netmask(self, *args)
    def SetGateway(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetGateway(self, *args)
    def SetGateway6(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetGateway6(self, *args)
    def SetDnsServer(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetDnsServer(self, *args)
    def ConfigIpv6Address(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_ConfigIpv6Address(self, *args)
    def SetIpv6ConfigMethod(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetIpv6ConfigMethod(self, *args)
    def EnableDhcpv4(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_EnableDhcpv4(self, *args)
    def EnableIP(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_EnableIP(self, *args)
    def GetHbaStatus(self) -> "HostCtl::Storage::iScsiInterface::iScsiHbaStatus" : return _vmkctl.iScsiInterfaceImpl_GetHbaStatus(self)
    def SetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetChapAuthorization(self, *args)
    def SetStaticTargetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetStaticTargetChapAuthorization(self, *args)
    def SetSendTargetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetSendTargetChapAuthorization(self, *args)
    def EnableChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_EnableChapAuthorization(self, *args)
    def EnableStaticTargetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_EnableStaticTargetChapAuthorization(self, *args)
    def EnableSendTargetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_EnableSendTargetChapAuthorization(self, *args)
    def DisableChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_DisableChapAuthorization(self, *args)
    def DisableStaticTargetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_DisableStaticTargetChapAuthorization(self, *args)
    def DisableSendTargetChapAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_DisableSendTargetChapAuthorization(self, *args)
    def HasChapAuthorization(self, *args) -> "bool" : return _vmkctl.iScsiInterfaceImpl_HasChapAuthorization(self, *args)
    def HasStaticTargetChapAuthorization(self, *args) -> "bool" : return _vmkctl.iScsiInterfaceImpl_HasStaticTargetChapAuthorization(self, *args)
    def HasSendTargetChapAuthorization(self, *args) -> "bool" : return _vmkctl.iScsiInterfaceImpl_HasSendTargetChapAuthorization(self, *args)
    def EnableSrpAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_EnableSrpAuthorization(self, *args)
    def DisableSrpAuthorization(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_DisableSrpAuthorization(self)
    def HasSrpAuthorization(self, *args) -> "bool" : return _vmkctl.iScsiInterfaceImpl_HasSrpAuthorization(self, *args)
    def EnableKrb5Authorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_EnableKrb5Authorization(self, *args)
    def DisableKrb5Authorization(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_DisableKrb5Authorization(self)
    def HasKrb5Authorization(self, *args) -> "bool" : return _vmkctl.iScsiInterfaceImpl_HasKrb5Authorization(self, *args)
    def EnableSpkm1Authorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_EnableSpkm1Authorization(self, *args)
    def DisableSpkm1Authorization(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_DisableSpkm1Authorization(self)
    def HasSpkm1Authorization(self, *args) -> "bool" : return _vmkctl.iScsiInterfaceImpl_HasSpkm1Authorization(self, *args)
    def EnableSpkm2Authorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_EnableSpkm2Authorization(self, *args)
    def DisableSpkm2Authorization(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_DisableSpkm2Authorization(self)
    def HasSpkm2Authorization(self, *args) -> "bool" : return _vmkctl.iScsiInterfaceImpl_HasSpkm2Authorization(self, *args)
    def DisableAuthorization(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_DisableAuthorization(self, *args)
    def SetHeaderDigest(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetHeaderDigest(self, *args)
    def SetTargetHeaderDigest(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetTargetHeaderDigest(self, *args)
    def GetHeaderDigest(self) -> "HostCtl::Storage::iScsiDigestType" : return _vmkctl.iScsiInterfaceImpl_GetHeaderDigest(self)
    def GetTargetHeaderDigest(self, *args) -> "HostCtl::Storage::iScsiDigestType" : return _vmkctl.iScsiInterfaceImpl_GetTargetHeaderDigest(self, *args)
    def SetDataDigest(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetDataDigest(self, *args)
    def SetTargetDataDigest(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetTargetDataDigest(self, *args)
    def GetDataDigest(self) -> "HostCtl::Storage::iScsiDigestType" : return _vmkctl.iScsiInterfaceImpl_GetDataDigest(self)
    def GetTargetDataDigest(self, *args) -> "HostCtl::Storage::iScsiDigestType" : return _vmkctl.iScsiInterfaceImpl_GetTargetDataDigest(self, *args)
    def SetArpRedirectEnabled(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetArpRedirectEnabled(self, *args)
    def IsArpRedirectEnabled(self) -> "bool" : return _vmkctl.iScsiInterfaceImpl_IsArpRedirectEnabled(self)
    def SetMtu(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetMtu(self, *args)
    def GetMtu(self) -> "int" : return _vmkctl.iScsiInterfaceImpl_GetMtu(self)
    def SetMtuEnabled(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetMtuEnabled(self, *args)
    def IsMtuEnabled(self) -> "bool" : return _vmkctl.iScsiInterfaceImpl_IsMtuEnabled(self)
    def SetAdapterParms(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetAdapterParms(self, *args)
    def GetAdapterParms(self) -> "HostCtl::Storage::iScsiParms" : return _vmkctl.iScsiInterfaceImpl_GetAdapterParms(self)
    def SetTargetParms(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetTargetParms(self, *args)
    def GetTargetParms(self, *args) -> "HostCtl::Storage::iScsiParms" : return _vmkctl.iScsiInterfaceImpl_GetTargetParms(self, *args)
    def ClearBootFlag(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_ClearBootFlag(self, *args)
    def SetBootFlag(self, *args) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.iScsiInterfaceImpl_SetBootFlag(self, *args)
    def CreateVnicSessionMap(self) -> "void" : return _vmkctl.iScsiInterfaceImpl_CreateVnicSessionMap(self)
    def ReleaseVnicSessionMap(self) -> "void" : return _vmkctl.iScsiInterfaceImpl_ReleaseVnicSessionMap(self)
    def GetVnicForPath(self, *args) -> "void" : return _vmkctl.iScsiInterfaceImpl_GetVnicForPath(self, *args)
    def GetAdapterStats(self) -> "HostCtl::Storage::iScsiAdapterStats" : return _vmkctl.iScsiInterfaceImpl_GetAdapterStats(self)
    NUM_AUTH_METHODS = _vmkctl.iScsiInterfaceImpl_NUM_AUTH_METHODS
iScsiInterfaceImpl_swigregister = _vmkctl.iScsiInterfaceImpl_swigregister
iScsiInterfaceImpl_swigregister(iScsiInterfaceImpl)

class iScsiCapabilities(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiCapabilities, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiCapabilities, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_iScsiCapabilities()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["iSnsDiscovery"] = _vmkctl.iScsiCapabilities_iSnsDiscovery_set
    __swig_getmethods__["iSnsDiscovery"] = _vmkctl.iScsiCapabilities_iSnsDiscovery_get
    if _newclass:iSnsDiscovery = _swig_property(_vmkctl.iScsiCapabilities_iSnsDiscovery_get, _vmkctl.iScsiCapabilities_iSnsDiscovery_set)
    __swig_setmethods__["slpDiscovery"] = _vmkctl.iScsiCapabilities_slpDiscovery_set
    __swig_getmethods__["slpDiscovery"] = _vmkctl.iScsiCapabilities_slpDiscovery_get
    if _newclass:slpDiscovery = _swig_property(_vmkctl.iScsiCapabilities_slpDiscovery_get, _vmkctl.iScsiCapabilities_slpDiscovery_set)
    __swig_setmethods__["staticDiscovery"] = _vmkctl.iScsiCapabilities_staticDiscovery_set
    __swig_getmethods__["staticDiscovery"] = _vmkctl.iScsiCapabilities_staticDiscovery_get
    if _newclass:staticDiscovery = _swig_property(_vmkctl.iScsiCapabilities_staticDiscovery_get, _vmkctl.iScsiCapabilities_staticDiscovery_set)
    __swig_setmethods__["sendTargetsDiscovery"] = _vmkctl.iScsiCapabilities_sendTargetsDiscovery_set
    __swig_getmethods__["sendTargetsDiscovery"] = _vmkctl.iScsiCapabilities_sendTargetsDiscovery_get
    if _newclass:sendTargetsDiscovery = _swig_property(_vmkctl.iScsiCapabilities_sendTargetsDiscovery_get, _vmkctl.iScsiCapabilities_sendTargetsDiscovery_set)
    __swig_setmethods__["authorization"] = _vmkctl.iScsiCapabilities_authorization_set
    __swig_getmethods__["authorization"] = _vmkctl.iScsiCapabilities_authorization_get
    if _newclass:authorization = _swig_property(_vmkctl.iScsiCapabilities_authorization_get, _vmkctl.iScsiCapabilities_authorization_set)
    __swig_setmethods__["chapAuthorization"] = _vmkctl.iScsiCapabilities_chapAuthorization_set
    __swig_getmethods__["chapAuthorization"] = _vmkctl.iScsiCapabilities_chapAuthorization_get
    if _newclass:chapAuthorization = _swig_property(_vmkctl.iScsiCapabilities_chapAuthorization_get, _vmkctl.iScsiCapabilities_chapAuthorization_set)
    __swig_setmethods__["srpAuthorization"] = _vmkctl.iScsiCapabilities_srpAuthorization_set
    __swig_getmethods__["srpAuthorization"] = _vmkctl.iScsiCapabilities_srpAuthorization_get
    if _newclass:srpAuthorization = _swig_property(_vmkctl.iScsiCapabilities_srpAuthorization_get, _vmkctl.iScsiCapabilities_srpAuthorization_set)
    __swig_setmethods__["krb5Authorization"] = _vmkctl.iScsiCapabilities_krb5Authorization_set
    __swig_getmethods__["krb5Authorization"] = _vmkctl.iScsiCapabilities_krb5Authorization_get
    if _newclass:krb5Authorization = _swig_property(_vmkctl.iScsiCapabilities_krb5Authorization_get, _vmkctl.iScsiCapabilities_krb5Authorization_set)
    __swig_setmethods__["spkm1Authorization"] = _vmkctl.iScsiCapabilities_spkm1Authorization_set
    __swig_getmethods__["spkm1Authorization"] = _vmkctl.iScsiCapabilities_spkm1Authorization_get
    if _newclass:spkm1Authorization = _swig_property(_vmkctl.iScsiCapabilities_spkm1Authorization_get, _vmkctl.iScsiCapabilities_spkm1Authorization_set)
    __swig_setmethods__["spkm2Authorization"] = _vmkctl.iScsiCapabilities_spkm2Authorization_set
    __swig_getmethods__["spkm2Authorization"] = _vmkctl.iScsiCapabilities_spkm2Authorization_get
    if _newclass:spkm2Authorization = _swig_property(_vmkctl.iScsiCapabilities_spkm2Authorization_get, _vmkctl.iScsiCapabilities_spkm2Authorization_set)
    __swig_setmethods__["mutualAuthorization"] = _vmkctl.iScsiCapabilities_mutualAuthorization_set
    __swig_getmethods__["mutualAuthorization"] = _vmkctl.iScsiCapabilities_mutualAuthorization_get
    if _newclass:mutualAuthorization = _swig_property(_vmkctl.iScsiCapabilities_mutualAuthorization_get, _vmkctl.iScsiCapabilities_mutualAuthorization_set)
    __swig_setmethods__["targetAuthorization"] = _vmkctl.iScsiCapabilities_targetAuthorization_set
    __swig_getmethods__["targetAuthorization"] = _vmkctl.iScsiCapabilities_targetAuthorization_get
    if _newclass:targetAuthorization = _swig_property(_vmkctl.iScsiCapabilities_targetAuthorization_get, _vmkctl.iScsiCapabilities_targetAuthorization_set)
    __swig_setmethods__["targetMutualAuthorization"] = _vmkctl.iScsiCapabilities_targetMutualAuthorization_set
    __swig_getmethods__["targetMutualAuthorization"] = _vmkctl.iScsiCapabilities_targetMutualAuthorization_get
    if _newclass:targetMutualAuthorization = _swig_property(_vmkctl.iScsiCapabilities_targetMutualAuthorization_get, _vmkctl.iScsiCapabilities_targetMutualAuthorization_set)
    __swig_setmethods__["adapterHeaderDigest"] = _vmkctl.iScsiCapabilities_adapterHeaderDigest_set
    __swig_getmethods__["adapterHeaderDigest"] = _vmkctl.iScsiCapabilities_adapterHeaderDigest_get
    if _newclass:adapterHeaderDigest = _swig_property(_vmkctl.iScsiCapabilities_adapterHeaderDigest_get, _vmkctl.iScsiCapabilities_adapterHeaderDigest_set)
    __swig_setmethods__["targetHeaderDigest"] = _vmkctl.iScsiCapabilities_targetHeaderDigest_set
    __swig_getmethods__["targetHeaderDigest"] = _vmkctl.iScsiCapabilities_targetHeaderDigest_get
    if _newclass:targetHeaderDigest = _swig_property(_vmkctl.iScsiCapabilities_targetHeaderDigest_get, _vmkctl.iScsiCapabilities_targetHeaderDigest_set)
    __swig_setmethods__["adapterDataDigest"] = _vmkctl.iScsiCapabilities_adapterDataDigest_set
    __swig_getmethods__["adapterDataDigest"] = _vmkctl.iScsiCapabilities_adapterDataDigest_get
    if _newclass:adapterDataDigest = _swig_property(_vmkctl.iScsiCapabilities_adapterDataDigest_get, _vmkctl.iScsiCapabilities_adapterDataDigest_set)
    __swig_setmethods__["targetDataDigest"] = _vmkctl.iScsiCapabilities_targetDataDigest_set
    __swig_getmethods__["targetDataDigest"] = _vmkctl.iScsiCapabilities_targetDataDigest_get
    if _newclass:targetDataDigest = _swig_property(_vmkctl.iScsiCapabilities_targetDataDigest_get, _vmkctl.iScsiCapabilities_targetDataDigest_set)
    __swig_setmethods__["arpRedirect"] = _vmkctl.iScsiCapabilities_arpRedirect_set
    __swig_getmethods__["arpRedirect"] = _vmkctl.iScsiCapabilities_arpRedirect_get
    if _newclass:arpRedirect = _swig_property(_vmkctl.iScsiCapabilities_arpRedirect_get, _vmkctl.iScsiCapabilities_arpRedirect_set)
    __swig_setmethods__["mtu"] = _vmkctl.iScsiCapabilities_mtu_set
    __swig_getmethods__["mtu"] = _vmkctl.iScsiCapabilities_mtu_get
    if _newclass:mtu = _swig_property(_vmkctl.iScsiCapabilities_mtu_get, _vmkctl.iScsiCapabilities_mtu_set)
    __swig_setmethods__["delayedAck"] = _vmkctl.iScsiCapabilities_delayedAck_set
    __swig_getmethods__["delayedAck"] = _vmkctl.iScsiCapabilities_delayedAck_get
    if _newclass:delayedAck = _swig_property(_vmkctl.iScsiCapabilities_delayedAck_get, _vmkctl.iScsiCapabilities_delayedAck_set)
    __swig_setmethods__["ipv6"] = _vmkctl.iScsiCapabilities_ipv6_set
    __swig_getmethods__["ipv6"] = _vmkctl.iScsiCapabilities_ipv6_get
    if _newclass:ipv6 = _swig_property(_vmkctl.iScsiCapabilities_ipv6_get, _vmkctl.iScsiCapabilities_ipv6_set)
    __swig_setmethods__["hostName"] = _vmkctl.iScsiCapabilities_hostName_set
    __swig_getmethods__["hostName"] = _vmkctl.iScsiCapabilities_hostName_get
    if _newclass:hostName = _swig_property(_vmkctl.iScsiCapabilities_hostName_get, _vmkctl.iScsiCapabilities_hostName_set)
    __swig_setmethods__["inheritance"] = _vmkctl.iScsiCapabilities_inheritance_set
    __swig_getmethods__["inheritance"] = _vmkctl.iScsiCapabilities_inheritance_get
    if _newclass:inheritance = _swig_property(_vmkctl.iScsiCapabilities_inheritance_get, _vmkctl.iScsiCapabilities_inheritance_set)
    __swig_setmethods__["ipv4Enable"] = _vmkctl.iScsiCapabilities_ipv4Enable_set
    __swig_getmethods__["ipv4Enable"] = _vmkctl.iScsiCapabilities_ipv4Enable_get
    if _newclass:ipv4Enable = _swig_property(_vmkctl.iScsiCapabilities_ipv4Enable_get, _vmkctl.iScsiCapabilities_ipv4Enable_set)
    __swig_setmethods__["ipConfigurationMethod"] = _vmkctl.iScsiCapabilities_ipConfigurationMethod_set
    __swig_getmethods__["ipConfigurationMethod"] = _vmkctl.iScsiCapabilities_ipConfigurationMethod_get
    if _newclass:ipConfigurationMethod = _swig_property(_vmkctl.iScsiCapabilities_ipConfigurationMethod_get, _vmkctl.iScsiCapabilities_ipConfigurationMethod_set)
    __swig_setmethods__["subnetMask"] = _vmkctl.iScsiCapabilities_subnetMask_set
    __swig_getmethods__["subnetMask"] = _vmkctl.iScsiCapabilities_subnetMask_get
    if _newclass:subnetMask = _swig_property(_vmkctl.iScsiCapabilities_subnetMask_get, _vmkctl.iScsiCapabilities_subnetMask_set)
    __swig_setmethods__["defaultGateway"] = _vmkctl.iScsiCapabilities_defaultGateway_set
    __swig_getmethods__["defaultGateway"] = _vmkctl.iScsiCapabilities_defaultGateway_get
    if _newclass:defaultGateway = _swig_property(_vmkctl.iScsiCapabilities_defaultGateway_get, _vmkctl.iScsiCapabilities_defaultGateway_set)
    __swig_setmethods__["ipv6Enable"] = _vmkctl.iScsiCapabilities_ipv6Enable_set
    __swig_getmethods__["ipv6Enable"] = _vmkctl.iScsiCapabilities_ipv6Enable_get
    if _newclass:ipv6Enable = _swig_property(_vmkctl.iScsiCapabilities_ipv6Enable_get, _vmkctl.iScsiCapabilities_ipv6Enable_set)
    __swig_setmethods__["ipv6PrefixLength"] = _vmkctl.iScsiCapabilities_ipv6PrefixLength_set
    __swig_getmethods__["ipv6PrefixLength"] = _vmkctl.iScsiCapabilities_ipv6PrefixLength_get
    if _newclass:ipv6PrefixLength = _swig_property(_vmkctl.iScsiCapabilities_ipv6PrefixLength_get, _vmkctl.iScsiCapabilities_ipv6PrefixLength_set)
    __swig_setmethods__["dhcpv6ConfigMethod"] = _vmkctl.iScsiCapabilities_dhcpv6ConfigMethod_set
    __swig_getmethods__["dhcpv6ConfigMethod"] = _vmkctl.iScsiCapabilities_dhcpv6ConfigMethod_get
    if _newclass:dhcpv6ConfigMethod = _swig_property(_vmkctl.iScsiCapabilities_dhcpv6ConfigMethod_get, _vmkctl.iScsiCapabilities_dhcpv6ConfigMethod_set)
    __swig_setmethods__["linklocalAutoConfigMethod"] = _vmkctl.iScsiCapabilities_linklocalAutoConfigMethod_set
    __swig_getmethods__["linklocalAutoConfigMethod"] = _vmkctl.iScsiCapabilities_linklocalAutoConfigMethod_get
    if _newclass:linklocalAutoConfigMethod = _swig_property(_vmkctl.iScsiCapabilities_linklocalAutoConfigMethod_get, _vmkctl.iScsiCapabilities_linklocalAutoConfigMethod_set)
    __swig_setmethods__["routerAdvConfigMethod"] = _vmkctl.iScsiCapabilities_routerAdvConfigMethod_set
    __swig_getmethods__["routerAdvConfigMethod"] = _vmkctl.iScsiCapabilities_routerAdvConfigMethod_get
    if _newclass:routerAdvConfigMethod = _swig_property(_vmkctl.iScsiCapabilities_routerAdvConfigMethod_get, _vmkctl.iScsiCapabilities_routerAdvConfigMethod_set)
    __swig_setmethods__["defaultGateway6"] = _vmkctl.iScsiCapabilities_defaultGateway6_set
    __swig_getmethods__["defaultGateway6"] = _vmkctl.iScsiCapabilities_defaultGateway6_get
    if _newclass:defaultGateway6 = _swig_property(_vmkctl.iScsiCapabilities_defaultGateway6_get, _vmkctl.iScsiCapabilities_defaultGateway6_set)
    __swig_setmethods__["primaryDns"] = _vmkctl.iScsiCapabilities_primaryDns_set
    __swig_getmethods__["primaryDns"] = _vmkctl.iScsiCapabilities_primaryDns_get
    if _newclass:primaryDns = _swig_property(_vmkctl.iScsiCapabilities_primaryDns_get, _vmkctl.iScsiCapabilities_primaryDns_set)
    __swig_setmethods__["alternateDns"] = _vmkctl.iScsiCapabilities_alternateDns_set
    __swig_getmethods__["alternateDns"] = _vmkctl.iScsiCapabilities_alternateDns_get
    if _newclass:alternateDns = _swig_property(_vmkctl.iScsiCapabilities_alternateDns_get, _vmkctl.iScsiCapabilities_alternateDns_set)
    __swig_setmethods__["nameAndAlias"] = _vmkctl.iScsiCapabilities_nameAndAlias_set
    __swig_getmethods__["nameAndAlias"] = _vmkctl.iScsiCapabilities_nameAndAlias_get
    if _newclass:nameAndAlias = _swig_property(_vmkctl.iScsiCapabilities_nameAndAlias_get, _vmkctl.iScsiCapabilities_nameAndAlias_set)
    __swig_setmethods__["init"] = _vmkctl.iScsiCapabilities_init_set
    __swig_getmethods__["init"] = _vmkctl.iScsiCapabilities_init_get
    if _newclass:init = _swig_property(_vmkctl.iScsiCapabilities_init_get, _vmkctl.iScsiCapabilities_init_set)
    __swig_destroy__ = _vmkctl.delete_iScsiCapabilities
    __del__ = lambda self : None;
iScsiCapabilities_swigregister = _vmkctl.iScsiCapabilities_swigregister
iScsiCapabilities_swigregister(iScsiCapabilities)

ISCSI_NETWORK_WORKING = _vmkctl.ISCSI_NETWORK_WORKING
ISCSI_NETWORK_DEGRADED = _vmkctl.ISCSI_NETWORK_DEGRADED
ISCSI_NETWORK_CRITICAL = _vmkctl.ISCSI_NETWORK_CRITICAL
ISCSI_NETWORK_FAILED = _vmkctl.ISCSI_NETWORK_FAILED
ISCSI_NETWORK_DISCONNECED = _vmkctl.ISCSI_NETWORK_DISCONNECED
ISCSI_IPV6_CONFIG_METHOD_AUTO_LINK_LOCAL = _vmkctl.ISCSI_IPV6_CONFIG_METHOD_AUTO_LINK_LOCAL
ISCSI_IPV6_CONFIG_METHOD_DHCP = _vmkctl.ISCSI_IPV6_CONFIG_METHOD_DHCP
ISCSI_IPV6_CONFIG_METHOD_ROUTER_ADVERTISEMENT = _vmkctl.ISCSI_IPV6_CONFIG_METHOD_ROUTER_ADVERTISEMENT
class iScsiNetworkProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiNetworkProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiNetworkProperties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ipv4Enabled"] = _vmkctl.iScsiNetworkProperties_ipv4Enabled_set
    __swig_getmethods__["ipv4Enabled"] = _vmkctl.iScsiNetworkProperties_ipv4Enabled_get
    if _newclass:ipv4Enabled = _swig_property(_vmkctl.iScsiNetworkProperties_ipv4Enabled_get, _vmkctl.iScsiNetworkProperties_ipv4Enabled_set)
    __swig_setmethods__["ipConfig"] = _vmkctl.iScsiNetworkProperties_ipConfig_set
    __swig_getmethods__["ipConfig"] = _vmkctl.iScsiNetworkProperties_ipConfig_get
    if _newclass:ipConfig = _swig_property(_vmkctl.iScsiNetworkProperties_ipConfig_get, _vmkctl.iScsiNetworkProperties_ipConfig_set)
    __swig_setmethods__["useDhcpv4"] = _vmkctl.iScsiNetworkProperties_useDhcpv4_set
    __swig_getmethods__["useDhcpv4"] = _vmkctl.iScsiNetworkProperties_useDhcpv4_get
    if _newclass:useDhcpv4 = _swig_property(_vmkctl.iScsiNetworkProperties_useDhcpv4_get, _vmkctl.iScsiNetworkProperties_useDhcpv4_set)
    __swig_setmethods__["gateway"] = _vmkctl.iScsiNetworkProperties_gateway_set
    __swig_getmethods__["gateway"] = _vmkctl.iScsiNetworkProperties_gateway_get
    if _newclass:gateway = _swig_property(_vmkctl.iScsiNetworkProperties_gateway_get, _vmkctl.iScsiNetworkProperties_gateway_set)
    __swig_setmethods__["ipv6Supported"] = _vmkctl.iScsiNetworkProperties_ipv6Supported_set
    __swig_getmethods__["ipv6Supported"] = _vmkctl.iScsiNetworkProperties_ipv6Supported_get
    if _newclass:ipv6Supported = _swig_property(_vmkctl.iScsiNetworkProperties_ipv6Supported_get, _vmkctl.iScsiNetworkProperties_ipv6Supported_set)
    __swig_setmethods__["ipv6Enabled"] = _vmkctl.iScsiNetworkProperties_ipv6Enabled_set
    __swig_getmethods__["ipv6Enabled"] = _vmkctl.iScsiNetworkProperties_ipv6Enabled_get
    if _newclass:ipv6Enabled = _swig_property(_vmkctl.iScsiNetworkProperties_ipv6Enabled_get, _vmkctl.iScsiNetworkProperties_ipv6Enabled_set)
    __swig_setmethods__["useDhcpv6"] = _vmkctl.iScsiNetworkProperties_useDhcpv6_set
    __swig_getmethods__["useDhcpv6"] = _vmkctl.iScsiNetworkProperties_useDhcpv6_get
    if _newclass:useDhcpv6 = _swig_property(_vmkctl.iScsiNetworkProperties_useDhcpv6_get, _vmkctl.iScsiNetworkProperties_useDhcpv6_set)
    __swig_setmethods__["useIpv6RouterAdv"] = _vmkctl.iScsiNetworkProperties_useIpv6RouterAdv_set
    __swig_getmethods__["useIpv6RouterAdv"] = _vmkctl.iScsiNetworkProperties_useIpv6RouterAdv_get
    if _newclass:useIpv6RouterAdv = _swig_property(_vmkctl.iScsiNetworkProperties_useIpv6RouterAdv_get, _vmkctl.iScsiNetworkProperties_useIpv6RouterAdv_set)
    __swig_setmethods__["useLinkLocalAutoConfiguration"] = _vmkctl.iScsiNetworkProperties_useLinkLocalAutoConfiguration_set
    __swig_getmethods__["useLinkLocalAutoConfiguration"] = _vmkctl.iScsiNetworkProperties_useLinkLocalAutoConfiguration_get
    if _newclass:useLinkLocalAutoConfiguration = _swig_property(_vmkctl.iScsiNetworkProperties_useLinkLocalAutoConfiguration_get, _vmkctl.iScsiNetworkProperties_useLinkLocalAutoConfiguration_set)
    __swig_setmethods__["ipv6PrefixLength"] = _vmkctl.iScsiNetworkProperties_ipv6PrefixLength_set
    __swig_getmethods__["ipv6PrefixLength"] = _vmkctl.iScsiNetworkProperties_ipv6PrefixLength_get
    if _newclass:ipv6PrefixLength = _swig_property(_vmkctl.iScsiNetworkProperties_ipv6PrefixLength_get, _vmkctl.iScsiNetworkProperties_ipv6PrefixLength_set)
    __swig_setmethods__["ipv6MaxStaticAddrSupported"] = _vmkctl.iScsiNetworkProperties_ipv6MaxStaticAddrSupported_set
    __swig_getmethods__["ipv6MaxStaticAddrSupported"] = _vmkctl.iScsiNetworkProperties_ipv6MaxStaticAddrSupported_get
    if _newclass:ipv6MaxStaticAddrSupported = _swig_property(_vmkctl.iScsiNetworkProperties_ipv6MaxStaticAddrSupported_get, _vmkctl.iScsiNetworkProperties_ipv6MaxStaticAddrSupported_set)
    __swig_setmethods__["gateway6"] = _vmkctl.iScsiNetworkProperties_gateway6_set
    __swig_getmethods__["gateway6"] = _vmkctl.iScsiNetworkProperties_gateway6_get
    if _newclass:gateway6 = _swig_property(_vmkctl.iScsiNetworkProperties_gateway6_get, _vmkctl.iScsiNetworkProperties_gateway6_set)
    __swig_setmethods__["primaryDns"] = _vmkctl.iScsiNetworkProperties_primaryDns_set
    __swig_getmethods__["primaryDns"] = _vmkctl.iScsiNetworkProperties_primaryDns_get
    if _newclass:primaryDns = _swig_property(_vmkctl.iScsiNetworkProperties_primaryDns_get, _vmkctl.iScsiNetworkProperties_primaryDns_set)
    __swig_setmethods__["secondaryDns"] = _vmkctl.iScsiNetworkProperties_secondaryDns_set
    __swig_getmethods__["secondaryDns"] = _vmkctl.iScsiNetworkProperties_secondaryDns_get
    if _newclass:secondaryDns = _swig_property(_vmkctl.iScsiNetworkProperties_secondaryDns_get, _vmkctl.iScsiNetworkProperties_secondaryDns_set)
    def __init__(self): 
        this = _vmkctl.new_iScsiNetworkProperties()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiNetworkProperties
    __del__ = lambda self : None;
iScsiNetworkProperties_swigregister = _vmkctl.iScsiNetworkProperties_swigregister
iScsiNetworkProperties_swigregister(iScsiNetworkProperties)

class iScsiPnpProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiPnpProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiPnpProperties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["macAddress"] = _vmkctl.iScsiPnpProperties_macAddress_set
    __swig_getmethods__["macAddress"] = _vmkctl.iScsiPnpProperties_macAddress_get
    if _newclass:macAddress = _swig_property(_vmkctl.iScsiPnpProperties_macAddress_get, _vmkctl.iScsiPnpProperties_macAddress_set)
    __swig_setmethods__["currentSpeed"] = _vmkctl.iScsiPnpProperties_currentSpeed_set
    __swig_getmethods__["currentSpeed"] = _vmkctl.iScsiPnpProperties_currentSpeed_get
    if _newclass:currentSpeed = _swig_property(_vmkctl.iScsiPnpProperties_currentSpeed_get, _vmkctl.iScsiPnpProperties_currentSpeed_set)
    __swig_setmethods__["maxSpeed"] = _vmkctl.iScsiPnpProperties_maxSpeed_set
    __swig_getmethods__["maxSpeed"] = _vmkctl.iScsiPnpProperties_maxSpeed_get
    if _newclass:maxSpeed = _swig_property(_vmkctl.iScsiPnpProperties_maxSpeed_get, _vmkctl.iScsiPnpProperties_maxSpeed_set)
    __swig_setmethods__["maxFrameSize"] = _vmkctl.iScsiPnpProperties_maxFrameSize_set
    __swig_getmethods__["maxFrameSize"] = _vmkctl.iScsiPnpProperties_maxFrameSize_get
    if _newclass:maxFrameSize = _swig_property(_vmkctl.iScsiPnpProperties_maxFrameSize_get, _vmkctl.iScsiPnpProperties_maxFrameSize_set)
    __swig_setmethods__["pnic"] = _vmkctl.iScsiPnpProperties_pnic_set
    __swig_getmethods__["pnic"] = _vmkctl.iScsiPnpProperties_pnic_get
    if _newclass:pnic = _swig_property(_vmkctl.iScsiPnpProperties_pnic_get, _vmkctl.iScsiPnpProperties_pnic_set)
    def __init__(self): 
        this = _vmkctl.new_iScsiPnpProperties()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiPnpProperties
    __del__ = lambda self : None;
iScsiPnpProperties_swigregister = _vmkctl.iScsiPnpProperties_swigregister
iScsiPnpProperties_swigregister(iScsiPnpProperties)

class iScsiLnpProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiLnpProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiLnpProperties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["macAddress"] = _vmkctl.iScsiLnpProperties_macAddress_set
    __swig_getmethods__["macAddress"] = _vmkctl.iScsiLnpProperties_macAddress_get
    if _newclass:macAddress = _swig_property(_vmkctl.iScsiLnpProperties_macAddress_get, _vmkctl.iScsiLnpProperties_macAddress_set)
    __swig_setmethods__["vnic"] = _vmkctl.iScsiLnpProperties_vnic_set
    __swig_getmethods__["vnic"] = _vmkctl.iScsiLnpProperties_vnic_get
    if _newclass:vnic = _swig_property(_vmkctl.iScsiLnpProperties_vnic_get, _vmkctl.iScsiLnpProperties_vnic_set)
    def __init__(self): 
        this = _vmkctl.new_iScsiLnpProperties()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiLnpProperties
    __del__ = lambda self : None;
iScsiLnpProperties_swigregister = _vmkctl.iScsiLnpProperties_swigregister
iScsiLnpProperties_swigregister(iScsiLnpProperties)

EXTENDED_BOOL_FALSE = _vmkctl.EXTENDED_BOOL_FALSE
EXTENDED_BOOL_TRUE = _vmkctl.EXTENDED_BOOL_TRUE
EXTENDED_BOOL_UNKNOWN = _vmkctl.EXTENDED_BOOL_UNKNOWN
ISCSI_NP_STATUS_UNUSED = _vmkctl.ISCSI_NP_STATUS_UNUSED
ISCSI_NP_STATUS_STANDBY = _vmkctl.ISCSI_NP_STATUS_STANDBY
ISCSI_NP_STATUS_ACTIVE = _vmkctl.ISCSI_NP_STATUS_ACTIVE
ISCSI_NP_STATUS_LAST = _vmkctl.ISCSI_NP_STATUS_LAST
ISCSI_E_NO_ERROR = _vmkctl.ISCSI_E_NO_ERROR
ISCSI_E_PNIC_INUSE = _vmkctl.ISCSI_E_PNIC_INUSE
ISCSI_E_VNIC_ALREADY_BOUND = _vmkctl.ISCSI_E_VNIC_ALREADY_BOUND
ISCSI_E_VNIC_HAS_MULTIPLE_UPLINKS = _vmkctl.ISCSI_E_VNIC_HAS_MULTIPLE_UPLINKS
ISCSI_E_VNIC_HAS_NO_UPLINKS = _vmkctl.ISCSI_E_VNIC_HAS_NO_UPLINKS
ISCSI_E_VNIC_HAS_WRONG_UPLINK = _vmkctl.ISCSI_E_VNIC_HAS_WRONG_UPLINK
ISCSI_E_VNIC_INUSE = _vmkctl.ISCSI_E_VNIC_INUSE
ISCSI_E_VNIC_IS_LAST_PATH = _vmkctl.ISCSI_E_VNIC_IS_LAST_PATH
ISCSI_E_VNIC_NOT_BOUND = _vmkctl.ISCSI_E_VNIC_NOT_BOUND
ISCSI_E_VNIC_NOT_FOUND = _vmkctl.ISCSI_E_VNIC_NOT_FOUND
ISCSI_E_INVALID_VNIC = _vmkctl.ISCSI_E_INVALID_VNIC
ISCSI_E_VMHBA_NOT_FOUND = _vmkctl.ISCSI_E_VMHBA_NOT_FOUND
ISCSI_E_INVALID_VMHBA = _vmkctl.ISCSI_E_INVALID_VMHBA
ISCSI_E_UNKNOWN_ERROR = _vmkctl.ISCSI_E_UNKNOWN_ERROR
class iScsiNicProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiNicProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiNicProperties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vnic"] = _vmkctl.iScsiNicProperties_vnic_set
    __swig_getmethods__["vnic"] = _vmkctl.iScsiNicProperties_vnic_get
    if _newclass:vnic = _swig_property(_vmkctl.iScsiNicProperties_vnic_get, _vmkctl.iScsiNicProperties_vnic_set)
    __swig_setmethods__["pnic"] = _vmkctl.iScsiNicProperties_pnic_set
    __swig_getmethods__["pnic"] = _vmkctl.iScsiNicProperties_pnic_get
    if _newclass:pnic = _swig_property(_vmkctl.iScsiNicProperties_pnic_get, _vmkctl.iScsiNicProperties_pnic_set)
    __swig_setmethods__["macAddress"] = _vmkctl.iScsiNicProperties_macAddress_set
    __swig_getmethods__["macAddress"] = _vmkctl.iScsiNicProperties_macAddress_get
    if _newclass:macAddress = _swig_property(_vmkctl.iScsiNicProperties_macAddress_get, _vmkctl.iScsiNicProperties_macAddress_set)
    __swig_setmethods__["ipConfig"] = _vmkctl.iScsiNicProperties_ipConfig_set
    __swig_getmethods__["ipConfig"] = _vmkctl.iScsiNicProperties_ipConfig_get
    if _newclass:ipConfig = _swig_property(_vmkctl.iScsiNicProperties_ipConfig_get, _vmkctl.iScsiNicProperties_ipConfig_set)
    __swig_setmethods__["maxFrameSize"] = _vmkctl.iScsiNicProperties_maxFrameSize_set
    __swig_getmethods__["maxFrameSize"] = _vmkctl.iScsiNicProperties_maxFrameSize_get
    if _newclass:maxFrameSize = _swig_property(_vmkctl.iScsiNicProperties_maxFrameSize_get, _vmkctl.iScsiNicProperties_maxFrameSize_set)
    __swig_setmethods__["vlanSupported"] = _vmkctl.iScsiNicProperties_vlanSupported_set
    __swig_getmethods__["vlanSupported"] = _vmkctl.iScsiNicProperties_vlanSupported_get
    if _newclass:vlanSupported = _swig_property(_vmkctl.iScsiNicProperties_vlanSupported_get, _vmkctl.iScsiNicProperties_vlanSupported_set)
    __swig_setmethods__["vlanId"] = _vmkctl.iScsiNicProperties_vlanId_set
    __swig_getmethods__["vlanId"] = _vmkctl.iScsiNicProperties_vlanId_get
    if _newclass:vlanId = _swig_property(_vmkctl.iScsiNicProperties_vlanId_get, _vmkctl.iScsiNicProperties_vlanId_set)
    __swig_setmethods__["firstPort"] = _vmkctl.iScsiNicProperties_firstPort_set
    __swig_getmethods__["firstPort"] = _vmkctl.iScsiNicProperties_firstPort_get
    if _newclass:firstPort = _swig_property(_vmkctl.iScsiNicProperties_firstPort_get, _vmkctl.iScsiNicProperties_firstPort_set)
    __swig_setmethods__["portCount"] = _vmkctl.iScsiNicProperties_portCount_set
    __swig_getmethods__["portCount"] = _vmkctl.iScsiNicProperties_portCount_get
    if _newclass:portCount = _swig_property(_vmkctl.iScsiNicProperties_portCount_get, _vmkctl.iScsiNicProperties_portCount_set)
    __swig_setmethods__["toeSupported"] = _vmkctl.iScsiNicProperties_toeSupported_set
    __swig_getmethods__["toeSupported"] = _vmkctl.iScsiNicProperties_toeSupported_get
    if _newclass:toeSupported = _swig_property(_vmkctl.iScsiNicProperties_toeSupported_get, _vmkctl.iScsiNicProperties_toeSupported_set)
    __swig_setmethods__["tsoSupported"] = _vmkctl.iScsiNicProperties_tsoSupported_set
    __swig_getmethods__["tsoSupported"] = _vmkctl.iScsiNicProperties_tsoSupported_get
    if _newclass:tsoSupported = _swig_property(_vmkctl.iScsiNicProperties_tsoSupported_get, _vmkctl.iScsiNicProperties_tsoSupported_set)
    __swig_setmethods__["checksumOffloadSupported"] = _vmkctl.iScsiNicProperties_checksumOffloadSupported_set
    __swig_getmethods__["checksumOffloadSupported"] = _vmkctl.iScsiNicProperties_checksumOffloadSupported_get
    if _newclass:checksumOffloadSupported = _swig_property(_vmkctl.iScsiNicProperties_checksumOffloadSupported_get, _vmkctl.iScsiNicProperties_checksumOffloadSupported_set)
    __swig_setmethods__["linkUp"] = _vmkctl.iScsiNicProperties_linkUp_set
    __swig_getmethods__["linkUp"] = _vmkctl.iScsiNicProperties_linkUp_get
    if _newclass:linkUp = _swig_property(_vmkctl.iScsiNicProperties_linkUp_get, _vmkctl.iScsiNicProperties_linkUp_set)
    __swig_setmethods__["currentSpeed"] = _vmkctl.iScsiNicProperties_currentSpeed_set
    __swig_getmethods__["currentSpeed"] = _vmkctl.iScsiNicProperties_currentSpeed_get
    if _newclass:currentSpeed = _swig_property(_vmkctl.iScsiNicProperties_currentSpeed_get, _vmkctl.iScsiNicProperties_currentSpeed_set)
    __swig_setmethods__["rx_packets"] = _vmkctl.iScsiNicProperties_rx_packets_set
    __swig_getmethods__["rx_packets"] = _vmkctl.iScsiNicProperties_rx_packets_get
    if _newclass:rx_packets = _swig_property(_vmkctl.iScsiNicProperties_rx_packets_get, _vmkctl.iScsiNicProperties_rx_packets_set)
    __swig_setmethods__["tx_packets"] = _vmkctl.iScsiNicProperties_tx_packets_set
    __swig_getmethods__["tx_packets"] = _vmkctl.iScsiNicProperties_tx_packets_get
    if _newclass:tx_packets = _swig_property(_vmkctl.iScsiNicProperties_tx_packets_get, _vmkctl.iScsiNicProperties_tx_packets_set)
    __swig_setmethods__["nicDriver"] = _vmkctl.iScsiNicProperties_nicDriver_set
    __swig_getmethods__["nicDriver"] = _vmkctl.iScsiNicProperties_nicDriver_get
    if _newclass:nicDriver = _swig_property(_vmkctl.iScsiNicProperties_nicDriver_get, _vmkctl.iScsiNicProperties_nicDriver_set)
    __swig_setmethods__["nicDriverVersion"] = _vmkctl.iScsiNicProperties_nicDriverVersion_set
    __swig_getmethods__["nicDriverVersion"] = _vmkctl.iScsiNicProperties_nicDriverVersion_get
    if _newclass:nicDriverVersion = _swig_property(_vmkctl.iScsiNicProperties_nicDriverVersion_get, _vmkctl.iScsiNicProperties_nicDriverVersion_set)
    __swig_setmethods__["nicFirmwareVersion"] = _vmkctl.iScsiNicProperties_nicFirmwareVersion_set
    __swig_getmethods__["nicFirmwareVersion"] = _vmkctl.iScsiNicProperties_nicFirmwareVersion_get
    if _newclass:nicFirmwareVersion = _swig_property(_vmkctl.iScsiNicProperties_nicFirmwareVersion_get, _vmkctl.iScsiNicProperties_nicFirmwareVersion_set)
    __swig_setmethods__["compliantStatus"] = _vmkctl.iScsiNicProperties_compliantStatus_set
    __swig_getmethods__["compliantStatus"] = _vmkctl.iScsiNicProperties_compliantStatus_get
    if _newclass:compliantStatus = _swig_property(_vmkctl.iScsiNicProperties_compliantStatus_get, _vmkctl.iScsiNicProperties_compliantStatus_set)
    __swig_setmethods__["nonCompliantMessage"] = _vmkctl.iScsiNicProperties_nonCompliantMessage_set
    __swig_getmethods__["nonCompliantMessage"] = _vmkctl.iScsiNicProperties_nonCompliantMessage_get
    if _newclass:nonCompliantMessage = _swig_property(_vmkctl.iScsiNicProperties_nonCompliantMessage_get, _vmkctl.iScsiNicProperties_nonCompliantMessage_set)
    __swig_setmethods__["nonCompliantRemedy"] = _vmkctl.iScsiNicProperties_nonCompliantRemedy_set
    __swig_getmethods__["nonCompliantRemedy"] = _vmkctl.iScsiNicProperties_nonCompliantRemedy_get
    if _newclass:nonCompliantRemedy = _swig_property(_vmkctl.iScsiNicProperties_nonCompliantRemedy_get, _vmkctl.iScsiNicProperties_nonCompliantRemedy_set)
    __swig_setmethods__["vswitch"] = _vmkctl.iScsiNicProperties_vswitch_set
    __swig_getmethods__["vswitch"] = _vmkctl.iScsiNicProperties_vswitch_get
    if _newclass:vswitch = _swig_property(_vmkctl.iScsiNicProperties_vswitch_get, _vmkctl.iScsiNicProperties_vswitch_set)
    __swig_setmethods__["portGroup"] = _vmkctl.iScsiNicProperties_portGroup_set
    __swig_getmethods__["portGroup"] = _vmkctl.iScsiNicProperties_portGroup_get
    if _newclass:portGroup = _swig_property(_vmkctl.iScsiNicProperties_portGroup_get, _vmkctl.iScsiNicProperties_portGroup_set)
    __swig_setmethods__["vswitchUuid"] = _vmkctl.iScsiNicProperties_vswitchUuid_set
    __swig_getmethods__["vswitchUuid"] = _vmkctl.iScsiNicProperties_vswitchUuid_get
    if _newclass:vswitchUuid = _swig_property(_vmkctl.iScsiNicProperties_vswitchUuid_get, _vmkctl.iScsiNicProperties_vswitchUuid_set)
    __swig_setmethods__["portgroupKey"] = _vmkctl.iScsiNicProperties_portgroupKey_set
    __swig_getmethods__["portgroupKey"] = _vmkctl.iScsiNicProperties_portgroupKey_get
    if _newclass:portgroupKey = _swig_property(_vmkctl.iScsiNicProperties_portgroupKey_get, _vmkctl.iScsiNicProperties_portgroupKey_set)
    __swig_setmethods__["portKey"] = _vmkctl.iScsiNicProperties_portKey_set
    __swig_getmethods__["portKey"] = _vmkctl.iScsiNicProperties_portKey_get
    if _newclass:portKey = _swig_property(_vmkctl.iScsiNicProperties_portKey_get, _vmkctl.iScsiNicProperties_portKey_set)
    __swig_setmethods__["opaqueNetworkId"] = _vmkctl.iScsiNicProperties_opaqueNetworkId_set
    __swig_getmethods__["opaqueNetworkId"] = _vmkctl.iScsiNicProperties_opaqueNetworkId_get
    if _newclass:opaqueNetworkId = _swig_property(_vmkctl.iScsiNicProperties_opaqueNetworkId_get, _vmkctl.iScsiNicProperties_opaqueNetworkId_set)
    __swig_setmethods__["opaqueNetworkType"] = _vmkctl.iScsiNicProperties_opaqueNetworkType_set
    __swig_getmethods__["opaqueNetworkType"] = _vmkctl.iScsiNicProperties_opaqueNetworkType_get
    if _newclass:opaqueNetworkType = _swig_property(_vmkctl.iScsiNicProperties_opaqueNetworkType_get, _vmkctl.iScsiNicProperties_opaqueNetworkType_set)
    __swig_setmethods__["externalId"] = _vmkctl.iScsiNicProperties_externalId_set
    __swig_getmethods__["externalId"] = _vmkctl.iScsiNicProperties_externalId_get
    if _newclass:externalId = _swig_property(_vmkctl.iScsiNicProperties_externalId_get, _vmkctl.iScsiNicProperties_externalId_set)
    __swig_setmethods__["duplex"] = _vmkctl.iScsiNicProperties_duplex_set
    __swig_getmethods__["duplex"] = _vmkctl.iScsiNicProperties_duplex_get
    if _newclass:duplex = _swig_property(_vmkctl.iScsiNicProperties_duplex_get, _vmkctl.iScsiNicProperties_duplex_set)
    __swig_setmethods__["pathStatus"] = _vmkctl.iScsiNicProperties_pathStatus_set
    __swig_getmethods__["pathStatus"] = _vmkctl.iScsiNicProperties_pathStatus_get
    if _newclass:pathStatus = _swig_property(_vmkctl.iScsiNicProperties_pathStatus_get, _vmkctl.iScsiNicProperties_pathStatus_set)
    def ClearProperties(self) -> "void" : return _vmkctl.iScsiNicProperties_ClearProperties(self)
    def __init__(self): 
        this = _vmkctl.new_iScsiNicProperties()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiNicProperties
    __del__ = lambda self : None;
iScsiNicProperties_swigregister = _vmkctl.iScsiNicProperties_swigregister
iScsiNicProperties_swigregister(iScsiNicProperties)

class iScsiPhysicalHbaProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiPhysicalHbaProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiPhysicalHbaProperties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vendor"] = _vmkctl.iScsiPhysicalHbaProperties_vendor_set
    __swig_getmethods__["vendor"] = _vmkctl.iScsiPhysicalHbaProperties_vendor_get
    if _newclass:vendor = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_vendor_get, _vmkctl.iScsiPhysicalHbaProperties_vendor_set)
    __swig_setmethods__["model"] = _vmkctl.iScsiPhysicalHbaProperties_model_set
    __swig_getmethods__["model"] = _vmkctl.iScsiPhysicalHbaProperties_model_get
    if _newclass:model = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_model_get, _vmkctl.iScsiPhysicalHbaProperties_model_set)
    __swig_setmethods__["description"] = _vmkctl.iScsiPhysicalHbaProperties_description_set
    __swig_getmethods__["description"] = _vmkctl.iScsiPhysicalHbaProperties_description_get
    if _newclass:description = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_description_get, _vmkctl.iScsiPhysicalHbaProperties_description_set)
    __swig_setmethods__["serialNumber"] = _vmkctl.iScsiPhysicalHbaProperties_serialNumber_set
    __swig_getmethods__["serialNumber"] = _vmkctl.iScsiPhysicalHbaProperties_serialNumber_get
    if _newclass:serialNumber = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_serialNumber_get, _vmkctl.iScsiPhysicalHbaProperties_serialNumber_set)
    __swig_setmethods__["hardwareVersion"] = _vmkctl.iScsiPhysicalHbaProperties_hardwareVersion_set
    __swig_getmethods__["hardwareVersion"] = _vmkctl.iScsiPhysicalHbaProperties_hardwareVersion_get
    if _newclass:hardwareVersion = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_hardwareVersion_get, _vmkctl.iScsiPhysicalHbaProperties_hardwareVersion_set)
    __swig_setmethods__["asicVersion"] = _vmkctl.iScsiPhysicalHbaProperties_asicVersion_set
    __swig_getmethods__["asicVersion"] = _vmkctl.iScsiPhysicalHbaProperties_asicVersion_get
    if _newclass:asicVersion = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_asicVersion_get, _vmkctl.iScsiPhysicalHbaProperties_asicVersion_set)
    __swig_setmethods__["firmwareVersion"] = _vmkctl.iScsiPhysicalHbaProperties_firmwareVersion_set
    __swig_getmethods__["firmwareVersion"] = _vmkctl.iScsiPhysicalHbaProperties_firmwareVersion_get
    if _newclass:firmwareVersion = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_firmwareVersion_get, _vmkctl.iScsiPhysicalHbaProperties_firmwareVersion_set)
    __swig_setmethods__["optionRomVersion"] = _vmkctl.iScsiPhysicalHbaProperties_optionRomVersion_set
    __swig_getmethods__["optionRomVersion"] = _vmkctl.iScsiPhysicalHbaProperties_optionRomVersion_get
    if _newclass:optionRomVersion = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_optionRomVersion_get, _vmkctl.iScsiPhysicalHbaProperties_optionRomVersion_set)
    __swig_setmethods__["driverName"] = _vmkctl.iScsiPhysicalHbaProperties_driverName_set
    __swig_getmethods__["driverName"] = _vmkctl.iScsiPhysicalHbaProperties_driverName_get
    if _newclass:driverName = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_driverName_get, _vmkctl.iScsiPhysicalHbaProperties_driverName_set)
    __swig_setmethods__["driverVersion"] = _vmkctl.iScsiPhysicalHbaProperties_driverVersion_set
    __swig_getmethods__["driverVersion"] = _vmkctl.iScsiPhysicalHbaProperties_driverVersion_get
    if _newclass:driverVersion = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_driverVersion_get, _vmkctl.iScsiPhysicalHbaProperties_driverVersion_set)
    __swig_setmethods__["tcpProtocolSupported"] = _vmkctl.iScsiPhysicalHbaProperties_tcpProtocolSupported_set
    __swig_getmethods__["tcpProtocolSupported"] = _vmkctl.iScsiPhysicalHbaProperties_tcpProtocolSupported_get
    if _newclass:tcpProtocolSupported = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_tcpProtocolSupported_get, _vmkctl.iScsiPhysicalHbaProperties_tcpProtocolSupported_set)
    __swig_setmethods__["sctpProtocolSupported"] = _vmkctl.iScsiPhysicalHbaProperties_sctpProtocolSupported_set
    __swig_getmethods__["sctpProtocolSupported"] = _vmkctl.iScsiPhysicalHbaProperties_sctpProtocolSupported_get
    if _newclass:sctpProtocolSupported = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_sctpProtocolSupported_get, _vmkctl.iScsiPhysicalHbaProperties_sctpProtocolSupported_set)
    __swig_setmethods__["udpProtocolSupported"] = _vmkctl.iScsiPhysicalHbaProperties_udpProtocolSupported_set
    __swig_getmethods__["udpProtocolSupported"] = _vmkctl.iScsiPhysicalHbaProperties_udpProtocolSupported_get
    if _newclass:udpProtocolSupported = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_udpProtocolSupported_get, _vmkctl.iScsiPhysicalHbaProperties_udpProtocolSupported_set)
    __swig_setmethods__["bidirectionalTransfersSupported"] = _vmkctl.iScsiPhysicalHbaProperties_bidirectionalTransfersSupported_set
    __swig_getmethods__["bidirectionalTransfersSupported"] = _vmkctl.iScsiPhysicalHbaProperties_bidirectionalTransfersSupported_get
    if _newclass:bidirectionalTransfersSupported = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_bidirectionalTransfersSupported_get, _vmkctl.iScsiPhysicalHbaProperties_bidirectionalTransfersSupported_set)
    __swig_setmethods__["maximumCdbLength"] = _vmkctl.iScsiPhysicalHbaProperties_maximumCdbLength_set
    __swig_getmethods__["maximumCdbLength"] = _vmkctl.iScsiPhysicalHbaProperties_maximumCdbLength_get
    if _newclass:maximumCdbLength = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_maximumCdbLength_get, _vmkctl.iScsiPhysicalHbaProperties_maximumCdbLength_set)
    __swig_setmethods__["canBeNic"] = _vmkctl.iScsiPhysicalHbaProperties_canBeNic_set
    __swig_getmethods__["canBeNic"] = _vmkctl.iScsiPhysicalHbaProperties_canBeNic_get
    if _newclass:canBeNic = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_canBeNic_get, _vmkctl.iScsiPhysicalHbaProperties_canBeNic_set)
    __swig_setmethods__["isNic"] = _vmkctl.iScsiPhysicalHbaProperties_isNic_set
    __swig_getmethods__["isNic"] = _vmkctl.iScsiPhysicalHbaProperties_isNic_get
    if _newclass:isNic = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_isNic_get, _vmkctl.iScsiPhysicalHbaProperties_isNic_set)
    __swig_setmethods__["isInitiator"] = _vmkctl.iScsiPhysicalHbaProperties_isInitiator_set
    __swig_getmethods__["isInitiator"] = _vmkctl.iScsiPhysicalHbaProperties_isInitiator_get
    if _newclass:isInitiator = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_isInitiator_get, _vmkctl.iScsiPhysicalHbaProperties_isInitiator_set)
    __swig_setmethods__["isTarget"] = _vmkctl.iScsiPhysicalHbaProperties_isTarget_set
    __swig_getmethods__["isTarget"] = _vmkctl.iScsiPhysicalHbaProperties_isTarget_get
    if _newclass:isTarget = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_isTarget_get, _vmkctl.iScsiPhysicalHbaProperties_isTarget_set)
    __swig_setmethods__["usingTcpOffloadEngine"] = _vmkctl.iScsiPhysicalHbaProperties_usingTcpOffloadEngine_set
    __swig_getmethods__["usingTcpOffloadEngine"] = _vmkctl.iScsiPhysicalHbaProperties_usingTcpOffloadEngine_get
    if _newclass:usingTcpOffloadEngine = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_usingTcpOffloadEngine_get, _vmkctl.iScsiPhysicalHbaProperties_usingTcpOffloadEngine_set)
    __swig_setmethods__["usingIscsiOffloadEngine"] = _vmkctl.iScsiPhysicalHbaProperties_usingIscsiOffloadEngine_set
    __swig_getmethods__["usingIscsiOffloadEngine"] = _vmkctl.iScsiPhysicalHbaProperties_usingIscsiOffloadEngine_get
    if _newclass:usingIscsiOffloadEngine = _swig_property(_vmkctl.iScsiPhysicalHbaProperties_usingIscsiOffloadEngine_get, _vmkctl.iScsiPhysicalHbaProperties_usingIscsiOffloadEngine_set)
    def __init__(self): 
        this = _vmkctl.new_iScsiPhysicalHbaProperties()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiPhysicalHbaProperties
    __del__ = lambda self : None;
iScsiPhysicalHbaProperties_swigregister = _vmkctl.iScsiPhysicalHbaProperties_swigregister
iScsiPhysicalHbaProperties_swigregister(iScsiPhysicalHbaProperties)

DISCOVERY_METHOD_UNKNOWN = _vmkctl.DISCOVERY_METHOD_UNKNOWN
DISCOVERY_METHOD_STATIC = _vmkctl.DISCOVERY_METHOD_STATIC
DISCOVERY_METHOD_SLP = _vmkctl.DISCOVERY_METHOD_SLP
DISCOVERY_METHOD_ISNS = _vmkctl.DISCOVERY_METHOD_ISNS
DISCOVERY_METHOD_SENDTARGETS = _vmkctl.DISCOVERY_METHOD_SENDTARGETS
class iScsiTargetProperties(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiTargetProperties, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiTargetProperties, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _vmkctl.iScsiTargetProperties_name_set
    __swig_getmethods__["name"] = _vmkctl.iScsiTargetProperties_name_get
    if _newclass:name = _swig_property(_vmkctl.iScsiTargetProperties_name_get, _vmkctl.iScsiTargetProperties_name_set)
    __swig_setmethods__["alias"] = _vmkctl.iScsiTargetProperties_alias_set
    __swig_getmethods__["alias"] = _vmkctl.iScsiTargetProperties_alias_get
    if _newclass:alias = _swig_property(_vmkctl.iScsiTargetProperties_alias_get, _vmkctl.iScsiTargetProperties_alias_set)
    __swig_setmethods__["discMethodFlag"] = _vmkctl.iScsiTargetProperties_discMethodFlag_set
    __swig_getmethods__["discMethodFlag"] = _vmkctl.iScsiTargetProperties_discMethodFlag_get
    if _newclass:discMethodFlag = _swig_property(_vmkctl.iScsiTargetProperties_discMethodFlag_get, _vmkctl.iScsiTargetProperties_discMethodFlag_set)
    __swig_setmethods__["sendTargetsDiscoverySettable"] = _vmkctl.iScsiTargetProperties_sendTargetsDiscoverySettable_set
    __swig_getmethods__["sendTargetsDiscoverySettable"] = _vmkctl.iScsiTargetProperties_sendTargetsDiscoverySettable_get
    if _newclass:sendTargetsDiscoverySettable = _swig_property(_vmkctl.iScsiTargetProperties_sendTargetsDiscoverySettable_get, _vmkctl.iScsiTargetProperties_sendTargetsDiscoverySettable_set)
    __swig_setmethods__["sendTargetsDiscoveryEnabled"] = _vmkctl.iScsiTargetProperties_sendTargetsDiscoveryEnabled_set
    __swig_getmethods__["sendTargetsDiscoveryEnabled"] = _vmkctl.iScsiTargetProperties_sendTargetsDiscoveryEnabled_get
    if _newclass:sendTargetsDiscoveryEnabled = _swig_property(_vmkctl.iScsiTargetProperties_sendTargetsDiscoveryEnabled_get, _vmkctl.iScsiTargetProperties_sendTargetsDiscoveryEnabled_set)
    def __init__(self): 
        this = _vmkctl.new_iScsiTargetProperties()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiTargetProperties
    __del__ = lambda self : None;
iScsiTargetProperties_swigregister = _vmkctl.iScsiTargetProperties_swigregister
iScsiTargetProperties_swigregister(iScsiTargetProperties)

ISCSI_DIGEST_PROHIBITED = _vmkctl.ISCSI_DIGEST_PROHIBITED
ISCSI_DIGEST_DISCOURAGED = _vmkctl.ISCSI_DIGEST_DISCOURAGED
ISCSI_DIGEST_PREFERRED = _vmkctl.ISCSI_DIGEST_PREFERRED
ISCSI_DIGEST_REQUIRED = _vmkctl.ISCSI_DIGEST_REQUIRED
class iScsiInheritanceFlags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiInheritanceFlags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiInheritanceFlags, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_iScsiInheritanceFlags()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["chap"] = _vmkctl.iScsiInheritanceFlags_chap_set
    __swig_getmethods__["chap"] = _vmkctl.iScsiInheritanceFlags_chap_get
    if _newclass:chap = _swig_property(_vmkctl.iScsiInheritanceFlags_chap_get, _vmkctl.iScsiInheritanceFlags_chap_set)
    __swig_setmethods__["mutualChap"] = _vmkctl.iScsiInheritanceFlags_mutualChap_set
    __swig_getmethods__["mutualChap"] = _vmkctl.iScsiInheritanceFlags_mutualChap_get
    if _newclass:mutualChap = _swig_property(_vmkctl.iScsiInheritanceFlags_mutualChap_get, _vmkctl.iScsiInheritanceFlags_mutualChap_set)
    __swig_setmethods__["headerDigest"] = _vmkctl.iScsiInheritanceFlags_headerDigest_set
    __swig_getmethods__["headerDigest"] = _vmkctl.iScsiInheritanceFlags_headerDigest_get
    if _newclass:headerDigest = _swig_property(_vmkctl.iScsiInheritanceFlags_headerDigest_get, _vmkctl.iScsiInheritanceFlags_headerDigest_set)
    __swig_setmethods__["dataDigest"] = _vmkctl.iScsiInheritanceFlags_dataDigest_set
    __swig_getmethods__["dataDigest"] = _vmkctl.iScsiInheritanceFlags_dataDigest_get
    if _newclass:dataDigest = _swig_property(_vmkctl.iScsiInheritanceFlags_dataDigest_get, _vmkctl.iScsiInheritanceFlags_dataDigest_set)
    __swig_setmethods__["maxOutstandingR2T"] = _vmkctl.iScsiInheritanceFlags_maxOutstandingR2T_set
    __swig_getmethods__["maxOutstandingR2T"] = _vmkctl.iScsiInheritanceFlags_maxOutstandingR2T_get
    if _newclass:maxOutstandingR2T = _swig_property(_vmkctl.iScsiInheritanceFlags_maxOutstandingR2T_get, _vmkctl.iScsiInheritanceFlags_maxOutstandingR2T_set)
    __swig_setmethods__["firstBurstLength"] = _vmkctl.iScsiInheritanceFlags_firstBurstLength_set
    __swig_getmethods__["firstBurstLength"] = _vmkctl.iScsiInheritanceFlags_firstBurstLength_get
    if _newclass:firstBurstLength = _swig_property(_vmkctl.iScsiInheritanceFlags_firstBurstLength_get, _vmkctl.iScsiInheritanceFlags_firstBurstLength_set)
    __swig_setmethods__["maxBurstLegth"] = _vmkctl.iScsiInheritanceFlags_maxBurstLegth_set
    __swig_getmethods__["maxBurstLegth"] = _vmkctl.iScsiInheritanceFlags_maxBurstLegth_get
    if _newclass:maxBurstLegth = _swig_property(_vmkctl.iScsiInheritanceFlags_maxBurstLegth_get, _vmkctl.iScsiInheritanceFlags_maxBurstLegth_set)
    __swig_setmethods__["maxRecvDataSegment"] = _vmkctl.iScsiInheritanceFlags_maxRecvDataSegment_set
    __swig_getmethods__["maxRecvDataSegment"] = _vmkctl.iScsiInheritanceFlags_maxRecvDataSegment_get
    if _newclass:maxRecvDataSegment = _swig_property(_vmkctl.iScsiInheritanceFlags_maxRecvDataSegment_get, _vmkctl.iScsiInheritanceFlags_maxRecvDataSegment_set)
    __swig_setmethods__["errorRevovery"] = _vmkctl.iScsiInheritanceFlags_errorRevovery_set
    __swig_getmethods__["errorRevovery"] = _vmkctl.iScsiInheritanceFlags_errorRevovery_get
    if _newclass:errorRevovery = _swig_property(_vmkctl.iScsiInheritanceFlags_errorRevovery_get, _vmkctl.iScsiInheritanceFlags_errorRevovery_set)
    __swig_setmethods__["initLoginRetryMax"] = _vmkctl.iScsiInheritanceFlags_initLoginRetryMax_set
    __swig_getmethods__["initLoginRetryMax"] = _vmkctl.iScsiInheritanceFlags_initLoginRetryMax_get
    if _newclass:initLoginRetryMax = _swig_property(_vmkctl.iScsiInheritanceFlags_initLoginRetryMax_get, _vmkctl.iScsiInheritanceFlags_initLoginRetryMax_set)
    __swig_setmethods__["initR2T"] = _vmkctl.iScsiInheritanceFlags_initR2T_set
    __swig_getmethods__["initR2T"] = _vmkctl.iScsiInheritanceFlags_initR2T_get
    if _newclass:initR2T = _swig_property(_vmkctl.iScsiInheritanceFlags_initR2T_get, _vmkctl.iScsiInheritanceFlags_initR2T_set)
    __swig_setmethods__["commandMax"] = _vmkctl.iScsiInheritanceFlags_commandMax_set
    __swig_getmethods__["commandMax"] = _vmkctl.iScsiInheritanceFlags_commandMax_get
    if _newclass:commandMax = _swig_property(_vmkctl.iScsiInheritanceFlags_commandMax_get, _vmkctl.iScsiInheritanceFlags_commandMax_set)
    __swig_setmethods__["immediateData"] = _vmkctl.iScsiInheritanceFlags_immediateData_set
    __swig_getmethods__["immediateData"] = _vmkctl.iScsiInheritanceFlags_immediateData_get
    if _newclass:immediateData = _swig_property(_vmkctl.iScsiInheritanceFlags_immediateData_get, _vmkctl.iScsiInheritanceFlags_immediateData_set)
    __swig_setmethods__["defaultTimeToWait"] = _vmkctl.iScsiInheritanceFlags_defaultTimeToWait_set
    __swig_getmethods__["defaultTimeToWait"] = _vmkctl.iScsiInheritanceFlags_defaultTimeToWait_get
    if _newclass:defaultTimeToWait = _swig_property(_vmkctl.iScsiInheritanceFlags_defaultTimeToWait_get, _vmkctl.iScsiInheritanceFlags_defaultTimeToWait_set)
    __swig_setmethods__["defaultTimeToRetain"] = _vmkctl.iScsiInheritanceFlags_defaultTimeToRetain_set
    __swig_getmethods__["defaultTimeToRetain"] = _vmkctl.iScsiInheritanceFlags_defaultTimeToRetain_get
    if _newclass:defaultTimeToRetain = _swig_property(_vmkctl.iScsiInheritanceFlags_defaultTimeToRetain_get, _vmkctl.iScsiInheritanceFlags_defaultTimeToRetain_set)
    __swig_setmethods__["loginTimeout"] = _vmkctl.iScsiInheritanceFlags_loginTimeout_set
    __swig_getmethods__["loginTimeout"] = _vmkctl.iScsiInheritanceFlags_loginTimeout_get
    if _newclass:loginTimeout = _swig_property(_vmkctl.iScsiInheritanceFlags_loginTimeout_get, _vmkctl.iScsiInheritanceFlags_loginTimeout_set)
    __swig_setmethods__["logoutTimeout"] = _vmkctl.iScsiInheritanceFlags_logoutTimeout_set
    __swig_getmethods__["logoutTimeout"] = _vmkctl.iScsiInheritanceFlags_logoutTimeout_get
    if _newclass:logoutTimeout = _swig_property(_vmkctl.iScsiInheritanceFlags_logoutTimeout_get, _vmkctl.iScsiInheritanceFlags_logoutTimeout_set)
    __swig_setmethods__["noopOutInterval"] = _vmkctl.iScsiInheritanceFlags_noopOutInterval_set
    __swig_getmethods__["noopOutInterval"] = _vmkctl.iScsiInheritanceFlags_noopOutInterval_get
    if _newclass:noopOutInterval = _swig_property(_vmkctl.iScsiInheritanceFlags_noopOutInterval_get, _vmkctl.iScsiInheritanceFlags_noopOutInterval_set)
    __swig_setmethods__["noopOutTimeout"] = _vmkctl.iScsiInheritanceFlags_noopOutTimeout_set
    __swig_getmethods__["noopOutTimeout"] = _vmkctl.iScsiInheritanceFlags_noopOutTimeout_get
    if _newclass:noopOutTimeout = _swig_property(_vmkctl.iScsiInheritanceFlags_noopOutTimeout_get, _vmkctl.iScsiInheritanceFlags_noopOutTimeout_set)
    __swig_setmethods__["recoveryTimeout"] = _vmkctl.iScsiInheritanceFlags_recoveryTimeout_set
    __swig_getmethods__["recoveryTimeout"] = _vmkctl.iScsiInheritanceFlags_recoveryTimeout_get
    if _newclass:recoveryTimeout = _swig_property(_vmkctl.iScsiInheritanceFlags_recoveryTimeout_get, _vmkctl.iScsiInheritanceFlags_recoveryTimeout_set)
    __swig_setmethods__["delayedAck"] = _vmkctl.iScsiInheritanceFlags_delayedAck_set
    __swig_getmethods__["delayedAck"] = _vmkctl.iScsiInheritanceFlags_delayedAck_get
    if _newclass:delayedAck = _swig_property(_vmkctl.iScsiInheritanceFlags_delayedAck_get, _vmkctl.iScsiInheritanceFlags_delayedAck_set)
    def __eq__(self, *args) -> "bool" : return _vmkctl.iScsiInheritanceFlags___eq__(self, *args)
    __swig_destroy__ = _vmkctl.delete_iScsiInheritanceFlags
    __del__ = lambda self : None;
iScsiInheritanceFlags_swigregister = _vmkctl.iScsiInheritanceFlags_swigregister
iScsiInheritanceFlags_swigregister(iScsiInheritanceFlags)

class iSnsInheritanceFlags(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iSnsInheritanceFlags, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iSnsInheritanceFlags, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_iSnsInheritanceFlags()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["pollInterval"] = _vmkctl.iSnsInheritanceFlags_pollInterval_set
    __swig_getmethods__["pollInterval"] = _vmkctl.iSnsInheritanceFlags_pollInterval_get
    if _newclass:pollInterval = _swig_property(_vmkctl.iSnsInheritanceFlags_pollInterval_get, _vmkctl.iSnsInheritanceFlags_pollInterval_set)
    def __eq__(self, *args) -> "bool" : return _vmkctl.iSnsInheritanceFlags___eq__(self, *args)
    __swig_destroy__ = _vmkctl.delete_iSnsInheritanceFlags
    __del__ = lambda self : None;
iSnsInheritanceFlags_swigregister = _vmkctl.iSnsInheritanceFlags_swigregister
iSnsInheritanceFlags_swigregister(iSnsInheritanceFlags)

class iScsiParms(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiParms, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiParms, name)
    __repr__ = _swig_repr
    __swig_setmethods__["error_recovery_level"] = _vmkctl.iScsiParms_error_recovery_level_set
    __swig_getmethods__["error_recovery_level"] = _vmkctl.iScsiParms_error_recovery_level_get
    if _newclass:error_recovery_level = _swig_property(_vmkctl.iScsiParms_error_recovery_level_get, _vmkctl.iScsiParms_error_recovery_level_set)
    __swig_setmethods__["error_recovery_level_default"] = _vmkctl.iScsiParms_error_recovery_level_default_set
    __swig_getmethods__["error_recovery_level_default"] = _vmkctl.iScsiParms_error_recovery_level_default_get
    if _newclass:error_recovery_level_default = _swig_property(_vmkctl.iScsiParms_error_recovery_level_default_get, _vmkctl.iScsiParms_error_recovery_level_default_set)
    __swig_setmethods__["error_recovery_level_min"] = _vmkctl.iScsiParms_error_recovery_level_min_set
    __swig_getmethods__["error_recovery_level_min"] = _vmkctl.iScsiParms_error_recovery_level_min_get
    if _newclass:error_recovery_level_min = _swig_property(_vmkctl.iScsiParms_error_recovery_level_min_get, _vmkctl.iScsiParms_error_recovery_level_min_set)
    __swig_setmethods__["error_recovery_level_max"] = _vmkctl.iScsiParms_error_recovery_level_max_set
    __swig_getmethods__["error_recovery_level_max"] = _vmkctl.iScsiParms_error_recovery_level_max_get
    if _newclass:error_recovery_level_max = _swig_property(_vmkctl.iScsiParms_error_recovery_level_max_get, _vmkctl.iScsiParms_error_recovery_level_max_set)
    __swig_setmethods__["error_recovery_level_settable"] = _vmkctl.iScsiParms_error_recovery_level_settable_set
    __swig_getmethods__["error_recovery_level_settable"] = _vmkctl.iScsiParms_error_recovery_level_settable_get
    if _newclass:error_recovery_level_settable = _swig_property(_vmkctl.iScsiParms_error_recovery_level_settable_get, _vmkctl.iScsiParms_error_recovery_level_settable_set)
    __swig_setmethods__["error_recovery_level_valid"] = _vmkctl.iScsiParms_error_recovery_level_valid_set
    __swig_getmethods__["error_recovery_level_valid"] = _vmkctl.iScsiParms_error_recovery_level_valid_get
    if _newclass:error_recovery_level_valid = _swig_property(_vmkctl.iScsiParms_error_recovery_level_valid_get, _vmkctl.iScsiParms_error_recovery_level_valid_set)
    __swig_setmethods__["init_login_retry_max"] = _vmkctl.iScsiParms_init_login_retry_max_set
    __swig_getmethods__["init_login_retry_max"] = _vmkctl.iScsiParms_init_login_retry_max_get
    if _newclass:init_login_retry_max = _swig_property(_vmkctl.iScsiParms_init_login_retry_max_get, _vmkctl.iScsiParms_init_login_retry_max_set)
    __swig_setmethods__["init_login_retry_max_default"] = _vmkctl.iScsiParms_init_login_retry_max_default_set
    __swig_getmethods__["init_login_retry_max_default"] = _vmkctl.iScsiParms_init_login_retry_max_default_get
    if _newclass:init_login_retry_max_default = _swig_property(_vmkctl.iScsiParms_init_login_retry_max_default_get, _vmkctl.iScsiParms_init_login_retry_max_default_set)
    __swig_setmethods__["init_login_retry_max_min"] = _vmkctl.iScsiParms_init_login_retry_max_min_set
    __swig_getmethods__["init_login_retry_max_min"] = _vmkctl.iScsiParms_init_login_retry_max_min_get
    if _newclass:init_login_retry_max_min = _swig_property(_vmkctl.iScsiParms_init_login_retry_max_min_get, _vmkctl.iScsiParms_init_login_retry_max_min_set)
    __swig_setmethods__["init_login_retry_max_max"] = _vmkctl.iScsiParms_init_login_retry_max_max_set
    __swig_getmethods__["init_login_retry_max_max"] = _vmkctl.iScsiParms_init_login_retry_max_max_get
    if _newclass:init_login_retry_max_max = _swig_property(_vmkctl.iScsiParms_init_login_retry_max_max_get, _vmkctl.iScsiParms_init_login_retry_max_max_set)
    __swig_setmethods__["init_login_retry_max_settable"] = _vmkctl.iScsiParms_init_login_retry_max_settable_set
    __swig_getmethods__["init_login_retry_max_settable"] = _vmkctl.iScsiParms_init_login_retry_max_settable_get
    if _newclass:init_login_retry_max_settable = _swig_property(_vmkctl.iScsiParms_init_login_retry_max_settable_get, _vmkctl.iScsiParms_init_login_retry_max_settable_set)
    __swig_setmethods__["init_login_retry_max_valid"] = _vmkctl.iScsiParms_init_login_retry_max_valid_set
    __swig_getmethods__["init_login_retry_max_valid"] = _vmkctl.iScsiParms_init_login_retry_max_valid_get
    if _newclass:init_login_retry_max_valid = _swig_property(_vmkctl.iScsiParms_init_login_retry_max_valid_get, _vmkctl.iScsiParms_init_login_retry_max_valid_set)
    __swig_setmethods__["init_r2t"] = _vmkctl.iScsiParms_init_r2t_set
    __swig_getmethods__["init_r2t"] = _vmkctl.iScsiParms_init_r2t_get
    if _newclass:init_r2t = _swig_property(_vmkctl.iScsiParms_init_r2t_get, _vmkctl.iScsiParms_init_r2t_set)
    __swig_setmethods__["init_r2t_default"] = _vmkctl.iScsiParms_init_r2t_default_set
    __swig_getmethods__["init_r2t_default"] = _vmkctl.iScsiParms_init_r2t_default_get
    if _newclass:init_r2t_default = _swig_property(_vmkctl.iScsiParms_init_r2t_default_get, _vmkctl.iScsiParms_init_r2t_default_set)
    __swig_setmethods__["init_r2t_settable"] = _vmkctl.iScsiParms_init_r2t_settable_set
    __swig_getmethods__["init_r2t_settable"] = _vmkctl.iScsiParms_init_r2t_settable_get
    if _newclass:init_r2t_settable = _swig_property(_vmkctl.iScsiParms_init_r2t_settable_get, _vmkctl.iScsiParms_init_r2t_settable_set)
    __swig_setmethods__["init_r2t_valid"] = _vmkctl.iScsiParms_init_r2t_valid_set
    __swig_getmethods__["init_r2t_valid"] = _vmkctl.iScsiParms_init_r2t_valid_get
    if _newclass:init_r2t_valid = _swig_property(_vmkctl.iScsiParms_init_r2t_valid_get, _vmkctl.iScsiParms_init_r2t_valid_set)
    __swig_setmethods__["max_outstanding_r2t"] = _vmkctl.iScsiParms_max_outstanding_r2t_set
    __swig_getmethods__["max_outstanding_r2t"] = _vmkctl.iScsiParms_max_outstanding_r2t_get
    if _newclass:max_outstanding_r2t = _swig_property(_vmkctl.iScsiParms_max_outstanding_r2t_get, _vmkctl.iScsiParms_max_outstanding_r2t_set)
    __swig_setmethods__["max_outstanding_r2t_default"] = _vmkctl.iScsiParms_max_outstanding_r2t_default_set
    __swig_getmethods__["max_outstanding_r2t_default"] = _vmkctl.iScsiParms_max_outstanding_r2t_default_get
    if _newclass:max_outstanding_r2t_default = _swig_property(_vmkctl.iScsiParms_max_outstanding_r2t_default_get, _vmkctl.iScsiParms_max_outstanding_r2t_default_set)
    __swig_setmethods__["max_outstanding_r2t_min"] = _vmkctl.iScsiParms_max_outstanding_r2t_min_set
    __swig_getmethods__["max_outstanding_r2t_min"] = _vmkctl.iScsiParms_max_outstanding_r2t_min_get
    if _newclass:max_outstanding_r2t_min = _swig_property(_vmkctl.iScsiParms_max_outstanding_r2t_min_get, _vmkctl.iScsiParms_max_outstanding_r2t_min_set)
    __swig_setmethods__["max_outstanding_r2t_max"] = _vmkctl.iScsiParms_max_outstanding_r2t_max_set
    __swig_getmethods__["max_outstanding_r2t_max"] = _vmkctl.iScsiParms_max_outstanding_r2t_max_get
    if _newclass:max_outstanding_r2t_max = _swig_property(_vmkctl.iScsiParms_max_outstanding_r2t_max_get, _vmkctl.iScsiParms_max_outstanding_r2t_max_set)
    __swig_setmethods__["max_outstanding_r2t_settable"] = _vmkctl.iScsiParms_max_outstanding_r2t_settable_set
    __swig_getmethods__["max_outstanding_r2t_settable"] = _vmkctl.iScsiParms_max_outstanding_r2t_settable_get
    if _newclass:max_outstanding_r2t_settable = _swig_property(_vmkctl.iScsiParms_max_outstanding_r2t_settable_get, _vmkctl.iScsiParms_max_outstanding_r2t_settable_set)
    __swig_setmethods__["max_outstanding_r2t_valid"] = _vmkctl.iScsiParms_max_outstanding_r2t_valid_set
    __swig_getmethods__["max_outstanding_r2t_valid"] = _vmkctl.iScsiParms_max_outstanding_r2t_valid_get
    if _newclass:max_outstanding_r2t_valid = _swig_property(_vmkctl.iScsiParms_max_outstanding_r2t_valid_get, _vmkctl.iScsiParms_max_outstanding_r2t_valid_set)
    __swig_setmethods__["first_burst_len"] = _vmkctl.iScsiParms_first_burst_len_set
    __swig_getmethods__["first_burst_len"] = _vmkctl.iScsiParms_first_burst_len_get
    if _newclass:first_burst_len = _swig_property(_vmkctl.iScsiParms_first_burst_len_get, _vmkctl.iScsiParms_first_burst_len_set)
    __swig_setmethods__["first_burst_len_default"] = _vmkctl.iScsiParms_first_burst_len_default_set
    __swig_getmethods__["first_burst_len_default"] = _vmkctl.iScsiParms_first_burst_len_default_get
    if _newclass:first_burst_len_default = _swig_property(_vmkctl.iScsiParms_first_burst_len_default_get, _vmkctl.iScsiParms_first_burst_len_default_set)
    __swig_setmethods__["first_burst_len_min"] = _vmkctl.iScsiParms_first_burst_len_min_set
    __swig_getmethods__["first_burst_len_min"] = _vmkctl.iScsiParms_first_burst_len_min_get
    if _newclass:first_burst_len_min = _swig_property(_vmkctl.iScsiParms_first_burst_len_min_get, _vmkctl.iScsiParms_first_burst_len_min_set)
    __swig_setmethods__["first_burst_len_max"] = _vmkctl.iScsiParms_first_burst_len_max_set
    __swig_getmethods__["first_burst_len_max"] = _vmkctl.iScsiParms_first_burst_len_max_get
    if _newclass:first_burst_len_max = _swig_property(_vmkctl.iScsiParms_first_burst_len_max_get, _vmkctl.iScsiParms_first_burst_len_max_set)
    __swig_setmethods__["first_burst_len_settable"] = _vmkctl.iScsiParms_first_burst_len_settable_set
    __swig_getmethods__["first_burst_len_settable"] = _vmkctl.iScsiParms_first_burst_len_settable_get
    if _newclass:first_burst_len_settable = _swig_property(_vmkctl.iScsiParms_first_burst_len_settable_get, _vmkctl.iScsiParms_first_burst_len_settable_set)
    __swig_setmethods__["first_burst_len_valid"] = _vmkctl.iScsiParms_first_burst_len_valid_set
    __swig_getmethods__["first_burst_len_valid"] = _vmkctl.iScsiParms_first_burst_len_valid_get
    if _newclass:first_burst_len_valid = _swig_property(_vmkctl.iScsiParms_first_burst_len_valid_get, _vmkctl.iScsiParms_first_burst_len_valid_set)
    __swig_setmethods__["max_burst_len"] = _vmkctl.iScsiParms_max_burst_len_set
    __swig_getmethods__["max_burst_len"] = _vmkctl.iScsiParms_max_burst_len_get
    if _newclass:max_burst_len = _swig_property(_vmkctl.iScsiParms_max_burst_len_get, _vmkctl.iScsiParms_max_burst_len_set)
    __swig_setmethods__["max_burst_len_default"] = _vmkctl.iScsiParms_max_burst_len_default_set
    __swig_getmethods__["max_burst_len_default"] = _vmkctl.iScsiParms_max_burst_len_default_get
    if _newclass:max_burst_len_default = _swig_property(_vmkctl.iScsiParms_max_burst_len_default_get, _vmkctl.iScsiParms_max_burst_len_default_set)
    __swig_setmethods__["max_burst_len_min"] = _vmkctl.iScsiParms_max_burst_len_min_set
    __swig_getmethods__["max_burst_len_min"] = _vmkctl.iScsiParms_max_burst_len_min_get
    if _newclass:max_burst_len_min = _swig_property(_vmkctl.iScsiParms_max_burst_len_min_get, _vmkctl.iScsiParms_max_burst_len_min_set)
    __swig_setmethods__["max_burst_len_max"] = _vmkctl.iScsiParms_max_burst_len_max_set
    __swig_getmethods__["max_burst_len_max"] = _vmkctl.iScsiParms_max_burst_len_max_get
    if _newclass:max_burst_len_max = _swig_property(_vmkctl.iScsiParms_max_burst_len_max_get, _vmkctl.iScsiParms_max_burst_len_max_set)
    __swig_setmethods__["max_burst_len_settable"] = _vmkctl.iScsiParms_max_burst_len_settable_set
    __swig_getmethods__["max_burst_len_settable"] = _vmkctl.iScsiParms_max_burst_len_settable_get
    if _newclass:max_burst_len_settable = _swig_property(_vmkctl.iScsiParms_max_burst_len_settable_get, _vmkctl.iScsiParms_max_burst_len_settable_set)
    __swig_setmethods__["max_burst_len_valid"] = _vmkctl.iScsiParms_max_burst_len_valid_set
    __swig_getmethods__["max_burst_len_valid"] = _vmkctl.iScsiParms_max_burst_len_valid_get
    if _newclass:max_burst_len_valid = _swig_property(_vmkctl.iScsiParms_max_burst_len_valid_get, _vmkctl.iScsiParms_max_burst_len_valid_set)
    __swig_setmethods__["max_rev_data_seg_len"] = _vmkctl.iScsiParms_max_rev_data_seg_len_set
    __swig_getmethods__["max_rev_data_seg_len"] = _vmkctl.iScsiParms_max_rev_data_seg_len_get
    if _newclass:max_rev_data_seg_len = _swig_property(_vmkctl.iScsiParms_max_rev_data_seg_len_get, _vmkctl.iScsiParms_max_rev_data_seg_len_set)
    __swig_setmethods__["max_rev_data_seg_len_default"] = _vmkctl.iScsiParms_max_rev_data_seg_len_default_set
    __swig_getmethods__["max_rev_data_seg_len_default"] = _vmkctl.iScsiParms_max_rev_data_seg_len_default_get
    if _newclass:max_rev_data_seg_len_default = _swig_property(_vmkctl.iScsiParms_max_rev_data_seg_len_default_get, _vmkctl.iScsiParms_max_rev_data_seg_len_default_set)
    __swig_setmethods__["max_rev_data_seg_len_min"] = _vmkctl.iScsiParms_max_rev_data_seg_len_min_set
    __swig_getmethods__["max_rev_data_seg_len_min"] = _vmkctl.iScsiParms_max_rev_data_seg_len_min_get
    if _newclass:max_rev_data_seg_len_min = _swig_property(_vmkctl.iScsiParms_max_rev_data_seg_len_min_get, _vmkctl.iScsiParms_max_rev_data_seg_len_min_set)
    __swig_setmethods__["max_rev_data_seg_len_max"] = _vmkctl.iScsiParms_max_rev_data_seg_len_max_set
    __swig_getmethods__["max_rev_data_seg_len_max"] = _vmkctl.iScsiParms_max_rev_data_seg_len_max_get
    if _newclass:max_rev_data_seg_len_max = _swig_property(_vmkctl.iScsiParms_max_rev_data_seg_len_max_get, _vmkctl.iScsiParms_max_rev_data_seg_len_max_set)
    __swig_setmethods__["max_rev_data_seg_len_settable"] = _vmkctl.iScsiParms_max_rev_data_seg_len_settable_set
    __swig_getmethods__["max_rev_data_seg_len_settable"] = _vmkctl.iScsiParms_max_rev_data_seg_len_settable_get
    if _newclass:max_rev_data_seg_len_settable = _swig_property(_vmkctl.iScsiParms_max_rev_data_seg_len_settable_get, _vmkctl.iScsiParms_max_rev_data_seg_len_settable_set)
    __swig_setmethods__["max_rev_data_seg_len_valid"] = _vmkctl.iScsiParms_max_rev_data_seg_len_valid_set
    __swig_getmethods__["max_rev_data_seg_len_valid"] = _vmkctl.iScsiParms_max_rev_data_seg_len_valid_get
    if _newclass:max_rev_data_seg_len_valid = _swig_property(_vmkctl.iScsiParms_max_rev_data_seg_len_valid_get, _vmkctl.iScsiParms_max_rev_data_seg_len_valid_set)
    __swig_setmethods__["cmds_max"] = _vmkctl.iScsiParms_cmds_max_set
    __swig_getmethods__["cmds_max"] = _vmkctl.iScsiParms_cmds_max_get
    if _newclass:cmds_max = _swig_property(_vmkctl.iScsiParms_cmds_max_get, _vmkctl.iScsiParms_cmds_max_set)
    __swig_setmethods__["cmds_max_default"] = _vmkctl.iScsiParms_cmds_max_default_set
    __swig_getmethods__["cmds_max_default"] = _vmkctl.iScsiParms_cmds_max_default_get
    if _newclass:cmds_max_default = _swig_property(_vmkctl.iScsiParms_cmds_max_default_get, _vmkctl.iScsiParms_cmds_max_default_set)
    __swig_setmethods__["cmds_max_min"] = _vmkctl.iScsiParms_cmds_max_min_set
    __swig_getmethods__["cmds_max_min"] = _vmkctl.iScsiParms_cmds_max_min_get
    if _newclass:cmds_max_min = _swig_property(_vmkctl.iScsiParms_cmds_max_min_get, _vmkctl.iScsiParms_cmds_max_min_set)
    __swig_setmethods__["cmds_max_max"] = _vmkctl.iScsiParms_cmds_max_max_set
    __swig_getmethods__["cmds_max_max"] = _vmkctl.iScsiParms_cmds_max_max_get
    if _newclass:cmds_max_max = _swig_property(_vmkctl.iScsiParms_cmds_max_max_get, _vmkctl.iScsiParms_cmds_max_max_set)
    __swig_setmethods__["cmds_max_settable"] = _vmkctl.iScsiParms_cmds_max_settable_set
    __swig_getmethods__["cmds_max_settable"] = _vmkctl.iScsiParms_cmds_max_settable_get
    if _newclass:cmds_max_settable = _swig_property(_vmkctl.iScsiParms_cmds_max_settable_get, _vmkctl.iScsiParms_cmds_max_settable_set)
    __swig_setmethods__["cmds_max_valid"] = _vmkctl.iScsiParms_cmds_max_valid_set
    __swig_getmethods__["cmds_max_valid"] = _vmkctl.iScsiParms_cmds_max_valid_get
    if _newclass:cmds_max_valid = _swig_property(_vmkctl.iScsiParms_cmds_max_valid_get, _vmkctl.iScsiParms_cmds_max_valid_set)
    __swig_setmethods__["immediate_data"] = _vmkctl.iScsiParms_immediate_data_set
    __swig_getmethods__["immediate_data"] = _vmkctl.iScsiParms_immediate_data_get
    if _newclass:immediate_data = _swig_property(_vmkctl.iScsiParms_immediate_data_get, _vmkctl.iScsiParms_immediate_data_set)
    __swig_setmethods__["immediate_data_default"] = _vmkctl.iScsiParms_immediate_data_default_set
    __swig_getmethods__["immediate_data_default"] = _vmkctl.iScsiParms_immediate_data_default_get
    if _newclass:immediate_data_default = _swig_property(_vmkctl.iScsiParms_immediate_data_default_get, _vmkctl.iScsiParms_immediate_data_default_set)
    __swig_setmethods__["immediate_data_settable"] = _vmkctl.iScsiParms_immediate_data_settable_set
    __swig_getmethods__["immediate_data_settable"] = _vmkctl.iScsiParms_immediate_data_settable_get
    if _newclass:immediate_data_settable = _swig_property(_vmkctl.iScsiParms_immediate_data_settable_get, _vmkctl.iScsiParms_immediate_data_settable_set)
    __swig_setmethods__["immediate_data_valid"] = _vmkctl.iScsiParms_immediate_data_valid_set
    __swig_getmethods__["immediate_data_valid"] = _vmkctl.iScsiParms_immediate_data_valid_get
    if _newclass:immediate_data_valid = _swig_property(_vmkctl.iScsiParms_immediate_data_valid_get, _vmkctl.iScsiParms_immediate_data_valid_set)
    __swig_setmethods__["default_time2wait"] = _vmkctl.iScsiParms_default_time2wait_set
    __swig_getmethods__["default_time2wait"] = _vmkctl.iScsiParms_default_time2wait_get
    if _newclass:default_time2wait = _swig_property(_vmkctl.iScsiParms_default_time2wait_get, _vmkctl.iScsiParms_default_time2wait_set)
    __swig_setmethods__["default_time2wait_default"] = _vmkctl.iScsiParms_default_time2wait_default_set
    __swig_getmethods__["default_time2wait_default"] = _vmkctl.iScsiParms_default_time2wait_default_get
    if _newclass:default_time2wait_default = _swig_property(_vmkctl.iScsiParms_default_time2wait_default_get, _vmkctl.iScsiParms_default_time2wait_default_set)
    __swig_setmethods__["default_time2wait_min"] = _vmkctl.iScsiParms_default_time2wait_min_set
    __swig_getmethods__["default_time2wait_min"] = _vmkctl.iScsiParms_default_time2wait_min_get
    if _newclass:default_time2wait_min = _swig_property(_vmkctl.iScsiParms_default_time2wait_min_get, _vmkctl.iScsiParms_default_time2wait_min_set)
    __swig_setmethods__["default_time2wait_max"] = _vmkctl.iScsiParms_default_time2wait_max_set
    __swig_getmethods__["default_time2wait_max"] = _vmkctl.iScsiParms_default_time2wait_max_get
    if _newclass:default_time2wait_max = _swig_property(_vmkctl.iScsiParms_default_time2wait_max_get, _vmkctl.iScsiParms_default_time2wait_max_set)
    __swig_setmethods__["default_time2wait_settable"] = _vmkctl.iScsiParms_default_time2wait_settable_set
    __swig_getmethods__["default_time2wait_settable"] = _vmkctl.iScsiParms_default_time2wait_settable_get
    if _newclass:default_time2wait_settable = _swig_property(_vmkctl.iScsiParms_default_time2wait_settable_get, _vmkctl.iScsiParms_default_time2wait_settable_set)
    __swig_setmethods__["default_time2wait_valid"] = _vmkctl.iScsiParms_default_time2wait_valid_set
    __swig_getmethods__["default_time2wait_valid"] = _vmkctl.iScsiParms_default_time2wait_valid_get
    if _newclass:default_time2wait_valid = _swig_property(_vmkctl.iScsiParms_default_time2wait_valid_get, _vmkctl.iScsiParms_default_time2wait_valid_set)
    __swig_setmethods__["default_time2retain"] = _vmkctl.iScsiParms_default_time2retain_set
    __swig_getmethods__["default_time2retain"] = _vmkctl.iScsiParms_default_time2retain_get
    if _newclass:default_time2retain = _swig_property(_vmkctl.iScsiParms_default_time2retain_get, _vmkctl.iScsiParms_default_time2retain_set)
    __swig_setmethods__["default_time2retain_default"] = _vmkctl.iScsiParms_default_time2retain_default_set
    __swig_getmethods__["default_time2retain_default"] = _vmkctl.iScsiParms_default_time2retain_default_get
    if _newclass:default_time2retain_default = _swig_property(_vmkctl.iScsiParms_default_time2retain_default_get, _vmkctl.iScsiParms_default_time2retain_default_set)
    __swig_setmethods__["default_time2retain_min"] = _vmkctl.iScsiParms_default_time2retain_min_set
    __swig_getmethods__["default_time2retain_min"] = _vmkctl.iScsiParms_default_time2retain_min_get
    if _newclass:default_time2retain_min = _swig_property(_vmkctl.iScsiParms_default_time2retain_min_get, _vmkctl.iScsiParms_default_time2retain_min_set)
    __swig_setmethods__["default_time2retain_max"] = _vmkctl.iScsiParms_default_time2retain_max_set
    __swig_getmethods__["default_time2retain_max"] = _vmkctl.iScsiParms_default_time2retain_max_get
    if _newclass:default_time2retain_max = _swig_property(_vmkctl.iScsiParms_default_time2retain_max_get, _vmkctl.iScsiParms_default_time2retain_max_set)
    __swig_setmethods__["default_time2retain_settable"] = _vmkctl.iScsiParms_default_time2retain_settable_set
    __swig_getmethods__["default_time2retain_settable"] = _vmkctl.iScsiParms_default_time2retain_settable_get
    if _newclass:default_time2retain_settable = _swig_property(_vmkctl.iScsiParms_default_time2retain_settable_get, _vmkctl.iScsiParms_default_time2retain_settable_set)
    __swig_setmethods__["default_time2retain_valid"] = _vmkctl.iScsiParms_default_time2retain_valid_set
    __swig_getmethods__["default_time2retain_valid"] = _vmkctl.iScsiParms_default_time2retain_valid_get
    if _newclass:default_time2retain_valid = _swig_property(_vmkctl.iScsiParms_default_time2retain_valid_get, _vmkctl.iScsiParms_default_time2retain_valid_set)
    __swig_setmethods__["login_timeout"] = _vmkctl.iScsiParms_login_timeout_set
    __swig_getmethods__["login_timeout"] = _vmkctl.iScsiParms_login_timeout_get
    if _newclass:login_timeout = _swig_property(_vmkctl.iScsiParms_login_timeout_get, _vmkctl.iScsiParms_login_timeout_set)
    __swig_setmethods__["login_timeout_default"] = _vmkctl.iScsiParms_login_timeout_default_set
    __swig_getmethods__["login_timeout_default"] = _vmkctl.iScsiParms_login_timeout_default_get
    if _newclass:login_timeout_default = _swig_property(_vmkctl.iScsiParms_login_timeout_default_get, _vmkctl.iScsiParms_login_timeout_default_set)
    __swig_setmethods__["login_timeout_min"] = _vmkctl.iScsiParms_login_timeout_min_set
    __swig_getmethods__["login_timeout_min"] = _vmkctl.iScsiParms_login_timeout_min_get
    if _newclass:login_timeout_min = _swig_property(_vmkctl.iScsiParms_login_timeout_min_get, _vmkctl.iScsiParms_login_timeout_min_set)
    __swig_setmethods__["login_timeout_max"] = _vmkctl.iScsiParms_login_timeout_max_set
    __swig_getmethods__["login_timeout_max"] = _vmkctl.iScsiParms_login_timeout_max_get
    if _newclass:login_timeout_max = _swig_property(_vmkctl.iScsiParms_login_timeout_max_get, _vmkctl.iScsiParms_login_timeout_max_set)
    __swig_setmethods__["login_timeout_settable"] = _vmkctl.iScsiParms_login_timeout_settable_set
    __swig_getmethods__["login_timeout_settable"] = _vmkctl.iScsiParms_login_timeout_settable_get
    if _newclass:login_timeout_settable = _swig_property(_vmkctl.iScsiParms_login_timeout_settable_get, _vmkctl.iScsiParms_login_timeout_settable_set)
    __swig_setmethods__["login_timeout_valid"] = _vmkctl.iScsiParms_login_timeout_valid_set
    __swig_getmethods__["login_timeout_valid"] = _vmkctl.iScsiParms_login_timeout_valid_get
    if _newclass:login_timeout_valid = _swig_property(_vmkctl.iScsiParms_login_timeout_valid_get, _vmkctl.iScsiParms_login_timeout_valid_set)
    __swig_setmethods__["logout_timeout"] = _vmkctl.iScsiParms_logout_timeout_set
    __swig_getmethods__["logout_timeout"] = _vmkctl.iScsiParms_logout_timeout_get
    if _newclass:logout_timeout = _swig_property(_vmkctl.iScsiParms_logout_timeout_get, _vmkctl.iScsiParms_logout_timeout_set)
    __swig_setmethods__["logout_timeout_default"] = _vmkctl.iScsiParms_logout_timeout_default_set
    __swig_getmethods__["logout_timeout_default"] = _vmkctl.iScsiParms_logout_timeout_default_get
    if _newclass:logout_timeout_default = _swig_property(_vmkctl.iScsiParms_logout_timeout_default_get, _vmkctl.iScsiParms_logout_timeout_default_set)
    __swig_setmethods__["logout_timeout_min"] = _vmkctl.iScsiParms_logout_timeout_min_set
    __swig_getmethods__["logout_timeout_min"] = _vmkctl.iScsiParms_logout_timeout_min_get
    if _newclass:logout_timeout_min = _swig_property(_vmkctl.iScsiParms_logout_timeout_min_get, _vmkctl.iScsiParms_logout_timeout_min_set)
    __swig_setmethods__["logout_timeout_max"] = _vmkctl.iScsiParms_logout_timeout_max_set
    __swig_getmethods__["logout_timeout_max"] = _vmkctl.iScsiParms_logout_timeout_max_get
    if _newclass:logout_timeout_max = _swig_property(_vmkctl.iScsiParms_logout_timeout_max_get, _vmkctl.iScsiParms_logout_timeout_max_set)
    __swig_setmethods__["logout_timeout_settable"] = _vmkctl.iScsiParms_logout_timeout_settable_set
    __swig_getmethods__["logout_timeout_settable"] = _vmkctl.iScsiParms_logout_timeout_settable_get
    if _newclass:logout_timeout_settable = _swig_property(_vmkctl.iScsiParms_logout_timeout_settable_get, _vmkctl.iScsiParms_logout_timeout_settable_set)
    __swig_setmethods__["logout_timeout_valid"] = _vmkctl.iScsiParms_logout_timeout_valid_set
    __swig_getmethods__["logout_timeout_valid"] = _vmkctl.iScsiParms_logout_timeout_valid_get
    if _newclass:logout_timeout_valid = _swig_property(_vmkctl.iScsiParms_logout_timeout_valid_get, _vmkctl.iScsiParms_logout_timeout_valid_set)
    __swig_setmethods__["noop_out_interval"] = _vmkctl.iScsiParms_noop_out_interval_set
    __swig_getmethods__["noop_out_interval"] = _vmkctl.iScsiParms_noop_out_interval_get
    if _newclass:noop_out_interval = _swig_property(_vmkctl.iScsiParms_noop_out_interval_get, _vmkctl.iScsiParms_noop_out_interval_set)
    __swig_setmethods__["noop_out_interval_default"] = _vmkctl.iScsiParms_noop_out_interval_default_set
    __swig_getmethods__["noop_out_interval_default"] = _vmkctl.iScsiParms_noop_out_interval_default_get
    if _newclass:noop_out_interval_default = _swig_property(_vmkctl.iScsiParms_noop_out_interval_default_get, _vmkctl.iScsiParms_noop_out_interval_default_set)
    __swig_setmethods__["noop_out_interval_min"] = _vmkctl.iScsiParms_noop_out_interval_min_set
    __swig_getmethods__["noop_out_interval_min"] = _vmkctl.iScsiParms_noop_out_interval_min_get
    if _newclass:noop_out_interval_min = _swig_property(_vmkctl.iScsiParms_noop_out_interval_min_get, _vmkctl.iScsiParms_noop_out_interval_min_set)
    __swig_setmethods__["noop_out_interval_max"] = _vmkctl.iScsiParms_noop_out_interval_max_set
    __swig_getmethods__["noop_out_interval_max"] = _vmkctl.iScsiParms_noop_out_interval_max_get
    if _newclass:noop_out_interval_max = _swig_property(_vmkctl.iScsiParms_noop_out_interval_max_get, _vmkctl.iScsiParms_noop_out_interval_max_set)
    __swig_setmethods__["noop_out_interval_settable"] = _vmkctl.iScsiParms_noop_out_interval_settable_set
    __swig_getmethods__["noop_out_interval_settable"] = _vmkctl.iScsiParms_noop_out_interval_settable_get
    if _newclass:noop_out_interval_settable = _swig_property(_vmkctl.iScsiParms_noop_out_interval_settable_get, _vmkctl.iScsiParms_noop_out_interval_settable_set)
    __swig_setmethods__["noop_out_interval_valid"] = _vmkctl.iScsiParms_noop_out_interval_valid_set
    __swig_getmethods__["noop_out_interval_valid"] = _vmkctl.iScsiParms_noop_out_interval_valid_get
    if _newclass:noop_out_interval_valid = _swig_property(_vmkctl.iScsiParms_noop_out_interval_valid_get, _vmkctl.iScsiParms_noop_out_interval_valid_set)
    __swig_setmethods__["noop_out_timeout"] = _vmkctl.iScsiParms_noop_out_timeout_set
    __swig_getmethods__["noop_out_timeout"] = _vmkctl.iScsiParms_noop_out_timeout_get
    if _newclass:noop_out_timeout = _swig_property(_vmkctl.iScsiParms_noop_out_timeout_get, _vmkctl.iScsiParms_noop_out_timeout_set)
    __swig_setmethods__["noop_out_timeout_default"] = _vmkctl.iScsiParms_noop_out_timeout_default_set
    __swig_getmethods__["noop_out_timeout_default"] = _vmkctl.iScsiParms_noop_out_timeout_default_get
    if _newclass:noop_out_timeout_default = _swig_property(_vmkctl.iScsiParms_noop_out_timeout_default_get, _vmkctl.iScsiParms_noop_out_timeout_default_set)
    __swig_setmethods__["noop_out_timeout_min"] = _vmkctl.iScsiParms_noop_out_timeout_min_set
    __swig_getmethods__["noop_out_timeout_min"] = _vmkctl.iScsiParms_noop_out_timeout_min_get
    if _newclass:noop_out_timeout_min = _swig_property(_vmkctl.iScsiParms_noop_out_timeout_min_get, _vmkctl.iScsiParms_noop_out_timeout_min_set)
    __swig_setmethods__["noop_out_timeout_max"] = _vmkctl.iScsiParms_noop_out_timeout_max_set
    __swig_getmethods__["noop_out_timeout_max"] = _vmkctl.iScsiParms_noop_out_timeout_max_get
    if _newclass:noop_out_timeout_max = _swig_property(_vmkctl.iScsiParms_noop_out_timeout_max_get, _vmkctl.iScsiParms_noop_out_timeout_max_set)
    __swig_setmethods__["noop_out_timeout_settable"] = _vmkctl.iScsiParms_noop_out_timeout_settable_set
    __swig_getmethods__["noop_out_timeout_settable"] = _vmkctl.iScsiParms_noop_out_timeout_settable_get
    if _newclass:noop_out_timeout_settable = _swig_property(_vmkctl.iScsiParms_noop_out_timeout_settable_get, _vmkctl.iScsiParms_noop_out_timeout_settable_set)
    __swig_setmethods__["noop_out_timeout_valid"] = _vmkctl.iScsiParms_noop_out_timeout_valid_set
    __swig_getmethods__["noop_out_timeout_valid"] = _vmkctl.iScsiParms_noop_out_timeout_valid_get
    if _newclass:noop_out_timeout_valid = _swig_property(_vmkctl.iScsiParms_noop_out_timeout_valid_get, _vmkctl.iScsiParms_noop_out_timeout_valid_set)
    __swig_setmethods__["recovery_timeout"] = _vmkctl.iScsiParms_recovery_timeout_set
    __swig_getmethods__["recovery_timeout"] = _vmkctl.iScsiParms_recovery_timeout_get
    if _newclass:recovery_timeout = _swig_property(_vmkctl.iScsiParms_recovery_timeout_get, _vmkctl.iScsiParms_recovery_timeout_set)
    __swig_setmethods__["recovery_timeout_default"] = _vmkctl.iScsiParms_recovery_timeout_default_set
    __swig_getmethods__["recovery_timeout_default"] = _vmkctl.iScsiParms_recovery_timeout_default_get
    if _newclass:recovery_timeout_default = _swig_property(_vmkctl.iScsiParms_recovery_timeout_default_get, _vmkctl.iScsiParms_recovery_timeout_default_set)
    __swig_setmethods__["recovery_timeout_min"] = _vmkctl.iScsiParms_recovery_timeout_min_set
    __swig_getmethods__["recovery_timeout_min"] = _vmkctl.iScsiParms_recovery_timeout_min_get
    if _newclass:recovery_timeout_min = _swig_property(_vmkctl.iScsiParms_recovery_timeout_min_get, _vmkctl.iScsiParms_recovery_timeout_min_set)
    __swig_setmethods__["recovery_timeout_max"] = _vmkctl.iScsiParms_recovery_timeout_max_set
    __swig_getmethods__["recovery_timeout_max"] = _vmkctl.iScsiParms_recovery_timeout_max_get
    if _newclass:recovery_timeout_max = _swig_property(_vmkctl.iScsiParms_recovery_timeout_max_get, _vmkctl.iScsiParms_recovery_timeout_max_set)
    __swig_setmethods__["recovery_timeout_settable"] = _vmkctl.iScsiParms_recovery_timeout_settable_set
    __swig_getmethods__["recovery_timeout_settable"] = _vmkctl.iScsiParms_recovery_timeout_settable_get
    if _newclass:recovery_timeout_settable = _swig_property(_vmkctl.iScsiParms_recovery_timeout_settable_get, _vmkctl.iScsiParms_recovery_timeout_settable_set)
    __swig_setmethods__["recovery_timeout_valid"] = _vmkctl.iScsiParms_recovery_timeout_valid_set
    __swig_getmethods__["recovery_timeout_valid"] = _vmkctl.iScsiParms_recovery_timeout_valid_get
    if _newclass:recovery_timeout_valid = _swig_property(_vmkctl.iScsiParms_recovery_timeout_valid_get, _vmkctl.iScsiParms_recovery_timeout_valid_set)
    __swig_setmethods__["delayed_ack"] = _vmkctl.iScsiParms_delayed_ack_set
    __swig_getmethods__["delayed_ack"] = _vmkctl.iScsiParms_delayed_ack_get
    if _newclass:delayed_ack = _swig_property(_vmkctl.iScsiParms_delayed_ack_get, _vmkctl.iScsiParms_delayed_ack_set)
    __swig_setmethods__["delayed_ack_default"] = _vmkctl.iScsiParms_delayed_ack_default_set
    __swig_getmethods__["delayed_ack_default"] = _vmkctl.iScsiParms_delayed_ack_default_get
    if _newclass:delayed_ack_default = _swig_property(_vmkctl.iScsiParms_delayed_ack_default_get, _vmkctl.iScsiParms_delayed_ack_default_set)
    __swig_setmethods__["delayed_ack_settable"] = _vmkctl.iScsiParms_delayed_ack_settable_set
    __swig_getmethods__["delayed_ack_settable"] = _vmkctl.iScsiParms_delayed_ack_settable_get
    if _newclass:delayed_ack_settable = _swig_property(_vmkctl.iScsiParms_delayed_ack_settable_get, _vmkctl.iScsiParms_delayed_ack_settable_set)
    __swig_setmethods__["delayed_ack_valid"] = _vmkctl.iScsiParms_delayed_ack_valid_set
    __swig_getmethods__["delayed_ack_valid"] = _vmkctl.iScsiParms_delayed_ack_valid_get
    if _newclass:delayed_ack_valid = _swig_property(_vmkctl.iScsiParms_delayed_ack_valid_get, _vmkctl.iScsiParms_delayed_ack_valid_set)
    __swig_setmethods__["parent"] = _vmkctl.iScsiParms_parent_set
    __swig_getmethods__["parent"] = _vmkctl.iScsiParms_parent_get
    if _newclass:parent = _swig_property(_vmkctl.iScsiParms_parent_get, _vmkctl.iScsiParms_parent_set)
    __swig_setmethods__["inheritance"] = _vmkctl.iScsiParms_inheritance_set
    __swig_getmethods__["inheritance"] = _vmkctl.iScsiParms_inheritance_get
    if _newclass:inheritance = _swig_property(_vmkctl.iScsiParms_inheritance_get, _vmkctl.iScsiParms_inheritance_set)
    def __eq__(self, *args) -> "bool" : return _vmkctl.iScsiParms___eq__(self, *args)
    def __init__(self): 
        this = _vmkctl.new_iScsiParms()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiParms
    __del__ = lambda self : None;
iScsiParms_swigregister = _vmkctl.iScsiParms_swigregister
iScsiParms_swigregister(iScsiParms)

class iSnsParms(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iSnsParms, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iSnsParms, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pollInterval"] = _vmkctl.iSnsParms_pollInterval_set
    __swig_getmethods__["pollInterval"] = _vmkctl.iSnsParms_pollInterval_get
    if _newclass:pollInterval = _swig_property(_vmkctl.iSnsParms_pollInterval_get, _vmkctl.iSnsParms_pollInterval_set)
    __swig_setmethods__["pollIntervalDefault"] = _vmkctl.iSnsParms_pollIntervalDefault_set
    __swig_getmethods__["pollIntervalDefault"] = _vmkctl.iSnsParms_pollIntervalDefault_get
    if _newclass:pollIntervalDefault = _swig_property(_vmkctl.iSnsParms_pollIntervalDefault_get, _vmkctl.iSnsParms_pollIntervalDefault_set)
    __swig_setmethods__["pollIntervalMin"] = _vmkctl.iSnsParms_pollIntervalMin_set
    __swig_getmethods__["pollIntervalMin"] = _vmkctl.iSnsParms_pollIntervalMin_get
    if _newclass:pollIntervalMin = _swig_property(_vmkctl.iSnsParms_pollIntervalMin_get, _vmkctl.iSnsParms_pollIntervalMin_set)
    __swig_setmethods__["pollIntervalMax"] = _vmkctl.iSnsParms_pollIntervalMax_set
    __swig_getmethods__["pollIntervalMax"] = _vmkctl.iSnsParms_pollIntervalMax_get
    if _newclass:pollIntervalMax = _swig_property(_vmkctl.iSnsParms_pollIntervalMax_get, _vmkctl.iSnsParms_pollIntervalMax_set)
    __swig_setmethods__["pollIntervalSettable"] = _vmkctl.iSnsParms_pollIntervalSettable_set
    __swig_getmethods__["pollIntervalSettable"] = _vmkctl.iSnsParms_pollIntervalSettable_get
    if _newclass:pollIntervalSettable = _swig_property(_vmkctl.iSnsParms_pollIntervalSettable_get, _vmkctl.iSnsParms_pollIntervalSettable_set)
    __swig_setmethods__["pollIntervalValid"] = _vmkctl.iSnsParms_pollIntervalValid_set
    __swig_getmethods__["pollIntervalValid"] = _vmkctl.iSnsParms_pollIntervalValid_get
    if _newclass:pollIntervalValid = _swig_property(_vmkctl.iSnsParms_pollIntervalValid_get, _vmkctl.iSnsParms_pollIntervalValid_set)
    __swig_setmethods__["parent"] = _vmkctl.iSnsParms_parent_set
    __swig_getmethods__["parent"] = _vmkctl.iSnsParms_parent_get
    if _newclass:parent = _swig_property(_vmkctl.iSnsParms_parent_get, _vmkctl.iSnsParms_parent_set)
    __swig_setmethods__["inheritance"] = _vmkctl.iSnsParms_inheritance_set
    __swig_getmethods__["inheritance"] = _vmkctl.iSnsParms_inheritance_get
    if _newclass:inheritance = _swig_property(_vmkctl.iSnsParms_inheritance_get, _vmkctl.iSnsParms_inheritance_set)
    def __eq__(self, *args) -> "bool" : return _vmkctl.iSnsParms___eq__(self, *args)
    def __init__(self): 
        this = _vmkctl.new_iSnsParms()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iSnsParms
    __del__ = lambda self : None;
iSnsParms_swigregister = _vmkctl.iSnsParms_swigregister
iSnsParms_swigregister(iSnsParms)

class iScsiAdapterStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiAdapterStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiAdapterStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["session_cnt"] = _vmkctl.iScsiAdapterStats_session_cnt_set
    __swig_getmethods__["session_cnt"] = _vmkctl.iScsiAdapterStats_session_cnt_get
    if _newclass:session_cnt = _swig_property(_vmkctl.iScsiAdapterStats_session_cnt_get, _vmkctl.iScsiAdapterStats_session_cnt_set)
    __swig_setmethods__["connection_cnt"] = _vmkctl.iScsiAdapterStats_connection_cnt_set
    __swig_getmethods__["connection_cnt"] = _vmkctl.iScsiAdapterStats_connection_cnt_get
    if _newclass:connection_cnt = _swig_property(_vmkctl.iScsiAdapterStats_connection_cnt_get, _vmkctl.iScsiAdapterStats_connection_cnt_set)
    __swig_setmethods__["statsEnabled"] = _vmkctl.iScsiAdapterStats_statsEnabled_set
    __swig_getmethods__["statsEnabled"] = _vmkctl.iScsiAdapterStats_statsEnabled_get
    if _newclass:statsEnabled = _swig_property(_vmkctl.iScsiAdapterStats_statsEnabled_get, _vmkctl.iScsiAdapterStats_statsEnabled_set)
    __swig_setmethods__["txData"] = _vmkctl.iScsiAdapterStats_txData_set
    __swig_getmethods__["txData"] = _vmkctl.iScsiAdapterStats_txData_get
    if _newclass:txData = _swig_property(_vmkctl.iScsiAdapterStats_txData_get, _vmkctl.iScsiAdapterStats_txData_set)
    __swig_setmethods__["rxData"] = _vmkctl.iScsiAdapterStats_rxData_set
    __swig_getmethods__["rxData"] = _vmkctl.iScsiAdapterStats_rxData_get
    if _newclass:rxData = _swig_property(_vmkctl.iScsiAdapterStats_rxData_get, _vmkctl.iScsiAdapterStats_rxData_set)
    __swig_setmethods__["cmdPdus"] = _vmkctl.iScsiAdapterStats_cmdPdus_set
    __swig_getmethods__["cmdPdus"] = _vmkctl.iScsiAdapterStats_cmdPdus_get
    if _newclass:cmdPdus = _swig_property(_vmkctl.iScsiAdapterStats_cmdPdus_get, _vmkctl.iScsiAdapterStats_cmdPdus_set)
    __swig_setmethods__["rdCmdPdus"] = _vmkctl.iScsiAdapterStats_rdCmdPdus_set
    __swig_getmethods__["rdCmdPdus"] = _vmkctl.iScsiAdapterStats_rdCmdPdus_get
    if _newclass:rdCmdPdus = _swig_property(_vmkctl.iScsiAdapterStats_rdCmdPdus_get, _vmkctl.iScsiAdapterStats_rdCmdPdus_set)
    __swig_setmethods__["wrCmdPdus"] = _vmkctl.iScsiAdapterStats_wrCmdPdus_set
    __swig_getmethods__["wrCmdPdus"] = _vmkctl.iScsiAdapterStats_wrCmdPdus_get
    if _newclass:wrCmdPdus = _swig_property(_vmkctl.iScsiAdapterStats_wrCmdPdus_get, _vmkctl.iScsiAdapterStats_wrCmdPdus_set)
    __swig_setmethods__["rwCmdPdus"] = _vmkctl.iScsiAdapterStats_rwCmdPdus_set
    __swig_getmethods__["rwCmdPdus"] = _vmkctl.iScsiAdapterStats_rwCmdPdus_get
    if _newclass:rwCmdPdus = _swig_property(_vmkctl.iScsiAdapterStats_rwCmdPdus_get, _vmkctl.iScsiAdapterStats_rwCmdPdus_set)
    __swig_setmethods__["ndCmdPdus"] = _vmkctl.iScsiAdapterStats_ndCmdPdus_set
    __swig_getmethods__["ndCmdPdus"] = _vmkctl.iScsiAdapterStats_ndCmdPdus_get
    if _newclass:ndCmdPdus = _swig_property(_vmkctl.iScsiAdapterStats_ndCmdPdus_get, _vmkctl.iScsiAdapterStats_ndCmdPdus_set)
    __swig_setmethods__["rspPdus"] = _vmkctl.iScsiAdapterStats_rspPdus_set
    __swig_getmethods__["rspPdus"] = _vmkctl.iScsiAdapterStats_rspPdus_get
    if _newclass:rspPdus = _swig_property(_vmkctl.iScsiAdapterStats_rspPdus_get, _vmkctl.iScsiAdapterStats_rspPdus_set)
    __swig_setmethods__["r2tPdus"] = _vmkctl.iScsiAdapterStats_r2tPdus_set
    __swig_getmethods__["r2tPdus"] = _vmkctl.iScsiAdapterStats_r2tPdus_get
    if _newclass:r2tPdus = _swig_property(_vmkctl.iScsiAdapterStats_r2tPdus_get, _vmkctl.iScsiAdapterStats_r2tPdus_set)
    __swig_setmethods__["dataInPdus"] = _vmkctl.iScsiAdapterStats_dataInPdus_set
    __swig_getmethods__["dataInPdus"] = _vmkctl.iScsiAdapterStats_dataInPdus_get
    if _newclass:dataInPdus = _swig_property(_vmkctl.iScsiAdapterStats_dataInPdus_get, _vmkctl.iScsiAdapterStats_dataInPdus_set)
    __swig_setmethods__["dataOutPdus"] = _vmkctl.iScsiAdapterStats_dataOutPdus_set
    __swig_getmethods__["dataOutPdus"] = _vmkctl.iScsiAdapterStats_dataOutPdus_get
    if _newclass:dataOutPdus = _swig_property(_vmkctl.iScsiAdapterStats_dataOutPdus_get, _vmkctl.iScsiAdapterStats_dataOutPdus_set)
    __swig_setmethods__["tmfReqPdus"] = _vmkctl.iScsiAdapterStats_tmfReqPdus_set
    __swig_getmethods__["tmfReqPdus"] = _vmkctl.iScsiAdapterStats_tmfReqPdus_get
    if _newclass:tmfReqPdus = _swig_property(_vmkctl.iScsiAdapterStats_tmfReqPdus_get, _vmkctl.iScsiAdapterStats_tmfReqPdus_set)
    __swig_setmethods__["tmfRspPdus"] = _vmkctl.iScsiAdapterStats_tmfRspPdus_set
    __swig_getmethods__["tmfRspPdus"] = _vmkctl.iScsiAdapterStats_tmfRspPdus_get
    if _newclass:tmfRspPdus = _swig_property(_vmkctl.iScsiAdapterStats_tmfRspPdus_get, _vmkctl.iScsiAdapterStats_tmfRspPdus_set)
    __swig_setmethods__["loginReqPdus"] = _vmkctl.iScsiAdapterStats_loginReqPdus_set
    __swig_getmethods__["loginReqPdus"] = _vmkctl.iScsiAdapterStats_loginReqPdus_get
    if _newclass:loginReqPdus = _swig_property(_vmkctl.iScsiAdapterStats_loginReqPdus_get, _vmkctl.iScsiAdapterStats_loginReqPdus_set)
    __swig_setmethods__["loginRspPdus"] = _vmkctl.iScsiAdapterStats_loginRspPdus_set
    __swig_getmethods__["loginRspPdus"] = _vmkctl.iScsiAdapterStats_loginRspPdus_get
    if _newclass:loginRspPdus = _swig_property(_vmkctl.iScsiAdapterStats_loginRspPdus_get, _vmkctl.iScsiAdapterStats_loginRspPdus_set)
    __swig_setmethods__["textReqPdus"] = _vmkctl.iScsiAdapterStats_textReqPdus_set
    __swig_getmethods__["textReqPdus"] = _vmkctl.iScsiAdapterStats_textReqPdus_get
    if _newclass:textReqPdus = _swig_property(_vmkctl.iScsiAdapterStats_textReqPdus_get, _vmkctl.iScsiAdapterStats_textReqPdus_set)
    __swig_setmethods__["textRspPdus"] = _vmkctl.iScsiAdapterStats_textRspPdus_set
    __swig_getmethods__["textRspPdus"] = _vmkctl.iScsiAdapterStats_textRspPdus_get
    if _newclass:textRspPdus = _swig_property(_vmkctl.iScsiAdapterStats_textRspPdus_get, _vmkctl.iScsiAdapterStats_textRspPdus_set)
    __swig_setmethods__["logoutReqPdus"] = _vmkctl.iScsiAdapterStats_logoutReqPdus_set
    __swig_getmethods__["logoutReqPdus"] = _vmkctl.iScsiAdapterStats_logoutReqPdus_get
    if _newclass:logoutReqPdus = _swig_property(_vmkctl.iScsiAdapterStats_logoutReqPdus_get, _vmkctl.iScsiAdapterStats_logoutReqPdus_set)
    __swig_setmethods__["logoutRspPdus"] = _vmkctl.iScsiAdapterStats_logoutRspPdus_set
    __swig_getmethods__["logoutRspPdus"] = _vmkctl.iScsiAdapterStats_logoutRspPdus_get
    if _newclass:logoutRspPdus = _swig_property(_vmkctl.iScsiAdapterStats_logoutRspPdus_get, _vmkctl.iScsiAdapterStats_logoutRspPdus_set)
    __swig_setmethods__["nopOutPdus"] = _vmkctl.iScsiAdapterStats_nopOutPdus_set
    __swig_getmethods__["nopOutPdus"] = _vmkctl.iScsiAdapterStats_nopOutPdus_get
    if _newclass:nopOutPdus = _swig_property(_vmkctl.iScsiAdapterStats_nopOutPdus_get, _vmkctl.iScsiAdapterStats_nopOutPdus_set)
    __swig_setmethods__["nopInPdus"] = _vmkctl.iScsiAdapterStats_nopInPdus_set
    __swig_getmethods__["nopInPdus"] = _vmkctl.iScsiAdapterStats_nopInPdus_get
    if _newclass:nopInPdus = _swig_property(_vmkctl.iScsiAdapterStats_nopInPdus_get, _vmkctl.iScsiAdapterStats_nopInPdus_set)
    __swig_setmethods__["asyncEventPdus"] = _vmkctl.iScsiAdapterStats_asyncEventPdus_set
    __swig_getmethods__["asyncEventPdus"] = _vmkctl.iScsiAdapterStats_asyncEventPdus_get
    if _newclass:asyncEventPdus = _swig_property(_vmkctl.iScsiAdapterStats_asyncEventPdus_get, _vmkctl.iScsiAdapterStats_asyncEventPdus_set)
    __swig_setmethods__["snackPdus"] = _vmkctl.iScsiAdapterStats_snackPdus_set
    __swig_getmethods__["snackPdus"] = _vmkctl.iScsiAdapterStats_snackPdus_get
    if _newclass:snackPdus = _swig_property(_vmkctl.iScsiAdapterStats_snackPdus_get, _vmkctl.iScsiAdapterStats_snackPdus_set)
    __swig_setmethods__["rejectPdus"] = _vmkctl.iScsiAdapterStats_rejectPdus_set
    __swig_getmethods__["rejectPdus"] = _vmkctl.iScsiAdapterStats_rejectPdus_get
    if _newclass:rejectPdus = _swig_property(_vmkctl.iScsiAdapterStats_rejectPdus_get, _vmkctl.iScsiAdapterStats_rejectPdus_set)
    __swig_setmethods__["digestErrors"] = _vmkctl.iScsiAdapterStats_digestErrors_set
    __swig_getmethods__["digestErrors"] = _vmkctl.iScsiAdapterStats_digestErrors_get
    if _newclass:digestErrors = _swig_property(_vmkctl.iScsiAdapterStats_digestErrors_get, _vmkctl.iScsiAdapterStats_digestErrors_set)
    __swig_setmethods__["timeoutErrors"] = _vmkctl.iScsiAdapterStats_timeoutErrors_set
    __swig_getmethods__["timeoutErrors"] = _vmkctl.iScsiAdapterStats_timeoutErrors_get
    if _newclass:timeoutErrors = _swig_property(_vmkctl.iScsiAdapterStats_timeoutErrors_get, _vmkctl.iScsiAdapterStats_timeoutErrors_set)
    __swig_setmethods__["txWouldBlock"] = _vmkctl.iScsiAdapterStats_txWouldBlock_set
    __swig_getmethods__["txWouldBlock"] = _vmkctl.iScsiAdapterStats_txWouldBlock_get
    if _newclass:txWouldBlock = _swig_property(_vmkctl.iScsiAdapterStats_txWouldBlock_get, _vmkctl.iScsiAdapterStats_txWouldBlock_set)
    __swig_setmethods__["rxWouldBlock"] = _vmkctl.iScsiAdapterStats_rxWouldBlock_set
    __swig_getmethods__["rxWouldBlock"] = _vmkctl.iScsiAdapterStats_rxWouldBlock_get
    if _newclass:rxWouldBlock = _swig_property(_vmkctl.iScsiAdapterStats_rxWouldBlock_get, _vmkctl.iScsiAdapterStats_rxWouldBlock_set)
    def __init__(self): 
        this = _vmkctl.new_iScsiAdapterStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiAdapterStats
    __del__ = lambda self : None;
iScsiAdapterStats_swigregister = _vmkctl.iScsiAdapterStats_swigregister
iScsiAdapterStats_swigregister(iScsiAdapterStats)

class iSnsConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iSnsConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iSnsConfig, name)
    __repr__ = _swig_repr
    DISCOVERY_STATIC = _vmkctl.iSnsConfig_DISCOVERY_STATIC
    DISCOVERY_DHCP = _vmkctl.iSnsConfig_DISCOVERY_DHCP
    DISCOVERY_SLP = _vmkctl.iSnsConfig_DISCOVERY_SLP
    def __init__(self, *args): 
        this = _vmkctl.new_iSnsConfig(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetDiscoveryMethod(self) -> "HostCtl::Storage::iSnsConfig::DiscoveryMethod" : return _vmkctl.iSnsConfig_GetDiscoveryMethod(self)
    def SetDiscoveryMethod(self, *args) -> "void" : return _vmkctl.iSnsConfig_SetDiscoveryMethod(self, *args)
    def GetHostAddress(self) -> "HostCtl::Network::HostAddress" : return _vmkctl.iSnsConfig_GetHostAddress(self)
    def SetHostAddress(self, *args) -> "void" : return _vmkctl.iSnsConfig_SetHostAddress(self, *args)
    __swig_destroy__ = _vmkctl.delete_iSnsConfig
    __del__ = lambda self : None;
iSnsConfig_swigregister = _vmkctl.iSnsConfig_swigregister
iSnsConfig_swigregister(iSnsConfig)

class ScsiPath(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScsiPath, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScsiPath, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    PATH_STATE_ACTIVE = _vmkctl.ScsiPath_PATH_STATE_ACTIVE
    PATH_STATE_OFF = _vmkctl.ScsiPath_PATH_STATE_OFF
    PATH_STATE_DEAD = _vmkctl.ScsiPath_PATH_STATE_DEAD
    PATH_STATE_STANDBY = _vmkctl.ScsiPath_PATH_STATE_STANDBY
    PATH_STATE_DEVICE_CHANGED = _vmkctl.ScsiPath_PATH_STATE_DEVICE_CHANGED
    PATH_STATE_UNKNOWN = _vmkctl.ScsiPath_PATH_STATE_UNKNOWN
    def GetIdentifier(self) -> "std::string" : return _vmkctl.ScsiPath_GetIdentifier(self)
    def GetRuntimeName(self) -> "std::string" : return _vmkctl.ScsiPath_GetRuntimeName(self)
    def GetAdapterIdentifier(self) -> "std::string" : return _vmkctl.ScsiPath_GetAdapterIdentifier(self)
    def GetTargetIdentifier(self) -> "std::string" : return _vmkctl.ScsiPath_GetTargetIdentifier(self)
    def IsUniqueIdentifier(self) -> "bool" : return _vmkctl.ScsiPath_IsUniqueIdentifier(self)
    def IsPersistableIdentifier(self) -> "bool" : return _vmkctl.ScsiPath_IsPersistableIdentifier(self)
    def GetDeviceIdentifier(self) -> "std::string" : return _vmkctl.ScsiPath_GetDeviceIdentifier(self)
    def GetDevice(self) -> "HostCtl::Storage::LunPtr" : return _vmkctl.ScsiPath_GetDevice(self)
    def GetAdapterName(self) -> "std::string" : return _vmkctl.ScsiPath_GetAdapterName(self)
    def GetAdapter(self) -> "HostCtl::Storage::ScsiInterfacePtr" : return _vmkctl.ScsiPath_GetAdapter(self)
    def GetMultipathPluginIdentifier(self) -> "std::string" : return _vmkctl.ScsiPath_GetMultipathPluginIdentifier(self)
    def GetMultipathPlugin(self) -> "HostCtl::Storage::PsaMultipathPluginPtr" : return _vmkctl.ScsiPath_GetMultipathPlugin(self)
    def Claim(self) -> "void" : return _vmkctl.ScsiPath_Claim(self)
    def Unclaim(self) -> "void" : return _vmkctl.ScsiPath_Unclaim(self)
    def GetChannelNumber(self) -> "uint32" : return _vmkctl.ScsiPath_GetChannelNumber(self)
    def GetTargetNumber(self) -> "uint32" : return _vmkctl.ScsiPath_GetTargetNumber(self)
    def GetLun(self) -> "uint32" : return _vmkctl.ScsiPath_GetLun(self)
    def GetState(self) -> "HostCtl::Storage::ScsiPath::PathState" : return _vmkctl.ScsiPath_GetState(self)
    def GetStateString(self) -> "std::string" : return _vmkctl.ScsiPath_GetStateString(self)
    def SetState(self, *args) -> "void" : return _vmkctl.ScsiPath_SetState(self, *args)
    def GetScsiPathConfig(self) -> "HostCtl::Storage::PsaScsiPathConfigPtr" : return _vmkctl.ScsiPath_GetScsiPathConfig(self)
    def GetTransportMapping(self) -> "HostCtl::Storage::TransportMappingPtr" : return _vmkctl.ScsiPath_GetTransportMapping(self)
    def GetScsiStats(self, *args) -> "void" : return _vmkctl.ScsiPath_GetScsiStats(self, *args)
    def GetMaxIOSize(self) -> "uint64" : return _vmkctl.ScsiPath_GetMaxIOSize(self)
    __swig_destroy__ = _vmkctl.delete_ScsiPath
    __del__ = lambda self : None;
ScsiPath_swigregister = _vmkctl.ScsiPath_swigregister
ScsiPath_swigregister(ScsiPath)

class ScsiPathImpl(ScsiPath,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [ScsiPath,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScsiPathImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [ScsiPath,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ScsiPathImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_ScsiPathImpl
    __del__ = lambda self : None;
    def GetIdentifier(self) -> "std::string" : return _vmkctl.ScsiPathImpl_GetIdentifier(self)
    def GetRuntimeName(self) -> "std::string" : return _vmkctl.ScsiPathImpl_GetRuntimeName(self)
    def GetAdapterIdentifier(self) -> "std::string" : return _vmkctl.ScsiPathImpl_GetAdapterIdentifier(self)
    def GetTargetIdentifier(self) -> "std::string" : return _vmkctl.ScsiPathImpl_GetTargetIdentifier(self)
    def IsUniqueIdentifier(self) -> "bool" : return _vmkctl.ScsiPathImpl_IsUniqueIdentifier(self)
    def IsPersistableIdentifier(self) -> "bool" : return _vmkctl.ScsiPathImpl_IsPersistableIdentifier(self)
    def GetDeviceIdentifier(self) -> "std::string" : return _vmkctl.ScsiPathImpl_GetDeviceIdentifier(self)
    def GetDevice(self) -> "HostCtl::Storage::LunPtr" : return _vmkctl.ScsiPathImpl_GetDevice(self)
    def GetDeviceUid(self) -> "std::string" : return _vmkctl.ScsiPathImpl_GetDeviceUid(self)
    def GetAdapterName(self) -> "std::string" : return _vmkctl.ScsiPathImpl_GetAdapterName(self)
    def GetAdapter(self) -> "HostCtl::Storage::ScsiInterfacePtr" : return _vmkctl.ScsiPathImpl_GetAdapter(self)
    def GetMultipathPluginIdentifier(self) -> "std::string" : return _vmkctl.ScsiPathImpl_GetMultipathPluginIdentifier(self)
    def GetMultipathPlugin(self) -> "HostCtl::Storage::PsaMultipathPluginPtr" : return _vmkctl.ScsiPathImpl_GetMultipathPlugin(self)
    def Claim(self) -> "void" : return _vmkctl.ScsiPathImpl_Claim(self)
    def Unclaim(self) -> "void" : return _vmkctl.ScsiPathImpl_Unclaim(self)
    def GetChannelNumber(self) -> "uint32" : return _vmkctl.ScsiPathImpl_GetChannelNumber(self)
    def GetTargetNumber(self) -> "uint32" : return _vmkctl.ScsiPathImpl_GetTargetNumber(self)
    def GetLun(self) -> "uint32" : return _vmkctl.ScsiPathImpl_GetLun(self)
    def GetState(self) -> "HostCtl::Storage::ScsiPath::PathState" : return _vmkctl.ScsiPathImpl_GetState(self)
    def GetStateString(self) -> "std::string" : return _vmkctl.ScsiPathImpl_GetStateString(self)
    def SetState(self, *args) -> "void" : return _vmkctl.ScsiPathImpl_SetState(self, *args)
    def GetScsiPathConfig(self) -> "HostCtl::Storage::PsaScsiPathConfigPtr" : return _vmkctl.ScsiPathImpl_GetScsiPathConfig(self)
    def GetTransportMapping(self) -> "HostCtl::Storage::TransportMappingPtr" : return _vmkctl.ScsiPathImpl_GetTransportMapping(self)
    def GetMaxIOSize(self) -> "uint64" : return _vmkctl.ScsiPathImpl_GetMaxIOSize(self)
    __swig_getmethods__["GetPath"] = lambda x: _vmkctl.ScsiPathImpl_GetPath
    if _newclass:GetPath = staticmethod(_vmkctl.ScsiPathImpl_GetPath)
    def GetScsiStats(self, *args) -> "void" : return _vmkctl.ScsiPathImpl_GetScsiStats(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.ScsiPathImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.ScsiPathImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.ScsiPathImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.ScsiPathImpl_Print(self, *args)
ScsiPathImpl_swigregister = _vmkctl.ScsiPathImpl_swigregister
ScsiPathImpl_swigregister(ScsiPathImpl)

def ScsiPathImpl_GetPath(*args) -> "HostCtl::Storage::ScsiPathPtr" :
  return _vmkctl.ScsiPathImpl_GetPath(*args)
ScsiPathImpl_GetPath = _vmkctl.ScsiPathImpl_GetPath

LUN_INQ_SRC_STD = _vmkctl.LUN_INQ_SRC_STD
LUN_INQ_SRC_VPD = _vmkctl.LUN_INQ_SRC_VPD
class DurableName(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DurableName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DurableName, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DurableName(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSource(self) -> "HostCtl::Storage::LunInquirySource" : return _vmkctl.DurableName_GetSource(self)
    def GetStringData(self) -> "std::string" : return _vmkctl.DurableName_GetStringData(self)
    def GetPrintableStringData(self) -> "std::string" : return _vmkctl.DurableName_GetPrintableStringData(self)
    __swig_destroy__ = _vmkctl.delete_DurableName
    __del__ = lambda self : None;
DurableName_swigregister = _vmkctl.DurableName_swigregister
DurableName_swigregister(DurableName)

class DeviceUid(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceUid, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceUid, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    CONFIDENCE_NO = _vmkctl.DeviceUid_CONFIDENCE_NO
    CONFIDENCE_YES = _vmkctl.DeviceUid_CONFIDENCE_YES
    CONFIDENCE_MAYBE = _vmkctl.DeviceUid_CONFIDENCE_MAYBE
    CONFIDENCE_UNKNOWN = _vmkctl.DeviceUid_CONFIDENCE_UNKNOWN
    def GetUid(self) -> "std::string" : return _vmkctl.DeviceUid_GetUid(self)
    def IsGloballyUnique(self) -> "bool" : return _vmkctl.DeviceUid_IsGloballyUnique(self)
    def IsPersistable(self) -> "bool" : return _vmkctl.DeviceUid_IsPersistable(self)
    def IsCorrelatable(self) -> "HostCtl::Storage::DeviceUid::DeviceUidConfidence" : return _vmkctl.DeviceUid_IsCorrelatable(self)
    __swig_destroy__ = _vmkctl.delete_DeviceUid
    __del__ = lambda self : None;
DeviceUid_swigregister = _vmkctl.DeviceUid_swigregister
DeviceUid_swigregister(DeviceUid)

class DeviceUidImpl(DeviceUid,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [DeviceUid,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DeviceUidImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DeviceUid,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DeviceUidImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DeviceUidImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DeviceUidImpl
    __del__ = lambda self : None;
    def GetUid(self) -> "std::string" : return _vmkctl.DeviceUidImpl_GetUid(self)
    def IsGloballyUnique(self) -> "bool" : return _vmkctl.DeviceUidImpl_IsGloballyUnique(self)
    def IsPersistable(self) -> "bool" : return _vmkctl.DeviceUidImpl_IsPersistable(self)
    def IsCorrelatable(self) -> "HostCtl::Storage::DeviceUid::DeviceUidConfidence" : return _vmkctl.DeviceUidImpl_IsCorrelatable(self)
    def IsCorrelatableString(self) -> "std::string" : return _vmkctl.DeviceUidImpl_IsCorrelatableString(self)
    def Refresh(self) -> "void" : return _vmkctl.DeviceUidImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.DeviceUidImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.DeviceUidImpl_Print(self, *args)
DeviceUidImpl_swigregister = _vmkctl.DeviceUidImpl_swigregister
DeviceUidImpl_swigregister(DeviceUidImpl)

PART_TYPE_UNKNOWN = _vmkctl.PART_TYPE_UNKNOWN
PART_TYPE_MBR = _vmkctl.PART_TYPE_MBR
PART_TYPE_GPT = _vmkctl.PART_TYPE_GPT
class LunHandle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LunHandle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LunHandle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_LunHandle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_LunHandle
    __del__ = lambda self : None;
    def GetWorldID(self) -> "uint32" : return _vmkctl.LunHandle_GetWorldID(self)
    def GetPartition(self) -> "uint32" : return _vmkctl.LunHandle_GetPartition(self)
LunHandle_swigregister = _vmkctl.LunHandle_swigregister
LunHandle_swigregister(LunHandle)

SMART_STAT_HEALTH_STATUS = _vmkctl.SMART_STAT_HEALTH_STATUS
SMART_STAT_MEDIA_WEAROUT_INDICATOR = _vmkctl.SMART_STAT_MEDIA_WEAROUT_INDICATOR
SMART_STAT_WRITE_ERROR_COUNT = _vmkctl.SMART_STAT_WRITE_ERROR_COUNT
SMART_STAT_READ_ERROR_COUNT = _vmkctl.SMART_STAT_READ_ERROR_COUNT
SMART_STAT_POWER_ON_HOURS = _vmkctl.SMART_STAT_POWER_ON_HOURS
SMART_STAT_POWER_CYCLE_COUNT = _vmkctl.SMART_STAT_POWER_CYCLE_COUNT
SMART_STAT_REALLOCATED_SECTOR_CT = _vmkctl.SMART_STAT_REALLOCATED_SECTOR_CT
SMART_STAT_RAW_READ_ERROR_RATE = _vmkctl.SMART_STAT_RAW_READ_ERROR_RATE
SMART_STAT_DRIVE_TEMPERATURE = _vmkctl.SMART_STAT_DRIVE_TEMPERATURE
SMART_STAT_DRIVE_RATED_MAX_TEMPERATURE = _vmkctl.SMART_STAT_DRIVE_RATED_MAX_TEMPERATURE
SMART_STAT_WRITE_SECTORS_TOT_CT = _vmkctl.SMART_STAT_WRITE_SECTORS_TOT_CT
SMART_STAT_READ_SECTORS_TOT_CT = _vmkctl.SMART_STAT_READ_SECTORS_TOT_CT
SMART_STAT_INITIAL_BAD_BLOCK_COUNT = _vmkctl.SMART_STAT_INITIAL_BAD_BLOCK_COUNT
SMART_STAT_MAX_PARAM = _vmkctl.SMART_STAT_MAX_PARAM
class Valid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Valid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Valid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _vmkctl.Valid_value_set
    __swig_getmethods__["value"] = _vmkctl.Valid_value_get
    if _newclass:value = _swig_property(_vmkctl.Valid_value_get, _vmkctl.Valid_value_set)
    __swig_setmethods__["worst"] = _vmkctl.Valid_worst_set
    __swig_getmethods__["worst"] = _vmkctl.Valid_worst_get
    if _newclass:worst = _swig_property(_vmkctl.Valid_worst_get, _vmkctl.Valid_worst_set)
    __swig_setmethods__["threshold"] = _vmkctl.Valid_threshold_set
    __swig_getmethods__["threshold"] = _vmkctl.Valid_threshold_get
    if _newclass:threshold = _swig_property(_vmkctl.Valid_threshold_get, _vmkctl.Valid_threshold_set)
    def __init__(self): 
        this = _vmkctl.new_Valid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_Valid
    __del__ = lambda self : None;
Valid_swigregister = _vmkctl.Valid_swigregister
Valid_swigregister(Valid)

class SmartStat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmartStat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SmartStat, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _vmkctl.SmartStat_value_set
    __swig_getmethods__["value"] = _vmkctl.SmartStat_value_get
    if _newclass:value = _swig_property(_vmkctl.SmartStat_value_get, _vmkctl.SmartStat_value_set)
    __swig_setmethods__["worst"] = _vmkctl.SmartStat_worst_set
    __swig_getmethods__["worst"] = _vmkctl.SmartStat_worst_get
    if _newclass:worst = _swig_property(_vmkctl.SmartStat_worst_get, _vmkctl.SmartStat_worst_set)
    __swig_setmethods__["threshold"] = _vmkctl.SmartStat_threshold_set
    __swig_getmethods__["threshold"] = _vmkctl.SmartStat_threshold_get
    if _newclass:threshold = _swig_property(_vmkctl.SmartStat_threshold_get, _vmkctl.SmartStat_threshold_set)
    __swig_setmethods__["valid"] = _vmkctl.SmartStat_valid_set
    __swig_getmethods__["valid"] = _vmkctl.SmartStat_valid_get
    if _newclass:valid = _swig_property(_vmkctl.SmartStat_valid_get, _vmkctl.SmartStat_valid_set)
    def __init__(self): 
        this = _vmkctl.new_SmartStat()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_SmartStat
    __del__ = lambda self : None;
SmartStat_swigregister = _vmkctl.SmartStat_swigregister
SmartStat_swigregister(SmartStat)

class SmartStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SmartStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SmartStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["params"] = _vmkctl.SmartStats_params_set
    __swig_getmethods__["params"] = _vmkctl.SmartStats_params_get
    if _newclass:params = _swig_property(_vmkctl.SmartStats_params_get, _vmkctl.SmartStats_params_set)
    def __init__(self): 
        this = _vmkctl.new_SmartStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_SmartStats
    __del__ = lambda self : None;
SmartStats_swigregister = _vmkctl.SmartStats_swigregister
SmartStats_swigregister(SmartStats)

class Lun(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Lun, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Lun, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    LUN_TYPE_DISK = _vmkctl.Lun_LUN_TYPE_DISK
    LUN_TYPE_TAPE = _vmkctl.Lun_LUN_TYPE_TAPE
    LUN_TYPE_PRINTER = _vmkctl.Lun_LUN_TYPE_PRINTER
    LUN_TYPE_PROCESSOR = _vmkctl.Lun_LUN_TYPE_PROCESSOR
    LUN_TYPE_WORM = _vmkctl.Lun_LUN_TYPE_WORM
    LUN_TYPE_CDROM = _vmkctl.Lun_LUN_TYPE_CDROM
    LUN_TYPE_SCANNER = _vmkctl.Lun_LUN_TYPE_SCANNER
    LUN_TYPE_OPTICAL = _vmkctl.Lun_LUN_TYPE_OPTICAL
    LUN_TYPE_MEDIA = _vmkctl.Lun_LUN_TYPE_MEDIA
    LUN_TYPE_COM = _vmkctl.Lun_LUN_TYPE_COM
    LUN_TYPE_IDE_CDROM = _vmkctl.Lun_LUN_TYPE_IDE_CDROM
    LUN_TYPE_IDE_OTHER = _vmkctl.Lun_LUN_TYPE_IDE_OTHER
    LUN_TYPE_RAID = _vmkctl.Lun_LUN_TYPE_RAID
    LUN_TYPE_ENCLOSURE = _vmkctl.Lun_LUN_TYPE_ENCLOSURE
    LUN_TYPE_SIMPLE_DISK = _vmkctl.Lun_LUN_TYPE_SIMPLE_DISK
    LUN_TYPE_RESERVED_1 = _vmkctl.Lun_LUN_TYPE_RESERVED_1
    LUN_TYPE_RESERVED_2 = _vmkctl.Lun_LUN_TYPE_RESERVED_2
    LUN_TYPE_RESERVED_3 = _vmkctl.Lun_LUN_TYPE_RESERVED_3
    LUN_TYPE_RESERVED_4 = _vmkctl.Lun_LUN_TYPE_RESERVED_4
    LUN_TYPE_RESERVED_5 = _vmkctl.Lun_LUN_TYPE_RESERVED_5
    LUN_TYPE_RESERVED_6 = _vmkctl.Lun_LUN_TYPE_RESERVED_6
    LUN_TYPE_RESERVED_7 = _vmkctl.Lun_LUN_TYPE_RESERVED_7
    LUN_TYPE_RESERVED_8 = _vmkctl.Lun_LUN_TYPE_RESERVED_8
    LUN_TYPE_RESERVED_9 = _vmkctl.Lun_LUN_TYPE_RESERVED_9
    LUN_TYPE_RESERVED_10 = _vmkctl.Lun_LUN_TYPE_RESERVED_10
    LUN_TYPE_RESERVED_11 = _vmkctl.Lun_LUN_TYPE_RESERVED_11
    LUN_TYPE_RESERVED_12 = _vmkctl.Lun_LUN_TYPE_RESERVED_12
    LUN_TYPE_RESERVED_13 = _vmkctl.Lun_LUN_TYPE_RESERVED_13
    LUN_TYPE_RESERVED_14 = _vmkctl.Lun_LUN_TYPE_RESERVED_14
    LUN_TYPE_RESERVED_15 = _vmkctl.Lun_LUN_TYPE_RESERVED_15
    LUN_TYPE_RESERVED_16 = _vmkctl.Lun_LUN_TYPE_RESERVED_16
    LUN_TYPE_UNKNOWN = _vmkctl.Lun_LUN_TYPE_UNKNOWN
    LUN_UID_TYPE_ERROR = _vmkctl.Lun_LUN_UID_TYPE_ERROR
    LUN_UID_TYPE_UNIQUE = _vmkctl.Lun_LUN_UID_TYPE_UNIQUE
    LUN_UID_TYPE_SERIALNUM = _vmkctl.Lun_LUN_UID_TYPE_SERIALNUM
    LUN_UID_TYPE_NAA = _vmkctl.Lun_LUN_UID_TYPE_NAA
    LUN_UID_TYPE_SYMM = _vmkctl.Lun_LUN_UID_TYPE_SYMM
    LUN_STATUS_ON = _vmkctl.Lun_LUN_STATUS_ON
    LUN_STATUS_OFF = _vmkctl.Lun_LUN_STATUS_OFF
    LUN_STATUS_DEAD = _vmkctl.Lun_LUN_STATUS_DEAD
    LUN_STATUS_QUIESCED = _vmkctl.Lun_LUN_STATUS_QUIESCED
    LUN_STATUS_DEGRADED = _vmkctl.Lun_LUN_STATUS_DEGRADED
    LUN_STATUS_NOT_CONNECTED = _vmkctl.Lun_LUN_STATUS_NOT_CONNECTED
    LUN_STATUS_DEAD_TIMEOUT = _vmkctl.Lun_LUN_STATUS_DEAD_TIMEOUT
    LUN_STATUS_UNKNOWN = _vmkctl.Lun_LUN_STATUS_UNKNOWN
    LUN_STATUS_ONLINE = _vmkctl.Lun_LUN_STATUS_ONLINE
    LUN_AVAIL_UNKNOWN = _vmkctl.Lun_LUN_AVAIL_UNKNOWN
    LUN_AVAIL_NONE = _vmkctl.Lun_LUN_AVAIL_NONE
    LUN_AVAIL_DEGRADED = _vmkctl.Lun_LUN_AVAIL_DEGRADED
    LUN_AVAIL_REDUNDANT = _vmkctl.Lun_LUN_AVAIL_REDUNDANT
    THINP_STATE_NO = _vmkctl.Lun_THINP_STATE_NO
    THINP_STATE_YES = _vmkctl.Lun_THINP_STATE_YES
    THINP_STATE_UNKNOWN = _vmkctl.Lun_THINP_STATE_UNKNOWN
    LUN_FORMAT_TYPE_UNKNOWN = _vmkctl.Lun_LUN_FORMAT_TYPE_UNKNOWN
    LUN_FORMAT_TYPE_512N = _vmkctl.Lun_LUN_FORMAT_TYPE_512N
    LUN_FORMAT_TYPE_512E = _vmkctl.Lun_LUN_FORMAT_TYPE_512E
    LUN_FORMAT_TYPE_4K = _vmkctl.Lun_LUN_FORMAT_TYPE_4K
    def GetIdentifier(self) -> "std::string" : return _vmkctl.Lun_GetIdentifier(self)
    def NameDevice(self) -> "void" : return _vmkctl.Lun_NameDevice(self)
    def GetDisplayName(self) -> "std::string" : return _vmkctl.Lun_GetDisplayName(self)
    def IsDisplayNameSettable(self) -> "bool" : return _vmkctl.Lun_IsDisplayNameSettable(self)
    def SetDisplayName(self, *args) -> "void" : return _vmkctl.Lun_SetDisplayName(self, *args)
    def HasDisplayName(self) -> "bool" : return _vmkctl.Lun_HasDisplayName(self)
    def HasUserConfiguredDisplayName(self) -> "bool" : return _vmkctl.Lun_HasUserConfiguredDisplayName(self)
    def GetUuid(self, *args) -> "void" : return _vmkctl.Lun_GetUuid(self, *args)
    def GetExternalId(self) -> "std::string" : return _vmkctl.Lun_GetExternalId(self)
    def GetMultipathPluginName(self) -> "std::string" : return _vmkctl.Lun_GetMultipathPluginName(self)
    def GetLunType(self) -> "HostCtl::Storage::Lun::LunType" : return _vmkctl.Lun_GetLunType(self)
    def GetLunTypeString(self) -> "std::string" : return _vmkctl.Lun_GetLunTypeString(self)
    def GetConsoleDevice(self) -> "std::string" : return _vmkctl.Lun_GetConsoleDevice(self)
    def GetDevfsPath(self) -> "std::string" : return _vmkctl.Lun_GetDevfsPath(self)
    def GetQueueDepth(self) -> "uint32" : return _vmkctl.Lun_GetQueueDepth(self)
    def GetVendor(self) -> "std::string" : return _vmkctl.Lun_GetVendor(self)
    def GetModel(self) -> "std::string" : return _vmkctl.Lun_GetModel(self)
    def GetRevision(self) -> "std::string" : return _vmkctl.Lun_GetRevision(self)
    def GetScsiLevel(self) -> "uint8" : return _vmkctl.Lun_GetScsiLevel(self)
    def IsPseudoLun(self) -> "bool" : return _vmkctl.Lun_IsPseudoLun(self)
    def Reserve(self) -> "void" : return _vmkctl.Lun_Reserve(self)
    def Release(self) -> "void" : return _vmkctl.Lun_Release(self)
    def Reset(self) -> "void" : return _vmkctl.Lun_Reset(self)
    def GetWorldLeaders(self) -> "std::vector< uint64,std::allocator< uint64 > >" : return _vmkctl.Lun_GetWorldLeaders(self)
    def GetHandles(self) -> "std::vector< HostCtl::Storage::LunHandle,std::allocator< HostCtl::Storage::LunHandle > >" : return _vmkctl.Lun_GetHandles(self)
    def GetStatus(self) -> "HostCtl::Storage::Lun::LunStatus" : return _vmkctl.Lun_GetStatus(self)
    def GetStatusString(self) -> "std::string" : return _vmkctl.Lun_GetStatusString(self)
    def SetStatus(self, *args) -> "void" : return _vmkctl.Lun_SetStatus(self, *args)
    def GetDeviceAvailable(self) -> "HostCtl::Storage::Lun::LunAvailable" : return _vmkctl.Lun_GetDeviceAvailable(self)
    def IsReserved(self) -> "bool" : return _vmkctl.Lun_IsReserved(self)
    def GetReservationsPending(self) -> "uint32" : return _vmkctl.Lun_GetReservationsPending(self)
    def IsRdmCapable(self) -> "bool" : return _vmkctl.Lun_IsRdmCapable(self)
    def IsLocal(self) -> "bool" : return _vmkctl.Lun_IsLocal(self)
    def IsRemovableDevice(self) -> "bool" : return _vmkctl.Lun_IsRemovableDevice(self)
    def IsSSD(self) -> "bool" : return _vmkctl.Lun_IsSSD(self)
    def IsPE(self) -> "bool" : return _vmkctl.Lun_IsPE(self)
    def GetLunLabel(self) -> "HostCtl::Storage::PartitionLabel" : return _vmkctl.Lun_GetLunLabel(self)
    def GetUids(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.Lun_GetUids(self)
    def GetPathNames(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.Lun_GetPathNames(self)
    def GetPaths(self) -> "std::vector< HostCtl::Storage::ScsiPathPtr,std::allocator< HostCtl::Storage::ScsiPathPtr > >" : return _vmkctl.Lun_GetPaths(self)
    def GetSize(self) -> "uint64" : return _vmkctl.Lun_GetSize(self)
    def GetNumBlocks(self) -> "uint64" : return _vmkctl.Lun_GetNumBlocks(self)
    def GetBlockSize(self) -> "uint64" : return _vmkctl.Lun_GetBlockSize(self)
    def GetPhysicalBlockSize(self) -> "uint64" : return _vmkctl.Lun_GetPhysicalBlockSize(self)
    def GetFormatType(self) -> "HostCtl::Storage::Lun::LunFormatType" : return _vmkctl.Lun_GetFormatType(self)
    def GetStorageStatistics(self) -> "StorageStatistics" : return _vmkctl.Lun_GetStorageStatistics(self)
    def GetScsiStats(self, *args) -> "void" : return _vmkctl.Lun_GetScsiStats(self, *args)
    def GetSmartStats(self) -> "HostCtl::Storage::SmartStats" : return _vmkctl.Lun_GetSmartStats(self)
    def GetDeviceInfo(self) -> "LsuDeviceInfoData" : return _vmkctl.Lun_GetDeviceInfo(self)
    def SetLedState(self, *args) -> "void" : return _vmkctl.Lun_SetLedState(self, *args)
    def TurnWCOn(self) -> "void" : return _vmkctl.Lun_TurnWCOn(self)
    def TurnWCOff(self) -> "void" : return _vmkctl.Lun_TurnWCOff(self)
    def GetDeviceLocation(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.Lun_GetDeviceLocation(self)
    def GetWorldStorageStatistics(self, *args) -> "StorageStatistics" : return _vmkctl.Lun_GetWorldStorageStatistics(self, *args)
    def GetWorldScsiStats(self, *args) -> "void" : return _vmkctl.Lun_GetWorldScsiStats(self, *args)
    def GetVAAIState(self) -> "VAAIState" : return _vmkctl.Lun_GetVAAIState(self)
    def GetVAAIAtsStatus(self) -> "VAAIState" : return _vmkctl.Lun_GetVAAIAtsStatus(self)
    def GetVAAICloneStatus(self) -> "VAAIState" : return _vmkctl.Lun_GetVAAICloneStatus(self)
    def GetVAAIZeroStatus(self) -> "VAAIState" : return _vmkctl.Lun_GetVAAIZeroStatus(self)
    def GetVAAIDeleteStatus(self) -> "VAAIState" : return _vmkctl.Lun_GetVAAIDeleteStatus(self)
    def GetThinProvState(self) -> "HostCtl::Storage::Lun::ThinProvisioningState" : return _vmkctl.Lun_GetThinProvState(self)
    def UnclaimAllPaths(self) -> "void" : return _vmkctl.Lun_UnclaimAllPaths(self)
    def DetachAllFilters(self, *args) -> "void" : return _vmkctl.Lun_DetachAllFilters(self, *args)
    def ClaimFilters(self) -> "void" : return _vmkctl.Lun_ClaimFilters(self)
    def IsAccessible(self) -> "bool" : return _vmkctl.Lun_IsAccessible(self)
    def MountCdrom(self) -> "void" : return _vmkctl.Lun_MountCdrom(self)
    def UnmountCdrom(self) -> "void" : return _vmkctl.Lun_UnmountCdrom(self)
    def IsOffline(self) -> "bool" : return _vmkctl.Lun_IsOffline(self)
    def SetDetached(self, *args) -> "void" : return _vmkctl.Lun_SetDetached(self, *args)
    def GetQueueFullSampleSize(self) -> "uint32" : return _vmkctl.Lun_GetQueueFullSampleSize(self)
    def GetQueueFullThreshold(self) -> "uint32" : return _vmkctl.Lun_GetQueueFullThreshold(self)
    def SetQueueFullParameters(self, *args) -> "void" : return _vmkctl.Lun_SetQueueFullParameters(self, *args)
    def GetLatencySensitiveThreshold(self) -> "uint32" : return _vmkctl.Lun_GetLatencySensitiveThreshold(self)
    def SetLatencySensitiveThreshold(self, *args) -> "void" : return _vmkctl.Lun_SetLatencySensitiveThreshold(self, *args)
    def GetMaxQueueDepth(self) -> "uint32" : return _vmkctl.Lun_GetMaxQueueDepth(self)
    def SetMaxQueueDepth(self, *args) -> "void" : return _vmkctl.Lun_SetMaxQueueDepth(self, *args)
    def GetNumReqOutstanding(self) -> "uint32" : return _vmkctl.Lun_GetNumReqOutstanding(self)
    def SetNumReqOutstanding(self, *args) -> "void" : return _vmkctl.Lun_SetNumReqOutstanding(self, *args)
    def IsProtEnabled(self) -> "bool" : return _vmkctl.Lun_IsProtEnabled(self)
    def IsProtActivated(self) -> "bool" : return _vmkctl.Lun_IsProtActivated(self)
    def GetProtType(self) -> "uint32" : return _vmkctl.Lun_GetProtType(self)
    def GetGuardType(self) -> "ScsiAdapterGuardType" : return _vmkctl.Lun_GetGuardType(self)
    def GetProtMask(self) -> "uint32" : return _vmkctl.Lun_GetProtMask(self)
    def SetProt(self, *args) -> "void" : return _vmkctl.Lun_SetProt(self, *args)
    def IsDIXEnabled(self) -> "bool" : return _vmkctl.Lun_IsDIXEnabled(self)
    def IsDetached(self) -> "bool" : return _vmkctl.Lun_IsDetached(self)
    def SetNotShared(self, *args) -> "void" : return _vmkctl.Lun_SetNotShared(self, *args)
    def IsNotShared(self) -> "bool" : return _vmkctl.Lun_IsNotShared(self)
    def SetPerenniallyReserved(self, *args) -> "void" : return _vmkctl.Lun_SetPerenniallyReserved(self, *args)
    def IsPerenniallyReserved(self) -> "bool" : return _vmkctl.Lun_IsPerenniallyReserved(self)
    def DeleteState(self) -> "void" : return _vmkctl.Lun_DeleteState(self)
    def IsEmulatedDIXDIFEnabled(self) -> "bool" : return _vmkctl.Lun_IsEmulatedDIXDIFEnabled(self)
    def LoadConfig(self) -> "void" : return _vmkctl.Lun_LoadConfig(self)
    def GetVaaiPrimSupportBitmap(self) -> "uint32" : return _vmkctl.Lun_GetVaaiPrimSupportBitmap(self)
    def SetVaaiPrimSupportBitmap(self, *args) -> "void" : return _vmkctl.Lun_SetVaaiPrimSupportBitmap(self, *args)
    def MarkPDL(self, *args) -> "void" : return _vmkctl.Lun_MarkPDL(self, *args)
    __swig_destroy__ = _vmkctl.delete_Lun
    __del__ = lambda self : None;
Lun_swigregister = _vmkctl.Lun_swigregister
Lun_swigregister(Lun)

class LunImpl(Lun,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [Lun,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LunImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [Lun,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LunImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_LunImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_LunImpl
    __del__ = lambda self : None;
    def Init(self) -> "void" : return _vmkctl.LunImpl_Init(self)
    def GetUuid(self, *args) -> "void" : return _vmkctl.LunImpl_GetUuid(self, *args)
    def GetExternalId(self) -> "std::string" : return _vmkctl.LunImpl_GetExternalId(self)
    def GetMultipathPluginName(self) -> "std::string" : return _vmkctl.LunImpl_GetMultipathPluginName(self)
    def IsProtEnabled(self) -> "bool" : return _vmkctl.LunImpl_IsProtEnabled(self)
    def IsProtActivated(self) -> "bool" : return _vmkctl.LunImpl_IsProtActivated(self)
    def GetProtType(self) -> "uint32" : return _vmkctl.LunImpl_GetProtType(self)
    def GetGuardType(self) -> "HostCtl::Storage::ScsiAdapterGuardType" : return _vmkctl.LunImpl_GetGuardType(self)
    def GetProtMask(self) -> "uint32" : return _vmkctl.LunImpl_GetProtMask(self)
    def SetProt(self, *args) -> "void" : return _vmkctl.LunImpl_SetProt(self, *args)
    def IsDIXEnabled(self) -> "bool" : return _vmkctl.LunImpl_IsDIXEnabled(self)
    def GetLunType(self) -> "HostCtl::Storage::Lun::LunType" : return _vmkctl.LunImpl_GetLunType(self)
    def GetLunTypeString(self) -> "std::string" : return _vmkctl.LunImpl_GetLunTypeString(self)
    def GetLunLabel(self) -> "HostCtl::Storage::PartitionLabel" : return _vmkctl.LunImpl_GetLunLabel(self)
    def GetIdentifier(self) -> "std::string" : return _vmkctl.LunImpl_GetIdentifier(self)
    def GetConsoleDevice(self) -> "std::string" : return _vmkctl.LunImpl_GetConsoleDevice(self)
    def GetDevfsPath(self) -> "std::string" : return _vmkctl.LunImpl_GetDevfsPath(self)
    def GetQueueDepth(self) -> "uint32" : return _vmkctl.LunImpl_GetQueueDepth(self)
    def GetVendor(self) -> "std::string" : return _vmkctl.LunImpl_GetVendor(self)
    def GetModel(self) -> "std::string" : return _vmkctl.LunImpl_GetModel(self)
    def GetRevision(self) -> "std::string" : return _vmkctl.LunImpl_GetRevision(self)
    def GetScsiLevel(self) -> "uint8" : return _vmkctl.LunImpl_GetScsiLevel(self)
    def GetStatus(self) -> "HostCtl::Storage::Lun::LunStatus" : return _vmkctl.LunImpl_GetStatus(self)
    def SetStatus(self, *args) -> "void" : return _vmkctl.LunImpl_SetStatus(self, *args)
    __swig_getmethods__["GetDetachedList"] = lambda x: _vmkctl.LunImpl_GetDetachedList
    if _newclass:GetDetachedList = staticmethod(_vmkctl.LunImpl_GetDetachedList)
    __swig_getmethods__["RemoveDetachedEntry"] = lambda x: _vmkctl.LunImpl_RemoveDetachedEntry
    if _newclass:RemoveDetachedEntry = staticmethod(_vmkctl.LunImpl_RemoveDetachedEntry)
    def SetQueueFullParameters(self, *args) -> "void" : return _vmkctl.LunImpl_SetQueueFullParameters(self, *args)
    def SetMaxQueueDepth(self, *args) -> "void" : return _vmkctl.LunImpl_SetMaxQueueDepth(self, *args)
    def SetNumReqOutstanding(self, *args) -> "void" : return _vmkctl.LunImpl_SetNumReqOutstanding(self, *args)
    def GetQueueFullSampleSize(self) -> "uint32" : return _vmkctl.LunImpl_GetQueueFullSampleSize(self)
    def GetQueueFullThreshold(self) -> "uint32" : return _vmkctl.LunImpl_GetQueueFullThreshold(self)
    def GetMaxQueueDepth(self) -> "uint32" : return _vmkctl.LunImpl_GetMaxQueueDepth(self)
    def GetNumReqOutstanding(self) -> "uint32" : return _vmkctl.LunImpl_GetNumReqOutstanding(self)
    def GetDeviceAvailable(self) -> "HostCtl::Storage::Lun::LunAvailable" : return _vmkctl.LunImpl_GetDeviceAvailable(self)
    def SetLatencySensitiveThreshold(self, *args) -> "void" : return _vmkctl.LunImpl_SetLatencySensitiveThreshold(self, *args)
    def GetLatencySensitiveThreshold(self) -> "uint32" : return _vmkctl.LunImpl_GetLatencySensitiveThreshold(self)
    __swig_getmethods__["LunStatusStringToLunStatus"] = lambda x: _vmkctl.LunImpl_LunStatusStringToLunStatus
    if _newclass:LunStatusStringToLunStatus = staticmethod(_vmkctl.LunImpl_LunStatusStringToLunStatus)
    def GetStatusString(self) -> "std::string" : return _vmkctl.LunImpl_GetStatusString(self)
    def GetStorageStatistics(self) -> "HostCtl::Storage::StorageStatistics" : return _vmkctl.LunImpl_GetStorageStatistics(self)
    def GetWorldStorageStatistics(self, *args) -> "HostCtl::Storage::StorageStatistics" : return _vmkctl.LunImpl_GetWorldStorageStatistics(self, *args)
    def GetScsiStats(self, *args) -> "void" : return _vmkctl.LunImpl_GetScsiStats(self, *args)
    def GetSmartStats(self) -> "HostCtl::Storage::SmartStats" : return _vmkctl.LunImpl_GetSmartStats(self)
    def GetDeviceInfo(self) -> "HostCtl::Storage::LsuDeviceInfoData" : return _vmkctl.LunImpl_GetDeviceInfo(self)
    def SetLedState(self, *args) -> "void" : return _vmkctl.LunImpl_SetLedState(self, *args)
    def TurnWCOn(self) -> "void" : return _vmkctl.LunImpl_TurnWCOn(self)
    def TurnWCOff(self) -> "void" : return _vmkctl.LunImpl_TurnWCOff(self)
    def GetDeviceLocation(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.LunImpl_GetDeviceLocation(self)
    def GetWorldScsiStats(self, *args) -> "void" : return _vmkctl.LunImpl_GetWorldScsiStats(self, *args)
    def GetVAAIState(self) -> "HostCtl::Storage::VAAIState" : return _vmkctl.LunImpl_GetVAAIState(self)
    def GetVAAIAtsStatus(self) -> "HostCtl::Storage::VAAIState" : return _vmkctl.LunImpl_GetVAAIAtsStatus(self)
    def GetVAAICloneStatus(self) -> "HostCtl::Storage::VAAIState" : return _vmkctl.LunImpl_GetVAAICloneStatus(self)
    def GetVAAIZeroStatus(self) -> "HostCtl::Storage::VAAIState" : return _vmkctl.LunImpl_GetVAAIZeroStatus(self)
    def GetVAAIDeleteStatus(self) -> "HostCtl::Storage::VAAIState" : return _vmkctl.LunImpl_GetVAAIDeleteStatus(self)
    def GetThinProvState(self) -> "HostCtl::Storage::Lun::ThinProvisioningState" : return _vmkctl.LunImpl_GetThinProvState(self)
    def IsPseudoLun(self) -> "bool" : return _vmkctl.LunImpl_IsPseudoLun(self)
    def Reserve(self) -> "void" : return _vmkctl.LunImpl_Reserve(self)
    def Release(self) -> "void" : return _vmkctl.LunImpl_Release(self)
    def Reset(self) -> "void" : return _vmkctl.LunImpl_Reset(self)
    def GetWorldLeaders(self) -> "std::vector< uint64,std::allocator< uint64 > >" : return _vmkctl.LunImpl_GetWorldLeaders(self)
    def GetHandles(self) -> "std::vector< HostCtl::Storage::LunHandle,std::allocator< HostCtl::Storage::LunHandle > >" : return _vmkctl.LunImpl_GetHandles(self)
    def IsReserved(self) -> "bool" : return _vmkctl.LunImpl_IsReserved(self)
    def GetReservationsPending(self) -> "uint32" : return _vmkctl.LunImpl_GetReservationsPending(self)
    def GetSize(self) -> "uint64" : return _vmkctl.LunImpl_GetSize(self)
    def GetBlockSize(self) -> "uint64" : return _vmkctl.LunImpl_GetBlockSize(self)
    def GetPhysicalBlockSize(self) -> "uint64" : return _vmkctl.LunImpl_GetPhysicalBlockSize(self)
    def GetFormatType(self) -> "HostCtl::Storage::Lun::LunFormatType" : return _vmkctl.LunImpl_GetFormatType(self)
    def GetNumBlocks(self) -> "uint64" : return _vmkctl.LunImpl_GetNumBlocks(self)
    def IsRdmCapable(self) -> "bool" : return _vmkctl.LunImpl_IsRdmCapable(self)
    def IsLocal(self) -> "bool" : return _vmkctl.LunImpl_IsLocal(self)
    def IsRemovableDevice(self) -> "bool" : return _vmkctl.LunImpl_IsRemovableDevice(self)
    def IsSSD(self) -> "bool" : return _vmkctl.LunImpl_IsSSD(self)
    def IsPE(self) -> "bool" : return _vmkctl.LunImpl_IsPE(self)
    def NameDevice(self) -> "void" : return _vmkctl.LunImpl_NameDevice(self)
    def GetDisplayName(self) -> "std::string" : return _vmkctl.LunImpl_GetDisplayName(self)
    def IsDisplayNameSettable(self) -> "bool" : return _vmkctl.LunImpl_IsDisplayNameSettable(self)
    def SetDisplayName(self, *args) -> "void" : return _vmkctl.LunImpl_SetDisplayName(self, *args)
    def HasDisplayName(self) -> "bool" : return _vmkctl.LunImpl_HasDisplayName(self)
    def HasUserConfiguredDisplayName(self) -> "bool" : return _vmkctl.LunImpl_HasUserConfiguredDisplayName(self)
    def GetUids(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.LunImpl_GetUids(self)
    def GetPathNames(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.LunImpl_GetPathNames(self)
    def GetPaths(self) -> "std::vector< HostCtl::Storage::ScsiPathPtr,std::allocator< HostCtl::Storage::ScsiPathPtr > >" : return _vmkctl.LunImpl_GetPaths(self)
    def HasPathToInterfaceType(self, *args) -> "bool" : return _vmkctl.LunImpl_HasPathToInterfaceType(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.LunImpl_Refresh(self)
    def RefreshInt(self, *args) -> "void" : return _vmkctl.LunImpl_RefreshInt(self, *args)
    def GetName(self) -> "std::string" : return _vmkctl.LunImpl_GetName(self)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.LunImpl_GetChildren(self)
    def LoadConfig(self) -> "void" : return _vmkctl.LunImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.LunImpl_Print(self, *args)
    def GetPartitionName(self, *args) -> "std::string" : return _vmkctl.LunImpl_GetPartitionName(self, *args)
    __swig_getmethods__["GetLun"] = lambda x: _vmkctl.LunImpl_GetLun
    if _newclass:GetLun = staticmethod(_vmkctl.LunImpl_GetLun)
    __swig_getmethods__["VAAIStateFromVmkState"] = lambda x: _vmkctl.LunImpl_VAAIStateFromVmkState
    if _newclass:VAAIStateFromVmkState = staticmethod(_vmkctl.LunImpl_VAAIStateFromVmkState)
    __swig_getmethods__["ResolveRuntimeLunName"] = lambda x: _vmkctl.LunImpl_ResolveRuntimeLunName
    if _newclass:ResolveRuntimeLunName = staticmethod(_vmkctl.LunImpl_ResolveRuntimeLunName)
    def SetConsoleDeviceStatus(self, *args) -> "void" : return _vmkctl.LunImpl_SetConsoleDeviceStatus(self, *args)
    def UnclaimAllPaths(self) -> "void" : return _vmkctl.LunImpl_UnclaimAllPaths(self)
    def DetachAllFilters(self, *args) -> "void" : return _vmkctl.LunImpl_DetachAllFilters(self, *args)
    def ClaimFilters(self) -> "void" : return _vmkctl.LunImpl_ClaimFilters(self)
    __swig_getmethods__["IsAccessible"] = lambda x: _vmkctl.LunImpl_IsAccessible
    if _newclass:IsAccessible = staticmethod(_vmkctl.LunImpl_IsAccessible)
    def IsAccessibleWithReason(self, *args) -> "bool" : return _vmkctl.LunImpl_IsAccessibleWithReason(self, *args)
    def MountCdrom(self) -> "void" : return _vmkctl.LunImpl_MountCdrom(self)
    def UnmountCdrom(self) -> "void" : return _vmkctl.LunImpl_UnmountCdrom(self)
    __swig_getmethods__["ConvertVmkLunStateToLunStatus"] = lambda x: _vmkctl.LunImpl_ConvertVmkLunStateToLunStatus
    if _newclass:ConvertVmkLunStateToLunStatus = staticmethod(_vmkctl.LunImpl_ConvertVmkLunStateToLunStatus)
    def IsOffline(self) -> "bool" : return _vmkctl.LunImpl_IsOffline(self)
    def SetDetached(self, *args) -> "void" : return _vmkctl.LunImpl_SetDetached(self, *args)
    def IsDetached(self) -> "bool" : return _vmkctl.LunImpl_IsDetached(self)
    def IsNotShared(self) -> "bool" : return _vmkctl.LunImpl_IsNotShared(self)
    def SetNotShared(self, *args) -> "void" : return _vmkctl.LunImpl_SetNotShared(self, *args)
    def SetPerenniallyReserved(self, *args) -> "void" : return _vmkctl.LunImpl_SetPerenniallyReserved(self, *args)
    def IsPerenniallyReserved(self) -> "bool" : return _vmkctl.LunImpl_IsPerenniallyReserved(self)
    __swig_getmethods__["RestorePersistentAttributes"] = lambda x: _vmkctl.LunImpl_RestorePersistentAttributes
    if _newclass:RestorePersistentAttributes = staticmethod(_vmkctl.LunImpl_RestorePersistentAttributes)
    def DeleteState(self) -> "void" : return _vmkctl.LunImpl_DeleteState(self)
    def IsEmulatedDIXDIFEnabled(self) -> "bool" : return _vmkctl.LunImpl_IsEmulatedDIXDIFEnabled(self)
    def SetVaaiPrimSupportBitmap(self, *args) -> "void" : return _vmkctl.LunImpl_SetVaaiPrimSupportBitmap(self, *args)
    def GetVaaiPrimSupportBitmap(self) -> "uint32" : return _vmkctl.LunImpl_GetVaaiPrimSupportBitmap(self)
    def MarkPDL(self, *args) -> "void" : return _vmkctl.LunImpl_MarkPDL(self, *args)
LunImpl_swigregister = _vmkctl.LunImpl_swigregister
LunImpl_swigregister(LunImpl)

def LunImpl_GetDetachedList() -> "std::vector< std::pair< std::string,std::string >,std::allocator< std::pair< std::string,std::string > > >" :
  return _vmkctl.LunImpl_GetDetachedList()
LunImpl_GetDetachedList = _vmkctl.LunImpl_GetDetachedList

def LunImpl_RemoveDetachedEntry(*args) -> "void" :
  return _vmkctl.LunImpl_RemoveDetachedEntry(*args)
LunImpl_RemoveDetachedEntry = _vmkctl.LunImpl_RemoveDetachedEntry

def LunImpl_LunStatusStringToLunStatus(*args) -> "Lun::LunStatus" :
  return _vmkctl.LunImpl_LunStatusStringToLunStatus(*args)
LunImpl_LunStatusStringToLunStatus = _vmkctl.LunImpl_LunStatusStringToLunStatus
LunImpl.VML_FAKE = _vmkctl.cvar.LunImpl_VML_FAKE
LunImpl.VML_ERROR = _vmkctl.cvar.LunImpl_VML_ERROR

def LunImpl_GetLun(*args) -> "HostCtl::Storage::LunPtr" :
  return _vmkctl.LunImpl_GetLun(*args)
LunImpl_GetLun = _vmkctl.LunImpl_GetLun

def LunImpl_VAAIStateFromVmkState(*args) -> "HostCtl::Storage::VAAIState" :
  return _vmkctl.LunImpl_VAAIStateFromVmkState(*args)
LunImpl_VAAIStateFromVmkState = _vmkctl.LunImpl_VAAIStateFromVmkState

def LunImpl_ResolveRuntimeLunName(*args) -> "std::string" :
  return _vmkctl.LunImpl_ResolveRuntimeLunName(*args)
LunImpl_ResolveRuntimeLunName = _vmkctl.LunImpl_ResolveRuntimeLunName

def LunImpl_IsAccessible(*args) -> "bool" :
  return _vmkctl.LunImpl_IsAccessible(*args)
LunImpl_IsAccessible = _vmkctl.LunImpl_IsAccessible

def LunImpl_ConvertVmkLunStateToLunStatus(*args) -> "HostCtl::Storage::Lun::LunStatus" :
  return _vmkctl.LunImpl_ConvertVmkLunStateToLunStatus(*args)
LunImpl_ConvertVmkLunStateToLunStatus = _vmkctl.LunImpl_ConvertVmkLunStateToLunStatus

def LunImpl_RestorePersistentAttributes() -> "void" :
  return _vmkctl.LunImpl_RestorePersistentAttributes()
LunImpl_RestorePersistentAttributes = _vmkctl.LunImpl_RestorePersistentAttributes

class Partition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Partition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Partition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_Partition(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetNumber(self) -> "uint32" : return _vmkctl.Partition_GetNumber(self)
    def GetStartSector(self) -> "uint64" : return _vmkctl.Partition_GetStartSector(self)
    def GetEndSector(self) -> "uint64" : return _vmkctl.Partition_GetEndSector(self)
    def GetType(self) -> "uint8" : return _vmkctl.Partition_GetType(self)
    def GetGuid(self) -> "std::string const &" : return _vmkctl.Partition_GetGuid(self)
    def SetNumber(self, *args) -> "void" : return _vmkctl.Partition_SetNumber(self, *args)
    def SetStartSector(self, *args) -> "void" : return _vmkctl.Partition_SetStartSector(self, *args)
    def SetEndSector(self, *args) -> "void" : return _vmkctl.Partition_SetEndSector(self, *args)
    def SetType(self, *args) -> "void" : return _vmkctl.Partition_SetType(self, *args)
    def SetGuid(self, *args) -> "void" : return _vmkctl.Partition_SetGuid(self, *args)
    __swig_destroy__ = _vmkctl.delete_Partition
    __del__ = lambda self : None;
Partition_swigregister = _vmkctl.Partition_swigregister
Partition_swigregister(Partition)

class DiskLun(Lun):
    __swig_setmethods__ = {}
    for _s in [Lun]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiskLun, name, value)
    __swig_getmethods__ = {}
    for _s in [Lun]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiskLun, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    DISKLUN_IORM_DISABLE = _vmkctl.DiskLun_DISKLUN_IORM_DISABLE
    DISKLUN_IORM_ENABLE = _vmkctl.DiskLun_DISKLUN_IORM_ENABLE
    DISKLUN_STATS_ENABLE = _vmkctl.DiskLun_DISKLUN_STATS_ENABLE
    DISKLUN_RESV_ENABLE = _vmkctl.DiskLun_DISKLUN_RESV_ENABLE
    def GetPartitions(self) -> "std::vector< HostCtl::Storage::DiskLunPartitionPtr,std::allocator< HostCtl::Storage::DiskLunPartitionPtr > >" : return _vmkctl.DiskLun_GetPartitions(self)
    def GetPartitionByNumber(self, *args) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.DiskLun_GetPartitionByNumber(self, *args)
    def GetIORMState(self) -> "long" : return _vmkctl.DiskLun_GetIORMState(self)
    def SetIORMState(self, *args) -> "void" : return _vmkctl.DiskLun_SetIORMState(self, *args)
    def GetLatencyThreshold(self) -> "uint32" : return _vmkctl.DiskLun_GetLatencyThreshold(self)
    def SetLatencyThreshold(self, *args) -> "void" : return _vmkctl.DiskLun_SetLatencyThreshold(self, *args)
    def GetMaxQueueDepth(self) -> "uint32" : return _vmkctl.DiskLun_GetMaxQueueDepth(self)
    def SetMaxQueueDepth(self, *args) -> "void" : return _vmkctl.DiskLun_SetMaxQueueDepth(self, *args)
    def GetClusterWideStats(self) -> "StorageIormInfo" : return _vmkctl.DiskLun_GetClusterWideStats(self)
    def SetClusterWideStats(self, *args) -> "void" : return _vmkctl.DiskLun_SetClusterWideStats(self, *args)
    def GetIormStatus(self) -> "StorageIormStatus" : return _vmkctl.DiskLun_GetIormStatus(self)
    def SetSDRSPodID(self, *args) -> "void" : return _vmkctl.DiskLun_SetSDRSPodID(self, *args)
    __swig_destroy__ = _vmkctl.delete_DiskLun
    __del__ = lambda self : None;
DiskLun_swigregister = _vmkctl.DiskLun_swigregister
DiskLun_swigregister(DiskLun)

class DiskLunImpl(DiskLun,LunImpl):
    __swig_setmethods__ = {}
    for _s in [DiskLun,LunImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiskLunImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DiskLun,LunImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiskLunImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_DiskLunImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DiskLunImpl
    __del__ = lambda self : None;
    def GetPartitions(self) -> "std::vector< HostCtl::Storage::DiskLunPartitionPtr,std::allocator< HostCtl::Storage::DiskLunPartitionPtr > >" : return _vmkctl.DiskLunImpl_GetPartitions(self)
    def GetPartitionByNumber(self, *args) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.DiskLunImpl_GetPartitionByNumber(self, *args)
    def SetDiskResourceAllocation(self, *args) -> "void" : return _vmkctl.DiskLunImpl_SetDiskResourceAllocation(self, *args)
    def GetDiskResourceAllocation(self, *args) -> "HostCtl::Resource::DiskResourceAllocation" : return _vmkctl.DiskLunImpl_GetDiskResourceAllocation(self, *args)
    def SetDiskResourceLimit(self, *args) -> "void" : return _vmkctl.DiskLunImpl_SetDiskResourceLimit(self, *args)
    def GetDiskResourceLimit(self, *args) -> "int64" : return _vmkctl.DiskLunImpl_GetDiskResourceLimit(self, *args)
    def GetIORMState(self) -> "long" : return _vmkctl.DiskLunImpl_GetIORMState(self)
    def SetIORMState(self, *args) -> "void" : return _vmkctl.DiskLunImpl_SetIORMState(self, *args)
    def GetLatencyThreshold(self) -> "uint32" : return _vmkctl.DiskLunImpl_GetLatencyThreshold(self)
    def SetLatencyThreshold(self, *args) -> "void" : return _vmkctl.DiskLunImpl_SetLatencyThreshold(self, *args)
    def GetMaxQueueDepth(self) -> "uint32" : return _vmkctl.DiskLunImpl_GetMaxQueueDepth(self)
    def SetMaxQueueDepth(self, *args) -> "void" : return _vmkctl.DiskLunImpl_SetMaxQueueDepth(self, *args)
    def GetClusterWideStats(self) -> "HostCtl::Storage::StorageIormInfo" : return _vmkctl.DiskLunImpl_GetClusterWideStats(self)
    def SetClusterWideStats(self, *args) -> "void" : return _vmkctl.DiskLunImpl_SetClusterWideStats(self, *args)
    def GetIormStatus(self) -> "HostCtl::Storage::StorageIormStatus" : return _vmkctl.DiskLunImpl_GetIormStatus(self)
    def SetSDRSPodID(self, *args) -> "void" : return _vmkctl.DiskLunImpl_SetSDRSPodID(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.DiskLunImpl_Refresh(self)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.DiskLunImpl_GetChildren(self)
    def Print(self, *args) -> "void" : return _vmkctl.DiskLunImpl_Print(self, *args)
DiskLunImpl_swigregister = _vmkctl.DiskLunImpl_swigregister
DiskLunImpl_swigregister(DiskLunImpl)

class DiskLunPartition(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiskLunPartition, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiskLunPartition, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    PART_TYPE_EMPTY = _vmkctl.DiskLunPartition_PART_TYPE_EMPTY
    PART_TYPE_EXTENDED = _vmkctl.DiskLunPartition_PART_TYPE_EXTENDED
    PART_TYPE_EFI_SYS = _vmkctl.DiskLunPartition_PART_TYPE_EFI_SYS
    PART_TYPE_VFAT = _vmkctl.DiskLunPartition_PART_TYPE_VFAT
    PART_TYPE_UFS = _vmkctl.DiskLunPartition_PART_TYPE_UFS
    PART_TYPE_DELL_UTILITY = _vmkctl.DiskLunPartition_PART_TYPE_DELL_UTILITY
    PART_TYPE_VMKERNEL = _vmkctl.DiskLunPartition_PART_TYPE_VMKERNEL
    PART_TYPE_VMKERNEL_DUMP = _vmkctl.DiskLunPartition_PART_TYPE_VMKERNEL_DUMP
    def GetIdentifier(self) -> "std::string" : return _vmkctl.DiskLunPartition_GetIdentifier(self)
    def GetDiskLun(self) -> "HostCtl::Storage::DiskLunPtr" : return _vmkctl.DiskLunPartition_GetDiskLun(self)
    def GetDeviceName(self) -> "std::string" : return _vmkctl.DiskLunPartition_GetDeviceName(self)
    def GetStorageStatistics(self) -> "StorageStatistics" : return _vmkctl.DiskLunPartition_GetStorageStatistics(self)
    def GetScsiStats(self, *args) -> "void" : return _vmkctl.DiskLunPartition_GetScsiStats(self, *args)
    def GetPartition(self) -> "uint8" : return _vmkctl.DiskLunPartition_GetPartition(self)
    def GetStartSector(self) -> "uint64" : return _vmkctl.DiskLunPartition_GetStartSector(self)
    def GetEndSector(self) -> "uint64" : return _vmkctl.DiskLunPartition_GetEndSector(self)
    def GetPartitionType(self) -> "HostCtl::Storage::DiskLunPartition::PartitionType" : return _vmkctl.DiskLunPartition_GetPartitionType(self)
    def GetPartitionGuid(self) -> "std::string" : return _vmkctl.DiskLunPartition_GetPartitionGuid(self)
    def GetSize(self) -> "uint64" : return _vmkctl.DiskLunPartition_GetSize(self)
    def GetType(self) -> "uint32" : return _vmkctl.DiskLunPartition_GetType(self)
    def GetConsoleDevice(self) -> "std::string" : return _vmkctl.DiskLunPartition_GetConsoleDevice(self)
    def GetDevfsPath(self) -> "std::string" : return _vmkctl.DiskLunPartition_GetDevfsPath(self)
    __swig_destroy__ = _vmkctl.delete_DiskLunPartition
    __del__ = lambda self : None;
DiskLunPartition_swigregister = _vmkctl.DiskLunPartition_swigregister
DiskLunPartition_swigregister(DiskLunPartition)
DiskLunPartition.PART_GUID_EMPTY = _vmkctl.cvar.DiskLunPartition_PART_GUID_EMPTY
DiskLunPartition.PART_GUID_VFAT = _vmkctl.cvar.DiskLunPartition_PART_GUID_VFAT
DiskLunPartition.PART_GUID_UFS = _vmkctl.cvar.DiskLunPartition_PART_GUID_UFS
DiskLunPartition.PART_GUID_EFI_SYS = _vmkctl.cvar.DiskLunPartition_PART_GUID_EFI_SYS
DiskLunPartition.PART_GUID_EXTENDED = _vmkctl.cvar.DiskLunPartition_PART_GUID_EXTENDED
DiskLunPartition.PART_GUID_VMKERNEL = _vmkctl.cvar.DiskLunPartition_PART_GUID_VMKERNEL
DiskLunPartition.PART_GUID_VMKERNEL_DUMP = _vmkctl.cvar.DiskLunPartition_PART_GUID_VMKERNEL_DUMP

class PartitionTypeGuidPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PartitionTypeGuidPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PartitionTypeGuidPair, name)
    __repr__ = _swig_repr
    __swig_setmethods__["guid"] = _vmkctl.PartitionTypeGuidPair_guid_set
    __swig_getmethods__["guid"] = _vmkctl.PartitionTypeGuidPair_guid_get
    if _newclass:guid = _swig_property(_vmkctl.PartitionTypeGuidPair_guid_get, _vmkctl.PartitionTypeGuidPair_guid_set)
    __swig_setmethods__["type"] = _vmkctl.PartitionTypeGuidPair_type_set
    __swig_getmethods__["type"] = _vmkctl.PartitionTypeGuidPair_type_get
    if _newclass:type = _swig_property(_vmkctl.PartitionTypeGuidPair_type_get, _vmkctl.PartitionTypeGuidPair_type_set)
    def __init__(self): 
        this = _vmkctl.new_PartitionTypeGuidPair()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PartitionTypeGuidPair
    __del__ = lambda self : None;
PartitionTypeGuidPair_swigregister = _vmkctl.PartitionTypeGuidPair_swigregister
PartitionTypeGuidPair_swigregister(PartitionTypeGuidPair)

class DiskLunPartitionImpl(DiskLunPartition,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [DiskLunPartition,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiskLunPartitionImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DiskLunPartition,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiskLunPartitionImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_DiskLunPartitionImpl
    __del__ = lambda self : None;
    def GetDiskLun(self) -> "HostCtl::Storage::DiskLunPtr" : return _vmkctl.DiskLunPartitionImpl_GetDiskLun(self)
    def GetDeviceName(self) -> "std::string" : return _vmkctl.DiskLunPartitionImpl_GetDeviceName(self)
    def GetStorageStatistics(self) -> "HostCtl::Storage::StorageStatistics" : return _vmkctl.DiskLunPartitionImpl_GetStorageStatistics(self)
    def GetScsiStats(self, *args) -> "void" : return _vmkctl.DiskLunPartitionImpl_GetScsiStats(self, *args)
    def GetPartition(self) -> "uint8" : return _vmkctl.DiskLunPartitionImpl_GetPartition(self)
    def GetStartSector(self) -> "uint64" : return _vmkctl.DiskLunPartitionImpl_GetStartSector(self)
    def GetEndSector(self) -> "uint64" : return _vmkctl.DiskLunPartitionImpl_GetEndSector(self)
    def GetPartitionType(self) -> "HostCtl::Storage::DiskLunPartition::PartitionType" : return _vmkctl.DiskLunPartitionImpl_GetPartitionType(self)
    def GetPartitionGuid(self) -> "std::string" : return _vmkctl.DiskLunPartitionImpl_GetPartitionGuid(self)
    def GetIdentifier(self) -> "std::string" : return _vmkctl.DiskLunPartitionImpl_GetIdentifier(self)
    def GetSize(self) -> "uint64" : return _vmkctl.DiskLunPartitionImpl_GetSize(self)
    def GetType(self) -> "uint32" : return _vmkctl.DiskLunPartitionImpl_GetType(self)
    def GetConsoleDevice(self) -> "std::string" : return _vmkctl.DiskLunPartitionImpl_GetConsoleDevice(self)
    def GetDevfsPath(self) -> "std::string" : return _vmkctl.DiskLunPartitionImpl_GetDevfsPath(self)
    def Refresh(self) -> "void" : return _vmkctl.DiskLunPartitionImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.DiskLunPartitionImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.DiskLunPartitionImpl_Print(self, *args)
    __swig_getmethods__["SplitName"] = lambda x: _vmkctl.DiskLunPartitionImpl_SplitName
    if _newclass:SplitName = staticmethod(_vmkctl.DiskLunPartitionImpl_SplitName)
    __swig_getmethods__["ConvertTypeToGuid"] = lambda x: _vmkctl.DiskLunPartitionImpl_ConvertTypeToGuid
    if _newclass:ConvertTypeToGuid = staticmethod(_vmkctl.DiskLunPartitionImpl_ConvertTypeToGuid)
    __swig_getmethods__["ConvertGuidToType"] = lambda x: _vmkctl.DiskLunPartitionImpl_ConvertGuidToType
    if _newclass:ConvertGuidToType = staticmethod(_vmkctl.DiskLunPartitionImpl_ConvertGuidToType)
    __swig_getmethods__["AddPartitionTypeGuidPair"] = lambda x: _vmkctl.DiskLunPartitionImpl_AddPartitionTypeGuidPair
    if _newclass:AddPartitionTypeGuidPair = staticmethod(_vmkctl.DiskLunPartitionImpl_AddPartitionTypeGuidPair)
DiskLunPartitionImpl_swigregister = _vmkctl.DiskLunPartitionImpl_swigregister
DiskLunPartitionImpl_swigregister(DiskLunPartitionImpl)

def DiskLunPartitionImpl_SplitName(*args) -> "void" :
  return _vmkctl.DiskLunPartitionImpl_SplitName(*args)
DiskLunPartitionImpl_SplitName = _vmkctl.DiskLunPartitionImpl_SplitName

def DiskLunPartitionImpl_ConvertTypeToGuid(*args) -> "std::string" :
  return _vmkctl.DiskLunPartitionImpl_ConvertTypeToGuid(*args)
DiskLunPartitionImpl_ConvertTypeToGuid = _vmkctl.DiskLunPartitionImpl_ConvertTypeToGuid

def DiskLunPartitionImpl_ConvertGuidToType(*args) -> "HostCtl::Storage::DiskLunPartition::PartitionType" :
  return _vmkctl.DiskLunPartitionImpl_ConvertGuidToType(*args)
DiskLunPartitionImpl_ConvertGuidToType = _vmkctl.DiskLunPartitionImpl_ConvertGuidToType

def DiskLunPartitionImpl_AddPartitionTypeGuidPair(*args) -> "void" :
  return _vmkctl.DiskLunPartitionImpl_AddPartitionTypeGuidPair(*args)
DiskLunPartitionImpl_AddPartitionTypeGuidPair = _vmkctl.DiskLunPartitionImpl_AddPartitionTypeGuidPair

class DiagnosticFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiagnosticFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiagnosticFile, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_DiagnosticFile
    __del__ = lambda self : None;
    def Activate(self) -> "void" : return _vmkctl.DiagnosticFile_Activate(self)
    def Deactivate(self) -> "void" : return _vmkctl.DiagnosticFile_Deactivate(self)
    def IsActive(self) -> "bool" : return _vmkctl.DiagnosticFile_IsActive(self)
    def IsValidSize(self, *args) -> "bool" : return _vmkctl.DiagnosticFile_IsValidSize(self, *args)
    def GetIdentifier(self) -> "std::string" : return _vmkctl.DiagnosticFile_GetIdentifier(self)
    def GetSize(self) -> "uint64" : return _vmkctl.DiagnosticFile_GetSize(self)
DiagnosticFile_swigregister = _vmkctl.DiagnosticFile_swigregister
DiagnosticFile_swigregister(DiagnosticFile)

class DiagnosticPartition(DiskLunPartition):
    __swig_setmethods__ = {}
    for _s in [DiskLunPartition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiagnosticPartition, name, value)
    __swig_getmethods__ = {}
    for _s in [DiskLunPartition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiagnosticPartition, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_DiagnosticPartition
    __del__ = lambda self : None;
    def Activate(self) -> "void" : return _vmkctl.DiagnosticPartition_Activate(self)
    def Deactivate(self) -> "void" : return _vmkctl.DiagnosticPartition_Deactivate(self)
    def IsActive(self) -> "bool" : return _vmkctl.DiagnosticPartition_IsActive(self)
    def IsValidSize(self, *args) -> "bool" : return _vmkctl.DiagnosticPartition_IsValidSize(self, *args)
    def IsValidDumpPartition(self) -> "bool" : return _vmkctl.DiagnosticPartition_IsValidDumpPartition(self)
DiagnosticPartition_swigregister = _vmkctl.DiagnosticPartition_swigregister
DiagnosticPartition_swigregister(DiagnosticPartition)

class DiagnosticPartitionImpl(DiagnosticPartition,DiskLunPartitionImpl):
    __swig_setmethods__ = {}
    for _s in [DiagnosticPartition,DiskLunPartitionImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiagnosticPartitionImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [DiagnosticPartition,DiskLunPartitionImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiagnosticPartitionImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_DiagnosticPartitionImpl
    __del__ = lambda self : None;
    def Activate(self) -> "void" : return _vmkctl.DiagnosticPartitionImpl_Activate(self)
    def Deactivate(self) -> "void" : return _vmkctl.DiagnosticPartitionImpl_Deactivate(self)
    def IsActive(self) -> "bool" : return _vmkctl.DiagnosticPartitionImpl_IsActive(self)
    def IsValidSize(self, exceptOnSmall : 'bool' = False) -> "bool" : return _vmkctl.DiagnosticPartitionImpl_IsValidSize(self, exceptOnSmall)
    def IsValidDumpPartition(self) -> "bool" : return _vmkctl.DiagnosticPartitionImpl_IsValidDumpPartition(self)
    def Refresh(self) -> "void" : return _vmkctl.DiagnosticPartitionImpl_Refresh(self)
    def Print(self, *args) -> "void" : return _vmkctl.DiagnosticPartitionImpl_Print(self, *args)
    __swig_getmethods__["SetDumpPartition"] = lambda x: _vmkctl.DiagnosticPartitionImpl_SetDumpPartition
    if _newclass:SetDumpPartition = staticmethod(_vmkctl.DiagnosticPartitionImpl_SetDumpPartition)
    __swig_getmethods__["GetDumpPartition"] = lambda x: _vmkctl.DiagnosticPartitionImpl_GetDumpPartition
    if _newclass:GetDumpPartition = staticmethod(_vmkctl.DiagnosticPartitionImpl_GetDumpPartition)
DiagnosticPartitionImpl_swigregister = _vmkctl.DiagnosticPartitionImpl_swigregister
DiagnosticPartitionImpl_swigregister(DiagnosticPartitionImpl)

def DiagnosticPartitionImpl_SetDumpPartition(*args) -> "void" :
  return _vmkctl.DiagnosticPartitionImpl_SetDumpPartition(*args)
DiagnosticPartitionImpl_SetDumpPartition = _vmkctl.DiagnosticPartitionImpl_SetDumpPartition

def DiagnosticPartitionImpl_GetDumpPartition(*args) -> "void" :
  return _vmkctl.DiagnosticPartitionImpl_GetDumpPartition(*args)
DiagnosticPartitionImpl_GetDumpPartition = _vmkctl.DiagnosticPartitionImpl_GetDumpPartition

class DiagnosticVsan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiagnosticVsan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DiagnosticVsan, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_DiagnosticVsan
    __del__ = lambda self : None;
    def Activate(self) -> "void" : return _vmkctl.DiagnosticVsan_Activate(self)
    def Deactivate(self) -> "void" : return _vmkctl.DiagnosticVsan_Deactivate(self)
    def IsActive(self) -> "bool" : return _vmkctl.DiagnosticVsan_IsActive(self)
    def IsValidSize(self, *args) -> "bool" : return _vmkctl.DiagnosticVsan_IsValidSize(self, *args)
    def GetIdentifier(self) -> "std::string const &" : return _vmkctl.DiagnosticVsan_GetIdentifier(self)
    def GetSize(self) -> "uint64" : return _vmkctl.DiagnosticVsan_GetSize(self)
DiagnosticVsan_swigregister = _vmkctl.DiagnosticVsan_swigregister
DiagnosticVsan_swigregister(DiagnosticVsan)

class FcStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FcStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FcStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TxFrames"] = _vmkctl.FcStats_TxFrames_set
    __swig_getmethods__["TxFrames"] = _vmkctl.FcStats_TxFrames_get
    if _newclass:TxFrames = _swig_property(_vmkctl.FcStats_TxFrames_get, _vmkctl.FcStats_TxFrames_set)
    __swig_setmethods__["RxFrames"] = _vmkctl.FcStats_RxFrames_set
    __swig_getmethods__["RxFrames"] = _vmkctl.FcStats_RxFrames_get
    if _newclass:RxFrames = _swig_property(_vmkctl.FcStats_RxFrames_get, _vmkctl.FcStats_RxFrames_set)
    __swig_setmethods__["LipCount"] = _vmkctl.FcStats_LipCount_set
    __swig_getmethods__["LipCount"] = _vmkctl.FcStats_LipCount_get
    if _newclass:LipCount = _swig_property(_vmkctl.FcStats_LipCount_get, _vmkctl.FcStats_LipCount_set)
    __swig_setmethods__["ErrorFrames"] = _vmkctl.FcStats_ErrorFrames_set
    __swig_getmethods__["ErrorFrames"] = _vmkctl.FcStats_ErrorFrames_get
    if _newclass:ErrorFrames = _swig_property(_vmkctl.FcStats_ErrorFrames_get, _vmkctl.FcStats_ErrorFrames_set)
    __swig_setmethods__["DumpedFrames"] = _vmkctl.FcStats_DumpedFrames_set
    __swig_getmethods__["DumpedFrames"] = _vmkctl.FcStats_DumpedFrames_get
    if _newclass:DumpedFrames = _swig_property(_vmkctl.FcStats_DumpedFrames_get, _vmkctl.FcStats_DumpedFrames_set)
    __swig_setmethods__["LinkFailureCount"] = _vmkctl.FcStats_LinkFailureCount_set
    __swig_getmethods__["LinkFailureCount"] = _vmkctl.FcStats_LinkFailureCount_get
    if _newclass:LinkFailureCount = _swig_property(_vmkctl.FcStats_LinkFailureCount_get, _vmkctl.FcStats_LinkFailureCount_set)
    __swig_setmethods__["LossOfSignalCount"] = _vmkctl.FcStats_LossOfSignalCount_set
    __swig_getmethods__["LossOfSignalCount"] = _vmkctl.FcStats_LossOfSignalCount_get
    if _newclass:LossOfSignalCount = _swig_property(_vmkctl.FcStats_LossOfSignalCount_get, _vmkctl.FcStats_LossOfSignalCount_set)
    __swig_setmethods__["PrimSeqProtocolErrCount"] = _vmkctl.FcStats_PrimSeqProtocolErrCount_set
    __swig_getmethods__["PrimSeqProtocolErrCount"] = _vmkctl.FcStats_PrimSeqProtocolErrCount_get
    if _newclass:PrimSeqProtocolErrCount = _swig_property(_vmkctl.FcStats_PrimSeqProtocolErrCount_get, _vmkctl.FcStats_PrimSeqProtocolErrCount_set)
    __swig_setmethods__["InvalidTxWordCount"] = _vmkctl.FcStats_InvalidTxWordCount_set
    __swig_getmethods__["InvalidTxWordCount"] = _vmkctl.FcStats_InvalidTxWordCount_get
    if _newclass:InvalidTxWordCount = _swig_property(_vmkctl.FcStats_InvalidTxWordCount_get, _vmkctl.FcStats_InvalidTxWordCount_set)
    __swig_setmethods__["InvalidCRCCount"] = _vmkctl.FcStats_InvalidCRCCount_set
    __swig_getmethods__["InvalidCRCCount"] = _vmkctl.FcStats_InvalidCRCCount_get
    if _newclass:InvalidCRCCount = _swig_property(_vmkctl.FcStats_InvalidCRCCount_get, _vmkctl.FcStats_InvalidCRCCount_set)
    __swig_setmethods__["InputRequests"] = _vmkctl.FcStats_InputRequests_set
    __swig_getmethods__["InputRequests"] = _vmkctl.FcStats_InputRequests_get
    if _newclass:InputRequests = _swig_property(_vmkctl.FcStats_InputRequests_get, _vmkctl.FcStats_InputRequests_set)
    __swig_setmethods__["OutputRequests"] = _vmkctl.FcStats_OutputRequests_set
    __swig_getmethods__["OutputRequests"] = _vmkctl.FcStats_OutputRequests_get
    if _newclass:OutputRequests = _swig_property(_vmkctl.FcStats_OutputRequests_get, _vmkctl.FcStats_OutputRequests_set)
    __swig_setmethods__["ControlRequests"] = _vmkctl.FcStats_ControlRequests_set
    __swig_getmethods__["ControlRequests"] = _vmkctl.FcStats_ControlRequests_get
    if _newclass:ControlRequests = _swig_property(_vmkctl.FcStats_ControlRequests_get, _vmkctl.FcStats_ControlRequests_set)
    def __init__(self): 
        this = _vmkctl.new_FcStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_FcStats
    __del__ = lambda self : None;
FcStats_swigregister = _vmkctl.FcStats_swigregister
FcStats_swigregister(FcStats)

class FcAttrs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FcAttrs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FcAttrs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["manufacturer"] = _vmkctl.FcAttrs_manufacturer_set
    __swig_getmethods__["manufacturer"] = _vmkctl.FcAttrs_manufacturer_get
    if _newclass:manufacturer = _swig_property(_vmkctl.FcAttrs_manufacturer_get, _vmkctl.FcAttrs_manufacturer_set)
    __swig_setmethods__["serial_number"] = _vmkctl.FcAttrs_serial_number_set
    __swig_getmethods__["serial_number"] = _vmkctl.FcAttrs_serial_number_get
    if _newclass:serial_number = _swig_property(_vmkctl.FcAttrs_serial_number_get, _vmkctl.FcAttrs_serial_number_set)
    __swig_setmethods__["model"] = _vmkctl.FcAttrs_model_set
    __swig_getmethods__["model"] = _vmkctl.FcAttrs_model_get
    if _newclass:model = _swig_property(_vmkctl.FcAttrs_model_get, _vmkctl.FcAttrs_model_set)
    __swig_setmethods__["model_description"] = _vmkctl.FcAttrs_model_description_set
    __swig_getmethods__["model_description"] = _vmkctl.FcAttrs_model_description_get
    if _newclass:model_description = _swig_property(_vmkctl.FcAttrs_model_description_get, _vmkctl.FcAttrs_model_description_set)
    __swig_setmethods__["node_symbolic_name"] = _vmkctl.FcAttrs_node_symbolic_name_set
    __swig_getmethods__["node_symbolic_name"] = _vmkctl.FcAttrs_node_symbolic_name_get
    if _newclass:node_symbolic_name = _swig_property(_vmkctl.FcAttrs_node_symbolic_name_get, _vmkctl.FcAttrs_node_symbolic_name_set)
    __swig_setmethods__["hardware_version"] = _vmkctl.FcAttrs_hardware_version_set
    __swig_getmethods__["hardware_version"] = _vmkctl.FcAttrs_hardware_version_get
    if _newclass:hardware_version = _swig_property(_vmkctl.FcAttrs_hardware_version_get, _vmkctl.FcAttrs_hardware_version_set)
    __swig_setmethods__["driver_version"] = _vmkctl.FcAttrs_driver_version_set
    __swig_getmethods__["driver_version"] = _vmkctl.FcAttrs_driver_version_get
    if _newclass:driver_version = _swig_property(_vmkctl.FcAttrs_driver_version_get, _vmkctl.FcAttrs_driver_version_set)
    __swig_setmethods__["option_rom_version"] = _vmkctl.FcAttrs_option_rom_version_set
    __swig_getmethods__["option_rom_version"] = _vmkctl.FcAttrs_option_rom_version_get
    if _newclass:option_rom_version = _swig_property(_vmkctl.FcAttrs_option_rom_version_get, _vmkctl.FcAttrs_option_rom_version_set)
    __swig_setmethods__["firmware_version"] = _vmkctl.FcAttrs_firmware_version_set
    __swig_getmethods__["firmware_version"] = _vmkctl.FcAttrs_firmware_version_get
    if _newclass:firmware_version = _swig_property(_vmkctl.FcAttrs_firmware_version_get, _vmkctl.FcAttrs_firmware_version_set)
    __swig_setmethods__["driver_name"] = _vmkctl.FcAttrs_driver_name_set
    __swig_getmethods__["driver_name"] = _vmkctl.FcAttrs_driver_name_get
    if _newclass:driver_name = _swig_property(_vmkctl.FcAttrs_driver_name_get, _vmkctl.FcAttrs_driver_name_set)
    __swig_setmethods__["vendor_specific_id"] = _vmkctl.FcAttrs_vendor_specific_id_set
    __swig_getmethods__["vendor_specific_id"] = _vmkctl.FcAttrs_vendor_specific_id_get
    if _newclass:vendor_specific_id = _swig_property(_vmkctl.FcAttrs_vendor_specific_id_get, _vmkctl.FcAttrs_vendor_specific_id_set)
    __swig_setmethods__["port_id"] = _vmkctl.FcAttrs_port_id_set
    __swig_getmethods__["port_id"] = _vmkctl.FcAttrs_port_id_get
    if _newclass:port_id = _swig_property(_vmkctl.FcAttrs_port_id_get, _vmkctl.FcAttrs_port_id_set)
    __swig_setmethods__["node_name"] = _vmkctl.FcAttrs_node_name_set
    __swig_getmethods__["node_name"] = _vmkctl.FcAttrs_node_name_get
    if _newclass:node_name = _swig_property(_vmkctl.FcAttrs_node_name_get, _vmkctl.FcAttrs_node_name_set)
    __swig_setmethods__["port_name"] = _vmkctl.FcAttrs_port_name_set
    __swig_getmethods__["port_name"] = _vmkctl.FcAttrs_port_name_get
    if _newclass:port_name = _swig_property(_vmkctl.FcAttrs_port_name_get, _vmkctl.FcAttrs_port_name_set)
    __swig_setmethods__["speed"] = _vmkctl.FcAttrs_speed_set
    __swig_getmethods__["speed"] = _vmkctl.FcAttrs_speed_get
    if _newclass:speed = _swig_property(_vmkctl.FcAttrs_speed_get, _vmkctl.FcAttrs_speed_set)
    __swig_setmethods__["port_type"] = _vmkctl.FcAttrs_port_type_set
    __swig_getmethods__["port_type"] = _vmkctl.FcAttrs_port_type_get
    if _newclass:port_type = _swig_property(_vmkctl.FcAttrs_port_type_get, _vmkctl.FcAttrs_port_type_set)
    __swig_setmethods__["port_state"] = _vmkctl.FcAttrs_port_state_set
    __swig_getmethods__["port_state"] = _vmkctl.FcAttrs_port_state_get
    if _newclass:port_state = _swig_property(_vmkctl.FcAttrs_port_state_get, _vmkctl.FcAttrs_port_state_set)
    __swig_setmethods__["fabric_name"] = _vmkctl.FcAttrs_fabric_name_set
    __swig_getmethods__["fabric_name"] = _vmkctl.FcAttrs_fabric_name_get
    if _newclass:fabric_name = _swig_property(_vmkctl.FcAttrs_fabric_name_get, _vmkctl.FcAttrs_fabric_name_set)
    __swig_setmethods__["max_frame_size"] = _vmkctl.FcAttrs_max_frame_size_set
    __swig_getmethods__["max_frame_size"] = _vmkctl.FcAttrs_max_frame_size_get
    if _newclass:max_frame_size = _swig_property(_vmkctl.FcAttrs_max_frame_size_get, _vmkctl.FcAttrs_max_frame_size_set)
    __swig_setmethods__["supported_speeds"] = _vmkctl.FcAttrs_supported_speeds_set
    __swig_getmethods__["supported_speeds"] = _vmkctl.FcAttrs_supported_speeds_get
    if _newclass:supported_speeds = _swig_property(_vmkctl.FcAttrs_supported_speeds_get, _vmkctl.FcAttrs_supported_speeds_set)
    def __init__(self): 
        this = _vmkctl.new_FcAttrs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_FcAttrs
    __del__ = lambda self : None;
FcAttrs_swigregister = _vmkctl.FcAttrs_swigregister
FcAttrs_swigregister(FcAttrs)

class FcScsiEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FcScsiEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FcScsiEvent, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sec"] = _vmkctl.FcScsiEvent_sec_set
    __swig_getmethods__["sec"] = _vmkctl.FcScsiEvent_sec_get
    if _newclass:sec = _swig_property(_vmkctl.FcScsiEvent_sec_get, _vmkctl.FcScsiEvent_sec_set)
    __swig_setmethods__["usec"] = _vmkctl.FcScsiEvent_usec_set
    __swig_getmethods__["usec"] = _vmkctl.FcScsiEvent_usec_get
    if _newclass:usec = _swig_property(_vmkctl.FcScsiEvent_usec_get, _vmkctl.FcScsiEvent_usec_set)
    __swig_setmethods__["id"] = _vmkctl.FcScsiEvent_id_set
    __swig_getmethods__["id"] = _vmkctl.FcScsiEvent_id_get
    if _newclass:id = _swig_property(_vmkctl.FcScsiEvent_id_get, _vmkctl.FcScsiEvent_id_set)
    __swig_setmethods__["cmd"] = _vmkctl.FcScsiEvent_cmd_set
    __swig_getmethods__["cmd"] = _vmkctl.FcScsiEvent_cmd_get
    if _newclass:cmd = _swig_property(_vmkctl.FcScsiEvent_cmd_get, _vmkctl.FcScsiEvent_cmd_set)
    __swig_setmethods__["status"] = _vmkctl.FcScsiEvent_status_set
    __swig_getmethods__["status"] = _vmkctl.FcScsiEvent_status_get
    if _newclass:status = _swig_property(_vmkctl.FcScsiEvent_status_get, _vmkctl.FcScsiEvent_status_set)
    __swig_setmethods__["channel"] = _vmkctl.FcScsiEvent_channel_set
    __swig_getmethods__["channel"] = _vmkctl.FcScsiEvent_channel_get
    if _newclass:channel = _swig_property(_vmkctl.FcScsiEvent_channel_get, _vmkctl.FcScsiEvent_channel_set)
    __swig_setmethods__["target"] = _vmkctl.FcScsiEvent_target_set
    __swig_getmethods__["target"] = _vmkctl.FcScsiEvent_target_get
    if _newclass:target = _swig_property(_vmkctl.FcScsiEvent_target_get, _vmkctl.FcScsiEvent_target_set)
    __swig_setmethods__["lun"] = _vmkctl.FcScsiEvent_lun_set
    __swig_getmethods__["lun"] = _vmkctl.FcScsiEvent_lun_get
    if _newclass:lun = _swig_property(_vmkctl.FcScsiEvent_lun_get, _vmkctl.FcScsiEvent_lun_set)
    __swig_setmethods__["cc"] = _vmkctl.FcScsiEvent_cc_set
    __swig_getmethods__["cc"] = _vmkctl.FcScsiEvent_cc_get
    if _newclass:cc = _swig_property(_vmkctl.FcScsiEvent_cc_get, _vmkctl.FcScsiEvent_cc_set)
    __swig_setmethods__["sense"] = _vmkctl.FcScsiEvent_sense_set
    __swig_getmethods__["sense"] = _vmkctl.FcScsiEvent_sense_get
    if _newclass:sense = _swig_property(_vmkctl.FcScsiEvent_sense_get, _vmkctl.FcScsiEvent_sense_set)
    __swig_setmethods__["flags"] = _vmkctl.FcScsiEvent_flags_set
    __swig_getmethods__["flags"] = _vmkctl.FcScsiEvent_flags_get
    if _newclass:flags = _swig_property(_vmkctl.FcScsiEvent_flags_get, _vmkctl.FcScsiEvent_flags_set)
    __swig_setmethods__["data"] = _vmkctl.FcScsiEvent_data_set
    __swig_getmethods__["data"] = _vmkctl.FcScsiEvent_data_get
    if _newclass:data = _swig_property(_vmkctl.FcScsiEvent_data_get, _vmkctl.FcScsiEvent_data_set)
    def __init__(self): 
        this = _vmkctl.new_FcScsiEvent()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_FcScsiEvent
    __del__ = lambda self : None;
FcScsiEvent_swigregister = _vmkctl.FcScsiEvent_swigregister
FcScsiEvent_swigregister(FcScsiEvent)

class FibreChannelInterface(ScsiInterface):
    __swig_setmethods__ = {}
    for _s in [ScsiInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FibreChannelInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [ScsiInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FibreChannelInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    FC_STATE_UP = _vmkctl.FibreChannelInterface_FC_STATE_UP
    FC_STATE_DOWN = _vmkctl.FibreChannelInterface_FC_STATE_DOWN
    FC_STATE_READY = _vmkctl.FibreChannelInterface_FC_STATE_READY
    FC_STATE_OTHER = _vmkctl.FibreChannelInterface_FC_STATE_OTHER
    def GetWorldWidePortName(self) -> "uint64" : return _vmkctl.FibreChannelInterface_GetWorldWidePortName(self)
    def GetWorldWideNodeName(self) -> "uint64" : return _vmkctl.FibreChannelInterface_GetWorldWideNodeName(self)
    def GetLinkState(self) -> "HostCtl::Storage::FibreChannelInterface::FibreChannelState" : return _vmkctl.FibreChannelInterface_GetLinkState(self)
    def GetFcStats(self) -> "HostCtl::Storage::FcStats" : return _vmkctl.FibreChannelInterface_GetFcStats(self)
    def GetFcAttrs(self) -> "HostCtl::Storage::FcAttrs" : return _vmkctl.FibreChannelInterface_GetFcAttrs(self)
    def IssueLIP(self) -> "void" : return _vmkctl.FibreChannelInterface_IssueLIP(self)
    def ClearEvents(self, *args) -> "void" : return _vmkctl.FibreChannelInterface_ClearEvents(self, *args)
    def GetEvents(self) -> "std::vector< HostCtl::Storage::FcScsiEvent,std::allocator< HostCtl::Storage::FcScsiEvent > >" : return _vmkctl.FibreChannelInterface_GetEvents(self)
    def GetStringLogEntry(self, *args) -> "std::string" : return _vmkctl.FibreChannelInterface_GetStringLogEntry(self, *args)
    __swig_destroy__ = _vmkctl.delete_FibreChannelInterface
    __del__ = lambda self : None;
FibreChannelInterface_swigregister = _vmkctl.FibreChannelInterface_swigregister
FibreChannelInterface_swigregister(FibreChannelInterface)

class FibreChannelInterfaceImpl(FibreChannelInterface,ScsiInterfaceImpl):
    __swig_setmethods__ = {}
    for _s in [FibreChannelInterface,ScsiInterfaceImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FibreChannelInterfaceImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [FibreChannelInterface,ScsiInterfaceImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FibreChannelInterfaceImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_FibreChannelInterfaceImpl
    __del__ = lambda self : None;
    def GetInterfaceType(self) -> "ScsiInterface::ScsiInterfaceType" : return _vmkctl.FibreChannelInterfaceImpl_GetInterfaceType(self)
    def GetWorldWidePortName(self) -> "uint64" : return _vmkctl.FibreChannelInterfaceImpl_GetWorldWidePortName(self)
    def GetWorldWideNodeName(self) -> "uint64" : return _vmkctl.FibreChannelInterfaceImpl_GetWorldWideNodeName(self)
    def GetLinkState(self) -> "HostCtl::Storage::FibreChannelInterface::FibreChannelState" : return _vmkctl.FibreChannelInterfaceImpl_GetLinkState(self)
    def GetFcStats(self) -> "HostCtl::Storage::FcStats" : return _vmkctl.FibreChannelInterfaceImpl_GetFcStats(self)
    def GetFcAttrs(self) -> "HostCtl::Storage::FcAttrs" : return _vmkctl.FibreChannelInterfaceImpl_GetFcAttrs(self)
    def IssueLIP(self) -> "void" : return _vmkctl.FibreChannelInterfaceImpl_IssueLIP(self)
    def ClearEvents(self, *args) -> "void" : return _vmkctl.FibreChannelInterfaceImpl_ClearEvents(self, *args)
    def GetEvents(self) -> "std::vector< HostCtl::Storage::FcScsiEvent,std::allocator< HostCtl::Storage::FcScsiEvent > >" : return _vmkctl.FibreChannelInterfaceImpl_GetEvents(self)
    def GetStringLogEntry(self, *args) -> "std::string" : return _vmkctl.FibreChannelInterfaceImpl_GetStringLogEntry(self, *args)
    def GetTransportMapping(self, *args) -> "HostCtl::Storage::TransportMappingPtr" : return _vmkctl.FibreChannelInterfaceImpl_GetTransportMapping(self, *args)
    def IsVirtual(self) -> "bool" : return _vmkctl.FibreChannelInterfaceImpl_IsVirtual(self)
    def Refresh(self) -> "void" : return _vmkctl.FibreChannelInterfaceImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.FibreChannelInterfaceImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.FibreChannelInterfaceImpl_Print(self, *args)
    __swig_getmethods__["GetWorldWideNumberFromString"] = lambda x: _vmkctl.FibreChannelInterfaceImpl_GetWorldWideNumberFromString
    if _newclass:GetWorldWideNumberFromString = staticmethod(_vmkctl.FibreChannelInterfaceImpl_GetWorldWideNumberFromString)
    __swig_getmethods__["GetWorldWideNumberStringFromInt"] = lambda x: _vmkctl.FibreChannelInterfaceImpl_GetWorldWideNumberStringFromInt
    if _newclass:GetWorldWideNumberStringFromInt = staticmethod(_vmkctl.FibreChannelInterfaceImpl_GetWorldWideNumberStringFromInt)
FibreChannelInterfaceImpl_swigregister = _vmkctl.FibreChannelInterfaceImpl_swigregister
FibreChannelInterfaceImpl_swigregister(FibreChannelInterfaceImpl)

def FibreChannelInterfaceImpl_GetWorldWideNumberFromString(*args) -> "uint64" :
  return _vmkctl.FibreChannelInterfaceImpl_GetWorldWideNumberFromString(*args)
FibreChannelInterfaceImpl_GetWorldWideNumberFromString = _vmkctl.FibreChannelInterfaceImpl_GetWorldWideNumberFromString

def FibreChannelInterfaceImpl_GetWorldWideNumberStringFromInt(*args) -> "std::string" :
  return _vmkctl.FibreChannelInterfaceImpl_GetWorldWideNumberStringFromInt(*args)
FibreChannelInterfaceImpl_GetWorldWideNumberStringFromInt = _vmkctl.FibreChannelInterfaceImpl_GetWorldWideNumberStringFromInt

class FcoeStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FcoeStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FcoeStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["TxFrames"] = _vmkctl.FcoeStats_TxFrames_set
    __swig_getmethods__["TxFrames"] = _vmkctl.FcoeStats_TxFrames_get
    if _newclass:TxFrames = _swig_property(_vmkctl.FcoeStats_TxFrames_get, _vmkctl.FcoeStats_TxFrames_set)
    __swig_setmethods__["RxFrames"] = _vmkctl.FcoeStats_RxFrames_set
    __swig_getmethods__["RxFrames"] = _vmkctl.FcoeStats_RxFrames_get
    if _newclass:RxFrames = _swig_property(_vmkctl.FcoeStats_RxFrames_get, _vmkctl.FcoeStats_RxFrames_set)
    __swig_setmethods__["ErrorFrames"] = _vmkctl.FcoeStats_ErrorFrames_set
    __swig_getmethods__["ErrorFrames"] = _vmkctl.FcoeStats_ErrorFrames_get
    if _newclass:ErrorFrames = _swig_property(_vmkctl.FcoeStats_ErrorFrames_get, _vmkctl.FcoeStats_ErrorFrames_set)
    __swig_setmethods__["DumpedFrames"] = _vmkctl.FcoeStats_DumpedFrames_set
    __swig_getmethods__["DumpedFrames"] = _vmkctl.FcoeStats_DumpedFrames_get
    if _newclass:DumpedFrames = _swig_property(_vmkctl.FcoeStats_DumpedFrames_get, _vmkctl.FcoeStats_DumpedFrames_set)
    __swig_setmethods__["LinkFailureCount"] = _vmkctl.FcoeStats_LinkFailureCount_set
    __swig_getmethods__["LinkFailureCount"] = _vmkctl.FcoeStats_LinkFailureCount_get
    if _newclass:LinkFailureCount = _swig_property(_vmkctl.FcoeStats_LinkFailureCount_get, _vmkctl.FcoeStats_LinkFailureCount_set)
    __swig_setmethods__["LossOfSignalCount"] = _vmkctl.FcoeStats_LossOfSignalCount_set
    __swig_getmethods__["LossOfSignalCount"] = _vmkctl.FcoeStats_LossOfSignalCount_get
    if _newclass:LossOfSignalCount = _swig_property(_vmkctl.FcoeStats_LossOfSignalCount_get, _vmkctl.FcoeStats_LossOfSignalCount_set)
    __swig_setmethods__["InvalidTxWordCount"] = _vmkctl.FcoeStats_InvalidTxWordCount_set
    __swig_getmethods__["InvalidTxWordCount"] = _vmkctl.FcoeStats_InvalidTxWordCount_get
    if _newclass:InvalidTxWordCount = _swig_property(_vmkctl.FcoeStats_InvalidTxWordCount_get, _vmkctl.FcoeStats_InvalidTxWordCount_set)
    __swig_setmethods__["InvalidCRCCount"] = _vmkctl.FcoeStats_InvalidCRCCount_set
    __swig_getmethods__["InvalidCRCCount"] = _vmkctl.FcoeStats_InvalidCRCCount_get
    if _newclass:InvalidCRCCount = _swig_property(_vmkctl.FcoeStats_InvalidCRCCount_get, _vmkctl.FcoeStats_InvalidCRCCount_set)
    __swig_setmethods__["VLinkFailureCount"] = _vmkctl.FcoeStats_VLinkFailureCount_set
    __swig_getmethods__["VLinkFailureCount"] = _vmkctl.FcoeStats_VLinkFailureCount_get
    if _newclass:VLinkFailureCount = _swig_property(_vmkctl.FcoeStats_VLinkFailureCount_get, _vmkctl.FcoeStats_VLinkFailureCount_set)
    __swig_setmethods__["MissDiscAdvCount"] = _vmkctl.FcoeStats_MissDiscAdvCount_set
    __swig_getmethods__["MissDiscAdvCount"] = _vmkctl.FcoeStats_MissDiscAdvCount_get
    if _newclass:MissDiscAdvCount = _swig_property(_vmkctl.FcoeStats_MissDiscAdvCount_get, _vmkctl.FcoeStats_MissDiscAdvCount_set)
    __swig_setmethods__["InputRequests"] = _vmkctl.FcoeStats_InputRequests_set
    __swig_getmethods__["InputRequests"] = _vmkctl.FcoeStats_InputRequests_get
    if _newclass:InputRequests = _swig_property(_vmkctl.FcoeStats_InputRequests_get, _vmkctl.FcoeStats_InputRequests_set)
    __swig_setmethods__["OutputRequests"] = _vmkctl.FcoeStats_OutputRequests_set
    __swig_getmethods__["OutputRequests"] = _vmkctl.FcoeStats_OutputRequests_get
    if _newclass:OutputRequests = _swig_property(_vmkctl.FcoeStats_OutputRequests_get, _vmkctl.FcoeStats_OutputRequests_set)
    __swig_setmethods__["ControlRequests"] = _vmkctl.FcoeStats_ControlRequests_set
    __swig_getmethods__["ControlRequests"] = _vmkctl.FcoeStats_ControlRequests_get
    if _newclass:ControlRequests = _swig_property(_vmkctl.FcoeStats_ControlRequests_get, _vmkctl.FcoeStats_ControlRequests_set)
    def __init__(self): 
        this = _vmkctl.new_FcoeStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_FcoeStats
    __del__ = lambda self : None;
FcoeStats_swigregister = _vmkctl.FcoeStats_swigregister
FcoeStats_swigregister(FcoeStats)

class FcoeAttrs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FcoeAttrs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FcoeAttrs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["manufacturer"] = _vmkctl.FcoeAttrs_manufacturer_set
    __swig_getmethods__["manufacturer"] = _vmkctl.FcoeAttrs_manufacturer_get
    if _newclass:manufacturer = _swig_property(_vmkctl.FcoeAttrs_manufacturer_get, _vmkctl.FcoeAttrs_manufacturer_set)
    __swig_setmethods__["serial_number"] = _vmkctl.FcoeAttrs_serial_number_set
    __swig_getmethods__["serial_number"] = _vmkctl.FcoeAttrs_serial_number_get
    if _newclass:serial_number = _swig_property(_vmkctl.FcoeAttrs_serial_number_get, _vmkctl.FcoeAttrs_serial_number_set)
    __swig_setmethods__["model"] = _vmkctl.FcoeAttrs_model_set
    __swig_getmethods__["model"] = _vmkctl.FcoeAttrs_model_get
    if _newclass:model = _swig_property(_vmkctl.FcoeAttrs_model_get, _vmkctl.FcoeAttrs_model_set)
    __swig_setmethods__["model_description"] = _vmkctl.FcoeAttrs_model_description_set
    __swig_getmethods__["model_description"] = _vmkctl.FcoeAttrs_model_description_get
    if _newclass:model_description = _swig_property(_vmkctl.FcoeAttrs_model_description_get, _vmkctl.FcoeAttrs_model_description_set)
    __swig_setmethods__["node_symbolic_name"] = _vmkctl.FcoeAttrs_node_symbolic_name_set
    __swig_getmethods__["node_symbolic_name"] = _vmkctl.FcoeAttrs_node_symbolic_name_get
    if _newclass:node_symbolic_name = _swig_property(_vmkctl.FcoeAttrs_node_symbolic_name_get, _vmkctl.FcoeAttrs_node_symbolic_name_set)
    __swig_setmethods__["hardware_version"] = _vmkctl.FcoeAttrs_hardware_version_set
    __swig_getmethods__["hardware_version"] = _vmkctl.FcoeAttrs_hardware_version_get
    if _newclass:hardware_version = _swig_property(_vmkctl.FcoeAttrs_hardware_version_get, _vmkctl.FcoeAttrs_hardware_version_set)
    __swig_setmethods__["driver_version"] = _vmkctl.FcoeAttrs_driver_version_set
    __swig_getmethods__["driver_version"] = _vmkctl.FcoeAttrs_driver_version_get
    if _newclass:driver_version = _swig_property(_vmkctl.FcoeAttrs_driver_version_get, _vmkctl.FcoeAttrs_driver_version_set)
    __swig_setmethods__["option_rom_version"] = _vmkctl.FcoeAttrs_option_rom_version_set
    __swig_getmethods__["option_rom_version"] = _vmkctl.FcoeAttrs_option_rom_version_get
    if _newclass:option_rom_version = _swig_property(_vmkctl.FcoeAttrs_option_rom_version_get, _vmkctl.FcoeAttrs_option_rom_version_set)
    __swig_setmethods__["firmware_version"] = _vmkctl.FcoeAttrs_firmware_version_set
    __swig_getmethods__["firmware_version"] = _vmkctl.FcoeAttrs_firmware_version_get
    if _newclass:firmware_version = _swig_property(_vmkctl.FcoeAttrs_firmware_version_get, _vmkctl.FcoeAttrs_firmware_version_set)
    __swig_setmethods__["driver_name"] = _vmkctl.FcoeAttrs_driver_name_set
    __swig_getmethods__["driver_name"] = _vmkctl.FcoeAttrs_driver_name_get
    if _newclass:driver_name = _swig_property(_vmkctl.FcoeAttrs_driver_name_get, _vmkctl.FcoeAttrs_driver_name_set)
    __swig_setmethods__["vendor_specific_id"] = _vmkctl.FcoeAttrs_vendor_specific_id_set
    __swig_getmethods__["vendor_specific_id"] = _vmkctl.FcoeAttrs_vendor_specific_id_get
    if _newclass:vendor_specific_id = _swig_property(_vmkctl.FcoeAttrs_vendor_specific_id_get, _vmkctl.FcoeAttrs_vendor_specific_id_set)
    __swig_setmethods__["port_id"] = _vmkctl.FcoeAttrs_port_id_set
    __swig_getmethods__["port_id"] = _vmkctl.FcoeAttrs_port_id_get
    if _newclass:port_id = _swig_property(_vmkctl.FcoeAttrs_port_id_get, _vmkctl.FcoeAttrs_port_id_set)
    __swig_setmethods__["node_name"] = _vmkctl.FcoeAttrs_node_name_set
    __swig_getmethods__["node_name"] = _vmkctl.FcoeAttrs_node_name_get
    if _newclass:node_name = _swig_property(_vmkctl.FcoeAttrs_node_name_get, _vmkctl.FcoeAttrs_node_name_set)
    __swig_setmethods__["port_name"] = _vmkctl.FcoeAttrs_port_name_set
    __swig_getmethods__["port_name"] = _vmkctl.FcoeAttrs_port_name_get
    if _newclass:port_name = _swig_property(_vmkctl.FcoeAttrs_port_name_get, _vmkctl.FcoeAttrs_port_name_set)
    __swig_setmethods__["speed"] = _vmkctl.FcoeAttrs_speed_set
    __swig_getmethods__["speed"] = _vmkctl.FcoeAttrs_speed_get
    if _newclass:speed = _swig_property(_vmkctl.FcoeAttrs_speed_get, _vmkctl.FcoeAttrs_speed_set)
    __swig_setmethods__["port_type"] = _vmkctl.FcoeAttrs_port_type_set
    __swig_getmethods__["port_type"] = _vmkctl.FcoeAttrs_port_type_get
    if _newclass:port_type = _swig_property(_vmkctl.FcoeAttrs_port_type_get, _vmkctl.FcoeAttrs_port_type_set)
    __swig_setmethods__["port_state"] = _vmkctl.FcoeAttrs_port_state_set
    __swig_getmethods__["port_state"] = _vmkctl.FcoeAttrs_port_state_get
    if _newclass:port_state = _swig_property(_vmkctl.FcoeAttrs_port_state_get, _vmkctl.FcoeAttrs_port_state_set)
    __swig_setmethods__["fabric_name"] = _vmkctl.FcoeAttrs_fabric_name_set
    __swig_getmethods__["fabric_name"] = _vmkctl.FcoeAttrs_fabric_name_get
    if _newclass:fabric_name = _swig_property(_vmkctl.FcoeAttrs_fabric_name_get, _vmkctl.FcoeAttrs_fabric_name_set)
    __swig_setmethods__["max_frame_size"] = _vmkctl.FcoeAttrs_max_frame_size_set
    __swig_getmethods__["max_frame_size"] = _vmkctl.FcoeAttrs_max_frame_size_get
    if _newclass:max_frame_size = _swig_property(_vmkctl.FcoeAttrs_max_frame_size_get, _vmkctl.FcoeAttrs_max_frame_size_set)
    __swig_setmethods__["supported_speeds"] = _vmkctl.FcoeAttrs_supported_speeds_set
    __swig_getmethods__["supported_speeds"] = _vmkctl.FcoeAttrs_supported_speeds_get
    if _newclass:supported_speeds = _swig_property(_vmkctl.FcoeAttrs_supported_speeds_get, _vmkctl.FcoeAttrs_supported_speeds_set)
    __swig_setmethods__["fcoeContlrMacAddr"] = _vmkctl.FcoeAttrs_fcoeContlrMacAddr_set
    __swig_getmethods__["fcoeContlrMacAddr"] = _vmkctl.FcoeAttrs_fcoeContlrMacAddr_get
    if _newclass:fcoeContlrMacAddr = _swig_property(_vmkctl.FcoeAttrs_fcoeContlrMacAddr_get, _vmkctl.FcoeAttrs_fcoeContlrMacAddr_set)
    __swig_setmethods__["fcfMacAddr"] = _vmkctl.FcoeAttrs_fcfMacAddr_set
    __swig_getmethods__["fcfMacAddr"] = _vmkctl.FcoeAttrs_fcfMacAddr_get
    if _newclass:fcfMacAddr = _swig_property(_vmkctl.FcoeAttrs_fcfMacAddr_get, _vmkctl.FcoeAttrs_fcfMacAddr_set)
    __swig_setmethods__["vnPortMacAddr"] = _vmkctl.FcoeAttrs_vnPortMacAddr_set
    __swig_getmethods__["vnPortMacAddr"] = _vmkctl.FcoeAttrs_vnPortMacAddr_get
    if _newclass:vnPortMacAddr = _swig_property(_vmkctl.FcoeAttrs_vnPortMacAddr_get, _vmkctl.FcoeAttrs_vnPortMacAddr_set)
    __swig_setmethods__["vlanId"] = _vmkctl.FcoeAttrs_vlanId_set
    __swig_getmethods__["vlanId"] = _vmkctl.FcoeAttrs_vlanId_get
    if _newclass:vlanId = _swig_property(_vmkctl.FcoeAttrs_vlanId_get, _vmkctl.FcoeAttrs_vlanId_set)
    __swig_setmethods__["vmnicName"] = _vmkctl.FcoeAttrs_vmnicName_set
    __swig_getmethods__["vmnicName"] = _vmkctl.FcoeAttrs_vmnicName_get
    if _newclass:vmnicName = _swig_property(_vmkctl.FcoeAttrs_vmnicName_get, _vmkctl.FcoeAttrs_vmnicName_set)
    def __init__(self): 
        this = _vmkctl.new_FcoeAttrs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_FcoeAttrs
    __del__ = lambda self : None;
FcoeAttrs_swigregister = _vmkctl.FcoeAttrs_swigregister
FcoeAttrs_swigregister(FcoeAttrs)

class FibreChannelOverEthernetInterface(FibreChannelInterface):
    __swig_setmethods__ = {}
    for _s in [FibreChannelInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FibreChannelOverEthernetInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [FibreChannelInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FibreChannelOverEthernetInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetFcoePnic(self) -> "HostCtl::Network::FcoePnicPtr" : return _vmkctl.FibreChannelOverEthernetInterface_GetFcoePnic(self)
    def RemoveFcoeHba(self) -> "void" : return _vmkctl.FibreChannelOverEthernetInterface_RemoveFcoeHba(self)
    def GetVNPortMacAddress(self) -> "HostCtl::Network::MacAddress" : return _vmkctl.FibreChannelOverEthernetInterface_GetVNPortMacAddress(self)
    def GetFCFMacAddress(self) -> "HostCtl::Network::MacAddress" : return _vmkctl.FibreChannelOverEthernetInterface_GetFCFMacAddress(self)
    def GetVlanId(self) -> "uint16" : return _vmkctl.FibreChannelOverEthernetInterface_GetVlanId(self)
    def GetStats(self) -> "HostCtl::Storage::FcoeStats" : return _vmkctl.FibreChannelOverEthernetInterface_GetStats(self)
    def GetAttrs(self) -> "HostCtl::Storage::FcoeAttrs" : return _vmkctl.FibreChannelOverEthernetInterface_GetAttrs(self)
    def IssueLIP(self) -> "void" : return _vmkctl.FibreChannelOverEthernetInterface_IssueLIP(self)
    def ClearEvents(self, *args) -> "void" : return _vmkctl.FibreChannelOverEthernetInterface_ClearEvents(self, *args)
    def GetEvents(self) -> "std::vector< HostCtl::Storage::FcScsiEvent,std::allocator< HostCtl::Storage::FcScsiEvent > >" : return _vmkctl.FibreChannelOverEthernetInterface_GetEvents(self)
    def GetStringLogEntry(self, *args) -> "std::string" : return _vmkctl.FibreChannelOverEthernetInterface_GetStringLogEntry(self, *args)
    def IsSoftwareFcoe(self) -> "bool" : return _vmkctl.FibreChannelOverEthernetInterface_IsSoftwareFcoe(self)
    __swig_destroy__ = _vmkctl.delete_FibreChannelOverEthernetInterface
    __del__ = lambda self : None;
FibreChannelOverEthernetInterface_swigregister = _vmkctl.FibreChannelOverEthernetInterface_swigregister
FibreChannelOverEthernetInterface_swigregister(FibreChannelOverEthernetInterface)

class FileSystem(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FileSystem, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    MountOperationNoOptions = _vmkctl.FileSystem_MountOperationNoOptions
    MountOperationDontPersistState = _vmkctl.FileSystem_MountOperationDontPersistState
    MountOperationDontPersistStateLite = _vmkctl.FileSystem_MountOperationDontPersistStateLite
    UnmountStatusSuccess = _vmkctl.FileSystem_UnmountStatusSuccess
    UnmountStatusBusy = _vmkctl.FileSystem_UnmountStatusBusy
    UnmountStatusUnknown = _vmkctl.FileSystem_UnmountStatusUnknown
    def Mount(self, *args) -> "void" : return _vmkctl.FileSystem_Mount(self, *args)
    def Unmount(self, *args) -> "HostCtl::Storage::FileSystem::UnmountStatus" : return _vmkctl.FileSystem_Unmount(self, *args)
    def IsMounted(self) -> "bool" : return _vmkctl.FileSystem_IsMounted(self)
    def IsAutomountEligible(self) -> "bool" : return _vmkctl.FileSystem_IsAutomountEligible(self)
    def GetSize(self) -> "uint64" : return _vmkctl.FileSystem_GetSize(self)
    def GetVolumeUsage(self) -> "uint64" : return _vmkctl.FileSystem_GetVolumeUsage(self)
    def GetType(self) -> "std::string" : return _vmkctl.FileSystem_GetType(self)
    def GetConsolePath(self) -> "std::string" : return _vmkctl.FileSystem_GetConsolePath(self)
    def GetVolumeName(self) -> "std::string" : return _vmkctl.FileSystem_GetVolumeName(self)
    def GetUuid(self) -> "std::string" : return _vmkctl.FileSystem_GetUuid(self)
    __swig_destroy__ = _vmkctl.delete_FileSystem
    __del__ = lambda self : None;
FileSystem_swigregister = _vmkctl.FileSystem_swigregister
FileSystem_swigregister(FileSystem)

class VFATFileSystem(FileSystem):
    __swig_setmethods__ = {}
    for _s in [FileSystem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VFATFileSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [FileSystem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VFATFileSystem, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetType(self) -> "std::string" : return _vmkctl.VFATFileSystem_GetType(self)
    def GetBlockSize(self) -> "uint64" : return _vmkctl.VFATFileSystem_GetBlockSize(self)
    def GetTotalBlocks(self) -> "uint64" : return _vmkctl.VFATFileSystem_GetTotalBlocks(self)
    def GetBlocksUsed(self) -> "uint64" : return _vmkctl.VFATFileSystem_GetBlocksUsed(self)
    def GetVolumeName(self) -> "std::string" : return _vmkctl.VFATFileSystem_GetVolumeName(self)
    def GetUuid(self) -> "std::string" : return _vmkctl.VFATFileSystem_GetUuid(self)
    def GetHeadExtentName(self) -> "std::string" : return _vmkctl.VFATFileSystem_GetHeadExtentName(self)
    def GetHeadPartition(self) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.VFATFileSystem_GetHeadPartition(self)
    __swig_destroy__ = _vmkctl.delete_VFATFileSystem
    __del__ = lambda self : None;
VFATFileSystem_swigregister = _vmkctl.VFATFileSystem_swigregister
VFATFileSystem_swigregister(VFATFileSystem)

class VFATFileSystemImpl(VFATFileSystem,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [VFATFileSystem,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VFATFileSystemImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [VFATFileSystem,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VFATFileSystemImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_VFATFileSystemImpl
    __del__ = lambda self : None;
    def Mount(self, *args) -> "void" : return _vmkctl.VFATFileSystemImpl_Mount(self, *args)
    def Unmount(self, *args) -> "HostCtl::Storage::FileSystem::UnmountStatus" : return _vmkctl.VFATFileSystemImpl_Unmount(self, *args)
    def IsMounted(self) -> "bool" : return _vmkctl.VFATFileSystemImpl_IsMounted(self)
    def IsAutomountEligible(self) -> "bool" : return _vmkctl.VFATFileSystemImpl_IsAutomountEligible(self)
    def GetType(self) -> "std::string" : return _vmkctl.VFATFileSystemImpl_GetType(self)
    def GetSize(self) -> "uint64" : return _vmkctl.VFATFileSystemImpl_GetSize(self)
    def GetVolumeName(self) -> "std::string" : return _vmkctl.VFATFileSystemImpl_GetVolumeName(self)
    def GetVolumeUsage(self) -> "uint64" : return _vmkctl.VFATFileSystemImpl_GetVolumeUsage(self)
    def GetConsolePath(self) -> "std::string" : return _vmkctl.VFATFileSystemImpl_GetConsolePath(self)
    def GetBlockSize(self) -> "uint64" : return _vmkctl.VFATFileSystemImpl_GetBlockSize(self)
    def GetTotalBlocks(self) -> "uint64" : return _vmkctl.VFATFileSystemImpl_GetTotalBlocks(self)
    def GetBlocksUsed(self) -> "uint64" : return _vmkctl.VFATFileSystemImpl_GetBlocksUsed(self)
    def GetHeadExtentName(self) -> "std::string" : return _vmkctl.VFATFileSystemImpl_GetHeadExtentName(self)
    def GetHeadPartition(self) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.VFATFileSystemImpl_GetHeadPartition(self)
    def GetUuid(self) -> "std::string" : return _vmkctl.VFATFileSystemImpl_GetUuid(self)
    def Refresh(self) -> "void" : return _vmkctl.VFATFileSystemImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.VFATFileSystemImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.VFATFileSystemImpl_Print(self, *args)
VFATFileSystemImpl_swigregister = _vmkctl.VFATFileSystemImpl_swigregister
VFATFileSystemImpl_swigregister(VFATFileSystemImpl)
VFATFileSystemImpl.VFAT_TYPE = _vmkctl.cvar.VFATFileSystemImpl_VFAT_TYPE

class UFSFileSystem(FileSystem):
    __swig_setmethods__ = {}
    for _s in [FileSystem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UFSFileSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [FileSystem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UFSFileSystem, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetType(self) -> "std::string" : return _vmkctl.UFSFileSystem_GetType(self)
    def GetBlockSize(self) -> "uint64" : return _vmkctl.UFSFileSystem_GetBlockSize(self)
    def GetTotalBlocks(self) -> "uint64" : return _vmkctl.UFSFileSystem_GetTotalBlocks(self)
    def GetBlocksUsed(self) -> "uint64" : return _vmkctl.UFSFileSystem_GetBlocksUsed(self)
    def GetVolumeName(self) -> "std::string" : return _vmkctl.UFSFileSystem_GetVolumeName(self)
    def GetUuid(self) -> "std::string" : return _vmkctl.UFSFileSystem_GetUuid(self)
    def GetHeadExtentName(self) -> "std::string" : return _vmkctl.UFSFileSystem_GetHeadExtentName(self)
    def GetHeadPartition(self) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.UFSFileSystem_GetHeadPartition(self)
    __swig_destroy__ = _vmkctl.delete_UFSFileSystem
    __del__ = lambda self : None;
UFSFileSystem_swigregister = _vmkctl.UFSFileSystem_swigregister
UFSFileSystem_swigregister(UFSFileSystem)

class UFSFileSystemImpl(UFSFileSystem,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [UFSFileSystem,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UFSFileSystemImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [UFSFileSystem,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UFSFileSystemImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_UFSFileSystemImpl
    __del__ = lambda self : None;
    def Mount(self, *args) -> "void" : return _vmkctl.UFSFileSystemImpl_Mount(self, *args)
    def Unmount(self, *args) -> "HostCtl::Storage::FileSystem::UnmountStatus" : return _vmkctl.UFSFileSystemImpl_Unmount(self, *args)
    def IsMounted(self) -> "bool" : return _vmkctl.UFSFileSystemImpl_IsMounted(self)
    def IsAutomountEligible(self) -> "bool" : return _vmkctl.UFSFileSystemImpl_IsAutomountEligible(self)
    def GetType(self) -> "std::string" : return _vmkctl.UFSFileSystemImpl_GetType(self)
    def GetSize(self) -> "uint64" : return _vmkctl.UFSFileSystemImpl_GetSize(self)
    def GetVolumeName(self) -> "std::string" : return _vmkctl.UFSFileSystemImpl_GetVolumeName(self)
    def GetVolumeUsage(self) -> "uint64" : return _vmkctl.UFSFileSystemImpl_GetVolumeUsage(self)
    def GetConsolePath(self) -> "std::string" : return _vmkctl.UFSFileSystemImpl_GetConsolePath(self)
    def GetBlockSize(self) -> "uint64" : return _vmkctl.UFSFileSystemImpl_GetBlockSize(self)
    def GetTotalBlocks(self) -> "uint64" : return _vmkctl.UFSFileSystemImpl_GetTotalBlocks(self)
    def GetBlocksUsed(self) -> "uint64" : return _vmkctl.UFSFileSystemImpl_GetBlocksUsed(self)
    def GetHeadExtentName(self) -> "std::string" : return _vmkctl.UFSFileSystemImpl_GetHeadExtentName(self)
    def GetHeadPartition(self) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.UFSFileSystemImpl_GetHeadPartition(self)
    def GetUuid(self) -> "std::string" : return _vmkctl.UFSFileSystemImpl_GetUuid(self)
    def Refresh(self) -> "void" : return _vmkctl.UFSFileSystemImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.UFSFileSystemImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.UFSFileSystemImpl_Print(self, *args)
UFSFileSystemImpl_swigregister = _vmkctl.UFSFileSystemImpl_swigregister
UFSFileSystemImpl_swigregister(UFSFileSystemImpl)
UFSFileSystemImpl.UFS_TYPE = _vmkctl.cvar.UFSFileSystemImpl_UFS_TYPE

class PMemFileSystem(FileSystem):
    __swig_setmethods__ = {}
    for _s in [FileSystem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PMemFileSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [FileSystem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PMemFileSystem, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Mount(self, *args) -> "void" : return _vmkctl.PMemFileSystem_Mount(self, *args)
    def Unmount(self, *args) -> "HostCtl::Storage::FileSystem::UnmountStatus" : return _vmkctl.PMemFileSystem_Unmount(self, *args)
    def IsMounted(self) -> "bool" : return _vmkctl.PMemFileSystem_IsMounted(self)
    def IsAutomountEligible(self) -> "bool" : return _vmkctl.PMemFileSystem_IsAutomountEligible(self)
    def GetSize(self) -> "uint64" : return _vmkctl.PMemFileSystem_GetSize(self)
    def GetVolumeUsage(self) -> "uint64" : return _vmkctl.PMemFileSystem_GetVolumeUsage(self)
    def GetType(self) -> "std::string" : return _vmkctl.PMemFileSystem_GetType(self)
    def GetConsolePath(self) -> "std::string" : return _vmkctl.PMemFileSystem_GetConsolePath(self)
    def GetVolumeName(self) -> "std::string" : return _vmkctl.PMemFileSystem_GetVolumeName(self)
    def GetUuid(self) -> "std::string" : return _vmkctl.PMemFileSystem_GetUuid(self)
    __swig_destroy__ = _vmkctl.delete_PMemFileSystem
    __del__ = lambda self : None;
PMemFileSystem_swigregister = _vmkctl.PMemFileSystem_swigregister
PMemFileSystem_swigregister(PMemFileSystem)

HOSTCTL_OSFS_PROVIDER_ID_LEN = _vmkctl.HOSTCTL_OSFS_PROVIDER_ID_LEN
HOSTCTL_OSFS_CONTAINER_ID_LEN = _vmkctl.HOSTCTL_OSFS_CONTAINER_ID_LEN
class ProviderId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProviderId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProviderId, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byte"] = _vmkctl.ProviderId_byte_set
    __swig_getmethods__["byte"] = _vmkctl.ProviderId_byte_get
    if _newclass:byte = _swig_property(_vmkctl.ProviderId_byte_get, _vmkctl.ProviderId_byte_set)
    __swig_setmethods__["ll"] = _vmkctl.ProviderId_ll_set
    __swig_getmethods__["ll"] = _vmkctl.ProviderId_ll_get
    if _newclass:ll = _swig_property(_vmkctl.ProviderId_ll_get, _vmkctl.ProviderId_ll_set)
    def __init__(self): 
        this = _vmkctl.new_ProviderId()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_ProviderId
    __del__ = lambda self : None;
ProviderId_swigregister = _vmkctl.ProviderId_swigregister
ProviderId_swigregister(ProviderId)

class ContainerId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContainerId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ContainerId, name)
    __repr__ = _swig_repr
    __swig_setmethods__["byte"] = _vmkctl.ContainerId_byte_set
    __swig_getmethods__["byte"] = _vmkctl.ContainerId_byte_get
    if _newclass:byte = _swig_property(_vmkctl.ContainerId_byte_get, _vmkctl.ContainerId_byte_set)
    __swig_setmethods__["ll"] = _vmkctl.ContainerId_ll_set
    __swig_getmethods__["ll"] = _vmkctl.ContainerId_ll_get
    if _newclass:ll = _swig_property(_vmkctl.ContainerId_ll_get, _vmkctl.ContainerId_ll_set)
    def __init__(self): 
        this = _vmkctl.new_ContainerId()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_ContainerId
    __del__ = lambda self : None;
ContainerId_swigregister = _vmkctl.ContainerId_swigregister
ContainerId_swigregister(ContainerId)

Normal = _vmkctl.Normal
High = _vmkctl.High
class ObjectStoreFileSystem(FileSystem):
    __swig_setmethods__ = {}
    for _s in [FileSystem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectStoreFileSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [FileSystem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectStoreFileSystem, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetVolumeName(self) -> "std::string" : return _vmkctl.ObjectStoreFileSystem_GetVolumeName(self)
    def GetUuid(self) -> "std::string" : return _vmkctl.ObjectStoreFileSystem_GetUuid(self)
    def CreateNamespace(self, *args) -> "void" : return _vmkctl.ObjectStoreFileSystem_CreateNamespace(self, *args)
    def DeleteNamespace(self, *args) -> "void" : return _vmkctl.ObjectStoreFileSystem_DeleteNamespace(self, *args)
    def UpdateNamespace(self, *args) -> "void" : return _vmkctl.ObjectStoreFileSystem_UpdateNamespace(self, *args)
    def MountNamespace(self, *args) -> "void" : return _vmkctl.ObjectStoreFileSystem_MountNamespace(self, *args)
    def UnmountNamespace(self, *args) -> "void" : return _vmkctl.ObjectStoreFileSystem_UnmountNamespace(self, *args)
    __swig_destroy__ = _vmkctl.delete_ObjectStoreFileSystem
    __del__ = lambda self : None;
ObjectStoreFileSystem_swigregister = _vmkctl.ObjectStoreFileSystem_swigregister
ObjectStoreFileSystem_swigregister(ObjectStoreFileSystem)

class VsanFileSystem(ObjectStoreFileSystem):
    __swig_setmethods__ = {}
    for _s in [ObjectStoreFileSystem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VsanFileSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [ObjectStoreFileSystem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VsanFileSystem, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetVsanUuid(self) -> "HostCtl::Vsan::Uuid" : return _vmkctl.VsanFileSystem_GetVsanUuid(self)
    def SetVsanDatastoreName(self, *args) -> "void" : return _vmkctl.VsanFileSystem_SetVsanDatastoreName(self, *args)
    __swig_destroy__ = _vmkctl.delete_VsanFileSystem
    __del__ = lambda self : None;
VsanFileSystem_swigregister = _vmkctl.VsanFileSystem_swigregister
VsanFileSystem_swigregister(VsanFileSystem)

class UnresolvedVmfsExtent(DiskLunPartition):
    __swig_setmethods__ = {}
    for _s in [DiskLunPartition]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnresolvedVmfsExtent, name, value)
    __swig_getmethods__ = {}
    for _s in [DiskLunPartition]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnresolvedVmfsExtent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetVmfsExtentIndex(self) -> "uint64" : return _vmkctl.UnresolvedVmfsExtent_GetVmfsExtentIndex(self)
    def GetStart(self) -> "uint64" : return _vmkctl.UnresolvedVmfsExtent_GetStart(self)
    def GetEnd(self) -> "uint64" : return _vmkctl.UnresolvedVmfsExtent_GetEnd(self)
    def GetLvmName(self) -> "std::string" : return _vmkctl.UnresolvedVmfsExtent_GetLvmName(self)
    def GetVmfsUuid(self) -> "std::string" : return _vmkctl.UnresolvedVmfsExtent_GetVmfsUuid(self)
    __swig_destroy__ = _vmkctl.delete_UnresolvedVmfsExtent
    __del__ = lambda self : None;
UnresolvedVmfsExtent_swigregister = _vmkctl.UnresolvedVmfsExtent_swigregister
UnresolvedVmfsExtent_swigregister(UnresolvedVmfsExtent)

class UnresolvedVmfsExtentImpl(UnresolvedVmfsExtent,DiskLunPartitionImpl):
    __swig_setmethods__ = {}
    for _s in [UnresolvedVmfsExtent,DiskLunPartitionImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnresolvedVmfsExtentImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [UnresolvedVmfsExtent,DiskLunPartitionImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnresolvedVmfsExtentImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_UnresolvedVmfsExtentImpl
    __del__ = lambda self : None;
    def GetVmfsExtentIndex(self) -> "uint64" : return _vmkctl.UnresolvedVmfsExtentImpl_GetVmfsExtentIndex(self)
    def SetVmfsExtentIndex(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsExtentImpl_SetVmfsExtentIndex(self, *args)
    def GetLvmName(self) -> "std::string" : return _vmkctl.UnresolvedVmfsExtentImpl_GetLvmName(self)
    def GetVmfsUuid(self) -> "std::string" : return _vmkctl.UnresolvedVmfsExtentImpl_GetVmfsUuid(self)
    def SetVmfsUuid(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsExtentImpl_SetVmfsUuid(self, *args)
    def GetStart(self) -> "uint64" : return _vmkctl.UnresolvedVmfsExtentImpl_GetStart(self)
    def SetStart(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsExtentImpl_SetStart(self, *args)
    def GetEnd(self) -> "uint64" : return _vmkctl.UnresolvedVmfsExtentImpl_GetEnd(self)
    def SetEnd(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsExtentImpl_SetEnd(self, *args)
    def __lt__(self, *args) -> "bool" : return _vmkctl.UnresolvedVmfsExtentImpl___lt__(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.UnresolvedVmfsExtentImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.UnresolvedVmfsExtentImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsExtentImpl_Print(self, *args)
    __swig_getmethods__["GetUnresolvedDeviceName"] = lambda x: _vmkctl.UnresolvedVmfsExtentImpl_GetUnresolvedDeviceName
    if _newclass:GetUnresolvedDeviceName = staticmethod(_vmkctl.UnresolvedVmfsExtentImpl_GetUnresolvedDeviceName)
UnresolvedVmfsExtentImpl_swigregister = _vmkctl.UnresolvedVmfsExtentImpl_swigregister
UnresolvedVmfsExtentImpl_swigregister(UnresolvedVmfsExtentImpl)

def UnresolvedVmfsExtentImpl_GetUnresolvedDeviceName(*args) -> "std::string" :
  return _vmkctl.UnresolvedVmfsExtentImpl_GetUnresolvedDeviceName(*args)
UnresolvedVmfsExtentImpl_GetUnresolvedDeviceName = _vmkctl.UnresolvedVmfsExtentImpl_GetUnresolvedDeviceName

class VmfsUserInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmfsUserInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VmfsUserInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["uuid"] = _vmkctl.VmfsUserInfo_uuid_set
    __swig_getmethods__["uuid"] = _vmkctl.VmfsUserInfo_uuid_get
    if _newclass:uuid = _swig_property(_vmkctl.VmfsUserInfo_uuid_get, _vmkctl.VmfsUserInfo_uuid_set)
    __swig_setmethods__["mac"] = _vmkctl.VmfsUserInfo_mac_set
    __swig_getmethods__["mac"] = _vmkctl.VmfsUserInfo_mac_get
    if _newclass:mac = _swig_property(_vmkctl.VmfsUserInfo_mac_get, _vmkctl.VmfsUserInfo_mac_set)
    __swig_setmethods__["majorVer"] = _vmkctl.VmfsUserInfo_majorVer_set
    __swig_getmethods__["majorVer"] = _vmkctl.VmfsUserInfo_majorVer_get
    if _newclass:majorVer = _swig_property(_vmkctl.VmfsUserInfo_majorVer_get, _vmkctl.VmfsUserInfo_majorVer_set)
    __swig_setmethods__["minorVer"] = _vmkctl.VmfsUserInfo_minorVer_set
    __swig_getmethods__["minorVer"] = _vmkctl.VmfsUserInfo_minorVer_get
    if _newclass:minorVer = _swig_property(_vmkctl.VmfsUserInfo_minorVer_get, _vmkctl.VmfsUserInfo_minorVer_set)
    __swig_setmethods__["offset"] = _vmkctl.VmfsUserInfo_offset_set
    __swig_getmethods__["offset"] = _vmkctl.VmfsUserInfo_offset_get
    if _newclass:offset = _swig_property(_vmkctl.VmfsUserInfo_offset_get, _vmkctl.VmfsUserInfo_offset_set)
    __swig_setmethods__["state"] = _vmkctl.VmfsUserInfo_state_set
    __swig_getmethods__["state"] = _vmkctl.VmfsUserInfo_state_get
    if _newclass:state = _swig_property(_vmkctl.VmfsUserInfo_state_get, _vmkctl.VmfsUserInfo_state_set)
    __swig_setmethods__["lockMode"] = _vmkctl.VmfsUserInfo_lockMode_set
    __swig_getmethods__["lockMode"] = _vmkctl.VmfsUserInfo_lockMode_get
    if _newclass:lockMode = _swig_property(_vmkctl.VmfsUserInfo_lockMode_get, _vmkctl.VmfsUserInfo_lockMode_set)
    VMFS_LOCK_MODE_IN_USE_SCSI_II_OPS = _vmkctl.VmfsUserInfo_VMFS_LOCK_MODE_IN_USE_SCSI_II_OPS
    VMFS_LOCK_MODE_IN_USE_MIXED_OPS = _vmkctl.VmfsUserInfo_VMFS_LOCK_MODE_IN_USE_MIXED_OPS
    VMFS_LOCK_MODE_IN_USE_ATS_OPS = _vmkctl.VmfsUserInfo_VMFS_LOCK_MODE_IN_USE_ATS_OPS
    def __init__(self): 
        this = _vmkctl.new_VmfsUserInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VmfsUserInfo
    __del__ = lambda self : None;
VmfsUserInfo_swigregister = _vmkctl.VmfsUserInfo_swigregister
VmfsUserInfo_swigregister(VmfsUserInfo)

class VmfsVolumeUnmapProperty(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmfsVolumeUnmapProperty, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VmfsVolumeUnmapProperty, name)
    __repr__ = _swig_repr
    __swig_setmethods__["unmapGranularity"] = _vmkctl.VmfsVolumeUnmapProperty_unmapGranularity_set
    __swig_getmethods__["unmapGranularity"] = _vmkctl.VmfsVolumeUnmapProperty_unmapGranularity_get
    if _newclass:unmapGranularity = _swig_property(_vmkctl.VmfsVolumeUnmapProperty_unmapGranularity_get, _vmkctl.VmfsVolumeUnmapProperty_unmapGranularity_set)
    __swig_setmethods__["unmapPriority"] = _vmkctl.VmfsVolumeUnmapProperty_unmapPriority_set
    __swig_getmethods__["unmapPriority"] = _vmkctl.VmfsVolumeUnmapProperty_unmapPriority_get
    if _newclass:unmapPriority = _swig_property(_vmkctl.VmfsVolumeUnmapProperty_unmapPriority_get, _vmkctl.VmfsVolumeUnmapProperty_unmapPriority_set)
    def __init__(self): 
        this = _vmkctl.new_VmfsVolumeUnmapProperty()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VmfsVolumeUnmapProperty
    __del__ = lambda self : None;
VmfsVolumeUnmapProperty_swigregister = _vmkctl.VmfsVolumeUnmapProperty_swigregister
VmfsVolumeUnmapProperty_swigregister(VmfsVolumeUnmapProperty)

class VmfsVolumeConfigOption(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmfsVolumeConfigOption, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VmfsVolumeConfigOption, name)
    __repr__ = _swig_repr
    __swig_setmethods__["blockSize"] = _vmkctl.VmfsVolumeConfigOption_blockSize_set
    __swig_getmethods__["blockSize"] = _vmkctl.VmfsVolumeConfigOption_blockSize_get
    if _newclass:blockSize = _swig_property(_vmkctl.VmfsVolumeConfigOption_blockSize_get, _vmkctl.VmfsVolumeConfigOption_blockSize_set)
    __swig_setmethods__["unmapGranularities"] = _vmkctl.VmfsVolumeConfigOption_unmapGranularities_set
    __swig_getmethods__["unmapGranularities"] = _vmkctl.VmfsVolumeConfigOption_unmapGranularities_get
    if _newclass:unmapGranularities = _swig_property(_vmkctl.VmfsVolumeConfigOption_unmapGranularities_get, _vmkctl.VmfsVolumeConfigOption_unmapGranularities_set)
    def __init__(self, bSize : 'uint32' = 0): 
        this = _vmkctl.new_VmfsVolumeConfigOption(bSize)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VmfsVolumeConfigOption
    __del__ = lambda self : None;
VmfsVolumeConfigOption_swigregister = _vmkctl.VmfsVolumeConfigOption_swigregister
VmfsVolumeConfigOption_swigregister(VmfsVolumeConfigOption)

class VmFileSystem(FileSystem):
    __swig_setmethods__ = {}
    for _s in [FileSystem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmFileSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [FileSystem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VmFileSystem, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    VMFS_VERSION_2 = _vmkctl.VmFileSystem_VMFS_VERSION_2
    VMFS_VERSION_3 = _vmkctl.VmFileSystem_VMFS_VERSION_3
    VMFS_VERSION_5 = _vmkctl.VmFileSystem_VMFS_VERSION_5
    VMFS_VERSION_6 = _vmkctl.VmFileSystem_VMFS_VERSION_6
    VMFS_VERSION_L = _vmkctl.VmFileSystem_VMFS_VERSION_L
    VMFS_VERSION_6L = _vmkctl.VmFileSystem_VMFS_VERSION_6L
    VMFS_LOCK_MODE_SHARED = _vmkctl.VmFileSystem_VMFS_LOCK_MODE_SHARED
    VMFS_LOCK_MODE_PUBLIC = _vmkctl.VmFileSystem_VMFS_LOCK_MODE_PUBLIC
    VMFS_LOCK_MODE_NEW_VMFS5 = _vmkctl.VmFileSystem_VMFS_LOCK_MODE_NEW_VMFS5
    VMFS_LOCK_MODE_MAINTENANCE = _vmkctl.VmFileSystem_VMFS_LOCK_MODE_MAINTENANCE
    VMFS_LOCK_MODE_ATSONLY = _vmkctl.VmFileSystem_VMFS_LOCK_MODE_ATSONLY
    VMFS_LOCK_MODE_ATS_UPGRADE = _vmkctl.VmFileSystem_VMFS_LOCK_MODE_ATS_UPGRADE
    VMFS_LOCK_MODE_ATS_DOWNGRADE = _vmkctl.VmFileSystem_VMFS_LOCK_MODE_ATS_DOWNGRADE
    VMFS_LIVENESS_NONE = _vmkctl.VmFileSystem_VMFS_LIVENESS_NONE
    VMFS_LIVENESS_QUICK = _vmkctl.VmFileSystem_VMFS_LIVENESS_QUICK
    VMFS_LIVENESS_FULL = _vmkctl.VmFileSystem_VMFS_LIVENESS_FULL
    def GetType(self) -> "std::string" : return _vmkctl.VmFileSystem_GetType(self)
    def GetBlockSize(self) -> "uint64" : return _vmkctl.VmFileSystem_GetBlockSize(self)
    def GetTotalBlocks(self) -> "uint64" : return _vmkctl.VmFileSystem_GetTotalBlocks(self)
    def GetBlocksUsed(self) -> "uint64" : return _vmkctl.VmFileSystem_GetBlocksUsed(self)
    def GetVolumeName(self) -> "std::string" : return _vmkctl.VmFileSystem_GetVolumeName(self)
    def SetVolumeName(self, *args) -> "void" : return _vmkctl.VmFileSystem_SetVolumeName(self, *args)
    def GetLockMode(self) -> "uint32" : return _vmkctl.VmFileSystem_GetLockMode(self)
    def SetLockMode(self, *args) -> "void" : return _vmkctl.VmFileSystem_SetLockMode(self, *args)
    def GetReadOnly(self) -> "bool" : return _vmkctl.VmFileSystem_GetReadOnly(self)
    def GetMajorVersion(self) -> "uint32" : return _vmkctl.VmFileSystem_GetMajorVersion(self)
    def GetMinorVersion(self) -> "uint32" : return _vmkctl.VmFileSystem_GetMinorVersion(self)
    def GetUuid(self) -> "std::string" : return _vmkctl.VmFileSystem_GetUuid(self)
    def GetExtents(self) -> "std::vector< HostCtl::Storage::DiskLunPartitionPtr,std::allocator< HostCtl::Storage::DiskLunPartitionPtr > >" : return _vmkctl.VmFileSystem_GetExtents(self)
    def GetHeadExtentName(self) -> "std::string" : return _vmkctl.VmFileSystem_GetHeadExtentName(self)
    def GetHeadPartition(self) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.VmFileSystem_GetHeadPartition(self)
    def GetLvmName(self) -> "std::string" : return _vmkctl.VmFileSystem_GetLvmName(self)
    def AddExtent(self, *args) -> "void" : return _vmkctl.VmFileSystem_AddExtent(self, *args)
    def ConvertToVersion3(self) -> "void" : return _vmkctl.VmFileSystem_ConvertToVersion3(self)
    def ConvertToVersion5(self) -> "void" : return _vmkctl.VmFileSystem_ConvertToVersion5(self)
    def UnmapVolume(self, reclaimUnit : 'uint32' = 200) -> "void" : return _vmkctl.VmFileSystem_UnmapVolume(self, reclaimUnit)
    def RunPostVersion3Tasks(self) -> "void" : return _vmkctl.VmFileSystem_RunPostVersion3Tasks(self)
    def GetSomethingOffline(self) -> "bool" : return _vmkctl.VmFileSystem_GetSomethingOffline(self)
    def GrowExtent(self, *args) -> "void" : return _vmkctl.VmFileSystem_GrowExtent(self, *args)
    def IsForceMounted(self) -> "bool" : return _vmkctl.VmFileSystem_IsForceMounted(self)
    def IsForceMountPersistent(self) -> "bool" : return _vmkctl.VmFileSystem_IsForceMountPersistent(self)
    def SetPersistentMount(self, *args) -> "void" : return _vmkctl.VmFileSystem_SetPersistentMount(self, *args)
    def Mount(self, *args) -> "void" : return _vmkctl.VmFileSystem_Mount(self, *args)
    def Unmount(self, *args) -> "HostCtl::Storage::FileSystem::UnmountStatus" : return _vmkctl.VmFileSystem_Unmount(self, *args)
    def IsActiveVolume(self, CheckForOtherHost : 'bool' = False) -> "bool" : return _vmkctl.VmFileSystem_IsActiveVolume(self, CheckForOtherHost)
    def GetActiveVolumeUsers(self) -> "std::vector< HostCtl::Network::MacAddress,std::allocator< HostCtl::Network::MacAddress > >" : return _vmkctl.VmFileSystem_GetActiveVolumeUsers(self)
    def GetVmfsUserInfo(self, *args) -> "std::vector< HostCtl::Storage::VmfsUserInfo,std::allocator< HostCtl::Storage::VmfsUserInfo > >" : return _vmkctl.VmFileSystem_GetVmfsUserInfo(self, *args)
    def GetVAAIState(self) -> "VAAIState" : return _vmkctl.VmFileSystem_GetVAAIState(self)
    def GetVAAIAtsStatus(self) -> "VAAIState" : return _vmkctl.VmFileSystem_GetVAAIAtsStatus(self)
    def isNativeSnapshotCapable(self) -> "bool" : return _vmkctl.VmFileSystem_isNativeSnapshotCapable(self)
    def IsAccessible(self) -> "bool" : return _vmkctl.VmFileSystem_IsAccessible(self)
    def IsAccessibleWithReason(self, *args) -> "bool" : return _vmkctl.VmFileSystem_IsAccessibleWithReason(self, *args)
    def IsHidden(self) -> "bool" : return _vmkctl.VmFileSystem_IsHidden(self)
    def DeleteState(self) -> "void" : return _vmkctl.VmFileSystem_DeleteState(self)
    def DisableIORM(self) -> "void" : return _vmkctl.VmFileSystem_DisableIORM(self)
    def GetVolumeUnmapProperty(self) -> "HostCtl::Storage::VmfsVolumeUnmapProperty" : return _vmkctl.VmFileSystem_GetVolumeUnmapProperty(self)
    def SetVolumeUnmapProperty(self, *args) -> "void" : return _vmkctl.VmFileSystem_SetVolumeUnmapProperty(self, *args)
    __swig_destroy__ = _vmkctl.delete_VmFileSystem
    __del__ = lambda self : None;
VmFileSystem_swigregister = _vmkctl.VmFileSystem_swigregister
VmFileSystem_swigregister(VmFileSystem)
VmFileSystem.VMFS_MIN_BLOCK = _vmkctl.cvar.VmFileSystem_VMFS_MIN_BLOCK
VmFileSystem.VMFS_TYPE = _vmkctl.cvar.VmFileSystem_VMFS_TYPE
VmFileSystem.VMFSL_TYPE = _vmkctl.cvar.VmFileSystem_VMFSL_TYPE
VmFileSystem.VFFS_TYPE = _vmkctl.cvar.VmFileSystem_VFFS_TYPE
VmFileSystem.NFS_TYPE = _vmkctl.cvar.VmFileSystem_NFS_TYPE

class VmFileSystemImpl(VmFileSystem,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [VmFileSystem,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmFileSystemImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [VmFileSystem,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VmFileSystemImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_VmFileSystemImpl
    __del__ = lambda self : None;
    def GetType(self) -> "std::string" : return _vmkctl.VmFileSystemImpl_GetType(self)
    def GetSize(self) -> "uint64" : return _vmkctl.VmFileSystemImpl_GetSize(self)
    def GetBlockSize(self) -> "uint64" : return _vmkctl.VmFileSystemImpl_GetBlockSize(self)
    def GetTotalBlocks(self) -> "uint64" : return _vmkctl.VmFileSystemImpl_GetTotalBlocks(self)
    def GetBlocksUsed(self) -> "uint64" : return _vmkctl.VmFileSystemImpl_GetBlocksUsed(self)
    def GetVolumeName(self) -> "std::string" : return _vmkctl.VmFileSystemImpl_GetVolumeName(self)
    def GetVolumeUsage(self) -> "uint64" : return _vmkctl.VmFileSystemImpl_GetVolumeUsage(self)
    def SetVolumeName(self, *args) -> "void" : return _vmkctl.VmFileSystemImpl_SetVolumeName(self, *args)
    def GetLockMode(self) -> "uint32" : return _vmkctl.VmFileSystemImpl_GetLockMode(self)
    def SetLockMode(self, *args) -> "void" : return _vmkctl.VmFileSystemImpl_SetLockMode(self, *args)
    def GetReadOnly(self) -> "bool" : return _vmkctl.VmFileSystemImpl_GetReadOnly(self)
    def GetSomethingOffline(self) -> "bool" : return _vmkctl.VmFileSystemImpl_GetSomethingOffline(self)
    def GetMajorVersion(self) -> "uint32" : return _vmkctl.VmFileSystemImpl_GetMajorVersion(self)
    def GetMinorVersion(self) -> "uint32" : return _vmkctl.VmFileSystemImpl_GetMinorVersion(self)
    def GetUuid(self) -> "std::string" : return _vmkctl.VmFileSystemImpl_GetUuid(self)
    def GetConsolePath(self) -> "std::string" : return _vmkctl.VmFileSystemImpl_GetConsolePath(self)
    def GetExtents(self) -> "std::vector< HostCtl::Storage::DiskLunPartitionPtr,std::allocator< HostCtl::Storage::DiskLunPartitionPtr > >" : return _vmkctl.VmFileSystemImpl_GetExtents(self)
    def GetExtentCount(self) -> "uint32" : return _vmkctl.VmFileSystemImpl_GetExtentCount(self)
    def GetHeadExtentName(self) -> "std::string" : return _vmkctl.VmFileSystemImpl_GetHeadExtentName(self)
    def GetHeadPartition(self) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.VmFileSystemImpl_GetHeadPartition(self)
    def GetLvmName(self) -> "std::string" : return _vmkctl.VmFileSystemImpl_GetLvmName(self)
    def AddExtent(self, *args) -> "void" : return _vmkctl.VmFileSystemImpl_AddExtent(self, *args)
    def ConvertToVersion3(self) -> "void" : return _vmkctl.VmFileSystemImpl_ConvertToVersion3(self)
    def RunPostVersion3Tasks(self) -> "void" : return _vmkctl.VmFileSystemImpl_RunPostVersion3Tasks(self)
    def ConvertToVersion5(self) -> "void" : return _vmkctl.VmFileSystemImpl_ConvertToVersion5(self)
    def UnmapVolume(self, *args) -> "void" : return _vmkctl.VmFileSystemImpl_UnmapVolume(self, *args)
    def Mount(self, *args) -> "void" : return _vmkctl.VmFileSystemImpl_Mount(self, *args)
    def IsMounted(self) -> "bool" : return _vmkctl.VmFileSystemImpl_IsMounted(self)
    def IsAutomountEligible(self) -> "bool" : return _vmkctl.VmFileSystemImpl_IsAutomountEligible(self)
    def SetPersistentMount(self, *args) -> "void" : return _vmkctl.VmFileSystemImpl_SetPersistentMount(self, *args)
    def IsForceMountPersistent(self) -> "bool" : return _vmkctl.VmFileSystemImpl_IsForceMountPersistent(self)
    def IsForceMounted(self) -> "bool" : return _vmkctl.VmFileSystemImpl_IsForceMounted(self)
    def Unmount(self, *args) -> "HostCtl::Storage::FileSystem::UnmountStatus" : return _vmkctl.VmFileSystemImpl_Unmount(self, *args)
    def IsActiveVolume(self, *args) -> "bool" : return _vmkctl.VmFileSystemImpl_IsActiveVolume(self, *args)
    def GetActiveVolumeUsers(self) -> "std::vector< HostCtl::Network::MacAddress,std::allocator< HostCtl::Network::MacAddress > >" : return _vmkctl.VmFileSystemImpl_GetActiveVolumeUsers(self)
    def GetVmfsUserInfo(self, *args) -> "std::vector< HostCtl::Storage::VmfsUserInfo,std::allocator< HostCtl::Storage::VmfsUserInfo > >" : return _vmkctl.VmFileSystemImpl_GetVmfsUserInfo(self, *args)
    def GetVAAIState(self) -> "HostCtl::Storage::VAAIState" : return _vmkctl.VmFileSystemImpl_GetVAAIState(self)
    def GetVAAIAtsStatus(self) -> "HostCtl::Storage::VAAIState" : return _vmkctl.VmFileSystemImpl_GetVAAIAtsStatus(self)
    def isNativeSnapshotCapable(self) -> "bool" : return _vmkctl.VmFileSystemImpl_isNativeSnapshotCapable(self)
    def Refresh(self) -> "void" : return _vmkctl.VmFileSystemImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.VmFileSystemImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.VmFileSystemImpl_Print(self, *args)
    __swig_getmethods__["IsRealFileSystem"] = lambda x: _vmkctl.VmFileSystemImpl_IsRealFileSystem
    if _newclass:IsRealFileSystem = staticmethod(_vmkctl.VmFileSystemImpl_IsRealFileSystem)
    def GrowExtent(self, *args) -> "void" : return _vmkctl.VmFileSystemImpl_GrowExtent(self, *args)
    __swig_getmethods__["CreateFileSystem"] = lambda x: _vmkctl.VmFileSystemImpl_CreateFileSystem
    if _newclass:CreateFileSystem = staticmethod(_vmkctl.VmFileSystemImpl_CreateFileSystem)
    def IsAccessible(self) -> "bool" : return _vmkctl.VmFileSystemImpl_IsAccessible(self)
    def IsAccessibleWithReason(self, *args) -> "bool" : return _vmkctl.VmFileSystemImpl_IsAccessibleWithReason(self, *args)
    def IsHidden(self) -> "bool" : return _vmkctl.VmFileSystemImpl_IsHidden(self)
    def DeleteState(self) -> "void" : return _vmkctl.VmFileSystemImpl_DeleteState(self)
    def DisableIORM(self) -> "void" : return _vmkctl.VmFileSystemImpl_DisableIORM(self)
    __swig_getmethods__["GetVMFSFileSystemByUUID"] = lambda x: _vmkctl.VmFileSystemImpl_GetVMFSFileSystemByUUID
    if _newclass:GetVMFSFileSystemByUUID = staticmethod(_vmkctl.VmFileSystemImpl_GetVMFSFileSystemByUUID)
    __swig_getmethods__["GetVMFSFileSystemByLabel"] = lambda x: _vmkctl.VmFileSystemImpl_GetVMFSFileSystemByLabel
    if _newclass:GetVMFSFileSystemByLabel = staticmethod(_vmkctl.VmFileSystemImpl_GetVMFSFileSystemByLabel)
    __swig_getmethods__["GetVMFSLVNameByUUIDOrLabel"] = lambda x: _vmkctl.VmFileSystemImpl_GetVMFSLVNameByUUIDOrLabel
    if _newclass:GetVMFSLVNameByUUIDOrLabel = staticmethod(_vmkctl.VmFileSystemImpl_GetVMFSLVNameByUUIDOrLabel)
    __swig_getmethods__["TryVmfsMount"] = lambda x: _vmkctl.VmFileSystemImpl_TryVmfsMount
    if _newclass:TryVmfsMount = staticmethod(_vmkctl.VmFileSystemImpl_TryVmfsMount)
    __swig_getmethods__["GetVmfsFileSystems"] = lambda x: _vmkctl.VmFileSystemImpl_GetVmfsFileSystems
    if _newclass:GetVmfsFileSystems = staticmethod(_vmkctl.VmFileSystemImpl_GetVmfsFileSystems)
    __swig_getmethods__["GetVmfsFileSystemsList"] = lambda x: _vmkctl.VmFileSystemImpl_GetVmfsFileSystemsList
    if _newclass:GetVmfsFileSystemsList = staticmethod(_vmkctl.VmFileSystemImpl_GetVmfsFileSystemsList)
    __swig_getmethods__["GetPersistentlyUnmountedFsUuids"] = lambda x: _vmkctl.VmFileSystemImpl_GetPersistentlyUnmountedFsUuids
    if _newclass:GetPersistentlyUnmountedFsUuids = staticmethod(_vmkctl.VmFileSystemImpl_GetPersistentlyUnmountedFsUuids)
    __swig_getmethods__["AutomountVmfsFileSystems"] = lambda x: _vmkctl.VmFileSystemImpl_AutomountVmfsFileSystems
    if _newclass:AutomountVmfsFileSystems = staticmethod(_vmkctl.VmFileSystemImpl_AutomountVmfsFileSystems)
    __swig_getmethods__["IsFileSystemMounted"] = lambda x: _vmkctl.VmFileSystemImpl_IsFileSystemMounted
    if _newclass:IsFileSystemMounted = staticmethod(_vmkctl.VmFileSystemImpl_IsFileSystemMounted)
    __swig_getmethods__["FindFileSystemGivenHeadPartition"] = lambda x: _vmkctl.VmFileSystemImpl_FindFileSystemGivenHeadPartition
    if _newclass:FindFileSystemGivenHeadPartition = staticmethod(_vmkctl.VmFileSystemImpl_FindFileSystemGivenHeadPartition)
    __swig_getmethods__["FindVmfsFileSystemGivenHeadPartition"] = lambda x: _vmkctl.VmFileSystemImpl_FindVmfsFileSystemGivenHeadPartition
    if _newclass:FindVmfsFileSystemGivenHeadPartition = staticmethod(_vmkctl.VmFileSystemImpl_FindVmfsFileSystemGivenHeadPartition)
    __swig_getmethods__["GetVolumeConfigOptions"] = lambda x: _vmkctl.VmFileSystemImpl_GetVolumeConfigOptions
    if _newclass:GetVolumeConfigOptions = staticmethod(_vmkctl.VmFileSystemImpl_GetVolumeConfigOptions)
    def GetVolumeUnmapProperty(self) -> "HostCtl::Storage::VmfsVolumeUnmapProperty" : return _vmkctl.VmFileSystemImpl_GetVolumeUnmapProperty(self)
    def SetVolumeUnmapProperty(self, *args) -> "void" : return _vmkctl.VmFileSystemImpl_SetVolumeUnmapProperty(self, *args)
VmFileSystemImpl_swigregister = _vmkctl.VmFileSystemImpl_swigregister
VmFileSystemImpl_swigregister(VmFileSystemImpl)
VmFileSystemImpl.VMFS3_CREATE_TYPE = _vmkctl.cvar.VmFileSystemImpl_VMFS3_CREATE_TYPE
VmFileSystemImpl.VMFS5_CREATE_TYPE = _vmkctl.cvar.VmFileSystemImpl_VMFS5_CREATE_TYPE
VmFileSystemImpl.VMFS6_CREATE_TYPE = _vmkctl.cvar.VmFileSystemImpl_VMFS6_CREATE_TYPE
VmFileSystemImpl.VMFS6L_CREATE_TYPE = _vmkctl.cvar.VmFileSystemImpl_VMFS6L_CREATE_TYPE
VmFileSystemImpl.VMFSL_CREATE_TYPE = _vmkctl.cvar.VmFileSystemImpl_VMFSL_CREATE_TYPE
VmFileSystemImpl.MAX_FS_NAME_LENGTH = _vmkctl.cvar.VmFileSystemImpl_MAX_FS_NAME_LENGTH
VmFileSystemImpl.VMFS6_VOL_OPTIONS = _vmkctl.cvar.VmFileSystemImpl_VMFS6_VOL_OPTIONS

def VmFileSystemImpl_IsRealFileSystem(*args) -> "bool" :
  return _vmkctl.VmFileSystemImpl_IsRealFileSystem(*args)
VmFileSystemImpl_IsRealFileSystem = _vmkctl.VmFileSystemImpl_IsRealFileSystem

def VmFileSystemImpl_CreateFileSystem(*args) -> "HostCtl::Storage::VmFileSystemPtr" :
  return _vmkctl.VmFileSystemImpl_CreateFileSystem(*args)
VmFileSystemImpl_CreateFileSystem = _vmkctl.VmFileSystemImpl_CreateFileSystem

def VmFileSystemImpl_GetVMFSFileSystemByUUID(*args) -> "HostCtl::Storage::VmFileSystemPtr" :
  return _vmkctl.VmFileSystemImpl_GetVMFSFileSystemByUUID(*args)
VmFileSystemImpl_GetVMFSFileSystemByUUID = _vmkctl.VmFileSystemImpl_GetVMFSFileSystemByUUID

def VmFileSystemImpl_GetVMFSFileSystemByLabel(*args) -> "HostCtl::Storage::VmFileSystemPtr" :
  return _vmkctl.VmFileSystemImpl_GetVMFSFileSystemByLabel(*args)
VmFileSystemImpl_GetVMFSFileSystemByLabel = _vmkctl.VmFileSystemImpl_GetVMFSFileSystemByLabel

def VmFileSystemImpl_GetVMFSLVNameByUUIDOrLabel(*args) -> "std::string" :
  return _vmkctl.VmFileSystemImpl_GetVMFSLVNameByUUIDOrLabel(*args)
VmFileSystemImpl_GetVMFSLVNameByUUIDOrLabel = _vmkctl.VmFileSystemImpl_GetVMFSLVNameByUUIDOrLabel

def VmFileSystemImpl_TryVmfsMount(*args) -> "Bool" :
  return _vmkctl.VmFileSystemImpl_TryVmfsMount(*args)
VmFileSystemImpl_TryVmfsMount = _vmkctl.VmFileSystemImpl_TryVmfsMount

def VmFileSystemImpl_GetVmfsFileSystems(*args) -> "std::vector< HostCtl::Storage::VmFileSystemPtr,std::allocator< HostCtl::Storage::VmFileSystemPtr > >" :
  return _vmkctl.VmFileSystemImpl_GetVmfsFileSystems(*args)
VmFileSystemImpl_GetVmfsFileSystems = _vmkctl.VmFileSystemImpl_GetVmfsFileSystems

def VmFileSystemImpl_GetVmfsFileSystemsList(*args) -> "std::vector< HostCtl::Storage::VmFileSystemPtr,std::allocator< HostCtl::Storage::VmFileSystemPtr > >" :
  return _vmkctl.VmFileSystemImpl_GetVmfsFileSystemsList(*args)
VmFileSystemImpl_GetVmfsFileSystemsList = _vmkctl.VmFileSystemImpl_GetVmfsFileSystemsList

def VmFileSystemImpl_GetPersistentlyUnmountedFsUuids(*args) -> "void" :
  return _vmkctl.VmFileSystemImpl_GetPersistentlyUnmountedFsUuids(*args)
VmFileSystemImpl_GetPersistentlyUnmountedFsUuids = _vmkctl.VmFileSystemImpl_GetPersistentlyUnmountedFsUuids

def VmFileSystemImpl_AutomountVmfsFileSystems(*args) -> "uint32" :
  return _vmkctl.VmFileSystemImpl_AutomountVmfsFileSystems(*args)
VmFileSystemImpl_AutomountVmfsFileSystems = _vmkctl.VmFileSystemImpl_AutomountVmfsFileSystems

def VmFileSystemImpl_IsFileSystemMounted(*args) -> "bool" :
  return _vmkctl.VmFileSystemImpl_IsFileSystemMounted(*args)
VmFileSystemImpl_IsFileSystemMounted = _vmkctl.VmFileSystemImpl_IsFileSystemMounted

def VmFileSystemImpl_FindFileSystemGivenHeadPartition(*args) -> "std::string" :
  return _vmkctl.VmFileSystemImpl_FindFileSystemGivenHeadPartition(*args)
VmFileSystemImpl_FindFileSystemGivenHeadPartition = _vmkctl.VmFileSystemImpl_FindFileSystemGivenHeadPartition

def VmFileSystemImpl_FindVmfsFileSystemGivenHeadPartition(*args) -> "std::string" :
  return _vmkctl.VmFileSystemImpl_FindVmfsFileSystemGivenHeadPartition(*args)
VmFileSystemImpl_FindVmfsFileSystemGivenHeadPartition = _vmkctl.VmFileSystemImpl_FindVmfsFileSystemGivenHeadPartition

def VmFileSystemImpl_GetVolumeConfigOptions(*args) -> "std::vector< HostCtl::Storage::VmfsVolumeConfigOption,std::allocator< HostCtl::Storage::VmfsVolumeConfigOption > > const &" :
  return _vmkctl.VmFileSystemImpl_GetVolumeConfigOptions(*args)
VmFileSystemImpl_GetVolumeConfigOptions = _vmkctl.VmFileSystemImpl_GetVolumeConfigOptions

class UnresolvedVmfsVolume(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnresolvedVmfsVolume, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnresolvedVmfsVolume, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    RESOLVE_ERROR_NOERROR = _vmkctl.UnresolvedVmfsVolume_RESOLVE_ERROR_NOERROR
    RESOLVE_ERROR_DUPLICATE_EXTENTS = _vmkctl.UnresolvedVmfsVolume_RESOLVE_ERROR_DUPLICATE_EXTENTS
    RESOLVE_ERROR_MISSING_EXTENTS = _vmkctl.UnresolvedVmfsVolume_RESOLVE_ERROR_MISSING_EXTENTS
    RESOLVE_ERROR_EXTRA_EXTENTS = _vmkctl.UnresolvedVmfsVolume_RESOLVE_ERROR_EXTRA_EXTENTS
    RESOLVE_ERROR_CHECK_LIVEFS_FAILURE = _vmkctl.UnresolvedVmfsVolume_RESOLVE_ERROR_CHECK_LIVEFS_FAILURE
    RESOLVE_ERROR_ACTIVE_VOLUME = _vmkctl.UnresolvedVmfsVolume_RESOLVE_ERROR_ACTIVE_VOLUME
    RESOLVE_ERROR_ORIGINAL_ONLINE = _vmkctl.UnresolvedVmfsVolume_RESOLVE_ERROR_ORIGINAL_ONLINE
    RESOLVE_ERROR_EXTENTS_ONLINE = _vmkctl.UnresolvedVmfsVolume_RESOLVE_ERROR_EXTENTS_ONLINE
    __swig_getmethods__["ResolveErrorToString"] = lambda x: _vmkctl.UnresolvedVmfsVolume_ResolveErrorToString
    if _newclass:ResolveErrorToString = staticmethod(_vmkctl.UnresolvedVmfsVolume_ResolveErrorToString)
    def GetLvmName(self) -> "std::string" : return _vmkctl.UnresolvedVmfsVolume_GetLvmName(self)
    def GetVmfsUuid(self) -> "std::string" : return _vmkctl.UnresolvedVmfsVolume_GetVmfsUuid(self)
    def GetVmfsLabel(self) -> "std::string" : return _vmkctl.UnresolvedVmfsVolume_GetVmfsLabel(self)
    def GetTotalSize(self) -> "uint64" : return _vmkctl.UnresolvedVmfsVolume_GetTotalSize(self)
    def GetExtents(self) -> "std::vector< HostCtl::Storage::UnresolvedVmfsExtentPtr,std::allocator< HostCtl::Storage::UnresolvedVmfsExtentPtr > >" : return _vmkctl.UnresolvedVmfsVolume_GetExtents(self)
    def GetExtentStatus(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolume_GetExtentStatus(self, *args)
    def CanResolve(self, *args) -> "bool" : return _vmkctl.UnresolvedVmfsVolume_CanResolve(self, *args)
    def ResolveVolume(self) -> "HostCtl::Storage::VmFileSystemPtr" : return _vmkctl.UnresolvedVmfsVolume_ResolveVolume(self)
    def ForceMountVmfs(self, *args) -> "HostCtl::Storage::VmFileSystemPtr" : return _vmkctl.UnresolvedVmfsVolume_ForceMountVmfs(self, *args)
    def GetHeadExtent(self) -> "std::string" : return _vmkctl.UnresolvedVmfsVolume_GetHeadExtent(self)
    __swig_destroy__ = _vmkctl.delete_UnresolvedVmfsVolume
    __del__ = lambda self : None;
UnresolvedVmfsVolume_swigregister = _vmkctl.UnresolvedVmfsVolume_swigregister
UnresolvedVmfsVolume_swigregister(UnresolvedVmfsVolume)

def UnresolvedVmfsVolume_ResolveErrorToString(*args) -> "std::string" :
  return _vmkctl.UnresolvedVmfsVolume_ResolveErrorToString(*args)
UnresolvedVmfsVolume_ResolveErrorToString = _vmkctl.UnresolvedVmfsVolume_ResolveErrorToString

class UnresolvedVmfsVolumeImpl(UnresolvedVmfsVolume,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [UnresolvedVmfsVolume,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnresolvedVmfsVolumeImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [UnresolvedVmfsVolume,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UnresolvedVmfsVolumeImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_UnresolvedVmfsVolumeImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_UnresolvedVmfsVolumeImpl
    __del__ = lambda self : None;
    def GetLvmName(self) -> "std::string" : return _vmkctl.UnresolvedVmfsVolumeImpl_GetLvmName(self)
    def GetVmfsUuid(self) -> "std::string" : return _vmkctl.UnresolvedVmfsVolumeImpl_GetVmfsUuid(self)
    def SetVmfsUuid(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolumeImpl_SetVmfsUuid(self, *args)
    def GetVmfsLabel(self) -> "std::string" : return _vmkctl.UnresolvedVmfsVolumeImpl_GetVmfsLabel(self)
    def SetVmfsLabel(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolumeImpl_SetVmfsLabel(self, *args)
    def GetTotalSize(self) -> "uint64" : return _vmkctl.UnresolvedVmfsVolumeImpl_GetTotalSize(self)
    def SetTotalSize(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolumeImpl_SetTotalSize(self, *args)
    def GetExtents(self) -> "std::vector< HostCtl::Storage::UnresolvedVmfsExtentPtr,std::allocator< HostCtl::Storage::UnresolvedVmfsExtentPtr > >" : return _vmkctl.UnresolvedVmfsVolumeImpl_GetExtents(self)
    def GetExtentStatus(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolumeImpl_GetExtentStatus(self, *args)
    def CanResolve(self, *args) -> "bool" : return _vmkctl.UnresolvedVmfsVolumeImpl_CanResolve(self, *args)
    def ResolveVolume(self) -> "HostCtl::Storage::VmFileSystemPtr" : return _vmkctl.UnresolvedVmfsVolumeImpl_ResolveVolume(self)
    def ForceMountVmfs(self, *args) -> "HostCtl::Storage::VmFileSystemPtr" : return _vmkctl.UnresolvedVmfsVolumeImpl_ForceMountVmfs(self, *args)
    def LoadConfig(self) -> "void" : return _vmkctl.UnresolvedVmfsVolumeImpl_LoadConfig(self)
    def Refresh(self) -> "void" : return _vmkctl.UnresolvedVmfsVolumeImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.UnresolvedVmfsVolumeImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolumeImpl_Print(self, *args)
    def GetHeadExtent(self) -> "std::string" : return _vmkctl.UnresolvedVmfsVolumeImpl_GetHeadExtent(self)
    def SetHeadExtent(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolumeImpl_SetHeadExtent(self, *args)
    def SetVolumeType(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolumeImpl_SetVolumeType(self, *args)
    def GetVolumeType(self) -> "std::string const &" : return _vmkctl.UnresolvedVmfsVolumeImpl_GetVolumeType(self)
    def AddExtent(self, *args) -> "void" : return _vmkctl.UnresolvedVmfsVolumeImpl_AddExtent(self, *args)
UnresolvedVmfsVolumeImpl_swigregister = _vmkctl.UnresolvedVmfsVolumeImpl_swigregister
UnresolvedVmfsVolumeImpl_swigregister(UnresolvedVmfsVolumeImpl)

class UnresolvedVmfsVolumeCache(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnresolvedVmfsVolumeCache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnresolvedVmfsVolumeCache, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["Inst"] = lambda x: _vmkctl.UnresolvedVmfsVolumeCache_Inst
    if _newclass:Inst = staticmethod(_vmkctl.UnresolvedVmfsVolumeCache_Inst)
    __swig_getmethods__["GetFromVSI"] = lambda x: _vmkctl.UnresolvedVmfsVolumeCache_GetFromVSI
    if _newclass:GetFromVSI = staticmethod(_vmkctl.UnresolvedVmfsVolumeCache_GetFromVSI)
UnresolvedVmfsVolumeCache_swigregister = _vmkctl.UnresolvedVmfsVolumeCache_swigregister
UnresolvedVmfsVolumeCache_swigregister(UnresolvedVmfsVolumeCache)

def UnresolvedVmfsVolumeCache_Inst() -> "VmkCtl::Storage::UnresolvedVmfsVolumeCache &" :
  return _vmkctl.UnresolvedVmfsVolumeCache_Inst()
UnresolvedVmfsVolumeCache_Inst = _vmkctl.UnresolvedVmfsVolumeCache_Inst

def UnresolvedVmfsVolumeCache_GetFromVSI(*args) -> "void" :
  return _vmkctl.UnresolvedVmfsVolumeCache_GetFromVSI(*args)
UnresolvedVmfsVolumeCache_GetFromVSI = _vmkctl.UnresolvedVmfsVolumeCache_GetFromVSI

class UnresolvedVmfsVolumeNoSnapShotCache(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UnresolvedVmfsVolumeNoSnapShotCache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UnresolvedVmfsVolumeNoSnapShotCache, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["Inst"] = lambda x: _vmkctl.UnresolvedVmfsVolumeNoSnapShotCache_Inst
    if _newclass:Inst = staticmethod(_vmkctl.UnresolvedVmfsVolumeNoSnapShotCache_Inst)
    __swig_getmethods__["GetFromVSI"] = lambda x: _vmkctl.UnresolvedVmfsVolumeNoSnapShotCache_GetFromVSI
    if _newclass:GetFromVSI = staticmethod(_vmkctl.UnresolvedVmfsVolumeNoSnapShotCache_GetFromVSI)
UnresolvedVmfsVolumeNoSnapShotCache_swigregister = _vmkctl.UnresolvedVmfsVolumeNoSnapShotCache_swigregister
UnresolvedVmfsVolumeNoSnapShotCache_swigregister(UnresolvedVmfsVolumeNoSnapShotCache)

def UnresolvedVmfsVolumeNoSnapShotCache_Inst() -> "VmkCtl::Storage::UnresolvedVmfsVolumeNoSnapShotCache &" :
  return _vmkctl.UnresolvedVmfsVolumeNoSnapShotCache_Inst()
UnresolvedVmfsVolumeNoSnapShotCache_Inst = _vmkctl.UnresolvedVmfsVolumeNoSnapShotCache_Inst

def UnresolvedVmfsVolumeNoSnapShotCache_GetFromVSI(*args) -> "void" :
  return _vmkctl.UnresolvedVmfsVolumeNoSnapShotCache_GetFromVSI(*args)
UnresolvedVmfsVolumeNoSnapShotCache_GetFromVSI = _vmkctl.UnresolvedVmfsVolumeNoSnapShotCache_GetFromVSI

class NetworkFileSystem(VmFileSystem):
    __swig_setmethods__ = {}
    for _s in [VmFileSystem]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkFileSystem, name, value)
    __swig_getmethods__ = {}
    for _s in [VmFileSystem]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkFileSystem, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    NFS_AUTH_NONE = _vmkctl.NetworkFileSystem_NFS_AUTH_NONE
    NFS_AUTH_SYS = _vmkctl.NetworkFileSystem_NFS_AUTH_SYS
    NFS_AUTH_KRB5 = _vmkctl.NetworkFileSystem_NFS_AUTH_KRB5
    NFS_AUTH_KRB5i = _vmkctl.NetworkFileSystem_NFS_AUTH_KRB5i
    NFS_AUTH_KRB5p = _vmkctl.NetworkFileSystem_NFS_AUTH_KRB5p
    def GetRemoteHost(self) -> "std::string" : return _vmkctl.NetworkFileSystem_GetRemoteHost(self)
    def GetRemoteHosts(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.NetworkFileSystem_GetRemoteHosts(self)
    def GetRemoteShareName(self) -> "std::string" : return _vmkctl.NetworkFileSystem_GetRemoteShareName(self)
    def GetReadOnly(self) -> "bool" : return _vmkctl.NetworkFileSystem_GetReadOnly(self)
    def GetConfigReadOnly(self) -> "bool" : return _vmkctl.NetworkFileSystem_GetConfigReadOnly(self)
    def SetConfigReadOnly(self, *args) -> "void" : return _vmkctl.NetworkFileSystem_SetConfigReadOnly(self, *args)
    def GetConfigIsPE(self) -> "bool" : return _vmkctl.NetworkFileSystem_GetConfigIsPE(self)
    def SetConfigIsPE(self, *args) -> "void" : return _vmkctl.NetworkFileSystem_SetConfigIsPE(self, *args)
    def Mount(self, *args) -> "void" : return _vmkctl.NetworkFileSystem_Mount(self, *args)
    def Unmount(self, *args) -> "HostCtl::Storage::FileSystem::UnmountStatus" : return _vmkctl.NetworkFileSystem_Unmount(self, *args)
    def IsMounted(self) -> "bool" : return _vmkctl.NetworkFileSystem_IsMounted(self)
    def IsBusy(self) -> "bool" : return _vmkctl.NetworkFileSystem_IsBusy(self)
    def IsAccessible(self) -> "bool" : return _vmkctl.NetworkFileSystem_IsAccessible(self)
    def IsHidden(self) -> "bool" : return _vmkctl.NetworkFileSystem_IsHidden(self)
    def GetUuid(self) -> "std::string" : return _vmkctl.NetworkFileSystem_GetUuid(self)
    def GetUnstableWrites(self) -> "bool" : return _vmkctl.NetworkFileSystem_GetUnstableWrites(self)
    def SetUnstableWrites(self, *args) -> "void" : return _vmkctl.NetworkFileSystem_SetUnstableWrites(self, *args)
    def GetStats(self, *args) -> "void" : return _vmkctl.NetworkFileSystem_GetStats(self, *args)
    def GetWorldStats(self, *args) -> "void" : return _vmkctl.NetworkFileSystem_GetWorldStats(self, *args)
    def GetMaxReadTransferSize(self) -> "uint32" : return _vmkctl.NetworkFileSystem_GetMaxReadTransferSize(self)
    def GetMaxWriteTransferSize(self) -> "uint32" : return _vmkctl.NetworkFileSystem_GetMaxWriteTransferSize(self)
    def GetMaxQueueDepth(self) -> "uint32" : return _vmkctl.NetworkFileSystem_GetMaxQueueDepth(self)
    def SetMaxQueueDepth(self, *args) -> "void" : return _vmkctl.NetworkFileSystem_SetMaxQueueDepth(self, *args)
    def GetIormState(self) -> "long" : return _vmkctl.NetworkFileSystem_GetIormState(self)
    def SetIormState(self, *args) -> "void" : return _vmkctl.NetworkFileSystem_SetIormState(self, *args)
    def GetLatencyThreshold(self) -> "uint32" : return _vmkctl.NetworkFileSystem_GetLatencyThreshold(self)
    def SetLatencyThreshold(self, *args) -> "void" : return _vmkctl.NetworkFileSystem_SetLatencyThreshold(self, *args)
    def GetIOShares(self) -> "uint32" : return _vmkctl.NetworkFileSystem_GetIOShares(self)
    def GetClusterWideStats(self) -> "StorageIormInfo" : return _vmkctl.NetworkFileSystem_GetClusterWideStats(self)
    def GetIormStatus(self) -> "StorageIormStatus" : return _vmkctl.NetworkFileSystem_GetIormStatus(self)
    def SetSDRSPodID(self, *args) -> "void" : return _vmkctl.NetworkFileSystem_SetSDRSPodID(self, *args)
    def GetCredential(self, *args) -> "void" : return _vmkctl.NetworkFileSystem_GetCredential(self, *args)
    def SetCurrentPassword(self, *args) -> "void" : return _vmkctl.NetworkFileSystem_SetCurrentPassword(self, *args)
    def GetSecurityType(self) -> "HostCtl::Storage::NetworkFileSystem::SecurityType" : return _vmkctl.NetworkFileSystem_GetSecurityType(self)
    __swig_destroy__ = _vmkctl.delete_NetworkFileSystem
    __del__ = lambda self : None;
NetworkFileSystem_swigregister = _vmkctl.NetworkFileSystem_swigregister
NetworkFileSystem_swigregister(NetworkFileSystem)
NetworkFileSystem.NFS_AUTH_NONE_STR = _vmkctl.cvar.NetworkFileSystem_NFS_AUTH_NONE_STR
NetworkFileSystem.NFS_AUTH_SYS_STR = _vmkctl.cvar.NetworkFileSystem_NFS_AUTH_SYS_STR
NetworkFileSystem.NFS_AUTH_KRB5_STR = _vmkctl.cvar.NetworkFileSystem_NFS_AUTH_KRB5_STR
NetworkFileSystem.NFS_AUTH_KRB5I_STR = _vmkctl.cvar.NetworkFileSystem_NFS_AUTH_KRB5I_STR
NetworkFileSystem.NFS_AUTH_KRB5P_STR = _vmkctl.cvar.NetworkFileSystem_NFS_AUTH_KRB5P_STR
NetworkFileSystem.NFS_AUTH_UNKNOWN_STR = _vmkctl.cvar.NetworkFileSystem_NFS_AUTH_UNKNOWN_STR


def IsNotPE(*args) -> "bool" :
  return _vmkctl.IsNotPE(*args)
IsNotPE = _vmkctl.IsNotPE

def IsPE(*args) -> "bool" :
  return _vmkctl.IsPE(*args)
IsPE = _vmkctl.IsPE

def IsNotHidden(*args) -> "bool" :
  return _vmkctl.IsNotHidden(*args)
IsNotHidden = _vmkctl.IsNotHidden
class NetworkFileSystemImpl(NetworkFileSystem,VmFileSystemImpl):
    __swig_setmethods__ = {}
    for _s in [NetworkFileSystem,VmFileSystemImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkFileSystemImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [NetworkFileSystem,VmFileSystemImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkFileSystemImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_NetworkFileSystemImpl
    __del__ = lambda self : None;
    def GetRemoteHost(self) -> "std::string" : return _vmkctl.NetworkFileSystemImpl_GetRemoteHost(self)
    def GetRemoteHosts(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.NetworkFileSystemImpl_GetRemoteHosts(self)
    def GetRemoteShareName(self) -> "std::string" : return _vmkctl.NetworkFileSystemImpl_GetRemoteShareName(self)
    def GetReadOnly(self) -> "bool" : return _vmkctl.NetworkFileSystemImpl_GetReadOnly(self)
    def IsHidden(self) -> "bool" : return _vmkctl.NetworkFileSystemImpl_IsHidden(self)
    __swig_getmethods__["GetVSINodeID_mnt"] = lambda x: _vmkctl.NetworkFileSystemImpl_GetVSINodeID_mnt
    if _newclass:GetVSINodeID_mnt = staticmethod(_vmkctl.NetworkFileSystemImpl_GetVSINodeID_mnt)
    def GetExtents(self) -> "std::vector< HostCtl::Storage::DiskLunPartitionPtr,std::allocator< HostCtl::Storage::DiskLunPartitionPtr > >" : return _vmkctl.NetworkFileSystemImpl_GetExtents(self)
    def GetHeadPartition(self) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.NetworkFileSystemImpl_GetHeadPartition(self)
    def AddExtent(self, *args) -> "void" : return _vmkctl.NetworkFileSystemImpl_AddExtent(self, *args)
    def GetConfigEnabled(self) -> "bool" : return _vmkctl.NetworkFileSystemImpl_GetConfigEnabled(self)
    def GetConfigReadOnly(self) -> "bool" : return _vmkctl.NetworkFileSystemImpl_GetConfigReadOnly(self)
    def SetConfigReadOnly(self, *args) -> "void" : return _vmkctl.NetworkFileSystemImpl_SetConfigReadOnly(self, *args)
    def GetConfigIsPE(self) -> "bool" : return _vmkctl.NetworkFileSystemImpl_GetConfigIsPE(self)
    def SetConfigIsPE(self, *args) -> "void" : return _vmkctl.NetworkFileSystemImpl_SetConfigIsPE(self, *args)
    def SetVolumeName(self, *args) -> "void" : return _vmkctl.NetworkFileSystemImpl_SetVolumeName(self, *args)
    def Mount(self, *args) -> "void" : return _vmkctl.NetworkFileSystemImpl_Mount(self, *args)
    def Unmount(self, *args) -> "HostCtl::Storage::FileSystem::UnmountStatus" : return _vmkctl.NetworkFileSystemImpl_Unmount(self, *args)
    def IsMounted(self) -> "bool" : return _vmkctl.NetworkFileSystemImpl_IsMounted(self)
    def IsBusy(self) -> "bool" : return _vmkctl.NetworkFileSystemImpl_IsBusy(self)
    def IsAccessible(self) -> "bool" : return _vmkctl.NetworkFileSystemImpl_IsAccessible(self)
    def IsAccessibleWithReason(self, *args) -> "bool" : return _vmkctl.NetworkFileSystemImpl_IsAccessibleWithReason(self, *args)
    def GetUuid(self) -> "std::string" : return _vmkctl.NetworkFileSystemImpl_GetUuid(self)
    def IsActiveVolume(self, *args) -> "bool" : return _vmkctl.NetworkFileSystemImpl_IsActiveVolume(self, *args)
    def GetActiveVolumeUsers(self) -> "std::vector< HostCtl::Network::MacAddress,std::allocator< HostCtl::Network::MacAddress > >" : return _vmkctl.NetworkFileSystemImpl_GetActiveVolumeUsers(self)
    def GetVmfsUserInfo(self, *args) -> "std::vector< HostCtl::Storage::VmfsUserInfo,std::allocator< HostCtl::Storage::VmfsUserInfo > >" : return _vmkctl.NetworkFileSystemImpl_GetVmfsUserInfo(self, *args)
    def GetVAAIState(self) -> "HostCtl::Storage::VAAIState" : return _vmkctl.NetworkFileSystemImpl_GetVAAIState(self)
    def Refresh(self) -> "void" : return _vmkctl.NetworkFileSystemImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.NetworkFileSystemImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.NetworkFileSystemImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.NetworkFileSystemImpl_Print(self, *args)
    __swig_getmethods__["AddNetworkFileSystem"] = lambda x: _vmkctl.NetworkFileSystemImpl_AddNetworkFileSystem
    if _newclass:AddNetworkFileSystem = staticmethod(_vmkctl.NetworkFileSystemImpl_AddNetworkFileSystem)
    __swig_getmethods__["RemoveNetworkFileSystem"] = lambda x: _vmkctl.NetworkFileSystemImpl_RemoveNetworkFileSystem
    if _newclass:RemoveNetworkFileSystem = staticmethod(_vmkctl.NetworkFileSystemImpl_RemoveNetworkFileSystem)
    __swig_getmethods__["LabelExists"] = lambda x: _vmkctl.NetworkFileSystemImpl_LabelExists
    if _newclass:LabelExists = staticmethod(_vmkctl.NetworkFileSystemImpl_LabelExists)
    __swig_getmethods__["GetNetworkFileSystemByUUID"] = lambda x: _vmkctl.NetworkFileSystemImpl_GetNetworkFileSystemByUUID
    if _newclass:GetNetworkFileSystemByUUID = staticmethod(_vmkctl.NetworkFileSystemImpl_GetNetworkFileSystemByUUID)
    def GetUnstableWrites(self) -> "bool" : return _vmkctl.NetworkFileSystemImpl_GetUnstableWrites(self)
    def SetUnstableWrites(self, *args) -> "void" : return _vmkctl.NetworkFileSystemImpl_SetUnstableWrites(self, *args)
    __swig_getmethods__["GetStats"] = lambda x: _vmkctl.NetworkFileSystemImpl_GetStats
    if _newclass:GetStats = staticmethod(_vmkctl.NetworkFileSystemImpl_GetStats)
    def GetWorldStats(self, *args) -> "void" : return _vmkctl.NetworkFileSystemImpl_GetWorldStats(self, *args)
    def GetMaxReadTransferSize(self) -> "uint32" : return _vmkctl.NetworkFileSystemImpl_GetMaxReadTransferSize(self)
    def GetMaxWriteTransferSize(self) -> "uint32" : return _vmkctl.NetworkFileSystemImpl_GetMaxWriteTransferSize(self)
    def GetMaxQueueDepth(self) -> "uint32" : return _vmkctl.NetworkFileSystemImpl_GetMaxQueueDepth(self)
    def SetMaxQueueDepth(self, *args) -> "void" : return _vmkctl.NetworkFileSystemImpl_SetMaxQueueDepth(self, *args)
    def GetIormState(self) -> "long" : return _vmkctl.NetworkFileSystemImpl_GetIormState(self)
    def SetIormState(self, *args) -> "void" : return _vmkctl.NetworkFileSystemImpl_SetIormState(self, *args)
    def GetLatencyThreshold(self) -> "uint32" : return _vmkctl.NetworkFileSystemImpl_GetLatencyThreshold(self)
    def SetLatencyThreshold(self, *args) -> "void" : return _vmkctl.NetworkFileSystemImpl_SetLatencyThreshold(self, *args)
    def GetIOShares(self) -> "uint32" : return _vmkctl.NetworkFileSystemImpl_GetIOShares(self)
    def GetClusterWideStats(self) -> "HostCtl::Storage::StorageIormInfo" : return _vmkctl.NetworkFileSystemImpl_GetClusterWideStats(self)
    def GetIormStatus(self) -> "HostCtl::Storage::StorageIormStatus" : return _vmkctl.NetworkFileSystemImpl_GetIormStatus(self)
    def SetSDRSPodID(self, *args) -> "void" : return _vmkctl.NetworkFileSystemImpl_SetSDRSPodID(self, *args)
    __swig_getmethods__["UnsafeRemoveLockFiles"] = lambda x: _vmkctl.NetworkFileSystemImpl_UnsafeRemoveLockFiles
    if _newclass:UnsafeRemoveLockFiles = staticmethod(_vmkctl.NetworkFileSystemImpl_UnsafeRemoveLockFiles)
    def GetVolumeUnmapProperty(self) -> "HostCtl::Storage::VmfsVolumeUnmapProperty" : return _vmkctl.NetworkFileSystemImpl_GetVolumeUnmapProperty(self)
    def SetVolumeUnmapProperty(self, *args) -> "void" : return _vmkctl.NetworkFileSystemImpl_SetVolumeUnmapProperty(self, *args)
NetworkFileSystemImpl_swigregister = _vmkctl.NetworkFileSystemImpl_swigregister
NetworkFileSystemImpl_swigregister(NetworkFileSystemImpl)

def NetworkFileSystemImpl_GetVSINodeID_mnt() -> "uint32" :
  return _vmkctl.NetworkFileSystemImpl_GetVSINodeID_mnt()
NetworkFileSystemImpl_GetVSINodeID_mnt = _vmkctl.NetworkFileSystemImpl_GetVSINodeID_mnt
NetworkFileSystemImpl.NAS_TYPE = _vmkctl.cvar.NetworkFileSystemImpl_NAS_TYPE

def NetworkFileSystemImpl_AddNetworkFileSystem(*args) -> "HostCtl::Storage::NetworkFileSystemPtr" :
  return _vmkctl.NetworkFileSystemImpl_AddNetworkFileSystem(*args)
NetworkFileSystemImpl_AddNetworkFileSystem = _vmkctl.NetworkFileSystemImpl_AddNetworkFileSystem

def NetworkFileSystemImpl_RemoveNetworkFileSystem(*args) -> "void" :
  return _vmkctl.NetworkFileSystemImpl_RemoveNetworkFileSystem(*args)
NetworkFileSystemImpl_RemoveNetworkFileSystem = _vmkctl.NetworkFileSystemImpl_RemoveNetworkFileSystem

def NetworkFileSystemImpl_LabelExists(*args) -> "bool" :
  return _vmkctl.NetworkFileSystemImpl_LabelExists(*args)
NetworkFileSystemImpl_LabelExists = _vmkctl.NetworkFileSystemImpl_LabelExists

def NetworkFileSystemImpl_GetNetworkFileSystemByUUID(*args) -> "VmkCtl::Storage::NetworkFileSystemImpl *" :
  return _vmkctl.NetworkFileSystemImpl_GetNetworkFileSystemByUUID(*args)
NetworkFileSystemImpl_GetNetworkFileSystemByUUID = _vmkctl.NetworkFileSystemImpl_GetNetworkFileSystemByUUID

def NetworkFileSystemImpl_GetStats(*args) -> "void" :
  return _vmkctl.NetworkFileSystemImpl_GetStats(*args)
NetworkFileSystemImpl_GetStats = _vmkctl.NetworkFileSystemImpl_GetStats

def NetworkFileSystemImpl_UnsafeRemoveLockFiles(*args) -> "int" :
  return _vmkctl.NetworkFileSystemImpl_UnsafeRemoveLockFiles(*args)
NetworkFileSystemImpl_UnsafeRemoveLockFiles = _vmkctl.NetworkFileSystemImpl_UnsafeRemoveLockFiles

class ParallelScsiInterface(ScsiInterface):
    __swig_setmethods__ = {}
    for _s in [ScsiInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParallelScsiInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [ScsiInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParallelScsiInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_ParallelScsiInterface
    __del__ = lambda self : None;
ParallelScsiInterface_swigregister = _vmkctl.ParallelScsiInterface_swigregister
ParallelScsiInterface_swigregister(ParallelScsiInterface)

class ParallelScsiInterfaceImpl(ParallelScsiInterface,ScsiInterfaceImpl):
    __swig_setmethods__ = {}
    for _s in [ParallelScsiInterface,ScsiInterfaceImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParallelScsiInterfaceImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [ParallelScsiInterface,ScsiInterfaceImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ParallelScsiInterfaceImpl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_ParallelScsiInterfaceImpl
    __del__ = lambda self : None;
    def GetInterfaceType(self) -> "ScsiInterface::ScsiInterfaceType" : return _vmkctl.ParallelScsiInterfaceImpl_GetInterfaceType(self)
    def Refresh(self) -> "void" : return _vmkctl.ParallelScsiInterfaceImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.ParallelScsiInterfaceImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.ParallelScsiInterfaceImpl_Print(self, *args)
ParallelScsiInterfaceImpl_swigregister = _vmkctl.ParallelScsiInterfaceImpl_swigregister
ParallelScsiInterfaceImpl_swigregister(ParallelScsiInterfaceImpl)

class SlpConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlpConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlpConfig, name)
    __repr__ = _swig_repr
    DISCOVERY_DHCP = _vmkctl.SlpConfig_DISCOVERY_DHCP
    DISCOVERY_BROADCAST = _vmkctl.SlpConfig_DISCOVERY_BROADCAST
    DISCOVERY_MULTICAST = _vmkctl.SlpConfig_DISCOVERY_MULTICAST
    DISCOVERY_MANUAL = _vmkctl.SlpConfig_DISCOVERY_MANUAL
    DEFAULT_DA_PORT = _vmkctl.SlpConfig_DEFAULT_DA_PORT
    def __init__(self, *args): 
        this = _vmkctl.new_SlpConfig(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetDiscoveryMethod(self) -> "HostCtl::Storage::SlpConfig::DiscoveryMethod" : return _vmkctl.SlpConfig_GetDiscoveryMethod(self)
    def SetDiscoveryMethod(self, *args) -> "void" : return _vmkctl.SlpConfig_SetDiscoveryMethod(self, *args)
    def GetHostAddress(self) -> "HostCtl::Network::HostAddress" : return _vmkctl.SlpConfig_GetHostAddress(self)
    def GetPortNumber(self) -> "uint16" : return _vmkctl.SlpConfig_GetPortNumber(self)
    def SetHostAddress(self, *args) -> "void" : return _vmkctl.SlpConfig_SetHostAddress(self, *args)
    __swig_destroy__ = _vmkctl.delete_SlpConfig
    __del__ = lambda self : None;
SlpConfig_swigregister = _vmkctl.SlpConfig_swigregister
SlpConfig_swigregister(SlpConfig)

class iScsiBootTable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiBootTable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiBootTable, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_iScsiBootTable()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiBootTable
    __del__ = lambda self : None;
    def GetEnabled(self) -> "int" : return _vmkctl.iScsiBootTable_GetEnabled(self)
    def SetEnabled(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetEnabled(self, *args)
    def GetMacAddress(self) -> "std::string" : return _vmkctl.iScsiBootTable_GetMacAddress(self)
    def SetMacAddress(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetMacAddress(self, *args)
    def GetNicFlags(self) -> "int" : return _vmkctl.iScsiBootTable_GetNicFlags(self)
    def SetNicFlags(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetNicFlags(self, *args)
    def GetNicPciBusDevFunc(self) -> "int" : return _vmkctl.iScsiBootTable_GetNicPciBusDevFunc(self)
    def SetNicPciBusDevFunc(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetNicPciBusDevFunc(self, *args)
    def GetNicIP(self) -> "std::string" : return _vmkctl.iScsiBootTable_GetNicIP(self)
    def SetNicIP(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetNicIP(self, *args)
    def GetNicSubnetMask(self) -> "std::string" : return _vmkctl.iScsiBootTable_GetNicSubnetMask(self)
    def SetNicSubnetMask(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetNicSubnetMask(self, *args)
    def GetNicGateway(self) -> "std::string" : return _vmkctl.iScsiBootTable_GetNicGateway(self)
    def SetNicGateway(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetNicGateway(self, *args)
    def GetNicDhcp(self) -> "int" : return _vmkctl.iScsiBootTable_GetNicDhcp(self)
    def SetNicDhcp(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetNicDhcp(self, *args)
    def GetNicVlan(self) -> "int" : return _vmkctl.iScsiBootTable_GetNicVlan(self)
    def SetNicVlan(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetNicVlan(self, *args)
    def GetTargetBootFlags(self) -> "int" : return _vmkctl.iScsiBootTable_GetTargetBootFlags(self)
    def SetTargetBootFlags(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetTargetBootFlags(self, *args)
    def GetTargetIP(self) -> "std::string" : return _vmkctl.iScsiBootTable_GetTargetIP(self)
    def SetTargetIP(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetTargetIP(self, *args)
    def GetTargetPort(self) -> "int" : return _vmkctl.iScsiBootTable_GetTargetPort(self)
    def SetTargetPort(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetTargetPort(self, *args)
    def GetLun(self) -> "uint64" : return _vmkctl.iScsiBootTable_GetLun(self)
    def SetLun(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetLun(self, *args)
    def GetTargetName(self) -> "std::string" : return _vmkctl.iScsiBootTable_GetTargetName(self)
    def SetTargetName(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetTargetName(self, *args)
    def GetChapType(self) -> "int" : return _vmkctl.iScsiBootTable_GetChapType(self)
    def SetChapType(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetChapType(self, *args)
    def GetChapName(self) -> "std::string" : return _vmkctl.iScsiBootTable_GetChapName(self)
    def SetChapName(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetChapName(self, *args)
    def GetChapPwd(self) -> "std::string" : return _vmkctl.iScsiBootTable_GetChapPwd(self)
    def SetChapPwd(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetChapPwd(self, *args)
    def GetReverseChapName(self) -> "std::string" : return _vmkctl.iScsiBootTable_GetReverseChapName(self)
    def SetReverseChapName(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetReverseChapName(self, *args)
    def GetReverseChapPwd(self) -> "std::string" : return _vmkctl.iScsiBootTable_GetReverseChapPwd(self)
    def SetReverseChapPwd(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetReverseChapPwd(self, *args)
    def GetInitiatorBootFlags(self) -> "int" : return _vmkctl.iScsiBootTable_GetInitiatorBootFlags(self)
    def SetInitiatorBootFlags(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetInitiatorBootFlags(self, *args)
    def GetSlpIP(self) -> "std::string" : return _vmkctl.iScsiBootTable_GetSlpIP(self)
    def SetSlpIP(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetSlpIP(self, *args)
    def GetInitiatorName(self) -> "std::string" : return _vmkctl.iScsiBootTable_GetInitiatorName(self)
    def SetInitiatorName(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetInitiatorName(self, *args)
    def GetInitiatorAlias(self) -> "std::string" : return _vmkctl.iScsiBootTable_GetInitiatorAlias(self)
    def SetInitiatorAlias(self, *args) -> "void" : return _vmkctl.iScsiBootTable_SetInitiatorAlias(self, *args)
iScsiBootTable_swigregister = _vmkctl.iScsiBootTable_swigregister
iScsiBootTable_swigregister(iScsiBootTable)

class iScsiBootTables(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, iScsiBootTables, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, iScsiBootTables, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_iScsiBootTables()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_iScsiBootTables
    __del__ = lambda self : None;
    def GetPrimary(self) -> "HostCtl::Storage::iScsiBootTable" : return _vmkctl.iScsiBootTables_GetPrimary(self)
    def SetPrimary(self, *args) -> "void" : return _vmkctl.iScsiBootTables_SetPrimary(self, *args)
    def GetSecondary(self) -> "HostCtl::Storage::iScsiBootTable" : return _vmkctl.iScsiBootTables_GetSecondary(self)
    def SetSecondary(self, *args) -> "void" : return _vmkctl.iScsiBootTables_SetSecondary(self, *args)
iScsiBootTables_swigregister = _vmkctl.iScsiBootTables_swigregister
iScsiBootTables_swigregister(iScsiBootTables)

class SasStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SasStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SasStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["invalid_dword_count"] = _vmkctl.SasStats_invalid_dword_count_set
    __swig_getmethods__["invalid_dword_count"] = _vmkctl.SasStats_invalid_dword_count_get
    if _newclass:invalid_dword_count = _swig_property(_vmkctl.SasStats_invalid_dword_count_get, _vmkctl.SasStats_invalid_dword_count_set)
    __swig_setmethods__["running_disparity_error_count"] = _vmkctl.SasStats_running_disparity_error_count_set
    __swig_getmethods__["running_disparity_error_count"] = _vmkctl.SasStats_running_disparity_error_count_get
    if _newclass:running_disparity_error_count = _swig_property(_vmkctl.SasStats_running_disparity_error_count_get, _vmkctl.SasStats_running_disparity_error_count_set)
    __swig_setmethods__["loss_of_dword_sync_count"] = _vmkctl.SasStats_loss_of_dword_sync_count_set
    __swig_getmethods__["loss_of_dword_sync_count"] = _vmkctl.SasStats_loss_of_dword_sync_count_get
    if _newclass:loss_of_dword_sync_count = _swig_property(_vmkctl.SasStats_loss_of_dword_sync_count_get, _vmkctl.SasStats_loss_of_dword_sync_count_set)
    __swig_setmethods__["phy_reset_problem_count"] = _vmkctl.SasStats_phy_reset_problem_count_set
    __swig_getmethods__["phy_reset_problem_count"] = _vmkctl.SasStats_phy_reset_problem_count_get
    if _newclass:phy_reset_problem_count = _swig_property(_vmkctl.SasStats_phy_reset_problem_count_get, _vmkctl.SasStats_phy_reset_problem_count_set)
    def __init__(self): 
        this = _vmkctl.new_SasStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_SasStats
    __del__ = lambda self : None;
SasStats_swigregister = _vmkctl.SasStats_swigregister
SasStats_swigregister(SasStats)

class SasAttrs(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SasAttrs, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SasAttrs, name)
    __repr__ = _swig_repr
    __swig_setmethods__["manufacturer"] = _vmkctl.SasAttrs_manufacturer_set
    __swig_getmethods__["manufacturer"] = _vmkctl.SasAttrs_manufacturer_get
    if _newclass:manufacturer = _swig_property(_vmkctl.SasAttrs_manufacturer_get, _vmkctl.SasAttrs_manufacturer_set)
    __swig_setmethods__["serial_number"] = _vmkctl.SasAttrs_serial_number_set
    __swig_getmethods__["serial_number"] = _vmkctl.SasAttrs_serial_number_get
    if _newclass:serial_number = _swig_property(_vmkctl.SasAttrs_serial_number_get, _vmkctl.SasAttrs_serial_number_set)
    __swig_setmethods__["model"] = _vmkctl.SasAttrs_model_set
    __swig_getmethods__["model"] = _vmkctl.SasAttrs_model_get
    if _newclass:model = _swig_property(_vmkctl.SasAttrs_model_get, _vmkctl.SasAttrs_model_set)
    __swig_setmethods__["model_description"] = _vmkctl.SasAttrs_model_description_set
    __swig_getmethods__["model_description"] = _vmkctl.SasAttrs_model_description_get
    if _newclass:model_description = _swig_property(_vmkctl.SasAttrs_model_description_get, _vmkctl.SasAttrs_model_description_set)
    __swig_setmethods__["hardware_version"] = _vmkctl.SasAttrs_hardware_version_set
    __swig_getmethods__["hardware_version"] = _vmkctl.SasAttrs_hardware_version_get
    if _newclass:hardware_version = _swig_property(_vmkctl.SasAttrs_hardware_version_get, _vmkctl.SasAttrs_hardware_version_set)
    __swig_setmethods__["driver_version"] = _vmkctl.SasAttrs_driver_version_set
    __swig_getmethods__["driver_version"] = _vmkctl.SasAttrs_driver_version_get
    if _newclass:driver_version = _swig_property(_vmkctl.SasAttrs_driver_version_get, _vmkctl.SasAttrs_driver_version_set)
    __swig_setmethods__["option_rom_version"] = _vmkctl.SasAttrs_option_rom_version_set
    __swig_getmethods__["option_rom_version"] = _vmkctl.SasAttrs_option_rom_version_get
    if _newclass:option_rom_version = _swig_property(_vmkctl.SasAttrs_option_rom_version_get, _vmkctl.SasAttrs_option_rom_version_set)
    __swig_setmethods__["firmware_version"] = _vmkctl.SasAttrs_firmware_version_set
    __swig_getmethods__["firmware_version"] = _vmkctl.SasAttrs_firmware_version_get
    if _newclass:firmware_version = _swig_property(_vmkctl.SasAttrs_firmware_version_get, _vmkctl.SasAttrs_firmware_version_set)
    __swig_setmethods__["driver_name"] = _vmkctl.SasAttrs_driver_name_set
    __swig_getmethods__["driver_name"] = _vmkctl.SasAttrs_driver_name_get
    if _newclass:driver_name = _swig_property(_vmkctl.SasAttrs_driver_name_get, _vmkctl.SasAttrs_driver_name_set)
    __swig_setmethods__["vendor_specific_id"] = _vmkctl.SasAttrs_vendor_specific_id_set
    __swig_getmethods__["vendor_specific_id"] = _vmkctl.SasAttrs_vendor_specific_id_get
    if _newclass:vendor_specific_id = _swig_property(_vmkctl.SasAttrs_vendor_specific_id_get, _vmkctl.SasAttrs_vendor_specific_id_set)
    __swig_setmethods__["sas_address"] = _vmkctl.SasAttrs_sas_address_set
    __swig_getmethods__["sas_address"] = _vmkctl.SasAttrs_sas_address_get
    if _newclass:sas_address = _swig_property(_vmkctl.SasAttrs_sas_address_get, _vmkctl.SasAttrs_sas_address_set)
    __swig_setmethods__["enclosureID"] = _vmkctl.SasAttrs_enclosureID_set
    __swig_getmethods__["enclosureID"] = _vmkctl.SasAttrs_enclosureID_get
    if _newclass:enclosureID = _swig_property(_vmkctl.SasAttrs_enclosureID_get, _vmkctl.SasAttrs_enclosureID_set)
    __swig_setmethods__["bayID"] = _vmkctl.SasAttrs_bayID_set
    __swig_getmethods__["bayID"] = _vmkctl.SasAttrs_bayID_get
    if _newclass:bayID = _swig_property(_vmkctl.SasAttrs_bayID_get, _vmkctl.SasAttrs_bayID_set)
    __swig_setmethods__["phy_identifier"] = _vmkctl.SasAttrs_phy_identifier_set
    __swig_getmethods__["phy_identifier"] = _vmkctl.SasAttrs_phy_identifier_get
    if _newclass:phy_identifier = _swig_property(_vmkctl.SasAttrs_phy_identifier_get, _vmkctl.SasAttrs_phy_identifier_set)
    __swig_setmethods__["negotiated_linkrate"] = _vmkctl.SasAttrs_negotiated_linkrate_set
    __swig_getmethods__["negotiated_linkrate"] = _vmkctl.SasAttrs_negotiated_linkrate_get
    if _newclass:negotiated_linkrate = _swig_property(_vmkctl.SasAttrs_negotiated_linkrate_get, _vmkctl.SasAttrs_negotiated_linkrate_set)
    __swig_setmethods__["minimum_linkrate"] = _vmkctl.SasAttrs_minimum_linkrate_set
    __swig_getmethods__["minimum_linkrate"] = _vmkctl.SasAttrs_minimum_linkrate_get
    if _newclass:minimum_linkrate = _swig_property(_vmkctl.SasAttrs_minimum_linkrate_get, _vmkctl.SasAttrs_minimum_linkrate_set)
    __swig_setmethods__["maximum_linkrate"] = _vmkctl.SasAttrs_maximum_linkrate_set
    __swig_getmethods__["maximum_linkrate"] = _vmkctl.SasAttrs_maximum_linkrate_get
    if _newclass:maximum_linkrate = _swig_property(_vmkctl.SasAttrs_maximum_linkrate_get, _vmkctl.SasAttrs_maximum_linkrate_set)
    def __init__(self): 
        this = _vmkctl.new_SasAttrs()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_SasAttrs
    __del__ = lambda self : None;
SasAttrs_swigregister = _vmkctl.SasAttrs_swigregister
SasAttrs_swigregister(SasAttrs)

class SerialAttachedScsiInterface(ScsiInterface):
    __swig_setmethods__ = {}
    for _s in [ScsiInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SerialAttachedScsiInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [ScsiInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SerialAttachedScsiInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_SerialAttachedScsiInterface
    __del__ = lambda self : None;
    def GetAdapterString(self) -> "std::string" : return _vmkctl.SerialAttachedScsiInterface_GetAdapterString(self)
    def GetStats(self) -> "HostCtl::Storage::SasStats" : return _vmkctl.SerialAttachedScsiInterface_GetStats(self)
    def GetAttribs(self) -> "HostCtl::Storage::SasAttrs" : return _vmkctl.SerialAttachedScsiInterface_GetAttribs(self)
    def IssueReset(self) -> "void" : return _vmkctl.SerialAttachedScsiInterface_IssueReset(self)
SerialAttachedScsiInterface_swigregister = _vmkctl.SerialAttachedScsiInterface_swigregister
SerialAttachedScsiInterface_swigregister(SerialAttachedScsiInterface)

class UsbInterface(ScsiInterface):
    __swig_setmethods__ = {}
    for _s in [ScsiInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, UsbInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [ScsiInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, UsbInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_UsbInterface
    __del__ = lambda self : None;
UsbInterface_swigregister = _vmkctl.UsbInterface_swigregister
UsbInterface_swigregister(UsbInterface)

class SataInterface(ScsiInterface):
    __swig_setmethods__ = {}
    for _s in [ScsiInterface]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SataInterface, name, value)
    __swig_getmethods__ = {}
    for _s in [ScsiInterface]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SataInterface, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_SataInterface
    __del__ = lambda self : None;
SataInterface_swigregister = _vmkctl.SataInterface_swigregister
SataInterface_swigregister(SataInterface)

class PBCacheStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PBCacheStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PBCacheStats, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _vmkctl.PBCacheStats_size_set
    __swig_getmethods__["size"] = _vmkctl.PBCacheStats_size_get
    if _newclass:size = _swig_property(_vmkctl.PBCacheStats_size_get, _vmkctl.PBCacheStats_size_set)
    __swig_setmethods__["maxSize"] = _vmkctl.PBCacheStats_maxSize_set
    __swig_getmethods__["maxSize"] = _vmkctl.PBCacheStats_maxSize_get
    if _newclass:maxSize = _swig_property(_vmkctl.PBCacheStats_maxSize_get, _vmkctl.PBCacheStats_maxSize_set)
    __swig_setmethods__["workingSetSize"] = _vmkctl.PBCacheStats_workingSetSize_set
    __swig_getmethods__["workingSetSize"] = _vmkctl.PBCacheStats_workingSetSize_get
    if _newclass:workingSetSize = _swig_property(_vmkctl.PBCacheStats_workingSetSize_get, _vmkctl.PBCacheStats_workingSetSize_set)
    __swig_setmethods__["maxWorkingSetSize"] = _vmkctl.PBCacheStats_maxWorkingSetSize_set
    __swig_getmethods__["maxWorkingSetSize"] = _vmkctl.PBCacheStats_maxWorkingSetSize_get
    if _newclass:maxWorkingSetSize = _swig_property(_vmkctl.PBCacheStats_maxWorkingSetSize_get, _vmkctl.PBCacheStats_maxWorkingSetSize_set)
    __swig_setmethods__["overhead"] = _vmkctl.PBCacheStats_overhead_set
    __swig_getmethods__["overhead"] = _vmkctl.PBCacheStats_overhead_get
    if _newclass:overhead = _swig_property(_vmkctl.PBCacheStats_overhead_get, _vmkctl.PBCacheStats_overhead_set)
    __swig_setmethods__["capMissRatio"] = _vmkctl.PBCacheStats_capMissRatio_set
    __swig_getmethods__["capMissRatio"] = _vmkctl.PBCacheStats_capMissRatio_get
    if _newclass:capMissRatio = _swig_property(_vmkctl.PBCacheStats_capMissRatio_get, _vmkctl.PBCacheStats_capMissRatio_set)
    def __init__(self): 
        this = _vmkctl.new_PBCacheStats()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PBCacheStats
    __del__ = lambda self : None;
PBCacheStats_swigregister = _vmkctl.PBCacheStats_swigregister
PBCacheStats_swigregister(PBCacheStats)

class VmFileSystemPBCache(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, VmFileSystemPBCache, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, VmFileSystemPBCache, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetPBCacheStats(self) -> "HostCtl::Storage::PBCacheStats" : return _vmkctl.VmFileSystemPBCache_GetPBCacheStats(self)
    def ResetPBCacheStats(self) -> "void" : return _vmkctl.VmFileSystemPBCache_ResetPBCacheStats(self)
    __swig_destroy__ = _vmkctl.delete_VmFileSystemPBCache
    __del__ = lambda self : None;
VmFileSystemPBCache_swigregister = _vmkctl.VmFileSystemPBCache_swigregister
VmFileSystemPBCache_swigregister(VmFileSystemPBCache)

class StorageInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StorageInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StorageInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetScsiInterfaces(self) -> "std::vector< HostCtl::Storage::ScsiInterfacePtr,std::allocator< HostCtl::Storage::ScsiInterfacePtr > >" : return _vmkctl.StorageInfo_GetScsiInterfaces(self)
    def GetScsiInterface(self, *args) -> "HostCtl::Storage::ScsiInterfacePtr" : return _vmkctl.StorageInfo_GetScsiInterface(self, *args)
    def IsValidScsiInterface(self, *args) -> "bool" : return _vmkctl.StorageInfo_IsValidScsiInterface(self, *args)
    def GetFibreChannelInterfaces(self) -> "std::vector< HostCtl::Storage::FibreChannelInterfacePtr,std::allocator< HostCtl::Storage::FibreChannelInterfacePtr > >" : return _vmkctl.StorageInfo_GetFibreChannelInterfaces(self)
    def GetFibreChannelOverEthernetInterfaces(self) -> "std::vector< HostCtl::Storage::FibreChannelOverEthernetInterfacePtr,std::allocator< HostCtl::Storage::FibreChannelOverEthernetInterfacePtr > >" : return _vmkctl.StorageInfo_GetFibreChannelOverEthernetInterfaces(self)
    def GetiScsiInterfaces(self) -> "std::vector< HostCtl::Storage::iScsiInterfacePtr,std::allocator< HostCtl::Storage::iScsiInterfacePtr > >" : return _vmkctl.StorageInfo_GetiScsiInterfaces(self)
    def GetBlockScsiInterfaces(self) -> "std::vector< HostCtl::Storage::BlockScsiInterfacePtr,std::allocator< HostCtl::Storage::BlockScsiInterfacePtr > >" : return _vmkctl.StorageInfo_GetBlockScsiInterfaces(self)
    def GetIdeScsiInterfaces(self) -> "std::vector< HostCtl::Storage::IdeScsiInterfacePtr,std::allocator< HostCtl::Storage::IdeScsiInterfacePtr > >" : return _vmkctl.StorageInfo_GetIdeScsiInterfaces(self)
    def GetParallelScsiInterfaces(self) -> "std::vector< HostCtl::Storage::ParallelScsiInterfacePtr,std::allocator< HostCtl::Storage::ParallelScsiInterfacePtr > >" : return _vmkctl.StorageInfo_GetParallelScsiInterfaces(self)
    def GetSerialAttachedScsiInterfaces(self) -> "std::vector< HostCtl::Storage::SerialAttachedScsiInterfacePtr,std::allocator< HostCtl::Storage::SerialAttachedScsiInterfacePtr > >" : return _vmkctl.StorageInfo_GetSerialAttachedScsiInterfaces(self)
    def GetUsbInterfaces(self) -> "std::vector< HostCtl::Storage::UsbInterfacePtr,std::allocator< HostCtl::Storage::UsbInterfacePtr > >" : return _vmkctl.StorageInfo_GetUsbInterfaces(self)
    def GetSataInterfaces(self) -> "std::vector< HostCtl::Storage::SataInterfacePtr,std::allocator< HostCtl::Storage::SataInterfacePtr > >" : return _vmkctl.StorageInfo_GetSataInterfaces(self)
    def EnableSoftwareiScsi(self, bootTime : 'bool' = False) -> "void" : return _vmkctl.StorageInfo_EnableSoftwareiScsi(self, bootTime)
    def DisableSoftwareiScsi(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.StorageInfo_DisableSoftwareiScsi(self)
    def HasSoftwareiScsiEnabled(self) -> "bool" : return _vmkctl.StorageInfo_HasSoftwareiScsiEnabled(self)
    def GetLuns(self, includeOffline : 'bool' = False) -> "std::vector< HostCtl::Storage::LunPtr,std::allocator< HostCtl::Storage::LunPtr > >" : return _vmkctl.StorageInfo_GetLuns(self, includeOffline)
    def GetLunByUUID(self, *args) -> "HostCtl::Storage::LunPtr" : return _vmkctl.StorageInfo_GetLunByUUID(self, *args)
    def PurgeStaleLuns(self, *args) -> "void" : return _vmkctl.StorageInfo_PurgeStaleLuns(self, *args)
    def DeleteLunState(self, *args) -> "void" : return _vmkctl.StorageInfo_DeleteLunState(self, *args)
    def GetDiskLuns(self, *args) -> "std::vector< HostCtl::Storage::DiskLunPtr,std::allocator< HostCtl::Storage::DiskLunPtr > >" : return _vmkctl.StorageInfo_GetDiskLuns(self, *args)
    def GetCdroms(self) -> "std::vector< HostCtl::Storage::LunPtr,std::allocator< HostCtl::Storage::LunPtr > >" : return _vmkctl.StorageInfo_GetCdroms(self)
    def GetActiveDiagnosticPartition(self) -> "HostCtl::Storage::DiagnosticPartitionPtr" : return _vmkctl.StorageInfo_GetActiveDiagnosticPartition(self)
    def GetConfiguredDiagnosticPartition(self) -> "HostCtl::Storage::DiagnosticPartitionPtr" : return _vmkctl.StorageInfo_GetConfiguredDiagnosticPartition(self)
    def SetDiagnosticPartition(self, *args) -> "void" : return _vmkctl.StorageInfo_SetDiagnosticPartition(self, *args)
    def FindDiagnosticPartition(self) -> "HostCtl::Storage::DiagnosticPartitionPtr" : return _vmkctl.StorageInfo_FindDiagnosticPartition(self)
    def GetPotentialDiagnosticPartitions(self) -> "std::vector< HostCtl::Storage::DiagnosticPartitionPtr,std::allocator< HostCtl::Storage::DiagnosticPartitionPtr > >" : return _vmkctl.StorageInfo_GetPotentialDiagnosticPartitions(self)
    def ActivateDiagnosticPartition(self) -> "void" : return _vmkctl.StorageInfo_ActivateDiagnosticPartition(self)
    def DeactivateDiagnosticPartition(self) -> "void" : return _vmkctl.StorageInfo_DeactivateDiagnosticPartition(self)
    def GetActiveDiagnosticFile(self) -> "HostCtl::Storage::DiagnosticFilePtr" : return _vmkctl.StorageInfo_GetActiveDiagnosticFile(self)
    def GetConfiguredDiagnosticFile(self) -> "HostCtl::Storage::DiagnosticFilePtr" : return _vmkctl.StorageInfo_GetConfiguredDiagnosticFile(self)
    def ActivateDiagnosticFile(self) -> "void" : return _vmkctl.StorageInfo_ActivateDiagnosticFile(self)
    def DeactivateDiagnosticFile(self) -> "void" : return _vmkctl.StorageInfo_DeactivateDiagnosticFile(self)
    def DeactivateDiagnosticFileOnDatastore(self, *args) -> "bool" : return _vmkctl.StorageInfo_DeactivateDiagnosticFileOnDatastore(self, *args)
    def ReactivateDiagnosticFile(self, *args) -> "void" : return _vmkctl.StorageInfo_ReactivateDiagnosticFile(self, *args)
    def FindDiagnosticFile(self) -> "HostCtl::Storage::DiagnosticFilePtr" : return _vmkctl.StorageInfo_FindDiagnosticFile(self)
    def GetActiveDiagnosticVsan(self) -> "HostCtl::Storage::DiagnosticVsanPtr" : return _vmkctl.StorageInfo_GetActiveDiagnosticVsan(self)
    def GetConfiguredDiagnosticVsan(self) -> "HostCtl::Storage::DiagnosticVsanPtr" : return _vmkctl.StorageInfo_GetConfiguredDiagnosticVsan(self)
    def ActivateDiagnosticVsan(self) -> "void" : return _vmkctl.StorageInfo_ActivateDiagnosticVsan(self)
    def DeactivateDiagnosticVsan(self) -> "void" : return _vmkctl.StorageInfo_DeactivateDiagnosticVsan(self)
    def ReactivateDiagnosticVsan(self, *args) -> "void" : return _vmkctl.StorageInfo_ReactivateDiagnosticVsan(self, *args)
    def FindDiagnosticVsan(self) -> "HostCtl::Storage::DiagnosticVsanPtr" : return _vmkctl.StorageInfo_FindDiagnosticVsan(self)
    def GetFileSystems(self) -> "std::vector< HostCtl::Storage::FileSystemPtr,std::allocator< HostCtl::Storage::FileSystemPtr > >" : return _vmkctl.StorageInfo_GetFileSystems(self)
    def GetUnresolvedVolumes(self) -> "std::vector< HostCtl::Storage::UnresolvedVmfsVolumePtr,std::allocator< HostCtl::Storage::UnresolvedVmfsVolumePtr > >" : return _vmkctl.StorageInfo_GetUnresolvedVolumes(self)
    def GetNetworkFileSystems(self, *args) -> "std::vector< HostCtl::Storage::NetworkFileSystemPtr,std::allocator< HostCtl::Storage::NetworkFileSystemPtr > >" : return _vmkctl.StorageInfo_GetNetworkFileSystems(self, *args)
    def GetV3NetworkFileSystems(self, *args) -> "std::vector< HostCtl::Storage::NetworkFileSystemPtr,std::allocator< HostCtl::Storage::NetworkFileSystemPtr > >" : return _vmkctl.StorageInfo_GetV3NetworkFileSystems(self, *args)
    def GetV41NetworkFileSystems(self, *args) -> "std::vector< HostCtl::Storage::NetworkFileSystemPtr,std::allocator< HostCtl::Storage::NetworkFileSystemPtr > >" : return _vmkctl.StorageInfo_GetV41NetworkFileSystems(self, *args)
    def SetV41NetworkFileSystemDefaultCredential(self, *args) -> "void" : return _vmkctl.StorageInfo_SetV41NetworkFileSystemDefaultCredential(self, *args)
    def SetV41NetworkFileSystemDefaultCurrentPassword(self, *args) -> "void" : return _vmkctl.StorageInfo_SetV41NetworkFileSystemDefaultCurrentPassword(self, *args)
    def ChangeV41NetworkFileSystemDefaultCredential(self, *args) -> "void" : return _vmkctl.StorageInfo_ChangeV41NetworkFileSystemDefaultCredential(self, *args)
    def GetV41NetworkFileSystemDefaultCredential(self, *args) -> "void" : return _vmkctl.StorageInfo_GetV41NetworkFileSystemDefaultCredential(self, *args)
    def GetV41NetworkFileSystemDefaultCredentialPy(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.StorageInfo_GetV41NetworkFileSystemDefaultCredentialPy(self)
    def ClearV41NetworkFileSystemDefaultCredential(self) -> "void" : return _vmkctl.StorageInfo_ClearV41NetworkFileSystemDefaultCredential(self)
    def SecurityTypeToType(self, *args) -> "HostCtl::Storage::NetworkFileSystem::SecurityType" : return _vmkctl.StorageInfo_SecurityTypeToType(self, *args)
    def SecurityTypeToString(self, *args) -> "std::string" : return _vmkctl.StorageInfo_SecurityTypeToString(self, *args)
    def IsHiddenVolume(self, *args) -> "bool" : return _vmkctl.StorageInfo_IsHiddenVolume(self, *args)
    def GetVmfsFileSystems(self, *args) -> "std::vector< HostCtl::Storage::VmFileSystemPtr,std::allocator< HostCtl::Storage::VmFileSystemPtr > >" : return _vmkctl.StorageInfo_GetVmfsFileSystems(self, *args)
    def GetVmfsFileSystemsList(self, *args) -> "std::vector< HostCtl::Storage::VmFileSystemPtr,std::allocator< HostCtl::Storage::VmFileSystemPtr > >" : return _vmkctl.StorageInfo_GetVmfsFileSystemsList(self, *args)
    def GetVmfsPBCache(self) -> "HostCtl::Storage::VmFileSystemPBCachePtr" : return _vmkctl.StorageInfo_GetVmfsPBCache(self)
    def GetVFATFileSystems(self) -> "std::vector< HostCtl::Storage::VFATFileSystemPtr,std::allocator< HostCtl::Storage::VFATFileSystemPtr > >" : return _vmkctl.StorageInfo_GetVFATFileSystems(self)
    def GetVsanFileSystems(self) -> "std::vector< HostCtl::Storage::VsanFileSystemPtr,std::allocator< HostCtl::Storage::VsanFileSystemPtr > >" : return _vmkctl.StorageInfo_GetVsanFileSystems(self)
    def GetPMemFileSystems(self) -> "std::vector< HostCtl::Storage::PMemFileSystemPtr,std::allocator< HostCtl::Storage::PMemFileSystemPtr > >" : return _vmkctl.StorageInfo_GetPMemFileSystems(self)
    def GetPMemFileSystemByPath(self, *args) -> "HostCtl::Storage::PMemFileSystemPtr" : return _vmkctl.StorageInfo_GetPMemFileSystemByPath(self, *args)
    def AddNetworkFileSystem(self, *args) -> "HostCtl::Storage::NetworkFileSystemPtr" : return _vmkctl.StorageInfo_AddNetworkFileSystem(self, *args)
    def AddV41NetworkFileSystem(self, *args) -> "HostCtl::Storage::NetworkFileSystemPtr" : return _vmkctl.StorageInfo_AddV41NetworkFileSystem(self, *args)
    def RemoveNetworkFileSystem(self, *args) -> "void" : return _vmkctl.StorageInfo_RemoveNetworkFileSystem(self, *args)
    def UpdateVvolVendorProvider(self, *args) -> "void" : return _vmkctl.StorageInfo_UpdateVvolVendorProvider(self, *args)
    def RemoveVvolVendorProvider(self, *args) -> "void" : return _vmkctl.StorageInfo_RemoveVvolVendorProvider(self, *args)
    def GetVvolVendorProviders(self, *args) -> "void" : return _vmkctl.StorageInfo_GetVvolVendorProviders(self, *args)
    def RestoreVvolVendorProvider(self) -> "void" : return _vmkctl.StorageInfo_RestoreVvolVendorProvider(self)
    def RestoreVvolContainer(self) -> "void" : return _vmkctl.StorageInfo_RestoreVvolContainer(self)
    def RemoveVvolFileSystem(self, *args) -> "void" : return _vmkctl.StorageInfo_RemoveVvolFileSystem(self, *args)
    def NotifyVvolProtocolEndpointEvent(self, *args) -> "void" : return _vmkctl.StorageInfo_NotifyVvolProtocolEndpointEvent(self, *args)
    def VvolVpExists(self, *args) -> "bool" : return _vmkctl.StorageInfo_VvolVpExists(self, *args)
    def GetFileSystemByUUID(self, *args) -> "HostCtl::Storage::VmFileSystemPtr" : return _vmkctl.StorageInfo_GetFileSystemByUUID(self, *args)
    def GetFileSystemByLabel(self, *args) -> "HostCtl::Storage::VmFileSystemPtr" : return _vmkctl.StorageInfo_GetFileSystemByLabel(self, *args)
    def GetFileSystemByPath(self, *args) -> "HostCtl::Storage::VmFileSystemPtr" : return _vmkctl.StorageInfo_GetFileSystemByPath(self, *args)
    def GetNetworkFileSystemByLabel(self, *args) -> "HostCtl::Storage::NetworkFileSystemPtr" : return _vmkctl.StorageInfo_GetNetworkFileSystemByLabel(self, *args)
    def GetVsanFileSystemByPath(self, *args) -> "HostCtl::Storage::VsanFileSystemPtr" : return _vmkctl.StorageInfo_GetVsanFileSystemByPath(self, *args)
    def GetObjectStoreFileSystemByPath(self, *args) -> "HostCtl::Storage::ObjectStoreFileSystemPtr" : return _vmkctl.StorageInfo_GetObjectStoreFileSystemByPath(self, *args)
    def FormatFileSystem(self, *args) -> "HostCtl::Storage::VmFileSystemPtr" : return _vmkctl.StorageInfo_FormatFileSystem(self, *args)
    def RescanVmfs(self) -> "void" : return _vmkctl.StorageInfo_RescanVmfs(self)
    def RescanOneVmfsVolume(self, *args) -> "void" : return _vmkctl.StorageInfo_RescanOneVmfsVolume(self, *args)
    def RescanVmfsDevices(self, *args) -> "void" : return _vmkctl.StorageInfo_RescanVmfsDevices(self, *args)
    def AutomountVolumes(self) -> "bool" : return _vmkctl.StorageInfo_AutomountVolumes(self)
    def AutoFullMountVolumes(self) -> "bool" : return _vmkctl.StorageInfo_AutoFullMountVolumes(self)
    def DeleteVmfsFileSystemState(self, *args) -> "void" : return _vmkctl.StorageInfo_DeleteVmfsFileSystemState(self, *args)
    def GetiScsiBootTables(self) -> "HostCtl::Storage::iScsiBootTables" : return _vmkctl.StorageInfo_GetiScsiBootTables(self)
    def IsValidPsaPluginName(self, *args) -> "bool" : return _vmkctl.StorageInfo_IsValidPsaPluginName(self, *args)
    def GetPsaPluginNames(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.StorageInfo_GetPsaPluginNames(self)
    def GetScsiPaths(self) -> "std::vector< HostCtl::Storage::ScsiPathPtr,std::allocator< HostCtl::Storage::ScsiPathPtr > >" : return _vmkctl.StorageInfo_GetScsiPaths(self)
    def GetScsiAdaptersForDevice(self, *args) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.StorageInfo_GetScsiAdaptersForDevice(self, *args)
    def AddPsaClaimRule(self, *args) -> "void" : return _vmkctl.StorageInfo_AddPsaClaimRule(self, *args)
    def RemovePsaClaimRule(self, *args) -> "void" : return _vmkctl.StorageInfo_RemovePsaClaimRule(self, *args)
    def RemoveUnregisteredClaimRules(self, *args) -> "void" : return _vmkctl.StorageInfo_RemoveUnregisteredClaimRules(self, *args)
    def ClearPsaClaimRules(self, *args) -> "void" : return _vmkctl.StorageInfo_ClearPsaClaimRules(self, *args)
    def RunPsaClaimRules(self, *args) -> "void" : return _vmkctl.StorageInfo_RunPsaClaimRules(self, *args)
    def LoadPsaClaimRules(self, *args) -> "void" : return _vmkctl.StorageInfo_LoadPsaClaimRules(self, *args)
    def SetPsaAutoClaiming(self, *args) -> "void" : return _vmkctl.StorageInfo_SetPsaAutoClaiming(self, *args)
    def UnclaimPaths(self, *args) -> "void" : return _vmkctl.StorageInfo_UnclaimPaths(self, *args)
    def UnclaimPathsByPlugin(self, *args) -> "void" : return _vmkctl.StorageInfo_UnclaimPathsByPlugin(self, *args)
    def UnclaimPathsByDevice(self, *args) -> "void" : return _vmkctl.StorageInfo_UnclaimPathsByDevice(self, *args)
    def DetachFiltersFromDevice(self, *args) -> "void" : return _vmkctl.StorageInfo_DetachFiltersFromDevice(self, *args)
    def AttachFiltersToDevice(self, *args) -> "void" : return _vmkctl.StorageInfo_AttachFiltersToDevice(self, *args)
    def ClaimPaths(self, *args) -> "void" : return _vmkctl.StorageInfo_ClaimPaths(self, *args)
    def GetDeviceByName(self, *args) -> "HostCtl::Storage::LunPtr" : return _vmkctl.StorageInfo_GetDeviceByName(self, *args)
    def GetDeviceByDevfsPath(self, *args) -> "HostCtl::Storage::LunPtr" : return _vmkctl.StorageInfo_GetDeviceByDevfsPath(self, *args)
    def GetPartitionByName(self, *args) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.StorageInfo_GetPartitionByName(self, *args)
    def GetPartitionByNumber(self, *args) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.StorageInfo_GetPartitionByNumber(self, *args)
    def GetPartitionByDevfsPath(self, *args) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.StorageInfo_GetPartitionByDevfsPath(self, *args)
    def GetDisplayNameMap(self) -> "std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >" : return _vmkctl.StorageInfo_GetDisplayNameMap(self)
    def GetPathByName(self, *args) -> "HostCtl::Storage::ScsiPathPtr" : return _vmkctl.StorageInfo_GetPathByName(self, *args)
    def RegisterModule(self, *args) -> "void" : return _vmkctl.StorageInfo_RegisterModule(self, *args)
    def UnRegisterModule(self, *args) -> "void" : return _vmkctl.StorageInfo_UnRegisterModule(self, *args)
    def GetRegistered(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.StorageInfo_GetRegistered(self)
    def GetRegisteredModule(self, *args) -> "HostCtl::Storage::StorageInfo::RegisteredModuleData" : return _vmkctl.StorageInfo_GetRegisteredModule(self, *args)
    def IsRegisteredPsaPluginName(self, *args) -> "bool" : return _vmkctl.StorageInfo_IsRegisteredPsaPluginName(self, *args)
    def GetiScsiBoundNicListWithPathStatus(self, *args) -> "void" : return _vmkctl.StorageInfo_GetiScsiBoundNicListWithPathStatus(self, *args)
    def GetiScsiPnicMigrationStatus(self, *args) -> "void" : return _vmkctl.StorageInfo_GetiScsiPnicMigrationStatus(self, *args)
    def GetiScsiMigrationDependancy(self, *args) -> "void" : return _vmkctl.StorageInfo_GetiScsiMigrationDependancy(self, *args)
    def GetiScsiVnicPathStatusMap(self, *args) -> "void" : return _vmkctl.StorageInfo_GetiScsiVnicPathStatusMap(self, *args)
    def GetiScsiVnicPathList(self, *args) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.StorageInfo_GetiScsiVnicPathList(self, *args)
    def CheckVnicCompliance(self, *args) -> "HostCtl::Storage::iScsiPortErrorCodes" : return _vmkctl.StorageInfo_CheckVnicCompliance(self, *args)
    def ShowUsage(self, *args) -> "std::string" : return _vmkctl.StorageInfo_ShowUsage(self, *args)
    def RescanAdapters(self, adapterName : 'string' = "*", type : 'string' = "all", 
    skipClaim : 'bool' = False) -> "std::string" : return _vmkctl.StorageInfo_RescanAdapters(self, adapterName, type, skipClaim)
    def SignalIORM(self, *args) -> "void" : return _vmkctl.StorageInfo_SignalIORM(self, *args)
    def GetVolumeConfigOptions(self, *args) -> "std::vector< HostCtl::Storage::VmfsVolumeConfigOption,std::allocator< HostCtl::Storage::VmfsVolumeConfigOption > > const" : return _vmkctl.StorageInfo_GetVolumeConfigOptions(self, *args)
    __swig_destroy__ = _vmkctl.delete_StorageInfo
    __del__ = lambda self : None;
StorageInfo_swigregister = _vmkctl.StorageInfo_swigregister
StorageInfo_swigregister(StorageInfo)

class StorageInfoScopedCache(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StorageInfoScopedCache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StorageInfoScopedCache, name)
    __repr__ = _swig_repr
    def __init__(self, keep : 'bool' = False): 
        this = _vmkctl.new_StorageInfoScopedCache(keep)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_StorageInfoScopedCache
    __del__ = lambda self : None;
    def EnableGlobal(self) -> "void" : return _vmkctl.StorageInfoScopedCache_EnableGlobal(self)
StorageInfoScopedCache_swigregister = _vmkctl.StorageInfoScopedCache_swigregister
StorageInfoScopedCache_swigregister(StorageInfoScopedCache)

SECONDARY_GPT_TABLE_SIZE = _vmkctl.SECONDARY_GPT_TABLE_SIZE
SCRATCH_VFAT_PARTITION = _vmkctl.SCRATCH_VFAT_PARTITION
SCRATCH_UFS_PARTITION = _vmkctl.SCRATCH_UFS_PARTITION
NON_SCRATCH_UFS_PARTITION = _vmkctl.NON_SCRATCH_UFS_PARTITION
NON_SCRATCH_VFAT_PARTITION = _vmkctl.NON_SCRATCH_VFAT_PARTITION
TIMESTAMPFILE = _vmkctl.TIMESTAMPFILE
class StorageInfoImpl(StorageInfo,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [StorageInfo,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StorageInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [StorageInfo,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StorageInfoImpl, name)
    __repr__ = _swig_repr
    STORAGE_CONTROLLER_TYPE_SCSI = _vmkctl.StorageInfoImpl_STORAGE_CONTROLLER_TYPE_SCSI
    STORAGE_CONTROLLER_TYPE_IDE = _vmkctl.StorageInfoImpl_STORAGE_CONTROLLER_TYPE_IDE
    STORAGE_CONTROLLER_TYPE_FLOPPY = _vmkctl.StorageInfoImpl_STORAGE_CONTROLLER_TYPE_FLOPPY
    STORAGE_CONTROLLER_TYPE_IPI = _vmkctl.StorageInfoImpl_STORAGE_CONTROLLER_TYPE_IPI
    STORAGE_CONTROLLER_TYPE_RAID = _vmkctl.StorageInfoImpl_STORAGE_CONTROLLER_TYPE_RAID
    STORAGE_CONTROLLER_TYPE_ATA = _vmkctl.StorageInfoImpl_STORAGE_CONTROLLER_TYPE_ATA
    STORAGE_CONTROLLER_TYPE_SATA = _vmkctl.StorageInfoImpl_STORAGE_CONTROLLER_TYPE_SATA
    STORAGE_CONTROLLER_TYPE_SAS = _vmkctl.StorageInfoImpl_STORAGE_CONTROLLER_TYPE_SAS
    STORAGE_CONTROLLER_TYPE_OTHER = _vmkctl.StorageInfoImpl_STORAGE_CONTROLLER_TYPE_OTHER
    def __init__(self): 
        this = _vmkctl.new_StorageInfoImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_StorageInfoImpl
    __del__ = lambda self : None;
    def PreferenceInit(self) -> "void" : return _vmkctl.StorageInfoImpl_PreferenceInit(self)
    def GetClaimRuleClassString(self, *args) -> "std::string" : return _vmkctl.StorageInfoImpl_GetClaimRuleClassString(self, *args)
    def GetClaimRuleClass(self, *args) -> "HostCtl::Storage::PSAClaimRuleClass" : return _vmkctl.StorageInfoImpl_GetClaimRuleClass(self, *args)
    def GetPluginConfigString(self, *args) -> "std::string" : return _vmkctl.StorageInfoImpl_GetPluginConfigString(self, *args)
    def GetScsiInterfaces(self) -> "std::vector< HostCtl::Storage::ScsiInterfacePtr,std::allocator< HostCtl::Storage::ScsiInterfacePtr > >" : return _vmkctl.StorageInfoImpl_GetScsiInterfaces(self)
    def GetScsiInterface(self, *args) -> "HostCtl::Storage::ScsiInterfacePtr" : return _vmkctl.StorageInfoImpl_GetScsiInterface(self, *args)
    def IsValidScsiInterface(self, *args) -> "bool" : return _vmkctl.StorageInfoImpl_IsValidScsiInterface(self, *args)
    def GetFibreChannelInterfaces(self) -> "std::vector< HostCtl::Storage::FibreChannelInterfacePtr,std::allocator< HostCtl::Storage::FibreChannelInterfacePtr > >" : return _vmkctl.StorageInfoImpl_GetFibreChannelInterfaces(self)
    def GetFibreChannelOverEthernetInterfaces(self) -> "std::vector< HostCtl::Storage::FibreChannelOverEthernetInterfacePtr,std::allocator< HostCtl::Storage::FibreChannelOverEthernetInterfacePtr > >" : return _vmkctl.StorageInfoImpl_GetFibreChannelOverEthernetInterfaces(self)
    def GetiScsiInterfaces(self) -> "std::vector< HostCtl::Storage::iScsiInterfacePtr,std::allocator< HostCtl::Storage::iScsiInterfacePtr > >" : return _vmkctl.StorageInfoImpl_GetiScsiInterfaces(self)
    def GetBlockScsiInterfaces(self) -> "std::vector< HostCtl::Storage::BlockScsiInterfacePtr,std::allocator< HostCtl::Storage::BlockScsiInterfacePtr > >" : return _vmkctl.StorageInfoImpl_GetBlockScsiInterfaces(self)
    def GetIdeScsiInterfaces(self) -> "std::vector< HostCtl::Storage::IdeScsiInterfacePtr,std::allocator< HostCtl::Storage::IdeScsiInterfacePtr > >" : return _vmkctl.StorageInfoImpl_GetIdeScsiInterfaces(self)
    def GetParallelScsiInterfaces(self) -> "std::vector< HostCtl::Storage::ParallelScsiInterfacePtr,std::allocator< HostCtl::Storage::ParallelScsiInterfacePtr > >" : return _vmkctl.StorageInfoImpl_GetParallelScsiInterfaces(self)
    def GetSerialAttachedScsiInterfaces(self) -> "std::vector< HostCtl::Storage::SerialAttachedScsiInterfacePtr,std::allocator< HostCtl::Storage::SerialAttachedScsiInterfacePtr > >" : return _vmkctl.StorageInfoImpl_GetSerialAttachedScsiInterfaces(self)
    def GetUsbInterfaces(self) -> "std::vector< HostCtl::Storage::UsbInterfacePtr,std::allocator< HostCtl::Storage::UsbInterfacePtr > >" : return _vmkctl.StorageInfoImpl_GetUsbInterfaces(self)
    def GetSataInterfaces(self) -> "std::vector< HostCtl::Storage::SataInterfacePtr,std::allocator< HostCtl::Storage::SataInterfacePtr > >" : return _vmkctl.StorageInfoImpl_GetSataInterfaces(self)
    def EnableSoftwareiScsi(self, bootTime : 'bool' = False) -> "void" : return _vmkctl.StorageInfoImpl_EnableSoftwareiScsi(self, bootTime)
    def DisableSoftwareiScsi(self) -> "HostCtl::Storage::iScsiInterface::iScsiStatus" : return _vmkctl.StorageInfoImpl_DisableSoftwareiScsi(self)
    def HasSoftwareiScsiEnabled(self) -> "bool" : return _vmkctl.StorageInfoImpl_HasSoftwareiScsiEnabled(self)
    def CheckVnicCompliance(self, *args) -> "HostCtl::Storage::iScsiPortErrorCodes" : return _vmkctl.StorageInfoImpl_CheckVnicCompliance(self, *args)
    def GetLuns(self, includeOffline : 'bool' = False) -> "std::vector< HostCtl::Storage::LunPtr,std::allocator< HostCtl::Storage::LunPtr > >" : return _vmkctl.StorageInfoImpl_GetLuns(self, includeOffline)
    def PurgeStaleLuns(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_PurgeStaleLuns(self, *args)
    def GetLunByUUID(self, *args) -> "HostCtl::Storage::LunPtr" : return _vmkctl.StorageInfoImpl_GetLunByUUID(self, *args)
    def DeleteLunState(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_DeleteLunState(self, *args)
    def CheckLunInUse(self, *args) -> "bool" : return _vmkctl.StorageInfoImpl_CheckLunInUse(self, *args)
    def IsValidPsaPluginName(self, *args) -> "bool" : return _vmkctl.StorageInfoImpl_IsValidPsaPluginName(self, *args)
    def GetPsaPluginNames(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.StorageInfoImpl_GetPsaPluginNames(self)
    def IsValidPsaClaimRuleClass(self, *args) -> "bool" : return _vmkctl.StorageInfoImpl_IsValidPsaClaimRuleClass(self, *args)
    def GetPsaClaimRuleClasses(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.StorageInfoImpl_GetPsaClaimRuleClasses(self)
    def GetScsiPaths(self) -> "std::vector< HostCtl::Storage::ScsiPathPtr,std::allocator< HostCtl::Storage::ScsiPathPtr > >" : return _vmkctl.StorageInfoImpl_GetScsiPaths(self)
    def GetScsiAdaptersForDevice(self, *args) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.StorageInfoImpl_GetScsiAdaptersForDevice(self, *args)
    def AddPsaClaimRule(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_AddPsaClaimRule(self, *args)
    def RemovePsaClaimRule(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_RemovePsaClaimRule(self, *args)
    def RemoveUnregisteredClaimRules(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_RemoveUnregisteredClaimRules(self, *args)
    def ClearPsaClaimRules(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_ClearPsaClaimRules(self, *args)
    def LoadPsaClaimRules(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_LoadPsaClaimRules(self, *args)
    def RunPsaClaimRules(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_RunPsaClaimRules(self, *args)
    def WaitForPathDiscovery(self) -> "void" : return _vmkctl.StorageInfoImpl_WaitForPathDiscovery(self)
    def WaitForDeviceDiscovery(self) -> "void" : return _vmkctl.StorageInfoImpl_WaitForDeviceDiscovery(self)
    def SetRescanRunning(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_SetRescanRunning(self, *args)
    def RescanAdapters(self, *args) -> "std::string" : return _vmkctl.StorageInfoImpl_RescanAdapters(self, *args)
    def GetDiskLuns(self, *args) -> "std::vector< HostCtl::Storage::DiskLunPtr,std::allocator< HostCtl::Storage::DiskLunPtr > >" : return _vmkctl.StorageInfoImpl_GetDiskLuns(self, *args)
    def GetCdroms(self) -> "std::vector< HostCtl::Storage::LunPtr,std::allocator< HostCtl::Storage::LunPtr > >" : return _vmkctl.StorageInfoImpl_GetCdroms(self)
    def GetUWSwapPartition(self) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.StorageInfoImpl_GetUWSwapPartition(self)
    def SetUWSwapPartition(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_SetUWSwapPartition(self, *args)
    def GetActiveDiagnosticPartition(self) -> "HostCtl::Storage::DiagnosticPartitionPtr" : return _vmkctl.StorageInfoImpl_GetActiveDiagnosticPartition(self)
    def IsActiveDiagnosticPartitionEnabled(self) -> "bool" : return _vmkctl.StorageInfoImpl_IsActiveDiagnosticPartitionEnabled(self)
    def GetConfiguredDiagnosticPartition(self) -> "HostCtl::Storage::DiagnosticPartitionPtr" : return _vmkctl.StorageInfoImpl_GetConfiguredDiagnosticPartition(self)
    def SetDiagnosticPartition(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_SetDiagnosticPartition(self, *args)
    def UnconfigureDiagnosticPartition(self) -> "void" : return _vmkctl.StorageInfoImpl_UnconfigureDiagnosticPartition(self)
    def FindDiagnosticPartition(self) -> "HostCtl::Storage::DiagnosticPartitionPtr" : return _vmkctl.StorageInfoImpl_FindDiagnosticPartition(self)
    def ActivateDiagnosticPartition(self) -> "void" : return _vmkctl.StorageInfoImpl_ActivateDiagnosticPartition(self)
    def DeactivateDiagnosticPartition(self) -> "void" : return _vmkctl.StorageInfoImpl_DeactivateDiagnosticPartition(self)
    def GetPotentialDiskPartitions(self, *args) -> "std::vector< HostCtl::Storage::DiskLunPartitionPtr,std::allocator< HostCtl::Storage::DiskLunPartitionPtr > >" : return _vmkctl.StorageInfoImpl_GetPotentialDiskPartitions(self, *args)
    def GetPotentialDiagnosticPartitions(self) -> "std::vector< HostCtl::Storage::DiagnosticPartitionPtr,std::allocator< HostCtl::Storage::DiagnosticPartitionPtr > >" : return _vmkctl.StorageInfoImpl_GetPotentialDiagnosticPartitions(self)
    def GetActiveDiagnosticFile(self) -> "HostCtl::Storage::DiagnosticFilePtr" : return _vmkctl.StorageInfoImpl_GetActiveDiagnosticFile(self)
    def GetConfiguredDiagnosticFile(self) -> "HostCtl::Storage::DiagnosticFilePtr" : return _vmkctl.StorageInfoImpl_GetConfiguredDiagnosticFile(self)
    def IsActiveDiagnosticFileEnabled(self) -> "bool" : return _vmkctl.StorageInfoImpl_IsActiveDiagnosticFileEnabled(self)
    def SetDiagnosticFile(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_SetDiagnosticFile(self, *args)
    def FindDiagnosticFile(self) -> "HostCtl::Storage::DiagnosticFilePtr" : return _vmkctl.StorageInfoImpl_FindDiagnosticFile(self)
    def ActivateDiagnosticFile(self) -> "void" : return _vmkctl.StorageInfoImpl_ActivateDiagnosticFile(self)
    def DeactivateDiagnosticFile(self) -> "void" : return _vmkctl.StorageInfoImpl_DeactivateDiagnosticFile(self)
    def UnconfigureDiagnosticFile(self) -> "void" : return _vmkctl.StorageInfoImpl_UnconfigureDiagnosticFile(self)
    def DeactivateDiagnosticFileOnDatastore(self, *args) -> "bool" : return _vmkctl.StorageInfoImpl_DeactivateDiagnosticFileOnDatastore(self, *args)
    def ReactivateDiagnosticFile(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_ReactivateDiagnosticFile(self, *args)
    def GetPotentialDiagnosticFiles(self) -> "std::vector< HostCtl::Storage::DiagnosticFilePtr,std::allocator< HostCtl::Storage::DiagnosticFilePtr > >" : return _vmkctl.StorageInfoImpl_GetPotentialDiagnosticFiles(self)
    def GetActiveDiagnosticVsan(self) -> "HostCtl::Storage::DiagnosticVsanPtr" : return _vmkctl.StorageInfoImpl_GetActiveDiagnosticVsan(self)
    def GetConfiguredDiagnosticVsan(self) -> "HostCtl::Storage::DiagnosticVsanPtr" : return _vmkctl.StorageInfoImpl_GetConfiguredDiagnosticVsan(self)
    def IsActiveDiagnosticVsanEnabled(self) -> "bool" : return _vmkctl.StorageInfoImpl_IsActiveDiagnosticVsanEnabled(self)
    def SetDiagnosticVsan(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_SetDiagnosticVsan(self, *args)
    def FindDiagnosticVsan(self) -> "HostCtl::Storage::DiagnosticVsanPtr" : return _vmkctl.StorageInfoImpl_FindDiagnosticVsan(self)
    def ActivateDiagnosticVsan(self) -> "void" : return _vmkctl.StorageInfoImpl_ActivateDiagnosticVsan(self)
    def DeactivateDiagnosticVsan(self) -> "void" : return _vmkctl.StorageInfoImpl_DeactivateDiagnosticVsan(self)
    def UnconfigureDiagnosticVsan(self) -> "void" : return _vmkctl.StorageInfoImpl_UnconfigureDiagnosticVsan(self)
    def ReactivateDiagnosticVsan(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_ReactivateDiagnosticVsan(self, *args)
    def GetPotentialDiagnosticVsans(self) -> "std::vector< HostCtl::Storage::DiagnosticVsanPtr,std::allocator< HostCtl::Storage::DiagnosticVsanPtr > >" : return _vmkctl.StorageInfoImpl_GetPotentialDiagnosticVsans(self)
    def GetRecommendedDumpSize(self) -> "uint64" : return _vmkctl.StorageInfoImpl_GetRecommendedDumpSize(self)
    def GetFileSystems(self) -> "std::vector< HostCtl::Storage::FileSystemPtr,std::allocator< HostCtl::Storage::FileSystemPtr > >" : return _vmkctl.StorageInfoImpl_GetFileSystems(self)
    def GetUnresolvedVolumes(self) -> "std::vector< HostCtl::Storage::UnresolvedVmfsVolumePtr,std::allocator< HostCtl::Storage::UnresolvedVmfsVolumePtr > >" : return _vmkctl.StorageInfoImpl_GetUnresolvedVolumes(self)
    def GetNetworkFileSystems(self, *args) -> "std::vector< HostCtl::Storage::NetworkFileSystemPtr,std::allocator< HostCtl::Storage::NetworkFileSystemPtr > >" : return _vmkctl.StorageInfoImpl_GetNetworkFileSystems(self, *args)
    def GetV3NetworkFileSystems(self, *args) -> "std::vector< HostCtl::Storage::NetworkFileSystemPtr,std::allocator< HostCtl::Storage::NetworkFileSystemPtr > >" : return _vmkctl.StorageInfoImpl_GetV3NetworkFileSystems(self, *args)
    def GetV41NetworkFileSystems(self, *args) -> "std::vector< HostCtl::Storage::NetworkFileSystemPtr,std::allocator< HostCtl::Storage::NetworkFileSystemPtr > >" : return _vmkctl.StorageInfoImpl_GetV41NetworkFileSystems(self, *args)
    def SetV41NetworkFileSystemDefaultCredential(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_SetV41NetworkFileSystemDefaultCredential(self, *args)
    def SetV41NetworkFileSystemDefaultCurrentPassword(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_SetV41NetworkFileSystemDefaultCurrentPassword(self, *args)
    def ChangeV41NetworkFileSystemDefaultCredential(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_ChangeV41NetworkFileSystemDefaultCredential(self, *args)
    def GetV41NetworkFileSystemDefaultCredential(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_GetV41NetworkFileSystemDefaultCredential(self, *args)
    def GetV41NetworkFileSystemDefaultCredentialPy(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.StorageInfoImpl_GetV41NetworkFileSystemDefaultCredentialPy(self)
    def ClearV41NetworkFileSystemDefaultCredential(self) -> "void" : return _vmkctl.StorageInfoImpl_ClearV41NetworkFileSystemDefaultCredential(self)
    def SecurityTypeToType(self, *args) -> "HostCtl::Storage::NetworkFileSystem::SecurityType" : return _vmkctl.StorageInfoImpl_SecurityTypeToType(self, *args)
    def SecurityTypeToString(self, *args) -> "std::string" : return _vmkctl.StorageInfoImpl_SecurityTypeToString(self, *args)
    def IsHiddenVolume(self, *args) -> "bool" : return _vmkctl.StorageInfoImpl_IsHiddenVolume(self, *args)
    def GetVFATFileSystems(self) -> "std::vector< HostCtl::Storage::VFATFileSystemPtr,std::allocator< HostCtl::Storage::VFATFileSystemPtr > >" : return _vmkctl.StorageInfoImpl_GetVFATFileSystems(self)
    def GetUFSFileSystems(self) -> "std::vector< HostCtl::Storage::UFSFileSystemPtr,std::allocator< HostCtl::Storage::UFSFileSystemPtr > >" : return _vmkctl.StorageInfoImpl_GetUFSFileSystems(self)
    def GetVsanFileSystems(self) -> "std::vector< HostCtl::Storage::VsanFileSystemPtr,std::allocator< HostCtl::Storage::VsanFileSystemPtr > >" : return _vmkctl.StorageInfoImpl_GetVsanFileSystems(self)
    def GetPMemFileSystems(self) -> "std::vector< HostCtl::Storage::PMemFileSystemPtr,std::allocator< HostCtl::Storage::PMemFileSystemPtr > >" : return _vmkctl.StorageInfoImpl_GetPMemFileSystems(self)
    def GetPMemFileSystemByPath(self, *args) -> "HostCtl::Storage::PMemFileSystemPtr" : return _vmkctl.StorageInfoImpl_GetPMemFileSystemByPath(self, *args)
    def GetVmfsFileSystems(self, *args) -> "std::vector< HostCtl::Storage::VmFileSystemPtr,std::allocator< HostCtl::Storage::VmFileSystemPtr > >" : return _vmkctl.StorageInfoImpl_GetVmfsFileSystems(self, *args)
    def GetVmfsFileSystemsList(self, *args) -> "std::vector< HostCtl::Storage::VmFileSystemPtr,std::allocator< HostCtl::Storage::VmFileSystemPtr > >" : return _vmkctl.StorageInfoImpl_GetVmfsFileSystemsList(self, *args)
    def GetVmfsPBCache(self) -> "HostCtl::Storage::VmFileSystemPBCachePtr" : return _vmkctl.StorageInfoImpl_GetVmfsPBCache(self)
    def AddNetworkFileSystem(self, *args) -> "HostCtl::Storage::NetworkFileSystemPtr" : return _vmkctl.StorageInfoImpl_AddNetworkFileSystem(self, *args)
    def AddV41NetworkFileSystem(self, *args) -> "HostCtl::Storage::NetworkFileSystemPtr" : return _vmkctl.StorageInfoImpl_AddV41NetworkFileSystem(self, *args)
    def RemoveNetworkFileSystem(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_RemoveNetworkFileSystem(self, *args)
    def UpdateVvolVendorProvider(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_UpdateVvolVendorProvider(self, *args)
    def RemoveVvolVendorProvider(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_RemoveVvolVendorProvider(self, *args)
    def GetVvolVendorProviders(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_GetVvolVendorProviders(self, *args)
    def RestoreVvolVendorProvider(self) -> "void" : return _vmkctl.StorageInfoImpl_RestoreVvolVendorProvider(self)
    def RestoreVvolContainer(self) -> "void" : return _vmkctl.StorageInfoImpl_RestoreVvolContainer(self)
    def RemoveVvolFileSystem(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_RemoveVvolFileSystem(self, *args)
    def NotifyVvolProtocolEndpointEvent(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_NotifyVvolProtocolEndpointEvent(self, *args)
    def VvolVpExists(self, *args) -> "bool" : return _vmkctl.StorageInfoImpl_VvolVpExists(self, *args)
    def TryMount(self, *args) -> "Bool" : return _vmkctl.StorageInfoImpl_TryMount(self, *args)
    def GetFileSystemByUUID(self, *args) -> "HostCtl::Storage::VmFileSystemPtr" : return _vmkctl.StorageInfoImpl_GetFileSystemByUUID(self, *args)
    def GetFileSystemByLabel(self, *args) -> "HostCtl::Storage::VmFileSystemPtr" : return _vmkctl.StorageInfoImpl_GetFileSystemByLabel(self, *args)
    def GetFileSystemByPath(self, *args) -> "HostCtl::Storage::VmFileSystemPtr" : return _vmkctl.StorageInfoImpl_GetFileSystemByPath(self, *args)
    def GetNetworkFileSystemByLabel(self, *args) -> "HostCtl::Storage::NetworkFileSystemPtr" : return _vmkctl.StorageInfoImpl_GetNetworkFileSystemByLabel(self, *args)
    def GetObjectStoreFileSystemByPath(self, *args) -> "HostCtl::Storage::ObjectStoreFileSystemPtr" : return _vmkctl.StorageInfoImpl_GetObjectStoreFileSystemByPath(self, *args)
    def GetVsanFileSystemByPath(self, *args) -> "HostCtl::Storage::VsanFileSystemPtr" : return _vmkctl.StorageInfoImpl_GetVsanFileSystemByPath(self, *args)
    def FormatFileSystem(self, *args) -> "HostCtl::Storage::VmFileSystemPtr" : return _vmkctl.StorageInfoImpl_FormatFileSystem(self, *args)
    def SmartActivateDiagnosticPartition(self) -> "HostCtl::Storage::DiagnosticPartitionPtr" : return _vmkctl.StorageInfoImpl_SmartActivateDiagnosticPartition(self)
    def SmartActivateDiagnosticFile(self) -> "HostCtl::Storage::DiagnosticFilePtr" : return _vmkctl.StorageInfoImpl_SmartActivateDiagnosticFile(self)
    def CreateDiagnosticFile(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_CreateDiagnosticFile(self, *args)
    def SmartActivateDiagnosticVsan(self) -> "HostCtl::Storage::DiagnosticVsanPtr" : return _vmkctl.StorageInfoImpl_SmartActivateDiagnosticVsan(self)
    def CreateDiagnosticVsan(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_CreateDiagnosticVsan(self, *args)
    def GetDeviceByName(self, *args) -> "HostCtl::Storage::LunPtr" : return _vmkctl.StorageInfoImpl_GetDeviceByName(self, *args)
    def GetDeviceByDevfsPath(self, *args) -> "HostCtl::Storage::LunPtr" : return _vmkctl.StorageInfoImpl_GetDeviceByDevfsPath(self, *args)
    def GetPartitionByName(self, *args) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.StorageInfoImpl_GetPartitionByName(self, *args)
    def GetPartitionByNumber(self, *args) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.StorageInfoImpl_GetPartitionByNumber(self, *args)
    def GetPartitionByDevfsPath(self, *args) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.StorageInfoImpl_GetPartitionByDevfsPath(self, *args)
    def RescanVmfs(self) -> "void" : return _vmkctl.StorageInfoImpl_RescanVmfs(self)
    def RescanOneVmfsVolume(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_RescanOneVmfsVolume(self, *args)
    def RescanVmfsDevices(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_RescanVmfsDevices(self, *args)
    def AutomountVolumes(self) -> "bool" : return _vmkctl.StorageInfoImpl_AutomountVolumes(self)
    def AutoFullMountVolumes(self) -> "bool" : return _vmkctl.StorageInfoImpl_AutoFullMountVolumes(self)
    def DeleteVmfsFileSystemState(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_DeleteVmfsFileSystemState(self, *args)
    def SignalIORM(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_SignalIORM(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.StorageInfoImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.StorageInfoImpl_GetName(self)
    def GetChildren(self) -> "std::vector< HostCtl::Lib::HostCtlObjectPtr,std::allocator< HostCtl::Lib::HostCtlObjectPtr > >" : return _vmkctl.StorageInfoImpl_GetChildren(self)
    def LoadConfig(self) -> "void" : return _vmkctl.StorageInfoImpl_LoadConfig(self)
    def LoadLateConfig(self) -> "void" : return _vmkctl.StorageInfoImpl_LoadLateConfig(self)
    def RestoreIscsi(self) -> "void" : return _vmkctl.StorageInfoImpl_RestoreIscsi(self)
    def RestoreNetworkFilesystems(self) -> "void" : return _vmkctl.StorageInfoImpl_RestoreNetworkFilesystems(self)
    def RestoreV3NetworkFilesystems(self) -> "void" : return _vmkctl.StorageInfoImpl_RestoreV3NetworkFilesystems(self)
    def RestoreV41NetworkFilesystems(self) -> "void" : return _vmkctl.StorageInfoImpl_RestoreV41NetworkFilesystems(self)
    def RestoreMultipath(self) -> "void" : return _vmkctl.StorageInfoImpl_RestoreMultipath(self)
    def RestorePsaConfig(self) -> "void" : return _vmkctl.StorageInfoImpl_RestorePsaConfig(self)
    def RestoreForceMountedVmfs(self) -> "void" : return _vmkctl.StorageInfoImpl_RestoreForceMountedVmfs(self)
    def SetPsaAutoClaiming(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_SetPsaAutoClaiming(self, *args)
    def CanResolveHostNames(self) -> "bool" : return _vmkctl.StorageInfoImpl_CanResolveHostNames(self)
    def SoftwareiScsiBootEnabled(self) -> "int" : return _vmkctl.StorageInfoImpl_SoftwareiScsiBootEnabled(self)
    def GetiScsiBootTables(self) -> "HostCtl::Storage::iScsiBootTables" : return _vmkctl.StorageInfoImpl_GetiScsiBootTables(self)
    def UnclaimPaths(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_UnclaimPaths(self, *args)
    def UnclaimPathsByPlugin(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_UnclaimPathsByPlugin(self, *args)
    def UnclaimPathsByDevice(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_UnclaimPathsByDevice(self, *args)
    def DetachFiltersFromDevice(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_DetachFiltersFromDevice(self, *args)
    def AttachFiltersToDevice(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_AttachFiltersToDevice(self, *args)
    def ClaimPaths(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_ClaimPaths(self, *args)
    def GetDisplayNameMap(self) -> "std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >" : return _vmkctl.StorageInfoImpl_GetDisplayNameMap(self)
    def GetPathByName(self, *args) -> "HostCtl::Storage::ScsiPathPtr" : return _vmkctl.StorageInfoImpl_GetPathByName(self, *args)
    def RegisterModule(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_RegisterModule(self, *args)
    def UnRegisterModule(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_UnRegisterModule(self, *args)
    def GetRegistered(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.StorageInfoImpl_GetRegistered(self)
    def GetRegisteredModule(self, *args) -> "HostCtl::Storage::StorageInfo::RegisteredModuleData" : return _vmkctl.StorageInfoImpl_GetRegisteredModule(self, *args)
    def IsRegisteredPsaPluginName(self, *args) -> "bool" : return _vmkctl.StorageInfoImpl_IsRegisteredPsaPluginName(self, *args)
    def MountiScsiBootLun(self, addTarget : 'bool' = True, doRescan : 'bool' = True) -> "void" : return _vmkctl.StorageInfoImpl_MountiScsiBootLun(self, addTarget, doRescan)
    def GetiScsiBoundNicListWithPathStatus(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_GetiScsiBoundNicListWithPathStatus(self, *args)
    def GetiScsiVnicPathStatusMap(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_GetiScsiVnicPathStatusMap(self, *args)
    def GetiScsiMigrationDependancy(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_GetiScsiMigrationDependancy(self, *args)
    def GetiScsiPnicMigrationStatus(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_GetiScsiPnicMigrationStatus(self, *args)
    def GetiScsiVnicPathList(self, *args) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.StorageInfoImpl_GetiScsiVnicPathList(self, *args)
    def Print(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_Print(self, *args)
    def AutoConfigStorage(self) -> "void" : return _vmkctl.StorageInfoImpl_AutoConfigStorage(self)
    def GetRecommendedMinScratchPartitionSize(self, *args) -> "uint64" : return _vmkctl.StorageInfoImpl_GetRecommendedMinScratchPartitionSize(self, *args)
    def GetDefaultScratchPartition(self) -> "std::string" : return _vmkctl.StorageInfoImpl_GetDefaultScratchPartition(self)
    def GetScratchPartition(self) -> "HostCtl::Storage::FileSystemPtr" : return _vmkctl.StorageInfoImpl_GetScratchPartition(self)
    def AutoAddDiagnosticFile(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_AutoAddDiagnosticFile(self, *args)
    def AutoAddDiagnosticVsan(self, *args) -> "void" : return _vmkctl.StorageInfoImpl_AutoAddDiagnosticVsan(self, *args)
    def CheckDumpTargetCapacityAndResize(self) -> "void" : return _vmkctl.StorageInfoImpl_CheckDumpTargetCapacityAndResize(self)
    __swig_getmethods__["UnmountLvm"] = lambda x: _vmkctl.StorageInfoImpl_UnmountLvm
    if _newclass:UnmountLvm = staticmethod(_vmkctl.StorageInfoImpl_UnmountLvm)
    def GetDumpFileReadCount(self, *args) -> "bool" : return _vmkctl.StorageInfoImpl_GetDumpFileReadCount(self, *args)
    def GetDumpVsanReadCount(self, *args) -> "bool" : return _vmkctl.StorageInfoImpl_GetDumpVsanReadCount(self, *args)
    __swig_getmethods__["AddCoreDumpSizeCbkFn"] = lambda x: _vmkctl.StorageInfoImpl_AddCoreDumpSizeCbkFn
    if _newclass:AddCoreDumpSizeCbkFn = staticmethod(_vmkctl.StorageInfoImpl_AddCoreDumpSizeCbkFn)
    def GetVolumeConfigOptions(self, *args) -> "std::vector< HostCtl::Storage::VmfsVolumeConfigOption,std::allocator< HostCtl::Storage::VmfsVolumeConfigOption > > const" : return _vmkctl.StorageInfoImpl_GetVolumeConfigOptions(self, *args)
StorageInfoImpl_swigregister = _vmkctl.StorageInfoImpl_swigregister
StorageInfoImpl_swigregister(StorageInfoImpl)

def StorageInfoImpl_UnmountLvm(*args) -> "VMK_ReturnStatus" :
  return _vmkctl.StorageInfoImpl_UnmountLvm(*args)
StorageInfoImpl_UnmountLvm = _vmkctl.StorageInfoImpl_UnmountLvm

def StorageInfoImpl_AddCoreDumpSizeCbkFn(*args) -> "void" :
  return _vmkctl.StorageInfoImpl_AddCoreDumpSizeCbkFn(*args)
StorageInfoImpl_AddCoreDumpSizeCbkFn = _vmkctl.StorageInfoImpl_AddCoreDumpSizeCbkFn

class StorageStatistics(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StorageStatistics, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StorageStatistics, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_StorageStatistics(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_StorageStatistics
    __del__ = lambda self : None;
    def GetCommands(self) -> "uint64" : return _vmkctl.StorageStatistics_GetCommands(self)
    def GetBlocksRead(self) -> "uint64" : return _vmkctl.StorageStatistics_GetBlocksRead(self)
    def GetBlocksWritten(self) -> "uint64" : return _vmkctl.StorageStatistics_GetBlocksWritten(self)
    def GetAborts(self) -> "uint64" : return _vmkctl.StorageStatistics_GetAborts(self)
    def GetResets(self) -> "uint64" : return _vmkctl.StorageStatistics_GetResets(self)
    def GetReadOps(self) -> "uint64" : return _vmkctl.StorageStatistics_GetReadOps(self)
    def GetWriteOps(self) -> "uint64" : return _vmkctl.StorageStatistics_GetWriteOps(self)
    def GetReserveOps(self) -> "uint64" : return _vmkctl.StorageStatistics_GetReserveOps(self)
    def GetReservationConflicts(self) -> "uint64" : return _vmkctl.StorageStatistics_GetReservationConflicts(self)
    def GetPaeCmds(self) -> "uint64" : return _vmkctl.StorageStatistics_GetPaeCmds(self)
    def GetPaeCopies(self) -> "uint64" : return _vmkctl.StorageStatistics_GetPaeCopies(self)
    def GetSplitCmds(self) -> "uint64" : return _vmkctl.StorageStatistics_GetSplitCmds(self)
    def GetSplitCopies(self) -> "uint64" : return _vmkctl.StorageStatistics_GetSplitCopies(self)
    def GetTotalTime(self) -> "uint64" : return _vmkctl.StorageStatistics_GetTotalTime(self)
    def GetTotalTimeReads(self) -> "uint64" : return _vmkctl.StorageStatistics_GetTotalTimeReads(self)
    def GetTotalTimeWrites(self) -> "uint64" : return _vmkctl.StorageStatistics_GetTotalTimeWrites(self)
    def GetIssueTime(self) -> "uint64" : return _vmkctl.StorageStatistics_GetIssueTime(self)
    def GetIssueTimeReads(self) -> "uint64" : return _vmkctl.StorageStatistics_GetIssueTimeReads(self)
    def GetIssueTimeWrites(self) -> "uint64" : return _vmkctl.StorageStatistics_GetIssueTimeWrites(self)
    def GetQueueTime(self) -> "uint64" : return _vmkctl.StorageStatistics_GetQueueTime(self)
    def GetQueueTimeReads(self) -> "uint64" : return _vmkctl.StorageStatistics_GetQueueTimeReads(self)
    def GetQueueTimeWrites(self) -> "uint64" : return _vmkctl.StorageStatistics_GetQueueTimeWrites(self)
    def GetLayerTime(self) -> "uint64" : return _vmkctl.StorageStatistics_GetLayerTime(self)
    def GetLayerTimeReads(self) -> "uint64" : return _vmkctl.StorageStatistics_GetLayerTimeReads(self)
    def GetLayerTimeWrites(self) -> "uint64" : return _vmkctl.StorageStatistics_GetLayerTimeWrites(self)
StorageStatistics_swigregister = _vmkctl.StorageStatistics_swigregister
StorageStatistics_swigregister(StorageStatistics)

class PsaPlugin(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsaPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PsaPlugin, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetIdentifier(self) -> "std::string" : return _vmkctl.PsaPlugin_GetIdentifier(self)
    def UnclaimAll(self) -> "void" : return _vmkctl.PsaPlugin_UnclaimAll(self)
    def GetConfigBranches(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.PsaPlugin_GetConfigBranches(self)
    def GetConfigOptionsForBranch(self, *args) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.PsaPlugin_GetConfigOptionsForBranch(self, *args)
    def GetConfigOption(self, *args) -> "std::string" : return _vmkctl.PsaPlugin_GetConfigOption(self, *args)
    def SetConfigOption(self, *args) -> "void" : return _vmkctl.PsaPlugin_SetConfigOption(self, *args)
    __swig_destroy__ = _vmkctl.delete_PsaPlugin
    __del__ = lambda self : None;
PsaPlugin_swigregister = _vmkctl.PsaPlugin_swigregister
PsaPlugin_swigregister(PsaPlugin)

class PsaPluginImpl(PsaPlugin,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [PsaPlugin,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsaPluginImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [PsaPlugin,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PsaPluginImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PsaPluginImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PsaPluginImpl
    __del__ = lambda self : None;
    def GetIdentifier(self) -> "std::string" : return _vmkctl.PsaPluginImpl_GetIdentifier(self)
    def GetPluginClass(self) -> "HostCtl::Storage::PSAClaimRuleClass" : return _vmkctl.PsaPluginImpl_GetPluginClass(self)
    def UnclaimAll(self) -> "void" : return _vmkctl.PsaPluginImpl_UnclaimAll(self)
    __swig_getmethods__["GetPlugin"] = lambda x: _vmkctl.PsaPluginImpl_GetPlugin
    if _newclass:GetPlugin = staticmethod(_vmkctl.PsaPluginImpl_GetPlugin)
    def GetConfigBranches(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.PsaPluginImpl_GetConfigBranches(self)
    def GetConfigOptionsForBranch(self, *args) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.PsaPluginImpl_GetConfigOptionsForBranch(self, *args)
    def GetConfigOption(self, *args) -> "std::string" : return _vmkctl.PsaPluginImpl_GetConfigOption(self, *args)
    def SetConfigOption(self, *args) -> "void" : return _vmkctl.PsaPluginImpl_SetConfigOption(self, *args)
    __swig_getmethods__["IsValidPluginName"] = lambda x: _vmkctl.PsaPluginImpl_IsValidPluginName
    if _newclass:IsValidPluginName = staticmethod(_vmkctl.PsaPluginImpl_IsValidPluginName)
    def Refresh(self) -> "void" : return _vmkctl.PsaPluginImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.PsaPluginImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.PsaPluginImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.PsaPluginImpl_Print(self, *args)
PsaPluginImpl_swigregister = _vmkctl.PsaPluginImpl_swigregister
PsaPluginImpl_swigregister(PsaPluginImpl)

def PsaPluginImpl_GetPlugin(*args) -> "VmkCtl::Storage::PsaPluginImpl *" :
  return _vmkctl.PsaPluginImpl_GetPlugin(*args)
PsaPluginImpl_GetPlugin = _vmkctl.PsaPluginImpl_GetPlugin

def PsaPluginImpl_IsValidPluginName(*args) -> "bool" :
  return _vmkctl.PsaPluginImpl_IsValidPluginName(*args)
PsaPluginImpl_IsValidPluginName = _vmkctl.PsaPluginImpl_IsValidPluginName

class PsaMultipathPlugin(PsaPlugin):
    __swig_setmethods__ = {}
    for _s in [PsaPlugin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsaMultipathPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [PsaPlugin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PsaMultipathPlugin, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetPaths(self) -> "std::vector< HostCtl::Storage::ScsiPathPtr,std::allocator< HostCtl::Storage::ScsiPathPtr > >" : return _vmkctl.PsaMultipathPlugin_GetPaths(self)
    def GetDevices(self) -> "std::vector< HostCtl::Storage::LunPtr,std::allocator< HostCtl::Storage::LunPtr > >" : return _vmkctl.PsaMultipathPlugin_GetDevices(self)
    def GetDeviceNames(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.PsaMultipathPlugin_GetDeviceNames(self)
    __swig_destroy__ = _vmkctl.delete_PsaMultipathPlugin
    __del__ = lambda self : None;
PsaMultipathPlugin_swigregister = _vmkctl.PsaMultipathPlugin_swigregister
PsaMultipathPlugin_swigregister(PsaMultipathPlugin)

class PsaMultipathPluginImpl(PsaMultipathPlugin,PsaPluginImpl):
    __swig_setmethods__ = {}
    for _s in [PsaMultipathPlugin,PsaPluginImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsaMultipathPluginImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [PsaMultipathPlugin,PsaPluginImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PsaMultipathPluginImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PsaMultipathPluginImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PsaMultipathPluginImpl
    __del__ = lambda self : None;
    __swig_getmethods__["IsValidPluginName"] = lambda x: _vmkctl.PsaMultipathPluginImpl_IsValidPluginName
    if _newclass:IsValidPluginName = staticmethod(_vmkctl.PsaMultipathPluginImpl_IsValidPluginName)
    __swig_getmethods__["GetPlugin"] = lambda x: _vmkctl.PsaMultipathPluginImpl_GetPlugin
    if _newclass:GetPlugin = staticmethod(_vmkctl.PsaMultipathPluginImpl_GetPlugin)
    def GetPaths(self) -> "std::vector< HostCtl::Storage::ScsiPathPtr,std::allocator< HostCtl::Storage::ScsiPathPtr > >" : return _vmkctl.PsaMultipathPluginImpl_GetPaths(self)
    def GetDevices(self) -> "std::vector< HostCtl::Storage::LunPtr,std::allocator< HostCtl::Storage::LunPtr > >" : return _vmkctl.PsaMultipathPluginImpl_GetDevices(self)
    def GetDeviceNames(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.PsaMultipathPluginImpl_GetDeviceNames(self)
    def Print(self, *args) -> "void" : return _vmkctl.PsaMultipathPluginImpl_Print(self, *args)
PsaMultipathPluginImpl_swigregister = _vmkctl.PsaMultipathPluginImpl_swigregister
PsaMultipathPluginImpl_swigregister(PsaMultipathPluginImpl)

def PsaMultipathPluginImpl_IsValidPluginName(*args) -> "bool" :
  return _vmkctl.PsaMultipathPluginImpl_IsValidPluginName(*args)
PsaMultipathPluginImpl_IsValidPluginName = _vmkctl.PsaMultipathPluginImpl_IsValidPluginName

def PsaMultipathPluginImpl_GetPlugin(*args) -> "VmkCtl::Storage::PsaMultipathPluginImpl *" :
  return _vmkctl.PsaMultipathPluginImpl_GetPlugin(*args)
PsaMultipathPluginImpl_GetPlugin = _vmkctl.PsaMultipathPluginImpl_GetPlugin

class PsaDeviceConfig(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsaDeviceConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PsaDeviceConfig, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetDeviceName(self) -> "std::string" : return _vmkctl.PsaDeviceConfig_GetDeviceName(self)
    def GetDevice(self) -> "HostCtl::Storage::LunPtr" : return _vmkctl.PsaDeviceConfig_GetDevice(self)
    __swig_destroy__ = _vmkctl.delete_PsaDeviceConfig
    __del__ = lambda self : None;
PsaDeviceConfig_swigregister = _vmkctl.PsaDeviceConfig_swigregister
PsaDeviceConfig_swigregister(PsaDeviceConfig)

class PsaDeviceConfigImpl(PsaDeviceConfig,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [PsaDeviceConfig,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsaDeviceConfigImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [PsaDeviceConfig,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PsaDeviceConfigImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PsaDeviceConfigImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PsaDeviceConfigImpl
    __del__ = lambda self : None;
    def GetDeviceName(self) -> "std::string" : return _vmkctl.PsaDeviceConfigImpl_GetDeviceName(self)
    def GetDevice(self) -> "HostCtl::Storage::LunPtr" : return _vmkctl.PsaDeviceConfigImpl_GetDevice(self)
    def GetPsaMultipathPluginName(self) -> "std::string" : return _vmkctl.PsaDeviceConfigImpl_GetPsaMultipathPluginName(self)
    def GetPsaMultipathPlugin(self) -> "HostCtl::Storage::PsaMultipathPlugin *" : return _vmkctl.PsaDeviceConfigImpl_GetPsaMultipathPlugin(self)
    def GetDeviceConfigKeys(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.PsaDeviceConfigImpl_GetDeviceConfigKeys(self)
    def GetDeviceConfigOption(self, *args) -> "std::string" : return _vmkctl.PsaDeviceConfigImpl_GetDeviceConfigOption(self, *args)
    def SetDeviceConfigOption(self, *args) -> "void" : return _vmkctl.PsaDeviceConfigImpl_SetDeviceConfigOption(self, *args)
    def GetAttachedFilterNames(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.PsaDeviceConfigImpl_GetAttachedFilterNames(self)
    def GetAttachedVAAIPlugin(self) -> "std::string" : return _vmkctl.PsaDeviceConfigImpl_GetAttachedVAAIPlugin(self)
    def Refresh(self) -> "void" : return _vmkctl.PsaDeviceConfigImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.PsaDeviceConfigImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.PsaDeviceConfigImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.PsaDeviceConfigImpl_Print(self, *args)
PsaDeviceConfigImpl_swigregister = _vmkctl.PsaDeviceConfigImpl_swigregister
PsaDeviceConfigImpl_swigregister(PsaDeviceConfigImpl)

class PsaScsiPathConfig(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsaScsiPathConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PsaScsiPathConfig, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetScsiPathUid(self) -> "std::string" : return _vmkctl.PsaScsiPathConfig_GetScsiPathUid(self)
    def GetScsiPathRuntimeName(self) -> "std::string" : return _vmkctl.PsaScsiPathConfig_GetScsiPathRuntimeName(self)
    def GetScsiPath(self) -> "HostCtl::Storage::ScsiPathPtr" : return _vmkctl.PsaScsiPathConfig_GetScsiPath(self)
    __swig_destroy__ = _vmkctl.delete_PsaScsiPathConfig
    __del__ = lambda self : None;
PsaScsiPathConfig_swigregister = _vmkctl.PsaScsiPathConfig_swigregister
PsaScsiPathConfig_swigregister(PsaScsiPathConfig)

class PsaScsiPathConfigImpl(PsaScsiPathConfig,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [PsaScsiPathConfig,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PsaScsiPathConfigImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [PsaScsiPathConfig,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PsaScsiPathConfigImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PsaScsiPathConfigImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PsaScsiPathConfigImpl
    __del__ = lambda self : None;
    def GetScsiPathUid(self) -> "std::string" : return _vmkctl.PsaScsiPathConfigImpl_GetScsiPathUid(self)
    def GetScsiPathRuntimeName(self) -> "std::string" : return _vmkctl.PsaScsiPathConfigImpl_GetScsiPathRuntimeName(self)
    def GetScsiPath(self) -> "HostCtl::Storage::ScsiPathPtr" : return _vmkctl.PsaScsiPathConfigImpl_GetScsiPath(self)
    def GetPsaMultipathPluginName(self) -> "std::string" : return _vmkctl.PsaScsiPathConfigImpl_GetPsaMultipathPluginName(self)
    def GetPsaMultipathPlugin(self) -> "HostCtl::Storage::PsaMultipathPlugin *" : return _vmkctl.PsaScsiPathConfigImpl_GetPsaMultipathPlugin(self)
    def Refresh(self) -> "void" : return _vmkctl.PsaScsiPathConfigImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.PsaScsiPathConfigImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.PsaScsiPathConfigImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.PsaScsiPathConfigImpl_Print(self, *args)
PsaScsiPathConfigImpl_swigregister = _vmkctl.PsaScsiPathConfigImpl_swigregister
PsaScsiPathConfigImpl_swigregister(PsaScsiPathConfigImpl)

class SatpClaimRule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SatpClaimRule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SatpClaimRule, name)
    __repr__ = _swig_repr
    def GetDeviceUid(self) -> "std::string" : return _vmkctl.SatpClaimRule_GetDeviceUid(self)
    def SetDeviceUid(self, *args) -> "void" : return _vmkctl.SatpClaimRule_SetDeviceUid(self, *args)
    def GetVendor(self) -> "std::string" : return _vmkctl.SatpClaimRule_GetVendor(self)
    def SetVendor(self, *args) -> "void" : return _vmkctl.SatpClaimRule_SetVendor(self, *args)
    def GetModel(self) -> "std::string" : return _vmkctl.SatpClaimRule_GetModel(self)
    def SetModel(self, *args) -> "void" : return _vmkctl.SatpClaimRule_SetModel(self, *args)
    def GetDriver(self) -> "std::string" : return _vmkctl.SatpClaimRule_GetDriver(self)
    def SetDriver(self, *args) -> "void" : return _vmkctl.SatpClaimRule_SetDriver(self, *args)
    def GetTransport(self) -> "std::string" : return _vmkctl.SatpClaimRule_GetTransport(self)
    def SetTransport(self, *args) -> "void" : return _vmkctl.SatpClaimRule_SetTransport(self, *args)
    def GetOptions(self) -> "std::string" : return _vmkctl.SatpClaimRule_GetOptions(self)
    def SetOptions(self, *args) -> "void" : return _vmkctl.SatpClaimRule_SetOptions(self, *args)
    def GetClaimOptions(self) -> "std::string" : return _vmkctl.SatpClaimRule_GetClaimOptions(self)
    def SetClaimOptions(self, *args) -> "void" : return _vmkctl.SatpClaimRule_SetClaimOptions(self, *args)
    def GetPsp(self) -> "std::string" : return _vmkctl.SatpClaimRule_GetPsp(self)
    def SetPsp(self, *args) -> "void" : return _vmkctl.SatpClaimRule_SetPsp(self, *args)
    def GetPspOptions(self) -> "std::string" : return _vmkctl.SatpClaimRule_GetPspOptions(self)
    def SetPspOptions(self, *args) -> "void" : return _vmkctl.SatpClaimRule_SetPspOptions(self, *args)
    def GetDescription(self) -> "std::string" : return _vmkctl.SatpClaimRule_GetDescription(self)
    def SetDescription(self, *args) -> "void" : return _vmkctl.SatpClaimRule_SetDescription(self, *args)
    def GetRuleGroup(self) -> "std::string" : return _vmkctl.SatpClaimRule_GetRuleGroup(self)
    def SetRuleGroup(self, *args) -> "void" : return _vmkctl.SatpClaimRule_SetRuleGroup(self, *args)
    def GetForce(self) -> "bool" : return _vmkctl.SatpClaimRule_GetForce(self)
    def SetForce(self, *args) -> "void" : return _vmkctl.SatpClaimRule_SetForce(self, *args)
    def __init__(self): 
        this = _vmkctl.new_SatpClaimRule()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_SatpClaimRule
    __del__ = lambda self : None;
SatpClaimRule_swigregister = _vmkctl.SatpClaimRule_swigregister
SatpClaimRule_swigregister(SatpClaimRule)

class StorageArrayType(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StorageArrayType, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StorageArrayType, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetStorageArrayTypeName(self) -> "std::string" : return _vmkctl.StorageArrayType_GetStorageArrayTypeName(self)
    def GetInfoString(self) -> "std::string" : return _vmkctl.StorageArrayType_GetInfoString(self)
    def GetConfigurationString(self) -> "std::string" : return _vmkctl.StorageArrayType_GetConfigurationString(self)
    def SetConfigurationString(self, *args) -> "void" : return _vmkctl.StorageArrayType_SetConfigurationString(self, *args)
    def GetDefaultPathSelectionPolicyName(self) -> "std::string" : return _vmkctl.StorageArrayType_GetDefaultPathSelectionPolicyName(self)
    def SetDefaultPathSelectionPolicyName(self, *args) -> "void" : return _vmkctl.StorageArrayType_SetDefaultPathSelectionPolicyName(self, *args)
    def GetClaimRules(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule,std::allocator< HostCtl::Storage::Nmp::SatpClaimRule > >" : return _vmkctl.StorageArrayType_GetClaimRules(self)
    def AddClaimRule(self, *args) -> "void" : return _vmkctl.StorageArrayType_AddClaimRule(self, *args)
    def DeleteClaimRule(self, *args) -> "void" : return _vmkctl.StorageArrayType_DeleteClaimRule(self, *args)
    def DeleteNonForceClaimRules(self) -> "void" : return _vmkctl.StorageArrayType_DeleteNonForceClaimRules(self)
    def DestroyConfig(self) -> "void" : return _vmkctl.StorageArrayType_DestroyConfig(self)
    __swig_destroy__ = _vmkctl.delete_StorageArrayType
    __del__ = lambda self : None;
StorageArrayType_swigregister = _vmkctl.StorageArrayType_swigregister
StorageArrayType_swigregister(StorageArrayType)

class StorageArrayTypeImpl(StorageArrayType,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [StorageArrayType,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StorageArrayTypeImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [StorageArrayType,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StorageArrayTypeImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_StorageArrayTypeImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_StorageArrayTypeImpl
    __del__ = lambda self : None;
    def GetStorageArrayTypeName(self) -> "std::string" : return _vmkctl.StorageArrayTypeImpl_GetStorageArrayTypeName(self)
    def GetInfoString(self) -> "std::string" : return _vmkctl.StorageArrayTypeImpl_GetInfoString(self)
    def GetConfigurationString(self) -> "std::string" : return _vmkctl.StorageArrayTypeImpl_GetConfigurationString(self)
    def SetConfigurationString(self, *args) -> "void" : return _vmkctl.StorageArrayTypeImpl_SetConfigurationString(self, *args)
    def GetDefaultPathSelectionPolicyName(self) -> "std::string" : return _vmkctl.StorageArrayTypeImpl_GetDefaultPathSelectionPolicyName(self)
    def SetDefaultPathSelectionPolicyName(self, *args) -> "void" : return _vmkctl.StorageArrayTypeImpl_SetDefaultPathSelectionPolicyName(self, *args)
    def GetClaimRules(self) -> "std::vector< HostCtl::Storage::Nmp::SatpClaimRule,std::allocator< HostCtl::Storage::Nmp::SatpClaimRule > >" : return _vmkctl.StorageArrayTypeImpl_GetClaimRules(self)
    def AddClaimRule(self, *args) -> "void" : return _vmkctl.StorageArrayTypeImpl_AddClaimRule(self, *args)
    def DeleteClaimRule(self, *args) -> "void" : return _vmkctl.StorageArrayTypeImpl_DeleteClaimRule(self, *args)
    def DeleteNonForceClaimRules(self) -> "void" : return _vmkctl.StorageArrayTypeImpl_DeleteNonForceClaimRules(self)
    __swig_getmethods__["IsValidSatp"] = lambda x: _vmkctl.StorageArrayTypeImpl_IsValidSatp
    if _newclass:IsValidSatp = staticmethod(_vmkctl.StorageArrayTypeImpl_IsValidSatp)
    def Refresh(self) -> "void" : return _vmkctl.StorageArrayTypeImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.StorageArrayTypeImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.StorageArrayTypeImpl_LoadConfig(self)
    def DestroyConfig(self) -> "void" : return _vmkctl.StorageArrayTypeImpl_DestroyConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.StorageArrayTypeImpl_Print(self, *args)
StorageArrayTypeImpl_swigregister = _vmkctl.StorageArrayTypeImpl_swigregister
StorageArrayTypeImpl_swigregister(StorageArrayTypeImpl)

def StorageArrayTypeImpl_IsValidSatp(*args) -> "bool" :
  return _vmkctl.StorageArrayTypeImpl_IsValidSatp(*args)
StorageArrayTypeImpl_IsValidSatp = _vmkctl.StorageArrayTypeImpl_IsValidSatp

class PathSelectionPolicy(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathSelectionPolicy, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathSelectionPolicy, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetPolicyName(self) -> "std::string" : return _vmkctl.PathSelectionPolicy_GetPolicyName(self)
    def GetInfoString(self) -> "std::string" : return _vmkctl.PathSelectionPolicy_GetInfoString(self)
    __swig_destroy__ = _vmkctl.delete_PathSelectionPolicy
    __del__ = lambda self : None;
PathSelectionPolicy_swigregister = _vmkctl.PathSelectionPolicy_swigregister
PathSelectionPolicy_swigregister(PathSelectionPolicy)

class PathSelectionPolicyImpl(PathSelectionPolicy,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [PathSelectionPolicy,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathSelectionPolicyImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [PathSelectionPolicy,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathSelectionPolicyImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PathSelectionPolicyImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PathSelectionPolicyImpl
    __del__ = lambda self : None;
    def GetPolicyName(self) -> "std::string" : return _vmkctl.PathSelectionPolicyImpl_GetPolicyName(self)
    def GetInfoString(self) -> "std::string" : return _vmkctl.PathSelectionPolicyImpl_GetInfoString(self)
    __swig_getmethods__["IsValidPsp"] = lambda x: _vmkctl.PathSelectionPolicyImpl_IsValidPsp
    if _newclass:IsValidPsp = staticmethod(_vmkctl.PathSelectionPolicyImpl_IsValidPsp)
    def Refresh(self) -> "void" : return _vmkctl.PathSelectionPolicyImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.PathSelectionPolicyImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.PathSelectionPolicyImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.PathSelectionPolicyImpl_Print(self, *args)
PathSelectionPolicyImpl_swigregister = _vmkctl.PathSelectionPolicyImpl_swigregister
PathSelectionPolicyImpl_swigregister(PathSelectionPolicyImpl)
PathSelectionPolicyImpl.FIXED_POLICY = _vmkctl.cvar.PathSelectionPolicyImpl_FIXED_POLICY
PathSelectionPolicyImpl.MRU_POLICY = _vmkctl.cvar.PathSelectionPolicyImpl_MRU_POLICY
PathSelectionPolicyImpl.RR_POLICY = _vmkctl.cvar.PathSelectionPolicyImpl_RR_POLICY

def PathSelectionPolicyImpl_IsValidPsp(*args) -> "bool" :
  return _vmkctl.PathSelectionPolicyImpl_IsValidPsp(*args)
PathSelectionPolicyImpl_IsValidPsp = _vmkctl.PathSelectionPolicyImpl_IsValidPsp

class NmpPsaPlugin(PsaMultipathPlugin):
    __swig_setmethods__ = {}
    for _s in [PsaMultipathPlugin]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NmpPsaPlugin, name, value)
    __swig_getmethods__ = {}
    for _s in [PsaMultipathPlugin]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NmpPsaPlugin, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetStorageArrayTypes(self) -> "std::vector< HostCtl::Storage::Nmp::StorageArrayTypePtr,std::allocator< HostCtl::Storage::Nmp::StorageArrayTypePtr > >" : return _vmkctl.NmpPsaPlugin_GetStorageArrayTypes(self)
    def GetStorageArrayTypeByName(self, *args) -> "HostCtl::Storage::Nmp::StorageArrayTypePtr" : return _vmkctl.NmpPsaPlugin_GetStorageArrayTypeByName(self, *args)
    def GetPathSelectionPolicies(self) -> "std::vector< HostCtl::Storage::Nmp::PathSelectionPolicyPtr,std::allocator< HostCtl::Storage::Nmp::PathSelectionPolicyPtr > >" : return _vmkctl.NmpPsaPlugin_GetPathSelectionPolicies(self)
    __swig_destroy__ = _vmkctl.delete_NmpPsaPlugin
    __del__ = lambda self : None;
NmpPsaPlugin_swigregister = _vmkctl.NmpPsaPlugin_swigregister
NmpPsaPlugin_swigregister(NmpPsaPlugin)

class NmpPsaPluginImpl(NmpPsaPlugin,PsaMultipathPluginImpl):
    __swig_setmethods__ = {}
    for _s in [NmpPsaPlugin,PsaMultipathPluginImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NmpPsaPluginImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [NmpPsaPlugin,PsaMultipathPluginImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NmpPsaPluginImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_NmpPsaPluginImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_NmpPsaPluginImpl
    __del__ = lambda self : None;
    def GetStorageArrayTypes(self) -> "std::vector< HostCtl::Storage::Nmp::StorageArrayTypePtr,std::allocator< HostCtl::Storage::Nmp::StorageArrayTypePtr > >" : return _vmkctl.NmpPsaPluginImpl_GetStorageArrayTypes(self)
    def GetStorageArrayTypeByName(self, *args) -> "HostCtl::Storage::Nmp::StorageArrayTypePtr" : return _vmkctl.NmpPsaPluginImpl_GetStorageArrayTypeByName(self, *args)
    def GetPathSelectionPolicies(self) -> "std::vector< HostCtl::Storage::Nmp::PathSelectionPolicyPtr,std::allocator< HostCtl::Storage::Nmp::PathSelectionPolicyPtr > >" : return _vmkctl.NmpPsaPluginImpl_GetPathSelectionPolicies(self)
    def RemoveUnregisteredRules(self) -> "void" : return _vmkctl.NmpPsaPluginImpl_RemoveUnregisteredRules(self)
    def Refresh(self) -> "void" : return _vmkctl.NmpPsaPluginImpl_Refresh(self)
    def LoadConfig(self) -> "void" : return _vmkctl.NmpPsaPluginImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.NmpPsaPluginImpl_Print(self, *args)
NmpPsaPluginImpl_swigregister = _vmkctl.NmpPsaPluginImpl_swigregister
NmpPsaPluginImpl_swigregister(NmpPsaPluginImpl)
NmpPsaPluginImpl.NMP_DRIVER_NAME = _vmkctl.cvar.NmpPsaPluginImpl_NMP_DRIVER_NAME
NmpPsaPluginImpl.NMP_PSA_NAME = _vmkctl.cvar.NmpPsaPluginImpl_NMP_PSA_NAME

class PathSelectionPolicyDeviceConfig(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathSelectionPolicyDeviceConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathSelectionPolicyDeviceConfig, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetPolicyName(self) -> "std::string" : return _vmkctl.PathSelectionPolicyDeviceConfig_GetPolicyName(self)
    def GetDeviceName(self) -> "std::string" : return _vmkctl.PathSelectionPolicyDeviceConfig_GetDeviceName(self)
    def GetConfigurationString(self) -> "std::string" : return _vmkctl.PathSelectionPolicyDeviceConfig_GetConfigurationString(self)
    def GetConfiguredString(self) -> "std::string" : return _vmkctl.PathSelectionPolicyDeviceConfig_GetConfiguredString(self)
    def SetConfigurationString(self, *args) -> "void" : return _vmkctl.PathSelectionPolicyDeviceConfig_SetConfigurationString(self, *args)
    __swig_destroy__ = _vmkctl.delete_PathSelectionPolicyDeviceConfig
    __del__ = lambda self : None;
PathSelectionPolicyDeviceConfig_swigregister = _vmkctl.PathSelectionPolicyDeviceConfig_swigregister
PathSelectionPolicyDeviceConfig_swigregister(PathSelectionPolicyDeviceConfig)

class PathSelectionPolicyDeviceConfigImpl(PathSelectionPolicyDeviceConfig,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [PathSelectionPolicyDeviceConfig,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PathSelectionPolicyDeviceConfigImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [PathSelectionPolicyDeviceConfig,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PathSelectionPolicyDeviceConfigImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_PathSelectionPolicyDeviceConfigImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_PathSelectionPolicyDeviceConfigImpl
    __del__ = lambda self : None;
    def GetPolicyName(self) -> "std::string" : return _vmkctl.PathSelectionPolicyDeviceConfigImpl_GetPolicyName(self)
    def GetDeviceName(self) -> "std::string" : return _vmkctl.PathSelectionPolicyDeviceConfigImpl_GetDeviceName(self)
    __swig_getmethods__["GetPolicy"] = lambda x: _vmkctl.PathSelectionPolicyDeviceConfigImpl_GetPolicy
    if _newclass:GetPolicy = staticmethod(_vmkctl.PathSelectionPolicyDeviceConfigImpl_GetPolicy)
    def GetConfigurationString(self) -> "std::string" : return _vmkctl.PathSelectionPolicyDeviceConfigImpl_GetConfigurationString(self)
    def GetConfiguredString(self) -> "std::string" : return _vmkctl.PathSelectionPolicyDeviceConfigImpl_GetConfiguredString(self)
    def SetConfigurationString(self, *args) -> "void" : return _vmkctl.PathSelectionPolicyDeviceConfigImpl_SetConfigurationString(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.PathSelectionPolicyDeviceConfigImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.PathSelectionPolicyDeviceConfigImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.PathSelectionPolicyDeviceConfigImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.PathSelectionPolicyDeviceConfigImpl_Print(self, *args)
    def SetUpdateCfgFileVal(self, *args) -> "void" : return _vmkctl.PathSelectionPolicyDeviceConfigImpl_SetUpdateCfgFileVal(self, *args)
    def GetUpdateCfgFileVal(self) -> "bool" : return _vmkctl.PathSelectionPolicyDeviceConfigImpl_GetUpdateCfgFileVal(self)
PathSelectionPolicyDeviceConfigImpl_swigregister = _vmkctl.PathSelectionPolicyDeviceConfigImpl_swigregister
PathSelectionPolicyDeviceConfigImpl_swigregister(PathSelectionPolicyDeviceConfigImpl)

def PathSelectionPolicyDeviceConfigImpl_GetPolicy(*args) -> "HostCtl::Storage::Nmp::PathSelectionPolicyDeviceConfigPtr" :
  return _vmkctl.PathSelectionPolicyDeviceConfigImpl_GetPolicy(*args)
PathSelectionPolicyDeviceConfigImpl_GetPolicy = _vmkctl.PathSelectionPolicyDeviceConfigImpl_GetPolicy

class FixedPathSelectionPolicyDeviceConfig(PathSelectionPolicyDeviceConfig):
    __swig_setmethods__ = {}
    for _s in [PathSelectionPolicyDeviceConfig]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedPathSelectionPolicyDeviceConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PathSelectionPolicyDeviceConfig]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedPathSelectionPolicyDeviceConfig, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetPreferredPathUid(self) -> "std::string" : return _vmkctl.FixedPathSelectionPolicyDeviceConfig_GetPreferredPathUid(self)
    def GetPreferredPathRuntimeName(self) -> "std::string" : return _vmkctl.FixedPathSelectionPolicyDeviceConfig_GetPreferredPathRuntimeName(self)
    def GetPreferredPathConfiguredName(self) -> "std::string" : return _vmkctl.FixedPathSelectionPolicyDeviceConfig_GetPreferredPathConfiguredName(self)
    def GetPreferredPath(self) -> "HostCtl::Storage::ScsiPathPtr" : return _vmkctl.FixedPathSelectionPolicyDeviceConfig_GetPreferredPath(self)
    def SetPreferredPath(self, *args) -> "void" : return _vmkctl.FixedPathSelectionPolicyDeviceConfig_SetPreferredPath(self, *args)
    __swig_destroy__ = _vmkctl.delete_FixedPathSelectionPolicyDeviceConfig
    __del__ = lambda self : None;
FixedPathSelectionPolicyDeviceConfig_swigregister = _vmkctl.FixedPathSelectionPolicyDeviceConfig_swigregister
FixedPathSelectionPolicyDeviceConfig_swigregister(FixedPathSelectionPolicyDeviceConfig)

class FixedPathSelectionPolicyDeviceConfigImpl(FixedPathSelectionPolicyDeviceConfig,PathSelectionPolicyDeviceConfigImpl):
    __swig_setmethods__ = {}
    for _s in [FixedPathSelectionPolicyDeviceConfig,PathSelectionPolicyDeviceConfigImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FixedPathSelectionPolicyDeviceConfigImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [FixedPathSelectionPolicyDeviceConfig,PathSelectionPolicyDeviceConfigImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FixedPathSelectionPolicyDeviceConfigImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_FixedPathSelectionPolicyDeviceConfigImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetActivePathUid(self) -> "std::string" : return _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_GetActivePathUid(self)
    def GetActivePathRuntimeName(self) -> "std::string" : return _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_GetActivePathRuntimeName(self)
    def GetActivePath(self) -> "HostCtl::Storage::ScsiPathPtr" : return _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_GetActivePath(self)
    def GetPreferredPathUid(self) -> "std::string" : return _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_GetPreferredPathUid(self)
    def GetPreferredPathRuntimeName(self) -> "std::string" : return _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_GetPreferredPathRuntimeName(self)
    def GetPreferredPathConfiguredName(self) -> "std::string" : return _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_GetPreferredPathConfiguredName(self)
    def GetPreferredPath(self) -> "HostCtl::Storage::ScsiPathPtr" : return _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_GetPreferredPath(self)
    def SetPreferredPath(self, *args) -> "void" : return _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_SetPreferredPath(self, *args)
    def ClearPreferredPath(self) -> "void" : return _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_ClearPreferredPath(self)
    def Refresh(self) -> "void" : return _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_Print(self, *args)
    __swig_destroy__ = _vmkctl.delete_FixedPathSelectionPolicyDeviceConfigImpl
    __del__ = lambda self : None;
FixedPathSelectionPolicyDeviceConfigImpl_swigregister = _vmkctl.FixedPathSelectionPolicyDeviceConfigImpl_swigregister
FixedPathSelectionPolicyDeviceConfigImpl_swigregister(FixedPathSelectionPolicyDeviceConfigImpl)

class MruPathSelectionPolicyDeviceConfig(PathSelectionPolicyDeviceConfig):
    __swig_setmethods__ = {}
    for _s in [PathSelectionPolicyDeviceConfig]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MruPathSelectionPolicyDeviceConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PathSelectionPolicyDeviceConfig]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MruPathSelectionPolicyDeviceConfig, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_MruPathSelectionPolicyDeviceConfig
    __del__ = lambda self : None;
MruPathSelectionPolicyDeviceConfig_swigregister = _vmkctl.MruPathSelectionPolicyDeviceConfig_swigregister
MruPathSelectionPolicyDeviceConfig_swigregister(MruPathSelectionPolicyDeviceConfig)

class MruPathSelectionPolicyDeviceConfigImpl(MruPathSelectionPolicyDeviceConfig,PathSelectionPolicyDeviceConfigImpl):
    __swig_setmethods__ = {}
    for _s in [MruPathSelectionPolicyDeviceConfig,PathSelectionPolicyDeviceConfigImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MruPathSelectionPolicyDeviceConfigImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [MruPathSelectionPolicyDeviceConfig,PathSelectionPolicyDeviceConfigImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MruPathSelectionPolicyDeviceConfigImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_MruPathSelectionPolicyDeviceConfigImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_MruPathSelectionPolicyDeviceConfigImpl
    __del__ = lambda self : None;
    def Refresh(self) -> "void" : return _vmkctl.MruPathSelectionPolicyDeviceConfigImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.MruPathSelectionPolicyDeviceConfigImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.MruPathSelectionPolicyDeviceConfigImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.MruPathSelectionPolicyDeviceConfigImpl_Print(self, *args)
MruPathSelectionPolicyDeviceConfigImpl_swigregister = _vmkctl.MruPathSelectionPolicyDeviceConfigImpl_swigregister
MruPathSelectionPolicyDeviceConfigImpl_swigregister(MruPathSelectionPolicyDeviceConfigImpl)

class RoundRobinPathSelectionPolicyDeviceConfig(PathSelectionPolicyDeviceConfig):
    __swig_setmethods__ = {}
    for _s in [PathSelectionPolicyDeviceConfig]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoundRobinPathSelectionPolicyDeviceConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PathSelectionPolicyDeviceConfig]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoundRobinPathSelectionPolicyDeviceConfig, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    RR_SWITCH_TYPE_DEFAULT = _vmkctl.RoundRobinPathSelectionPolicyDeviceConfig_RR_SWITCH_TYPE_DEFAULT
    RR_SWITCH_TYPE_BYTES = _vmkctl.RoundRobinPathSelectionPolicyDeviceConfig_RR_SWITCH_TYPE_BYTES
    RR_SWITCH_TYPE_IOPS = _vmkctl.RoundRobinPathSelectionPolicyDeviceConfig_RR_SWITCH_TYPE_IOPS
    def GetPathSwitchPolicy(self) -> "HostCtl::Storage::Nmp::RoundRobinPathSelectionPolicyDeviceConfig::RoundRobinPolicy" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfig_GetPathSwitchPolicy(self)
    def GetPathSwitchByteLimit(self) -> "uint32" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfig_GetPathSwitchByteLimit(self)
    def SetPathSwitchByteLimit(self, *args) -> "void" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfig_SetPathSwitchByteLimit(self, *args)
    def GetPathSwitchIOsLimit(self) -> "uint32" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfig_GetPathSwitchIOsLimit(self)
    def SetPathSwitchIOsLimit(self, *args) -> "void" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfig_SetPathSwitchIOsLimit(self, *args)
    def SetDefaultValues(self) -> "void" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfig_SetDefaultValues(self)
    __swig_destroy__ = _vmkctl.delete_RoundRobinPathSelectionPolicyDeviceConfig
    __del__ = lambda self : None;
RoundRobinPathSelectionPolicyDeviceConfig_swigregister = _vmkctl.RoundRobinPathSelectionPolicyDeviceConfig_swigregister
RoundRobinPathSelectionPolicyDeviceConfig_swigregister(RoundRobinPathSelectionPolicyDeviceConfig)

class RoundRobinPathSelectionPolicyDeviceConfigImpl(RoundRobinPathSelectionPolicyDeviceConfig,PathSelectionPolicyDeviceConfigImpl):
    __swig_setmethods__ = {}
    for _s in [RoundRobinPathSelectionPolicyDeviceConfig,PathSelectionPolicyDeviceConfigImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RoundRobinPathSelectionPolicyDeviceConfigImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [RoundRobinPathSelectionPolicyDeviceConfig,PathSelectionPolicyDeviceConfigImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RoundRobinPathSelectionPolicyDeviceConfigImpl, name)
    __repr__ = _swig_repr
    DEFAULT_NUM_IOPS_BEFORE_SWITCH = _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_DEFAULT_NUM_IOPS_BEFORE_SWITCH
    DEFAULT_NUM_BYTES_BEFORE_SWITCH = _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_DEFAULT_NUM_BYTES_BEFORE_SWITCH
    def __init__(self, *args): 
        this = _vmkctl.new_RoundRobinPathSelectionPolicyDeviceConfigImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_RoundRobinPathSelectionPolicyDeviceConfigImpl
    __del__ = lambda self : None;
    def GetPathSwitchPolicy(self) -> "HostCtl::Storage::Nmp::RoundRobinPathSelectionPolicyDeviceConfig::RoundRobinPolicy" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_GetPathSwitchPolicy(self)
    def GetPathSwitchByteLimit(self) -> "uint32" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_GetPathSwitchByteLimit(self)
    def SetPathSwitchByteLimit(self, *args) -> "void" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_SetPathSwitchByteLimit(self, *args)
    def GetPathSwitchIOsLimit(self) -> "uint32" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_GetPathSwitchIOsLimit(self)
    def SetPathSwitchIOsLimit(self, *args) -> "void" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_SetPathSwitchIOsLimit(self, *args)
    def GetUseANOPaths(self) -> "bool" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_GetUseANOPaths(self)
    def SetUseANOPaths(self, *args) -> "void" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_SetUseANOPaths(self, *args)
    def SetDefaultValues(self) -> "void" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_SetDefaultValues(self)
    def Refresh(self) -> "void" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_Print(self, *args)
RoundRobinPathSelectionPolicyDeviceConfigImpl_swigregister = _vmkctl.RoundRobinPathSelectionPolicyDeviceConfigImpl_swigregister
RoundRobinPathSelectionPolicyDeviceConfigImpl_swigregister(RoundRobinPathSelectionPolicyDeviceConfigImpl)

class NmpDeviceConfig(PsaDeviceConfig):
    __swig_setmethods__ = {}
    for _s in [PsaDeviceConfig]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NmpDeviceConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PsaDeviceConfig]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NmpDeviceConfig, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetStorageArrayType(self) -> "HostCtl::Storage::Nmp::StorageArrayTypePtr" : return _vmkctl.NmpDeviceConfig_GetStorageArrayType(self)
    def GetStorageArrayTypeString(self) -> "std::string" : return _vmkctl.NmpDeviceConfig_GetStorageArrayTypeString(self)
    def GetStorageArrayTypeOptionString(self, *args) -> "std::string" : return _vmkctl.NmpDeviceConfig_GetStorageArrayTypeOptionString(self, *args)
    def SetStorageArrayTypeOptionString(self, *args) -> "void" : return _vmkctl.NmpDeviceConfig_SetStorageArrayTypeOptionString(self, *args)
    def GetPathSelectionPolicy(self) -> "HostCtl::Storage::Nmp::PathSelectionPolicyPtr" : return _vmkctl.NmpDeviceConfig_GetPathSelectionPolicy(self)
    def GetPathSelectionPolicyName(self) -> "std::string" : return _vmkctl.NmpDeviceConfig_GetPathSelectionPolicyName(self)
    def SetPathSelectionPolicy(self, *args) -> "void" : return _vmkctl.NmpDeviceConfig_SetPathSelectionPolicy(self, *args)
    def GetPathSelectionPolicyDeviceConfig(self) -> "HostCtl::Storage::Nmp::PathSelectionPolicyDeviceConfigPtr" : return _vmkctl.NmpDeviceConfig_GetPathSelectionPolicyDeviceConfig(self)
    def GetWorkingPathSet(self) -> "std::vector< HostCtl::Storage::ScsiPathPtr,std::allocator< HostCtl::Storage::ScsiPathPtr > >" : return _vmkctl.NmpDeviceConfig_GetWorkingPathSet(self)
    def GetWorkingPathSetUids(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.NmpDeviceConfig_GetWorkingPathSetUids(self)
    def GetWorkingPathSetRuntimeNames(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.NmpDeviceConfig_GetWorkingPathSetRuntimeNames(self)
    __swig_destroy__ = _vmkctl.delete_NmpDeviceConfig
    __del__ = lambda self : None;
NmpDeviceConfig_swigregister = _vmkctl.NmpDeviceConfig_swigregister
NmpDeviceConfig_swigregister(NmpDeviceConfig)

class NmpDeviceConfigImpl(NmpDeviceConfig,PsaDeviceConfigImpl):
    __swig_setmethods__ = {}
    for _s in [NmpDeviceConfig,PsaDeviceConfigImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NmpDeviceConfigImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [NmpDeviceConfig,PsaDeviceConfigImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NmpDeviceConfigImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_NmpDeviceConfigImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_NmpDeviceConfigImpl
    __del__ = lambda self : None;
    def GetStorageArrayType(self) -> "HostCtl::Storage::Nmp::StorageArrayTypePtr" : return _vmkctl.NmpDeviceConfigImpl_GetStorageArrayType(self)
    def GetStorageArrayTypeString(self) -> "std::string" : return _vmkctl.NmpDeviceConfigImpl_GetStorageArrayTypeString(self)
    def GetStorageArrayTypeOptionString(self, *args) -> "std::string" : return _vmkctl.NmpDeviceConfigImpl_GetStorageArrayTypeOptionString(self, *args)
    def SetStorageArrayTypeOptionString(self, *args) -> "void" : return _vmkctl.NmpDeviceConfigImpl_SetStorageArrayTypeOptionString(self, *args)
    def GetPathSelectionPolicy(self) -> "HostCtl::Storage::Nmp::PathSelectionPolicyPtr" : return _vmkctl.NmpDeviceConfigImpl_GetPathSelectionPolicy(self)
    def GetPathSelectionPolicyName(self) -> "std::string" : return _vmkctl.NmpDeviceConfigImpl_GetPathSelectionPolicyName(self)
    def SetPathSelectionPolicy(self, *args) -> "void" : return _vmkctl.NmpDeviceConfigImpl_SetPathSelectionPolicy(self, *args)
    def ResetPathSelectionPolicy(self) -> "void" : return _vmkctl.NmpDeviceConfigImpl_ResetPathSelectionPolicy(self)
    def GetPathSelectionPolicyDeviceConfig(self) -> "HostCtl::Storage::Nmp::PathSelectionPolicyDeviceConfigPtr" : return _vmkctl.NmpDeviceConfigImpl_GetPathSelectionPolicyDeviceConfig(self)
    def GetWorkingPathSet(self) -> "std::vector< HostCtl::Storage::ScsiPathPtr,std::allocator< HostCtl::Storage::ScsiPathPtr > >" : return _vmkctl.NmpDeviceConfigImpl_GetWorkingPathSet(self)
    def GetWorkingPathSetUids(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.NmpDeviceConfigImpl_GetWorkingPathSetUids(self)
    def GetWorkingPathSetRuntimeNames(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.NmpDeviceConfigImpl_GetWorkingPathSetRuntimeNames(self)
    def Refresh(self) -> "void" : return _vmkctl.NmpDeviceConfigImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.NmpDeviceConfigImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.NmpDeviceConfigImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.NmpDeviceConfigImpl_Print(self, *args)
    def SetUpdateCfgFileVal(self, *args) -> "void" : return _vmkctl.NmpDeviceConfigImpl_SetUpdateCfgFileVal(self, *args)
    def GetUpdateCfgFileVal(self) -> "bool" : return _vmkctl.NmpDeviceConfigImpl_GetUpdateCfgFileVal(self)
NmpDeviceConfigImpl_swigregister = _vmkctl.NmpDeviceConfigImpl_swigregister
NmpDeviceConfigImpl_swigregister(NmpDeviceConfigImpl)

class NmpScsiPathConfig(PsaScsiPathConfig):
    __swig_setmethods__ = {}
    for _s in [PsaScsiPathConfig]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NmpScsiPathConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [PsaScsiPathConfig]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NmpScsiPathConfig, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetStorageArrayTypeConfigString(self) -> "std::string" : return _vmkctl.NmpScsiPathConfig_GetStorageArrayTypeConfigString(self)
    def SetStorageArrayTypeConfigString(self, *args) -> "void" : return _vmkctl.NmpScsiPathConfig_SetStorageArrayTypeConfigString(self, *args)
    def GetPathSelectionPolicyConfigString(self) -> "std::string" : return _vmkctl.NmpScsiPathConfig_GetPathSelectionPolicyConfigString(self)
    def SetPathSelectionPolicyConfigString(self, *args) -> "void" : return _vmkctl.NmpScsiPathConfig_SetPathSelectionPolicyConfigString(self, *args)
    __swig_destroy__ = _vmkctl.delete_NmpScsiPathConfig
    __del__ = lambda self : None;
NmpScsiPathConfig_swigregister = _vmkctl.NmpScsiPathConfig_swigregister
NmpScsiPathConfig_swigregister(NmpScsiPathConfig)

class NmpScsiPathConfigImpl(NmpScsiPathConfig,PsaScsiPathConfigImpl):
    __swig_setmethods__ = {}
    for _s in [NmpScsiPathConfig,PsaScsiPathConfigImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NmpScsiPathConfigImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [NmpScsiPathConfig,PsaScsiPathConfigImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NmpScsiPathConfigImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_NmpScsiPathConfigImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_NmpScsiPathConfigImpl
    __del__ = lambda self : None;
    def GetStorageArrayTypeConfigString(self) -> "std::string" : return _vmkctl.NmpScsiPathConfigImpl_GetStorageArrayTypeConfigString(self)
    def SetStorageArrayTypeConfigString(self, *args) -> "void" : return _vmkctl.NmpScsiPathConfigImpl_SetStorageArrayTypeConfigString(self, *args)
    def GetPathSelectionPolicyConfigString(self) -> "std::string" : return _vmkctl.NmpScsiPathConfigImpl_GetPathSelectionPolicyConfigString(self)
    def SetPathSelectionPolicyConfigString(self, *args) -> "void" : return _vmkctl.NmpScsiPathConfigImpl_SetPathSelectionPolicyConfigString(self, *args)
    def GetNmpPathStateString(self) -> "std::string" : return _vmkctl.NmpScsiPathConfigImpl_GetNmpPathStateString(self)
    def GetNmpPathPriority(self) -> "int" : return _vmkctl.NmpScsiPathConfigImpl_GetNmpPathPriority(self)
    def Refresh(self) -> "void" : return _vmkctl.NmpScsiPathConfigImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.NmpScsiPathConfigImpl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.NmpScsiPathConfigImpl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.NmpScsiPathConfigImpl_Print(self, *args)
    def SetUpdateCfgFileVal(self, *args) -> "void" : return _vmkctl.NmpScsiPathConfigImpl_SetUpdateCfgFileVal(self, *args)
    def GetUpdateCfgFileVal(self) -> "bool" : return _vmkctl.NmpScsiPathConfigImpl_GetUpdateCfgFileVal(self)
NmpScsiPathConfigImpl_swigregister = _vmkctl.NmpScsiPathConfigImpl_swigregister
NmpScsiPathConfigImpl_swigregister(NmpScsiPathConfigImpl)

class ModuleNamespace(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleNamespace, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleNamespace, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _vmkctl.ModuleNamespace_name_set
    __swig_getmethods__["name"] = _vmkctl.ModuleNamespace_name_get
    if _newclass:name = _swig_property(_vmkctl.ModuleNamespace_name_get, _vmkctl.ModuleNamespace_name_set)
    __swig_setmethods__["versions"] = _vmkctl.ModuleNamespace_versions_set
    __swig_getmethods__["versions"] = _vmkctl.ModuleNamespace_versions_get
    if _newclass:versions = _swig_property(_vmkctl.ModuleNamespace_versions_get, _vmkctl.ModuleNamespace_versions_set)
    def __init__(self): 
        this = _vmkctl.new_ModuleNamespace()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_ModuleNamespace
    __del__ = lambda self : None;
ModuleNamespace_swigregister = _vmkctl.ModuleNamespace_swigregister
ModuleNamespace_swigregister(ModuleNamespace)

class ModuleParam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleParam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleParam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _vmkctl.ModuleParam_name_set
    __swig_getmethods__["name"] = _vmkctl.ModuleParam_name_get
    if _newclass:name = _swig_property(_vmkctl.ModuleParam_name_get, _vmkctl.ModuleParam_name_set)
    __swig_setmethods__["type"] = _vmkctl.ModuleParam_type_set
    __swig_getmethods__["type"] = _vmkctl.ModuleParam_type_get
    if _newclass:type = _swig_property(_vmkctl.ModuleParam_type_get, _vmkctl.ModuleParam_type_set)
    __swig_setmethods__["description"] = _vmkctl.ModuleParam_description_set
    __swig_getmethods__["description"] = _vmkctl.ModuleParam_description_get
    if _newclass:description = _swig_property(_vmkctl.ModuleParam_description_get, _vmkctl.ModuleParam_description_set)
    def __init__(self): 
        this = _vmkctl.new_ModuleParam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_ModuleParam
    __del__ = lambda self : None;
ModuleParam_swigregister = _vmkctl.ModuleParam_swigregister
ModuleParam_swigregister(ModuleParam)

class Module(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Module, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Module, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def IsLoaded(self) -> "bool" : return _vmkctl.Module_IsLoaded(self)
    def GetVersion(self) -> "std::string" : return _vmkctl.Module_GetVersion(self)
    def GetModuleId(self) -> "uint32" : return _vmkctl.Module_GetModuleId(self)
    def GetReadOnlyAddr(self) -> "uint64" : return _vmkctl.Module_GetReadOnlyAddr(self)
    def GetReadOnlyLength(self) -> "uint32" : return _vmkctl.Module_GetReadOnlyLength(self)
    def GetWritableAddr(self) -> "uint64" : return _vmkctl.Module_GetWritableAddr(self)
    def GetWritableLength(self) -> "uint32" : return _vmkctl.Module_GetWritableLength(self)
    def GetTextBaseAddr(self) -> "uint64" : return _vmkctl.Module_GetTextBaseAddr(self)
    def GetDataBaseAddr(self) -> "uint64" : return _vmkctl.Module_GetDataBaseAddr(self)
    def GetBssBaseAddr(self) -> "uint64" : return _vmkctl.Module_GetBssBaseAddr(self)
    def GetUseCount(self) -> "uint32" : return _vmkctl.Module_GetUseCount(self)
    def Load(self, params : 'string' = "", force : 'bool' = False) -> "void" : return _vmkctl.Module_Load(self, params, force)
    def Unload(self) -> "void" : return _vmkctl.Module_Unload(self)
    def SetOptions(self, *args) -> "void" : return _vmkctl.Module_SetOptions(self, *args)
    def GetOptions(self) -> "std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >" : return _vmkctl.Module_GetOptions(self)
    def GetOptionString(self) -> "std::string" : return _vmkctl.Module_GetOptionString(self)
    def SetOptionString(self, *args) -> "void" : return _vmkctl.Module_SetOptionString(self, *args)
    def AppendOptionString(self, *args) -> "void" : return _vmkctl.Module_AppendOptionString(self, *args)
    def CopyParameters(self, *args) -> "void" : return _vmkctl.Module_CopyParameters(self, *args)
    def GetEnabled(self) -> "bool" : return _vmkctl.Module_GetEnabled(self)
    def SetEnabled(self, *args) -> "void" : return _vmkctl.Module_SetEnabled(self, *args)
    def GetFileName(self) -> "std::string" : return _vmkctl.Module_GetFileName(self)
    def GetParameters(self) -> "std::vector< HostCtl::System::ModuleParam,std::allocator< HostCtl::System::ModuleParam > >" : return _vmkctl.Module_GetParameters(self)
    def GetNamespace(self) -> "HostCtl::System::ModuleNamespace" : return _vmkctl.Module_GetNamespace(self)
    def GetFileVersion(self) -> "std::string" : return _vmkctl.Module_GetFileVersion(self)
    def GetLicense(self) -> "std::string" : return _vmkctl.Module_GetLicense(self)
    def GetRequiredNamespaces(self) -> "std::vector< HostCtl::System::ModuleNamespace,std::allocator< HostCtl::System::ModuleNamespace > >" : return _vmkctl.Module_GetRequiredNamespaces(self)
    __swig_destroy__ = _vmkctl.delete_Module
    __del__ = lambda self : None;
Module_swigregister = _vmkctl.Module_swigregister
Module_swigregister(Module)

class paramDesc(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, paramDesc, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, paramDesc, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _vmkctl.paramDesc_name_set
    __swig_getmethods__["name"] = _vmkctl.paramDesc_name_get
    if _newclass:name = _swig_property(_vmkctl.paramDesc_name_get, _vmkctl.paramDesc_name_set)
    __swig_setmethods__["type"] = _vmkctl.paramDesc_type_set
    __swig_getmethods__["type"] = _vmkctl.paramDesc_type_get
    if _newclass:type = _swig_property(_vmkctl.paramDesc_type_get, _vmkctl.paramDesc_type_set)
    __swig_setmethods__["descr"] = _vmkctl.paramDesc_descr_set
    __swig_getmethods__["descr"] = _vmkctl.paramDesc_descr_get
    if _newclass:descr = _swig_property(_vmkctl.paramDesc_descr_get, _vmkctl.paramDesc_descr_set)
    __swig_setmethods__["next"] = _vmkctl.paramDesc_next_set
    __swig_getmethods__["next"] = _vmkctl.paramDesc_next_get
    if _newclass:next = _swig_property(_vmkctl.paramDesc_next_get, _vmkctl.paramDesc_next_set)
    def __init__(self): 
        this = _vmkctl.new_paramDesc()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_paramDesc
    __del__ = lambda self : None;
paramDesc_swigregister = _vmkctl.paramDesc_swigregister
paramDesc_swigregister(paramDesc)

class ModuleImpl(Module,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [Module,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModuleImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [Module,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModuleImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_ModuleImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_ModuleImpl
    __del__ = lambda self : None;
    def IsLoaded(self) -> "bool" : return _vmkctl.ModuleImpl_IsLoaded(self)
    def GetVersion(self) -> "std::string" : return _vmkctl.ModuleImpl_GetVersion(self)
    def GetUseCount(self) -> "uint32" : return _vmkctl.ModuleImpl_GetUseCount(self)
    def GetModuleId(self) -> "uint32" : return _vmkctl.ModuleImpl_GetModuleId(self)
    def GetReadOnlyAddr(self) -> "uint64" : return _vmkctl.ModuleImpl_GetReadOnlyAddr(self)
    def GetReadOnlyLength(self) -> "uint32" : return _vmkctl.ModuleImpl_GetReadOnlyLength(self)
    def GetWritableAddr(self) -> "uint64" : return _vmkctl.ModuleImpl_GetWritableAddr(self)
    def GetWritableLength(self) -> "uint32" : return _vmkctl.ModuleImpl_GetWritableLength(self)
    def GetTextBaseAddr(self) -> "uint64" : return _vmkctl.ModuleImpl_GetTextBaseAddr(self)
    def GetDataBaseAddr(self) -> "uint64" : return _vmkctl.ModuleImpl_GetDataBaseAddr(self)
    def GetBssBaseAddr(self) -> "uint64" : return _vmkctl.ModuleImpl_GetBssBaseAddr(self)
    def GetFileName(self) -> "std::string" : return _vmkctl.ModuleImpl_GetFileName(self)
    def Load(self, *args) -> "void" : return _vmkctl.ModuleImpl_Load(self, *args)
    def Unload(self) -> "void" : return _vmkctl.ModuleImpl_Unload(self)
    def SetOptions(self, *args) -> "void" : return _vmkctl.ModuleImpl_SetOptions(self, *args)
    def GetOptions(self) -> "std::map< std::string,std::string,std::less< std::string >,std::allocator< std::pair< std::string const,std::string > > >" : return _vmkctl.ModuleImpl_GetOptions(self)
    def CopyParameters(self, *args) -> "void" : return _vmkctl.ModuleImpl_CopyParameters(self, *args)
    def GetName(self) -> "std::string" : return _vmkctl.ModuleImpl_GetName(self)
    def GetFilePath(self) -> "std::string" : return _vmkctl.ModuleImpl_GetFilePath(self)
    def Refresh(self) -> "void" : return _vmkctl.ModuleImpl_Refresh(self)
    def Print(self, *args) -> "void" : return _vmkctl.ModuleImpl_Print(self, *args)
    def GetOptionString(self) -> "std::string" : return _vmkctl.ModuleImpl_GetOptionString(self)
    def SetOptionString(self, *args) -> "void" : return _vmkctl.ModuleImpl_SetOptionString(self, *args)
    def AppendOptionString(self, *args) -> "void" : return _vmkctl.ModuleImpl_AppendOptionString(self, *args)
    __swig_getmethods__["IsValidName"] = lambda x: _vmkctl.ModuleImpl_IsValidName
    if _newclass:IsValidName = staticmethod(_vmkctl.ModuleImpl_IsValidName)
    def GetEnabled(self) -> "bool" : return _vmkctl.ModuleImpl_GetEnabled(self)
    def SetEnabled(self, *args) -> "void" : return _vmkctl.ModuleImpl_SetEnabled(self, *args)
    def GetLogLevel(self, *args) -> "HostCtl::System::LogLevel" : return _vmkctl.ModuleImpl_GetLogLevel(self, *args)
    def GetLogLevelNames(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.ModuleImpl_GetLogLevelNames(self)
    def GetAllLogLevels(self) -> "std::vector< HostCtl::System::LogLevel,std::allocator< HostCtl::System::LogLevel > >" : return _vmkctl.ModuleImpl_GetAllLogLevels(self)
    def SetLogLevel(self, *args) -> "void" : return _vmkctl.ModuleImpl_SetLogLevel(self, *args)
    def SetDefaultLogLevel(self, *args) -> "void" : return _vmkctl.ModuleImpl_SetDefaultLogLevel(self, *args)
    def SetLockRankShimLoad(self) -> "void" : return _vmkctl.ModuleImpl_SetLockRankShimLoad(self)
    def GetParameters(self) -> "std::vector< HostCtl::System::ModuleParam,std::allocator< HostCtl::System::ModuleParam > >" : return _vmkctl.ModuleImpl_GetParameters(self)
    def GetNamespace(self) -> "HostCtl::System::ModuleNamespace" : return _vmkctl.ModuleImpl_GetNamespace(self)
    def GetFileVersion(self) -> "std::string" : return _vmkctl.ModuleImpl_GetFileVersion(self)
    def GetLicense(self) -> "std::string" : return _vmkctl.ModuleImpl_GetLicense(self)
    def GetBuildType(self) -> "std::string" : return _vmkctl.ModuleImpl_GetBuildType(self)
    def GetRequiredNamespaces(self) -> "std::vector< HostCtl::System::ModuleNamespace,std::allocator< HostCtl::System::ModuleNamespace > >" : return _vmkctl.ModuleImpl_GetRequiredNamespaces(self)
    def GetContainingVIB(self) -> "std::string" : return _vmkctl.ModuleImpl_GetContainingVIB(self)
    def GetVIBAcceptanceLevel(self) -> "std::string" : return _vmkctl.ModuleImpl_GetVIBAcceptanceLevel(self)
ModuleImpl_swigregister = _vmkctl.ModuleImpl_swigregister
ModuleImpl_swigregister(ModuleImpl)

def ModuleImpl_IsValidName(*args) -> "bool" :
  return _vmkctl.ModuleImpl_IsValidName(*args)
ModuleImpl_IsValidName = _vmkctl.ModuleImpl_IsValidName

class MigrationSummary(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MigrationSummary, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MigrationSummary, name)
    __repr__ = _swig_repr
    __swig_setmethods__["remotePageFaults"] = _vmkctl.MigrationSummary_remotePageFaults_set
    __swig_getmethods__["remotePageFaults"] = _vmkctl.MigrationSummary_remotePageFaults_get
    if _newclass:remotePageFaults = _swig_property(_vmkctl.MigrationSummary_remotePageFaults_get, _vmkctl.MigrationSummary_remotePageFaults_set)
    def __init__(self): 
        this = _vmkctl.new_MigrationSummary()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_MigrationSummary
    __del__ = lambda self : None;
MigrationSummary_swigregister = _vmkctl.MigrationSummary_swigregister
MigrationSummary_swigregister(MigrationSummary)

class MigrationTimestamps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MigrationTimestamps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MigrationTimestamps, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cptXferTime"] = _vmkctl.MigrationTimestamps_cptXferTime_set
    __swig_getmethods__["cptXferTime"] = _vmkctl.MigrationTimestamps_cptXferTime_get
    if _newclass:cptXferTime = _swig_property(_vmkctl.MigrationTimestamps_cptXferTime_get, _vmkctl.MigrationTimestamps_cptXferTime_set)
    __swig_setmethods__["quiesceTime"] = _vmkctl.MigrationTimestamps_quiesceTime_set
    __swig_getmethods__["quiesceTime"] = _vmkctl.MigrationTimestamps_quiesceTime_get
    if _newclass:quiesceTime = _swig_property(_vmkctl.MigrationTimestamps_quiesceTime_get, _vmkctl.MigrationTimestamps_quiesceTime_set)
    __swig_setmethods__["resumeTime"] = _vmkctl.MigrationTimestamps_resumeTime_set
    __swig_getmethods__["resumeTime"] = _vmkctl.MigrationTimestamps_resumeTime_get
    if _newclass:resumeTime = _swig_property(_vmkctl.MigrationTimestamps_resumeTime_get, _vmkctl.MigrationTimestamps_resumeTime_set)
    __swig_setmethods__["precopyStunTime"] = _vmkctl.MigrationTimestamps_precopyStunTime_set
    __swig_getmethods__["precopyStunTime"] = _vmkctl.MigrationTimestamps_precopyStunTime_get
    if _newclass:precopyStunTime = _swig_property(_vmkctl.MigrationTimestamps_precopyStunTime_get, _vmkctl.MigrationTimestamps_precopyStunTime_set)
    __swig_setmethods__["precopyBandwidth"] = _vmkctl.MigrationTimestamps_precopyBandwidth_set
    __swig_getmethods__["precopyBandwidth"] = _vmkctl.MigrationTimestamps_precopyBandwidth_get
    if _newclass:precopyBandwidth = _swig_property(_vmkctl.MigrationTimestamps_precopyBandwidth_get, _vmkctl.MigrationTimestamps_precopyBandwidth_set)
    __swig_setmethods__["stunTime"] = _vmkctl.MigrationTimestamps_stunTime_set
    __swig_getmethods__["stunTime"] = _vmkctl.MigrationTimestamps_stunTime_get
    if _newclass:stunTime = _swig_property(_vmkctl.MigrationTimestamps_stunTime_get, _vmkctl.MigrationTimestamps_stunTime_set)
    __swig_setmethods__["pagesSrcTime"] = _vmkctl.MigrationTimestamps_pagesSrcTime_set
    __swig_getmethods__["pagesSrcTime"] = _vmkctl.MigrationTimestamps_pagesSrcTime_get
    if _newclass:pagesSrcTime = _swig_property(_vmkctl.MigrationTimestamps_pagesSrcTime_get, _vmkctl.MigrationTimestamps_pagesSrcTime_set)
    __swig_setmethods__["numRemotePageFaults"] = _vmkctl.MigrationTimestamps_numRemotePageFaults_set
    __swig_getmethods__["numRemotePageFaults"] = _vmkctl.MigrationTimestamps_numRemotePageFaults_get
    if _newclass:numRemotePageFaults = _swig_property(_vmkctl.MigrationTimestamps_numRemotePageFaults_get, _vmkctl.MigrationTimestamps_numRemotePageFaults_set)
    def __init__(self): 
        this = _vmkctl.new_MigrationTimestamps()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_MigrationTimestamps
    __del__ = lambda self : None;
MigrationTimestamps_swigregister = _vmkctl.MigrationTimestamps_swigregister
MigrationTimestamps_swigregister(MigrationTimestamps)

class Migration(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Migration, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Migration, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    MIGRATESTATE_NOT_INITIALIZED = _vmkctl.Migration_MIGRATESTATE_NOT_INITIALIZED
    MIGRATESTATE_OFF_REQUESTED = _vmkctl.Migration_MIGRATESTATE_OFF_REQUESTED
    MIGRATESTATE_ON_REQUESTED = _vmkctl.Migration_MIGRATESTATE_ON_REQUESTED
    MIGRATESTATE_PRECOPY = _vmkctl.Migration_MIGRATESTATE_PRECOPY
    MIGRATESTATE_QUIESCE = _vmkctl.Migration_MIGRATESTATE_QUIESCE
    MIGRATESTATE_CPTXFER = _vmkctl.Migration_MIGRATESTATE_CPTXFER
    MIGRATESTATE_CPTLOAD = _vmkctl.Migration_MIGRATESTATE_CPTLOAD
    MIGRATESTATE_PAGEIN = _vmkctl.Migration_MIGRATESTATE_PAGEIN
    MIGRATESTATE_COMPLETE = _vmkctl.Migration_MIGRATESTATE_COMPLETE
    MIGRATESTATE_FAILED = _vmkctl.Migration_MIGRATESTATE_FAILED
    def GetWorldId(self) -> "uint32" : return _vmkctl.Migration_GetWorldId(self)
    def GetIpv4Address(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.Migration_GetIpv4Address(self)
    def GetMigrationId(self) -> "uint64" : return _vmkctl.Migration_GetMigrationId(self)
    def GetState(self) -> "HostCtl::System::Migration::MigrationState" : return _vmkctl.Migration_GetState(self)
    def GetProgressPreCopy(self) -> "uint32" : return _vmkctl.Migration_GetProgressPreCopy(self)
    def GetPagesModified(self) -> "uint32" : return _vmkctl.Migration_GetPagesModified(self)
    def GetPagesTransferred(self) -> "uint32" : return _vmkctl.Migration_GetPagesTransferred(self)
    def GetReturnStatus(self) -> "uint32" : return _vmkctl.Migration_GetReturnStatus(self)
    def GetResumeTime(self) -> "uint64" : return _vmkctl.Migration_GetResumeTime(self)
    def GetDownTime(self) -> "uint64" : return _vmkctl.Migration_GetDownTime(self)
    def GetMigrationSummary(self) -> "HostCtl::System::MigrationSummary" : return _vmkctl.Migration_GetMigrationSummary(self)
    def GetMigrationTimestamps(self) -> "HostCtl::System::MigrationTimestamps" : return _vmkctl.Migration_GetMigrationTimestamps(self)
    __swig_destroy__ = _vmkctl.delete_Migration
    __del__ = lambda self : None;
Migration_swigregister = _vmkctl.Migration_swigregister
Migration_swigregister(Migration)

class MigrationImpl(VmkCtlObject,Migration):
    __swig_setmethods__ = {}
    for _s in [VmkCtlObject,Migration]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MigrationImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [VmkCtlObject,Migration]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MigrationImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_MigrationImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetWorldId(self) -> "uint32" : return _vmkctl.MigrationImpl_GetWorldId(self)
    def GetIpv4Address(self) -> "HostCtl::Network::Ipv4Address" : return _vmkctl.MigrationImpl_GetIpv4Address(self)
    def GetMigrationId(self) -> "uint64" : return _vmkctl.MigrationImpl_GetMigrationId(self)
    def GetState(self) -> "HostCtl::System::Migration::MigrationState" : return _vmkctl.MigrationImpl_GetState(self)
    def GetProgressPreCopy(self) -> "uint32" : return _vmkctl.MigrationImpl_GetProgressPreCopy(self)
    def GetPagesModified(self) -> "uint32" : return _vmkctl.MigrationImpl_GetPagesModified(self)
    def GetPagesTransferred(self) -> "uint32" : return _vmkctl.MigrationImpl_GetPagesTransferred(self)
    def GetReturnStatus(self) -> "uint32" : return _vmkctl.MigrationImpl_GetReturnStatus(self)
    def GetResumeTime(self) -> "uint64" : return _vmkctl.MigrationImpl_GetResumeTime(self)
    def GetDownTime(self) -> "uint64" : return _vmkctl.MigrationImpl_GetDownTime(self)
    def GetMigrationSummary(self) -> "HostCtl::System::MigrationSummary" : return _vmkctl.MigrationImpl_GetMigrationSummary(self)
    def GetMigrationTimestamps(self) -> "HostCtl::System::MigrationTimestamps" : return _vmkctl.MigrationImpl_GetMigrationTimestamps(self)
    def GetName(self) -> "std::string" : return _vmkctl.MigrationImpl_GetName(self)
    def Refresh(self) -> "void" : return _vmkctl.MigrationImpl_Refresh(self)
    def Print(self, *args) -> "void" : return _vmkctl.MigrationImpl_Print(self, *args)
    __swig_destroy__ = _vmkctl.delete_MigrationImpl
    __del__ = lambda self : None;
MigrationImpl_swigregister = _vmkctl.MigrationImpl_swigregister
MigrationImpl_swigregister(MigrationImpl)

PROTOCOL_TYPE_TCP_NUM = _vmkctl.PROTOCOL_TYPE_TCP_NUM
PROTOCOL_TYPE_UDP_NUM = _vmkctl.PROTOCOL_TYPE_UDP_NUM
FIREWALL_MAX_ALLOWEDIP_NUM = _vmkctl.FIREWALL_MAX_ALLOWEDIP_NUM
CLEAR_ALLOWEDIP_TYPE_IPV4 = _vmkctl.CLEAR_ALLOWEDIP_TYPE_IPV4
CLEAR_ALLOWEDIP_TYPE_IPV6 = _vmkctl.CLEAR_ALLOWEDIP_TYPE_IPV6
CLEAR_ALLOWEDIP_TYPE_BOTH = _vmkctl.CLEAR_ALLOWEDIP_TYPE_BOTH
FIREWALL_DR_OK = _vmkctl.FIREWALL_DR_OK
FIREWALL_DR_ALREADY_EXIST_SAME = _vmkctl.FIREWALL_DR_ALREADY_EXIST_SAME
FIREWALL_DR_ALREADY_EXIST_DIFF = _vmkctl.FIREWALL_DR_ALREADY_EXIST_DIFF
FIREWALL_DR_RULESET_EMPTY = _vmkctl.FIREWALL_DR_RULESET_EMPTY
FIREWALL_DR_NOT_EXIST = _vmkctl.FIREWALL_DR_NOT_EXIST
FIREWALL_DR_UNKNOWN_ERROR = _vmkctl.FIREWALL_DR_UNKNOWN_ERROR
FIREWALLRULE_DIRECTION_INBOUND = _vmkctl.FIREWALLRULE_DIRECTION_INBOUND
FIREWALLRULE_DIRECTION_OUTBOUND = _vmkctl.FIREWALLRULE_DIRECTION_OUTBOUND
FIREWALLRULE_PROTOCOL_TCP = _vmkctl.FIREWALLRULE_PROTOCOL_TCP
FIREWALLRULE_PROTOCOL_UDP = _vmkctl.FIREWALLRULE_PROTOCOL_UDP
FIREWALLRULE_PROTOCOL_UNKNOWN = _vmkctl.FIREWALLRULE_PROTOCOL_UNKNOWN
FIREWALLRULE_PORT_SRC = _vmkctl.FIREWALLRULE_PORT_SRC
FIREWALLRULE_PORT_DST = _vmkctl.FIREWALLRULE_PORT_DST
class FirewallRule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirewallRule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FirewallRule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _vmkctl.FirewallRule_id_set
    __swig_getmethods__["id"] = _vmkctl.FirewallRule_id_get
    if _newclass:id = _swig_property(_vmkctl.FirewallRule_id_get, _vmkctl.FirewallRule_id_set)
    __swig_setmethods__["portType"] = _vmkctl.FirewallRule_portType_set
    __swig_getmethods__["portType"] = _vmkctl.FirewallRule_portType_get
    if _newclass:portType = _swig_property(_vmkctl.FirewallRule_portType_get, _vmkctl.FirewallRule_portType_set)
    __swig_setmethods__["portBegin"] = _vmkctl.FirewallRule_portBegin_set
    __swig_getmethods__["portBegin"] = _vmkctl.FirewallRule_portBegin_get
    if _newclass:portBegin = _swig_property(_vmkctl.FirewallRule_portBegin_get, _vmkctl.FirewallRule_portBegin_set)
    __swig_setmethods__["portEnd"] = _vmkctl.FirewallRule_portEnd_set
    __swig_getmethods__["portEnd"] = _vmkctl.FirewallRule_portEnd_get
    if _newclass:portEnd = _swig_property(_vmkctl.FirewallRule_portEnd_get, _vmkctl.FirewallRule_portEnd_set)
    __swig_setmethods__["direction"] = _vmkctl.FirewallRule_direction_set
    __swig_getmethods__["direction"] = _vmkctl.FirewallRule_direction_get
    if _newclass:direction = _swig_property(_vmkctl.FirewallRule_direction_get, _vmkctl.FirewallRule_direction_set)
    __swig_setmethods__["protocol"] = _vmkctl.FirewallRule_protocol_set
    __swig_getmethods__["protocol"] = _vmkctl.FirewallRule_protocol_get
    if _newclass:protocol = _swig_property(_vmkctl.FirewallRule_protocol_get, _vmkctl.FirewallRule_protocol_set)
    def __init__(self): 
        this = _vmkctl.new_FirewallRule()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_FirewallRule
    __del__ = lambda self : None;
FirewallRule_swigregister = _vmkctl.FirewallRule_swigregister
FirewallRule_swigregister(FirewallRule)

class FirewallIpList(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirewallIpList, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FirewallIpList, name)
    __repr__ = _swig_repr
    __swig_setmethods__["addressListv4"] = _vmkctl.FirewallIpList_addressListv4_set
    __swig_getmethods__["addressListv4"] = _vmkctl.FirewallIpList_addressListv4_get
    if _newclass:addressListv4 = _swig_property(_vmkctl.FirewallIpList_addressListv4_get, _vmkctl.FirewallIpList_addressListv4_set)
    __swig_setmethods__["networkListv4"] = _vmkctl.FirewallIpList_networkListv4_set
    __swig_getmethods__["networkListv4"] = _vmkctl.FirewallIpList_networkListv4_get
    if _newclass:networkListv4 = _swig_property(_vmkctl.FirewallIpList_networkListv4_get, _vmkctl.FirewallIpList_networkListv4_set)
    __swig_setmethods__["addressListv6"] = _vmkctl.FirewallIpList_addressListv6_set
    __swig_getmethods__["addressListv6"] = _vmkctl.FirewallIpList_addressListv6_get
    if _newclass:addressListv6 = _swig_property(_vmkctl.FirewallIpList_addressListv6_get, _vmkctl.FirewallIpList_addressListv6_set)
    __swig_setmethods__["networkListv6"] = _vmkctl.FirewallIpList_networkListv6_set
    __swig_getmethods__["networkListv6"] = _vmkctl.FirewallIpList_networkListv6_get
    if _newclass:networkListv6 = _swig_property(_vmkctl.FirewallIpList_networkListv6_get, _vmkctl.FirewallIpList_networkListv6_set)
    def __init__(self): 
        this = _vmkctl.new_FirewallIpList()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_FirewallIpList
    __del__ = lambda self : None;
FirewallIpList_swigregister = _vmkctl.FirewallIpList_swigregister
FirewallIpList_swigregister(FirewallIpList)

class FirewallRuleset(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FirewallRuleset, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FirewallRuleset, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetRulesetId(self) -> "std::string" : return _vmkctl.FirewallRuleset_GetRulesetId(self)
    def IsEnabled(self) -> "bool" : return _vmkctl.FirewallRuleset_IsEnabled(self)
    def Enable(self) -> "void" : return _vmkctl.FirewallRuleset_Enable(self)
    def Disable(self) -> "void" : return _vmkctl.FirewallRuleset_Disable(self)
    def GetRules(self) -> "std::vector< HostCtl::System::FirewallRulePtr,std::allocator< HostCtl::System::FirewallRulePtr > >" : return _vmkctl.FirewallRuleset_GetRules(self)
    def SetRules(self, *args) -> "void" : return _vmkctl.FirewallRuleset_SetRules(self, *args)
    def GetAllowedIPList(self) -> "HostCtl::System::FirewallIpListPtr" : return _vmkctl.FirewallRuleset_GetAllowedIPList(self)
    def SetAllowedIPList(self, *args) -> "void" : return _vmkctl.FirewallRuleset_SetAllowedIPList(self, *args)
    def AddAllowedIP(self, *args) -> "void" : return _vmkctl.FirewallRuleset_AddAllowedIP(self, *args)
    def RemoveAllowedIP(self, *args) -> "void" : return _vmkctl.FirewallRuleset_RemoveAllowedIP(self, *args)
    def ClearAllowedIPList(self) -> "void" : return _vmkctl.FirewallRuleset_ClearAllowedIPList(self)
    def IsRequired(self) -> "bool" : return _vmkctl.FirewallRuleset_IsRequired(self)
    def SetRequired(self, required : 'bool' = True) -> "void" : return _vmkctl.FirewallRuleset_SetRequired(self, required)
    def IsLoaded(self) -> "bool" : return _vmkctl.FirewallRuleset_IsLoaded(self)
    def LoadConfig(self) -> "void" : return _vmkctl.FirewallRuleset_LoadConfig(self)
    def ClearConfig(self) -> "void" : return _vmkctl.FirewallRuleset_ClearConfig(self)
    def SetAllowedAll(self, allowedAll : 'bool' = True) -> "void" : return _vmkctl.FirewallRuleset_SetAllowedAll(self, allowedAll)
    def IsAllowedAll(self) -> "bool" : return _vmkctl.FirewallRuleset_IsAllowedAll(self)
    def HasBranchInConfigFile(self) -> "bool" : return _vmkctl.FirewallRuleset_HasBranchInConfigFile(self)
    __swig_destroy__ = _vmkctl.delete_FirewallRuleset
    __del__ = lambda self : None;
FirewallRuleset_swigregister = _vmkctl.FirewallRuleset_swigregister
FirewallRuleset_swigregister(FirewallRuleset)

SYSSWAP_HOSTCACHE = _vmkctl.SYSSWAP_HOSTCACHE
SYSSWAP_HOSTLOCALSWAP = _vmkctl.SYSSWAP_HOSTLOCALSWAP
SYSSWAP_DATASTORE = _vmkctl.SYSSWAP_DATASTORE
SYSSWAP_INVALIDOPTION = _vmkctl.SYSSWAP_INVALIDOPTION
SYSSWAP_DISABLED = _vmkctl.SYSSWAP_DISABLED
class SysSwapState(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SysSwapState, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SysSwapState, name)
    __repr__ = _swig_repr
    __swig_setmethods__["hostCacheOptionOrder"] = _vmkctl.SysSwapState_hostCacheOptionOrder_set
    __swig_getmethods__["hostCacheOptionOrder"] = _vmkctl.SysSwapState_hostCacheOptionOrder_get
    if _newclass:hostCacheOptionOrder = _swig_property(_vmkctl.SysSwapState_hostCacheOptionOrder_get, _vmkctl.SysSwapState_hostCacheOptionOrder_set)
    __swig_setmethods__["isHostCacheOptionEnabled"] = _vmkctl.SysSwapState_isHostCacheOptionEnabled_set
    __swig_getmethods__["isHostCacheOptionEnabled"] = _vmkctl.SysSwapState_isHostCacheOptionEnabled_get
    if _newclass:isHostCacheOptionEnabled = _swig_property(_vmkctl.SysSwapState_isHostCacheOptionEnabled_get, _vmkctl.SysSwapState_isHostCacheOptionEnabled_set)
    __swig_setmethods__["hostLocalSwapOptionOrder"] = _vmkctl.SysSwapState_hostLocalSwapOptionOrder_set
    __swig_getmethods__["hostLocalSwapOptionOrder"] = _vmkctl.SysSwapState_hostLocalSwapOptionOrder_get
    if _newclass:hostLocalSwapOptionOrder = _swig_property(_vmkctl.SysSwapState_hostLocalSwapOptionOrder_get, _vmkctl.SysSwapState_hostLocalSwapOptionOrder_set)
    __swig_setmethods__["isHostLocalSwapOptionEnabled"] = _vmkctl.SysSwapState_isHostLocalSwapOptionEnabled_set
    __swig_getmethods__["isHostLocalSwapOptionEnabled"] = _vmkctl.SysSwapState_isHostLocalSwapOptionEnabled_get
    if _newclass:isHostLocalSwapOptionEnabled = _swig_property(_vmkctl.SysSwapState_isHostLocalSwapOptionEnabled_get, _vmkctl.SysSwapState_isHostLocalSwapOptionEnabled_set)
    __swig_setmethods__["dataStoreOptionOrder"] = _vmkctl.SysSwapState_dataStoreOptionOrder_set
    __swig_getmethods__["dataStoreOptionOrder"] = _vmkctl.SysSwapState_dataStoreOptionOrder_get
    if _newclass:dataStoreOptionOrder = _swig_property(_vmkctl.SysSwapState_dataStoreOptionOrder_get, _vmkctl.SysSwapState_dataStoreOptionOrder_set)
    __swig_setmethods__["isDataStoreOptionEnabled"] = _vmkctl.SysSwapState_isDataStoreOptionEnabled_set
    __swig_getmethods__["isDataStoreOptionEnabled"] = _vmkctl.SysSwapState_isDataStoreOptionEnabled_get
    if _newclass:isDataStoreOptionEnabled = _swig_property(_vmkctl.SysSwapState_isDataStoreOptionEnabled_get, _vmkctl.SysSwapState_isDataStoreOptionEnabled_set)
    __swig_setmethods__["datastoreForDataStoreOption"] = _vmkctl.SysSwapState_datastoreForDataStoreOption_set
    __swig_getmethods__["datastoreForDataStoreOption"] = _vmkctl.SysSwapState_datastoreForDataStoreOption_get
    if _newclass:datastoreForDataStoreOption = _swig_property(_vmkctl.SysSwapState_datastoreForDataStoreOption_get, _vmkctl.SysSwapState_datastoreForDataStoreOption_set)
    def __init__(self): 
        this = _vmkctl.new_SysSwapState()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_SysSwapState
    __del__ = lambda self : None;
SysSwapState_swigregister = _vmkctl.SysSwapState_swigregister
SysSwapState_swigregister(SysSwapState)

class SwapInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwapInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SwapInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSysSwapState(self) -> "HostCtl::System::SysSwapState" : return _vmkctl.SwapInfo_GetSysSwapState(self)
    def SetSysSwapState(self, *args) -> "void" : return _vmkctl.SwapInfo_SetSysSwapState(self, *args)
    def GetActiveSysSwapOptionIndex(self, *args) -> "HostCtl::System::SysSwapOptionId" : return _vmkctl.SwapInfo_GetActiveSysSwapOptionIndex(self, *args)
    def GetSystemSwapFileName(self) -> "std::string" : return _vmkctl.SwapInfo_GetSystemSwapFileName(self)
    def GetHostLocalSwapDatastore(self) -> "std::string" : return _vmkctl.SwapInfo_GetHostLocalSwapDatastore(self)
    def SetHostLocalSwapDatastore(self, *args) -> "void" : return _vmkctl.SwapInfo_SetHostLocalSwapDatastore(self, *args)
    __swig_destroy__ = _vmkctl.delete_SwapInfo
    __del__ = lambda self : None;
SwapInfo_swigregister = _vmkctl.SwapInfo_swigregister
SwapInfo_swigregister(SwapInfo)

class AgentLimits(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AgentLimits, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AgentLimits, name)
    __repr__ = _swig_repr
    __swig_setmethods__["communitySize"] = _vmkctl.AgentLimits_communitySize_set
    __swig_getmethods__["communitySize"] = _vmkctl.AgentLimits_communitySize_get
    if _newclass:communitySize = _swig_property(_vmkctl.AgentLimits_communitySize_get, _vmkctl.AgentLimits_communitySize_set)
    __swig_setmethods__["maxCommunities"] = _vmkctl.AgentLimits_maxCommunities_set
    __swig_getmethods__["maxCommunities"] = _vmkctl.AgentLimits_maxCommunities_get
    if _newclass:maxCommunities = _swig_property(_vmkctl.AgentLimits_maxCommunities_get, _vmkctl.AgentLimits_maxCommunities_set)
    __swig_setmethods__["maxTargets"] = _vmkctl.AgentLimits_maxTargets_set
    __swig_getmethods__["maxTargets"] = _vmkctl.AgentLimits_maxTargets_get
    if _newclass:maxTargets = _swig_property(_vmkctl.AgentLimits_maxTargets_get, _vmkctl.AgentLimits_maxTargets_set)
    __swig_setmethods__["maxFilters"] = _vmkctl.AgentLimits_maxFilters_set
    __swig_getmethods__["maxFilters"] = _vmkctl.AgentLimits_maxFilters_get
    if _newclass:maxFilters = _swig_property(_vmkctl.AgentLimits_maxFilters_get, _vmkctl.AgentLimits_maxFilters_set)
    def __init__(self): 
        this = _vmkctl.new_AgentLimits()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_AgentLimits
    __del__ = lambda self : None;
AgentLimits_swigregister = _vmkctl.AgentLimits_swigregister
AgentLimits_swigregister(AgentLimits)

class SnmpAgentConfig(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SnmpAgentConfig, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SnmpAgentConfig, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetEnabled(self) -> "bool" : return _vmkctl.SnmpAgentConfig_GetEnabled(self)
    def SetEnabled(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_SetEnabled(self, *args)
    def GetPort(self) -> "int" : return _vmkctl.SnmpAgentConfig_GetPort(self)
    def SetPort(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_SetPort(self, *args)
    def GetCommunities(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_GetCommunities(self, *args)
    def SetCommunities(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_SetCommunities(self, *args)
    def GetTrapTargets(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_GetTrapTargets(self, *args)
    def SetTrapTargets(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_SetTrapTargets(self, *args)
    def GetOptions(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_GetOptions(self, *args)
    def SetOptions(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_SetOptions(self, *args)
    def Reset(self) -> "void" : return _vmkctl.SnmpAgentConfig_Reset(self)
    def SaveConfig(self) -> "void" : return _vmkctl.SnmpAgentConfig_SaveConfig(self)
    def TestTrap(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_TestTrap(self, *args)
    def TestUser(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_TestUser(self, *args)
    def GenerateHash(self, *args) -> "bool" : return _vmkctl.SnmpAgentConfig_GenerateHash(self, *args)
    def GetLimits(self) -> "HostCtl::System::AgentLimits" : return _vmkctl.SnmpAgentConfig_GetLimits(self)
    def GetV3Traps(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_GetV3Traps(self, *args)
    def ValidConfigFile(self) -> "bool" : return _vmkctl.SnmpAgentConfig_ValidConfigFile(self)
    def GetUsers(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_GetUsers(self, *args)
    def SetUsers(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_SetUsers(self, *args)
    def GetRemoteUsers(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_GetRemoteUsers(self, *args)
    def SetRemoteUsers(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_SetRemoteUsers(self, *args)
    def IsLargeStorageSupported(self) -> "bool" : return _vmkctl.SnmpAgentConfig_IsLargeStorageSupported(self)
    def SetLargeStorageSupport(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_SetLargeStorageSupport(self, *args)
    def SetV3Targets(self, *args) -> "void" : return _vmkctl.SnmpAgentConfig_SetV3Targets(self, *args)
    __swig_destroy__ = _vmkctl.delete_SnmpAgentConfig
    __del__ = lambda self : None;
SnmpAgentConfig_swigregister = _vmkctl.SnmpAgentConfig_swigregister
SnmpAgentConfig_swigregister(SnmpAgentConfig)


def SnmpAgentConfigFactory() -> "HostCtl::System::SnmpAgentConfigPtr" :
  return _vmkctl.SnmpAgentConfigFactory()
SnmpAgentConfigFactory = _vmkctl.SnmpAgentConfigFactory
DEF_LOG_LEVEL = _vmkctl.DEF_LOG_LEVEL
class WbemAgentConfigImpl(VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WbemAgentConfigImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WbemAgentConfigImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_WbemAgentConfigImpl()
        try: self.this.append(this)
        except: self.this = this
    def GetEnabled(self) -> "bool" : return _vmkctl.WbemAgentConfigImpl_GetEnabled(self)
    def SetEnabled(self, *args) -> "void" : return _vmkctl.WbemAgentConfigImpl_SetEnabled(self, *args)
    def SetProviderEnabled(self, *args) -> "void" : return _vmkctl.WbemAgentConfigImpl_SetProviderEnabled(self, *args)
    def IsWSManEnabled(self) -> "bool" : return _vmkctl.WbemAgentConfigImpl_IsWSManEnabled(self)
    def SetWSManEnabled(self, *args) -> "void" : return _vmkctl.WbemAgentConfigImpl_SetWSManEnabled(self, *args)
    def GetPort(self) -> "int" : return _vmkctl.WbemAgentConfigImpl_GetPort(self)
    def SetPort(self, *args) -> "void" : return _vmkctl.WbemAgentConfigImpl_SetPort(self, *args)
    def GetLoglevel(self) -> "std::string" : return _vmkctl.WbemAgentConfigImpl_GetLoglevel(self)
    def SetLoglevel(self, *args) -> "void" : return _vmkctl.WbemAgentConfigImpl_SetLoglevel(self, *args)
    def GetAuthModel(self) -> "HostCtl::System::SfcbAuthModel" : return _vmkctl.WbemAgentConfigImpl_GetAuthModel(self)
    def SetAuthModel(self, *args) -> "void" : return _vmkctl.WbemAgentConfigImpl_SetAuthModel(self, *args)
    def GetProviders(self) -> "std::vector< HostCtl::System::ProviderInfo,std::allocator< HostCtl::System::ProviderInfo > >" : return _vmkctl.WbemAgentConfigImpl_GetProviders(self)
    def Reset(self) -> "void" : return _vmkctl.WbemAgentConfigImpl_Reset(self)
    def ValidConfigFile(self) -> "bool" : return _vmkctl.WbemAgentConfigImpl_ValidConfigFile(self)
    def SaveConfig(self) -> "void" : return _vmkctl.WbemAgentConfigImpl_SaveConfig(self)
    def IsConfigDirty(self) -> "bool" : return _vmkctl.WbemAgentConfigImpl_IsConfigDirty(self)
    def MarkConfigDirty(self) -> "void" : return _vmkctl.WbemAgentConfigImpl_MarkConfigDirty(self)
    def GetName(self) -> "std::string" : return _vmkctl.WbemAgentConfigImpl_GetName(self)
    def Refresh(self) -> "void" : return _vmkctl.WbemAgentConfigImpl_Refresh(self)
    def Print(self, *args) -> "void" : return _vmkctl.WbemAgentConfigImpl_Print(self, *args)
    def LoadConfig(self) -> "void" : return _vmkctl.WbemAgentConfigImpl_LoadConfig(self)
    def DeleteCimProviderResourcePools(self) -> "void" : return _vmkctl.WbemAgentConfigImpl_DeleteCimProviderResourcePools(self)
    __swig_destroy__ = _vmkctl.delete_WbemAgentConfigImpl
    __del__ = lambda self : None;
WbemAgentConfigImpl_swigregister = _vmkctl.WbemAgentConfigImpl_swigregister
WbemAgentConfigImpl_swigregister(WbemAgentConfigImpl)

class SoftwareUuid(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SoftwareUuid, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SoftwareUuid, name)
    __repr__ = _swig_repr
    __swig_setmethods__["uuid"] = _vmkctl.SoftwareUuid_uuid_set
    __swig_getmethods__["uuid"] = _vmkctl.SoftwareUuid_uuid_get
    if _newclass:uuid = _swig_property(_vmkctl.SoftwareUuid_uuid_get, _vmkctl.SoftwareUuid_uuid_set)
    __swig_setmethods__["uuidStr"] = _vmkctl.SoftwareUuid_uuidStr_set
    __swig_getmethods__["uuidStr"] = _vmkctl.SoftwareUuid_uuidStr_get
    if _newclass:uuidStr = _swig_property(_vmkctl.SoftwareUuid_uuidStr_get, _vmkctl.SoftwareUuid_uuidStr_set)
    def __init__(self): 
        this = _vmkctl.new_SoftwareUuid()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_SoftwareUuid
    __del__ = lambda self : None;
SoftwareUuid_swigregister = _vmkctl.SoftwareUuid_swigregister
SoftwareUuid_swigregister(SoftwareUuid)

class DateTime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DateTime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DateTime, name)
    __repr__ = _swig_repr
    __swig_setmethods__["day"] = _vmkctl.DateTime_day_set
    __swig_getmethods__["day"] = _vmkctl.DateTime_day_get
    if _newclass:day = _swig_property(_vmkctl.DateTime_day_get, _vmkctl.DateTime_day_set)
    __swig_setmethods__["month"] = _vmkctl.DateTime_month_set
    __swig_getmethods__["month"] = _vmkctl.DateTime_month_get
    if _newclass:month = _swig_property(_vmkctl.DateTime_month_get, _vmkctl.DateTime_month_set)
    __swig_setmethods__["year"] = _vmkctl.DateTime_year_set
    __swig_getmethods__["year"] = _vmkctl.DateTime_year_get
    if _newclass:year = _swig_property(_vmkctl.DateTime_year_get, _vmkctl.DateTime_year_set)
    __swig_setmethods__["hour"] = _vmkctl.DateTime_hour_set
    __swig_getmethods__["hour"] = _vmkctl.DateTime_hour_get
    if _newclass:hour = _swig_property(_vmkctl.DateTime_hour_get, _vmkctl.DateTime_hour_set)
    __swig_setmethods__["min"] = _vmkctl.DateTime_min_set
    __swig_getmethods__["min"] = _vmkctl.DateTime_min_get
    if _newclass:min = _swig_property(_vmkctl.DateTime_min_get, _vmkctl.DateTime_min_set)
    __swig_setmethods__["sec"] = _vmkctl.DateTime_sec_set
    __swig_getmethods__["sec"] = _vmkctl.DateTime_sec_get
    if _newclass:sec = _swig_property(_vmkctl.DateTime_sec_get, _vmkctl.DateTime_sec_set)
    def __init__(self): 
        this = _vmkctl.new_DateTime()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_DateTime
    __del__ = lambda self : None;
DateTime_swigregister = _vmkctl.DateTime_swigregister
DateTime_swigregister(DateTime)

class VMLimitsInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VMLimitsInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VMLimitsInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["maxVMs"] = _vmkctl.VMLimitsInfo_maxVMs_set
    __swig_getmethods__["maxVMs"] = _vmkctl.VMLimitsInfo_maxVMs_get
    if _newclass:maxVMs = _swig_property(_vmkctl.VMLimitsInfo_maxVMs_get, _vmkctl.VMLimitsInfo_maxVMs_set)
    __swig_setmethods__["maxVCPUs"] = _vmkctl.VMLimitsInfo_maxVCPUs_set
    __swig_getmethods__["maxVCPUs"] = _vmkctl.VMLimitsInfo_maxVCPUs_get
    if _newclass:maxVCPUs = _swig_property(_vmkctl.VMLimitsInfo_maxVCPUs_get, _vmkctl.VMLimitsInfo_maxVCPUs_set)
    def __init__(self): 
        this = _vmkctl.new_VMLimitsInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_VMLimitsInfo
    __del__ = lambda self : None;
VMLimitsInfo_swigregister = _vmkctl.VMLimitsInfo_swigregister
VMLimitsInfo_swigregister(VMLimitsInfo)

class BootOptions(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BootOptions, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BootOptions, name)
    __repr__ = _swig_repr
    __swig_setmethods__["auditMode"] = _vmkctl.BootOptions_auditMode_set
    __swig_getmethods__["auditMode"] = _vmkctl.BootOptions_auditMode_get
    if _newclass:auditMode = _swig_property(_vmkctl.BootOptions_auditMode_get, _vmkctl.BootOptions_auditMode_set)
    __swig_setmethods__["fsCheck"] = _vmkctl.BootOptions_fsCheck_set
    __swig_getmethods__["fsCheck"] = _vmkctl.BootOptions_fsCheck_get
    if _newclass:fsCheck = _swig_property(_vmkctl.BootOptions_fsCheck_get, _vmkctl.BootOptions_fsCheck_set)
    __swig_setmethods__["rollback"] = _vmkctl.BootOptions_rollback_set
    __swig_getmethods__["rollback"] = _vmkctl.BootOptions_rollback_get
    if _newclass:rollback = _swig_property(_vmkctl.BootOptions_rollback_get, _vmkctl.BootOptions_rollback_set)
    def __init__(self): 
        this = _vmkctl.new_BootOptions()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_BootOptions
    __del__ = lambda self : None;
BootOptions_swigregister = _vmkctl.BootOptions_swigregister
BootOptions_swigregister(BootOptions)

DRIVERVM_DISABLED = _vmkctl.DRIVERVM_DISABLED
DRIVERVM_INCAPABLE = _vmkctl.DRIVERVM_INCAPABLE
DRIVERVM_ENABLED = _vmkctl.DRIVERVM_ENABLED
DRIVERVM_CLAIM_MANUAL = _vmkctl.DRIVERVM_CLAIM_MANUAL
DRIVERVM_CLAIM_AUTO = _vmkctl.DRIVERVM_CLAIM_AUTO
class LogLevel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogLevel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogLevel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _vmkctl.LogLevel_name_set
    __swig_getmethods__["name"] = _vmkctl.LogLevel_name_get
    if _newclass:name = _swig_property(_vmkctl.LogLevel_name_get, _vmkctl.LogLevel_name_set)
    __swig_setmethods__["currentLevel"] = _vmkctl.LogLevel_currentLevel_set
    __swig_getmethods__["currentLevel"] = _vmkctl.LogLevel_currentLevel_get
    if _newclass:currentLevel = _swig_property(_vmkctl.LogLevel_currentLevel_get, _vmkctl.LogLevel_currentLevel_set)
    __swig_setmethods__["defaultLevel"] = _vmkctl.LogLevel_defaultLevel_set
    __swig_getmethods__["defaultLevel"] = _vmkctl.LogLevel_defaultLevel_get
    if _newclass:defaultLevel = _swig_property(_vmkctl.LogLevel_defaultLevel_get, _vmkctl.LogLevel_defaultLevel_set)
    def __init__(self): 
        this = _vmkctl.new_LogLevel()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_LogLevel
    __del__ = lambda self : None;
LogLevel_swigregister = _vmkctl.LogLevel_swigregister
LogLevel_swigregister(LogLevel)

MAINTENANCE_MODE_UNKNOWN = _vmkctl.MAINTENANCE_MODE_UNKNOWN
MAINTENANCE_MODE_ENABLED = _vmkctl.MAINTENANCE_MODE_ENABLED
MAINTENANCE_MODE_DISABLED = _vmkctl.MAINTENANCE_MODE_DISABLED
MAINTENANCE_MODE_INVALID_STATE = _vmkctl.MAINTENANCE_MODE_INVALID_STATE
TPM_NOT_PRESENT = _vmkctl.TPM_NOT_PRESENT
TPM_PRESENT = _vmkctl.TPM_PRESENT
DRTM_ENABLED = _vmkctl.DRTM_ENABLED
DRTM_DISABLED = _vmkctl.DRTM_DISABLED
class SystemInfo(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetModuleByName(self, *args) -> "HostCtl::System::ModulePtr" : return _vmkctl.SystemInfo_GetModuleByName(self, *args)
    def GetLoadedModules(self) -> "std::vector< HostCtl::System::ModulePtr,std::allocator< HostCtl::System::ModulePtr > >" : return _vmkctl.SystemInfo_GetLoadedModules(self)
    def IsModuleLoaded(self, *args) -> "bool" : return _vmkctl.SystemInfo_IsModuleLoaded(self, *args)
    def GetSystemUuid(self) -> "HostCtl::System::SoftwareUuid" : return _vmkctl.SystemInfo_GetSystemUuid(self)
    def GetBootNicMacAddress(self) -> "std::string" : return _vmkctl.SystemInfo_GetBootNicMacAddress(self)
    def GetBootFsUUID(self) -> "std::string" : return _vmkctl.SystemInfo_GetBootFsUUID(self)
    def GetBootDevice(self) -> "std::string" : return _vmkctl.SystemInfo_GetBootDevice(self)
    def GetDateTime(self) -> "HostCtl::System::DateTime" : return _vmkctl.SystemInfo_GetDateTime(self)
    def SetDateTime(self, *args) -> "void" : return _vmkctl.SystemInfo_SetDateTime(self, *args)
    def GetFormattedDateTime(self) -> "std::string" : return _vmkctl.SystemInfo_GetFormattedDateTime(self)
    def GetWelcomeMessage(self) -> "std::string" : return _vmkctl.SystemInfo_GetWelcomeMessage(self)
    def SetWelcomeMessage(self, *args) -> "void" : return _vmkctl.SystemInfo_SetWelcomeMessage(self, *args)
    def HasUserVar(self, *args) -> "bool" : return _vmkctl.SystemInfo_HasUserVar(self, *args)
    def GetUserVar(self, *args) -> "std::string" : return _vmkctl.SystemInfo_GetUserVar(self, *args)
    def SetUserVar(self, *args) -> "void" : return _vmkctl.SystemInfo_SetUserVar(self, *args)
    def DelUserVar(self, *args) -> "void" : return _vmkctl.SystemInfo_DelUserVar(self, *args)
    def IsDMAREnabled(self) -> "bool" : return _vmkctl.SystemInfo_IsDMAREnabled(self)
    def GetDriverVMCapability(self) -> "HostCtl::System::DriverVMCapability" : return _vmkctl.SystemInfo_GetDriverVMCapability(self)
    def SetDefaultDriverVM(self) -> "void" : return _vmkctl.SystemInfo_SetDefaultDriverVM(self)
    def GetDriverVMClaimPolicy(self) -> "HostCtl::System::DriverVMClaimPolicy" : return _vmkctl.SystemInfo_GetDriverVMClaimPolicy(self)
    def SetDriverVMClaimPolicy(self, *args) -> "void" : return _vmkctl.SystemInfo_SetDriverVMClaimPolicy(self, *args)
    def GetModules(self) -> "std::vector< HostCtl::System::ModulePtr,std::allocator< HostCtl::System::ModulePtr > >" : return _vmkctl.SystemInfo_GetModules(self)
    def GetModuleNamespacesLoaded(self) -> "std::vector< HostCtl::System::ModuleNamespace,std::allocator< HostCtl::System::ModuleNamespace > >" : return _vmkctl.SystemInfo_GetModuleNamespacesLoaded(self)
    def GetSupportedVMs(self) -> "int" : return _vmkctl.SystemInfo_GetSupportedVMs(self)
    def GetVMLimitsInfo(self) -> "HostCtl::System::VMLimitsInfo" : return _vmkctl.SystemInfo_GetVMLimitsInfo(self)
    def SetMaintenanceModeState(self, *args) -> "void" : return _vmkctl.SystemInfo_SetMaintenanceModeState(self, *args)
    def IsFirewallEnabled(self) -> "bool" : return _vmkctl.SystemInfo_IsFirewallEnabled(self)
    def SetFirewallEnabled(self, *args) -> "void" : return _vmkctl.SystemInfo_SetFirewallEnabled(self, *args)
    def GetFirewallRulesetById(self, *args) -> "HostCtl::System::FirewallRulesetPtr" : return _vmkctl.SystemInfo_GetFirewallRulesetById(self, *args)
    def GetFirewallRulesets(self) -> "std::vector< HostCtl::System::FirewallRulesetPtr,std::allocator< HostCtl::System::FirewallRulesetPtr > >" : return _vmkctl.SystemInfo_GetFirewallRulesets(self)
    def DestroyFirewallFilters(self) -> "void" : return _vmkctl.SystemInfo_DestroyFirewallFilters(self)
    def GetFirewallDefaultAction(self) -> "bool" : return _vmkctl.SystemInfo_GetFirewallDefaultAction(self)
    def SetFirewallDefaultAction(self, *args) -> "void" : return _vmkctl.SystemInfo_SetFirewallDefaultAction(self, *args)
    def GetCbrcOverheadPerVmdk(self) -> "uint64" : return _vmkctl.SystemInfo_GetCbrcOverheadPerVmdk(self)
    def AddFirewallDynamicRule(self, *args) -> "HostCtl::System::DynamicRulesetOpStatus" : return _vmkctl.SystemInfo_AddFirewallDynamicRule(self, *args)
    def RemoveFirewallDynamicRule(self, *args) -> "HostCtl::System::DynamicRulesetOpStatus" : return _vmkctl.SystemInfo_RemoveFirewallDynamicRule(self, *args)
    def GetFirewallDynamicRules(self) -> "std::vector< HostCtl::System::FirewallRulePtr,std::allocator< HostCtl::System::FirewallRulePtr > >" : return _vmkctl.SystemInfo_GetFirewallDynamicRules(self)
    def GetBootOptions(self) -> "HostCtl::System::BootOptions" : return _vmkctl.SystemInfo_GetBootOptions(self)
    def LoadFirewallRulesets(self) -> "void" : return _vmkctl.SystemInfo_LoadFirewallRulesets(self)
    def IsFirewallOtherL4Allowed(self) -> "bool" : return _vmkctl.SystemInfo_IsFirewallOtherL4Allowed(self)
    def SetFirewallOtherL4Allowed(self, *args) -> "void" : return _vmkctl.SystemInfo_SetFirewallOtherL4Allowed(self, *args)
    def IsFirewallPassIGMP(self) -> "bool" : return _vmkctl.SystemInfo_IsFirewallPassIGMP(self)
    def SetFirewallPassIGMP(self, *args) -> "void" : return _vmkctl.SystemInfo_SetFirewallPassIGMP(self, *args)
    def SetCbrcEnabled(self, *args) -> "void" : return _vmkctl.SystemInfo_SetCbrcEnabled(self, *args)
    def GetCbrcRuntimeEnabled(self) -> "bool" : return _vmkctl.SystemInfo_GetCbrcRuntimeEnabled(self)
    def GetCbrcConfiguredEnabled(self) -> "bool" : return _vmkctl.SystemInfo_GetCbrcConfiguredEnabled(self)
    def GetTPMState(self) -> "HostCtl::System::TPMState" : return _vmkctl.SystemInfo_GetTPMState(self)
    def GetDRTMState(self) -> "HostCtl::System::DRTMState" : return _vmkctl.SystemInfo_GetDRTMState(self)
    def IsDumpTargetEnabled(self) -> "bool" : return _vmkctl.SystemInfo_IsDumpTargetEnabled(self)
    def GetVislVMLocation(self) -> "std::string" : return _vmkctl.SystemInfo_GetVislVMLocation(self)
    def GetInceptionTimestamp(self) -> "std::string" : return _vmkctl.SystemInfo_GetInceptionTimestamp(self)
    def SetInceptionTimestamp(self) -> "void" : return _vmkctl.SystemInfo_SetInceptionTimestamp(self)
    def SetCoreDumpEnabled(self, *args) -> "void" : return _vmkctl.SystemInfo_SetCoreDumpEnabled(self, *args)
    def SetCoreDumpEnabledForWorld(self, *args) -> "void" : return _vmkctl.SystemInfo_SetCoreDumpEnabledForWorld(self, *args)
    def SetVMkernelDumpEnabled(self, *args) -> "void" : return _vmkctl.SystemInfo_SetVMkernelDumpEnabled(self, *args)
    def GetVMkernelDumpEnabled(self) -> "bool" : return _vmkctl.SystemInfo_GetVMkernelDumpEnabled(self)
    __swig_destroy__ = _vmkctl.delete_SystemInfo
    __del__ = lambda self : None;
SystemInfo_swigregister = _vmkctl.SystemInfo_swigregister
SystemInfo_swigregister(SystemInfo)


def FirewallControlPort(*args) -> "int" :
  return _vmkctl.FirewallControlPort(*args)
FirewallControlPort = _vmkctl.FirewallControlPort
class SystemInfoImpl(SystemInfo,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [SystemInfo,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SystemInfoImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [SystemInfo,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SystemInfoImpl, name)
    __repr__ = _swig_repr
    IPMI_NOT_SUPPORTED = _vmkctl.SystemInfoImpl_IPMI_NOT_SUPPORTED
    IPMI_SUPPORTED = _vmkctl.SystemInfoImpl_IPMI_SUPPORTED
    IOMMU_NONE = _vmkctl.SystemInfoImpl_IOMMU_NONE
    IOMMU_AMD = _vmkctl.SystemInfoImpl_IOMMU_AMD
    IOMMU_INTEL = _vmkctl.SystemInfoImpl_IOMMU_INTEL
    DMA_IOMMU_DISABLED = _vmkctl.SystemInfoImpl_DMA_IOMMU_DISABLED
    DMA_IOMMU_ENABLED = _vmkctl.SystemInfoImpl_DMA_IOMMU_ENABLED
    DMA_IOMMU_DEBUG = _vmkctl.SystemInfoImpl_DMA_IOMMU_DEBUG
    VMVISOR_PARTITION_INVALID = _vmkctl.SystemInfoImpl_VMVISOR_PARTITION_INVALID
    VMVISOR_PARTITION_BOOT = _vmkctl.SystemInfoImpl_VMVISOR_PARTITION_BOOT
    VMVISOR_PARTITION_SCRATCH = _vmkctl.SystemInfoImpl_VMVISOR_PARTITION_SCRATCH
    VMVISOR_PARTITION_VMFS = _vmkctl.SystemInfoImpl_VMVISOR_PARTITION_VMFS
    VMVISOR_PARTITION_EXTENDED = _vmkctl.SystemInfoImpl_VMVISOR_PARTITION_EXTENDED
    VMVISOR_PARTITION_BOOTBANK_ONE = _vmkctl.SystemInfoImpl_VMVISOR_PARTITION_BOOTBANK_ONE
    VMVISOR_PARTITION_BOOTBANK_TWO = _vmkctl.SystemInfoImpl_VMVISOR_PARTITION_BOOTBANK_TWO
    VMVISOR_PARTITION_VMKCORE = _vmkctl.SystemInfoImpl_VMVISOR_PARTITION_VMKCORE
    VMVISOR_PARTITION_STORE = _vmkctl.SystemInfoImpl_VMVISOR_PARTITION_STORE
    def __init__(self, *args): 
        this = _vmkctl.new_SystemInfoImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_SystemInfoImpl
    __del__ = lambda self : None;
    def GetModuleByName(self, *args) -> "HostCtl::System::ModulePtr" : return _vmkctl.SystemInfoImpl_GetModuleByName(self, *args)
    def GetLoadedModules(self) -> "std::vector< HostCtl::System::ModulePtr,std::allocator< HostCtl::System::ModulePtr > >" : return _vmkctl.SystemInfoImpl_GetLoadedModules(self)
    def IsModuleLoaded(self, *args) -> "bool" : return _vmkctl.SystemInfoImpl_IsModuleLoaded(self, *args)
    def GetModules(self) -> "std::vector< HostCtl::System::ModulePtr,std::allocator< HostCtl::System::ModulePtr > >" : return _vmkctl.SystemInfoImpl_GetModules(self)
    def GetModuleNamespacesLoaded(self) -> "std::vector< HostCtl::System::ModuleNamespace,std::allocator< HostCtl::System::ModuleNamespace > >" : return _vmkctl.SystemInfoImpl_GetModuleNamespacesLoaded(self)
    def HasUserVar(self, *args) -> "bool" : return _vmkctl.SystemInfoImpl_HasUserVar(self, *args)
    def GetUserVar(self, *args) -> "std::string" : return _vmkctl.SystemInfoImpl_GetUserVar(self, *args)
    def SetUserVar(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetUserVar(self, *args)
    def DelUserVar(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_DelUserVar(self, *args)
    def GetConfigFileValue(self, *args) -> "std::string" : return _vmkctl.SystemInfoImpl_GetConfigFileValue(self, *args)
    def GetName(self) -> "std::string" : return _vmkctl.SystemInfoImpl_GetName(self)
    def Refresh(self) -> "void" : return _vmkctl.SystemInfoImpl_Refresh(self)
    def Print(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_Print(self, *args)
    def HasSystemUuid(self) -> "bool" : return _vmkctl.SystemInfoImpl_HasSystemUuid(self)
    def GetSystemUuid(self) -> "HostCtl::System::SoftwareUuid" : return _vmkctl.SystemInfoImpl_GetSystemUuid(self)
    def GetVmkernelUuid(self) -> "HostCtl::System::SoftwareUuid" : return _vmkctl.SystemInfoImpl_GetVmkernelUuid(self)
    def SetVmkernelUuid(self) -> "void" : return _vmkctl.SystemInfoImpl_SetVmkernelUuid(self)
    def GetLogLevel(self, *args) -> "HostCtl::System::LogLevel" : return _vmkctl.SystemInfoImpl_GetLogLevel(self, *args)
    def SetLogLevel(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetLogLevel(self, *args)
    def GetLogLevelNames(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.SystemInfoImpl_GetLogLevelNames(self)
    def GetAllLogLevels(self) -> "std::vector< HostCtl::System::LogLevel,std::allocator< HostCtl::System::LogLevel > >" : return _vmkctl.SystemInfoImpl_GetAllLogLevels(self)
    def SetDefaultLogLevel(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetDefaultLogLevel(self, *args)
    def SetCoreDumpEnabled(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetCoreDumpEnabled(self, *args)
    def SetCoreDumpEnabledForWorld(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetCoreDumpEnabledForWorld(self, *args)
    def SetVMkernelDumpEnabled(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetVMkernelDumpEnabled(self, *args)
    def GetVMkernelDumpEnabled(self) -> "bool" : return _vmkctl.SystemInfoImpl_GetVMkernelDumpEnabled(self)
    def GetBootNicMacAddress(self) -> "std::string" : return _vmkctl.SystemInfoImpl_GetBootNicMacAddress(self)
    def GetStatelessBootNicMacAddress(self) -> "std::string" : return _vmkctl.SystemInfoImpl_GetStatelessBootNicMacAddress(self)
    def IsPxeBooted(self) -> "bool" : return _vmkctl.SystemInfoImpl_IsPxeBooted(self)
    def IsStatelessCacheBooted(self) -> "bool" : return _vmkctl.SystemInfoImpl_IsStatelessCacheBooted(self)
    def IsStatefulInstallBooted(self) -> "bool" : return _vmkctl.SystemInfoImpl_IsStatefulInstallBooted(self)
    def GetBootCommandLine(self) -> "std::string" : return _vmkctl.SystemInfoImpl_GetBootCommandLine(self)
    def GetBootOptionFileData(self, *args) -> "std::vector< uint8,std::allocator< uint8 > >" : return _vmkctl.SystemInfoImpl_GetBootOptionFileData(self, *args)
    def GetBootFsUUID(self) -> "std::string" : return _vmkctl.SystemInfoImpl_GetBootFsUUID(self)
    def GetDateTime(self) -> "HostCtl::System::DateTime" : return _vmkctl.SystemInfoImpl_GetDateTime(self)
    def SetDateTime(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetDateTime(self, *args)
    def GetFormattedDateTime(self) -> "std::string" : return _vmkctl.SystemInfoImpl_GetFormattedDateTime(self)
    def GetWelcomeMessage(self) -> "std::string" : return _vmkctl.SystemInfoImpl_GetWelcomeMessage(self)
    def SetWelcomeMessage(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetWelcomeMessage(self, *args)
    def GetDriverVMCapability(self) -> "HostCtl::System::DriverVMCapability" : return _vmkctl.SystemInfoImpl_GetDriverVMCapability(self)
    def SetDefaultDriverVM(self) -> "void" : return _vmkctl.SystemInfoImpl_SetDefaultDriverVM(self)
    def GetDriverVMClaimPolicy(self) -> "HostCtl::System::DriverVMClaimPolicy" : return _vmkctl.SystemInfoImpl_GetDriverVMClaimPolicy(self)
    def SetDriverVMClaimPolicy(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetDriverVMClaimPolicy(self, *args)
    def SetupSymlinks(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetupSymlinks(self, *args)
    def SetASLRSeed(self) -> "void" : return _vmkctl.SystemInfoImpl_SetASLRSeed(self)
    def GetIpmiSupport(self) -> "VmkCtl::System::SystemInfoImpl::IPMISupport" : return _vmkctl.SystemInfoImpl_GetIpmiSupport(self)
    def GetTPMState(self) -> "HostCtl::System::TPMState" : return _vmkctl.SystemInfoImpl_GetTPMState(self)
    def GetDRTMState(self) -> "HostCtl::System::DRTMState" : return _vmkctl.SystemInfoImpl_GetDRTMState(self)
    def GetAPEISupport(self) -> "bool" : return _vmkctl.SystemInfoImpl_GetAPEISupport(self)
    def IsDMAREnabled(self) -> "bool" : return _vmkctl.SystemInfoImpl_IsDMAREnabled(self)
    def GetIOMMUType(self) -> "VmkCtl::System::SystemInfoImpl::IOMMUType" : return _vmkctl.SystemInfoImpl_GetIOMMUType(self)
    def GetDMAPolicy(self) -> "VmkCtl::System::SystemInfoImpl::DMAPolicy" : return _vmkctl.SystemInfoImpl_GetDMAPolicy(self)
    def SetSystemAlert(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetSystemAlert(self, *args)
    __swig_getmethods__["NotifyDCUI"] = lambda x: _vmkctl.SystemInfoImpl_NotifyDCUI
    if _newclass:NotifyDCUI = staticmethod(_vmkctl.SystemInfoImpl_NotifyDCUI)
    __swig_getmethods__["NotifyVmsyslogd"] = lambda x: _vmkctl.SystemInfoImpl_NotifyVmsyslogd
    if _newclass:NotifyVmsyslogd = staticmethod(_vmkctl.SystemInfoImpl_NotifyVmsyslogd)
    def GetSupportedVMs(self) -> "int" : return _vmkctl.SystemInfoImpl_GetSupportedVMs(self)
    def GetVMLimitsInfo(self) -> "HostCtl::System::VMLimitsInfo" : return _vmkctl.SystemInfoImpl_GetVMLimitsInfo(self)
    def GetMaintenanceModeState(self) -> "HostCtl::System::MaintenanceMode" : return _vmkctl.SystemInfoImpl_GetMaintenanceModeState(self)
    def SetMaintenanceModeState(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetMaintenanceModeState(self, *args)
    def IsFirewallEnabled(self) -> "bool" : return _vmkctl.SystemInfoImpl_IsFirewallEnabled(self)
    def SetFirewallEnabled(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetFirewallEnabled(self, *args)
    def DestroyFirewallFilters(self) -> "void" : return _vmkctl.SystemInfoImpl_DestroyFirewallFilters(self)
    def GetFirewallRulesets(self) -> "std::vector< HostCtl::System::FirewallRulesetPtr,std::allocator< HostCtl::System::FirewallRulesetPtr > >" : return _vmkctl.SystemInfoImpl_GetFirewallRulesets(self)
    def GetFirewallRulesetById(self, *args) -> "HostCtl::System::FirewallRulesetPtr" : return _vmkctl.SystemInfoImpl_GetFirewallRulesetById(self, *args)
    def GetFirewallDefaultAction(self) -> "bool" : return _vmkctl.SystemInfoImpl_GetFirewallDefaultAction(self)
    def SetFirewallDefaultAction(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetFirewallDefaultAction(self, *args)
    def LoadFirewallRulesets(self) -> "void" : return _vmkctl.SystemInfoImpl_LoadFirewallRulesets(self)
    def GetCbrcOverheadPerVmdk(self) -> "uint64" : return _vmkctl.SystemInfoImpl_GetCbrcOverheadPerVmdk(self)
    def AddFirewallDynamicRule(self, *args) -> "HostCtl::System::DynamicRulesetOpStatus" : return _vmkctl.SystemInfoImpl_AddFirewallDynamicRule(self, *args)
    def RemoveFirewallDynamicRule(self, *args) -> "HostCtl::System::DynamicRulesetOpStatus" : return _vmkctl.SystemInfoImpl_RemoveFirewallDynamicRule(self, *args)
    def GetFirewallDynamicRules(self) -> "std::vector< HostCtl::System::FirewallRulePtr,std::allocator< HostCtl::System::FirewallRulePtr > >" : return _vmkctl.SystemInfoImpl_GetFirewallDynamicRules(self)
    def GetBootOptions(self) -> "HostCtl::System::BootOptions" : return _vmkctl.SystemInfoImpl_GetBootOptions(self)
    def GetBootVolume(self) -> "std::string" : return _vmkctl.SystemInfoImpl_GetBootVolume(self)
    def GetBootFileSystem(self) -> "HostCtl::Storage::VFATFileSystemPtr" : return _vmkctl.SystemInfoImpl_GetBootFileSystem(self)
    def GetBootDevice(self) -> "std::string" : return _vmkctl.SystemInfoImpl_GetBootDevice(self)
    def GetBootPartition(self) -> "uint8" : return _vmkctl.SystemInfoImpl_GetBootPartition(self)
    def GetDebugTerminalEnabled(self) -> "bool" : return _vmkctl.SystemInfoImpl_GetDebugTerminalEnabled(self)
    def SetDebugTerminalEnabled(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetDebugTerminalEnabled(self, *args)
    def SendVobWhenDumpConfigurationChanged(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SendVobWhenDumpConfigurationChanged(self, *args)
    def IsDumpTargetEnabled(self) -> "bool" : return _vmkctl.SystemInfoImpl_IsDumpTargetEnabled(self)
    def CheckDumpTargetCapacity(self) -> "bool" : return _vmkctl.SystemInfoImpl_CheckDumpTargetCapacity(self)
    def CheckScratchCapacity(self, *args) -> "bool" : return _vmkctl.SystemInfoImpl_CheckScratchCapacity(self, *args)
    def PerformLiveCoreDump(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_PerformLiveCoreDump(self, *args)
    def LiveCoreDumpOnWorldPanic(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_LiveCoreDumpOnWorldPanic(self, *args)
    def GetKeyboardLayouts(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.SystemInfoImpl_GetKeyboardLayouts(self)
    def GetKeyboardLayout(self) -> "std::string" : return _vmkctl.SystemInfoImpl_GetKeyboardLayout(self)
    def SetKeyboardLayout(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetKeyboardLayout(self, *args)
    def LoadKeyboardMappings(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_LoadKeyboardMappings(self, *args)
    def IsFirewallOtherL4Allowed(self) -> "bool" : return _vmkctl.SystemInfoImpl_IsFirewallOtherL4Allowed(self)
    def SetFirewallOtherL4Allowed(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetFirewallOtherL4Allowed(self, *args)
    def IsFirewallPassIGMP(self) -> "bool" : return _vmkctl.SystemInfoImpl_IsFirewallPassIGMP(self)
    def SetFirewallPassIGMP(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetFirewallPassIGMP(self, *args)
    def SetCbrcEnabled(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetCbrcEnabled(self, *args)
    def GetCbrcRuntimeEnabled(self) -> "bool" : return _vmkctl.SystemInfoImpl_GetCbrcRuntimeEnabled(self)
    def GetCbrcConfiguredEnabled(self) -> "bool" : return _vmkctl.SystemInfoImpl_GetCbrcConfiguredEnabled(self)
    def RestoreCbrc(self) -> "void" : return _vmkctl.SystemInfoImpl_RestoreCbrc(self)
    def SetVislVMLocation(self, *args) -> "void" : return _vmkctl.SystemInfoImpl_SetVislVMLocation(self, *args)
    def GetVislVMLocation(self) -> "std::string" : return _vmkctl.SystemInfoImpl_GetVislVMLocation(self)
    def GetInceptionTimestamp(self) -> "std::string" : return _vmkctl.SystemInfoImpl_GetInceptionTimestamp(self)
    def SetInceptionTimestamp(self) -> "void" : return _vmkctl.SystemInfoImpl_SetInceptionTimestamp(self)
SystemInfoImpl_swigregister = _vmkctl.SystemInfoImpl_swigregister
SystemInfoImpl_swigregister(SystemInfoImpl)

def SystemInfoImpl_NotifyDCUI() -> "void" :
  return _vmkctl.SystemInfoImpl_NotifyDCUI()
SystemInfoImpl_NotifyDCUI = _vmkctl.SystemInfoImpl_NotifyDCUI

def SystemInfoImpl_NotifyVmsyslogd() -> "void" :
  return _vmkctl.SystemInfoImpl_NotifyVmsyslogd()
SystemInfoImpl_NotifyVmsyslogd = _vmkctl.SystemInfoImpl_NotifyVmsyslogd

class SnmpAgentConfigImpl(SnmpAgentConfig,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [SnmpAgentConfig,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SnmpAgentConfigImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [SnmpAgentConfig,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SnmpAgentConfigImpl, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _vmkctl.new_SnmpAgentConfigImpl()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_SnmpAgentConfigImpl
    __del__ = lambda self : None;
    def GetEnabled(self) -> "bool" : return _vmkctl.SnmpAgentConfigImpl_GetEnabled(self)
    def SetEnabled(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_SetEnabled(self, *args)
    def GetPort(self) -> "int" : return _vmkctl.SnmpAgentConfigImpl_GetPort(self)
    def SetPort(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_SetPort(self, *args)
    def GetCommunities(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_GetCommunities(self, *args)
    def SetCommunities(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_SetCommunities(self, *args)
    def GetTrapTargets(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_GetTrapTargets(self, *args)
    def SetTrapTargets(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_SetTrapTargets(self, *args)
    def GetOptions(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_GetOptions(self, *args)
    def SetOptions(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_SetOptions(self, *args)
    def Reset(self) -> "void" : return _vmkctl.SnmpAgentConfigImpl_Reset(self)
    def TestTrap(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_TestTrap(self, *args)
    def GenerateHash(self, *args) -> "bool" : return _vmkctl.SnmpAgentConfigImpl_GenerateHash(self, *args)
    def GetLimits(self) -> "HostCtl::System::AgentLimits" : return _vmkctl.SnmpAgentConfigImpl_GetLimits(self)
    def TestUser(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_TestUser(self, *args)
    def GetUsers(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_GetUsers(self, *args)
    def GetRemoteUsers(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_GetRemoteUsers(self, *args)
    def GetV3Traps(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_GetV3Traps(self, *args)
    def SetUsers(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_SetUsers(self, *args)
    def SetRemoteUsers(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_SetRemoteUsers(self, *args)
    def SetV3Targets(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_SetV3Targets(self, *args)
    def IsLargeStorageSupported(self) -> "bool" : return _vmkctl.SnmpAgentConfigImpl_IsLargeStorageSupported(self)
    def SetLargeStorageSupport(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_SetLargeStorageSupport(self, *args)
    def SaveConfig(self) -> "void" : return _vmkctl.SnmpAgentConfigImpl_SaveConfig(self)
    def IsConfigDirty(self) -> "bool" : return _vmkctl.SnmpAgentConfigImpl_IsConfigDirty(self)
    def MarkConfigDirty(self) -> "void" : return _vmkctl.SnmpAgentConfigImpl_MarkConfigDirty(self)
    def GetName(self) -> "std::string" : return _vmkctl.SnmpAgentConfigImpl_GetName(self)
    def Refresh(self) -> "void" : return _vmkctl.SnmpAgentConfigImpl_Refresh(self)
    def Print(self, *args) -> "void" : return _vmkctl.SnmpAgentConfigImpl_Print(self, *args)
    def UpdateFirewall(self) -> "bool" : return _vmkctl.SnmpAgentConfigImpl_UpdateFirewall(self)
    def ValidConfigFile(self) -> "bool" : return _vmkctl.SnmpAgentConfigImpl_ValidConfigFile(self)
SnmpAgentConfigImpl_swigregister = _vmkctl.SnmpAgentConfigImpl_swigregister
SnmpAgentConfigImpl_swigregister(SnmpAgentConfigImpl)

class NetworkFileSystem41Impl(NetworkFileSystem,VmFileSystemImpl):
    __swig_setmethods__ = {}
    for _s in [NetworkFileSystem,VmFileSystemImpl]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetworkFileSystem41Impl, name, value)
    __swig_getmethods__ = {}
    for _s in [NetworkFileSystem,VmFileSystemImpl]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetworkFileSystem41Impl, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _vmkctl.delete_NetworkFileSystem41Impl
    __del__ = lambda self : None;
    def GetRemoteHost(self) -> "std::string" : return _vmkctl.NetworkFileSystem41Impl_GetRemoteHost(self)
    def GetRemoteHosts(self) -> "std::vector< std::string,std::allocator< std::string > >" : return _vmkctl.NetworkFileSystem41Impl_GetRemoteHosts(self)
    def GetRemoteShareName(self) -> "std::string" : return _vmkctl.NetworkFileSystem41Impl_GetRemoteShareName(self)
    def GetUuid(self) -> "std::string" : return _vmkctl.NetworkFileSystem41Impl_GetUuid(self)
    def GetReadOnly(self) -> "bool" : return _vmkctl.NetworkFileSystem41Impl_GetReadOnly(self)
    def IsHidden(self) -> "bool" : return _vmkctl.NetworkFileSystem41Impl_IsHidden(self)
    def GetSecurityType(self) -> "NetworkFileSystem::SecurityType" : return _vmkctl.NetworkFileSystem41Impl_GetSecurityType(self)
    __swig_getmethods__["GetVSINodeID_mnt"] = lambda x: _vmkctl.NetworkFileSystem41Impl_GetVSINodeID_mnt
    if _newclass:GetVSINodeID_mnt = staticmethod(_vmkctl.NetworkFileSystem41Impl_GetVSINodeID_mnt)
    def GetMaxRemotePathLen(self) -> "uint32" : return _vmkctl.NetworkFileSystem41Impl_GetMaxRemotePathLen(self)
    def GetExtents(self) -> "std::vector< HostCtl::Storage::DiskLunPartitionPtr,std::allocator< HostCtl::Storage::DiskLunPartitionPtr > >" : return _vmkctl.NetworkFileSystem41Impl_GetExtents(self)
    def GetHeadPartition(self) -> "HostCtl::Storage::DiskLunPartitionPtr" : return _vmkctl.NetworkFileSystem41Impl_GetHeadPartition(self)
    def AddExtent(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_AddExtent(self, *args)
    def GetConfigEnabled(self) -> "bool" : return _vmkctl.NetworkFileSystem41Impl_GetConfigEnabled(self)
    def GetConfigReadOnly(self) -> "bool" : return _vmkctl.NetworkFileSystem41Impl_GetConfigReadOnly(self)
    def SetConfigReadOnly(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_SetConfigReadOnly(self, *args)
    def GetConfigIsPE(self) -> "bool" : return _vmkctl.NetworkFileSystem41Impl_GetConfigIsPE(self)
    def SetConfigIsPE(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_SetConfigIsPE(self, *args)
    def SetVolumeName(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_SetVolumeName(self, *args)
    def Mount(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_Mount(self, *args)
    def Unmount(self, *args) -> "HostCtl::Storage::FileSystem::UnmountStatus" : return _vmkctl.NetworkFileSystem41Impl_Unmount(self, *args)
    def IsMounted(self) -> "bool" : return _vmkctl.NetworkFileSystem41Impl_IsMounted(self)
    def IsBusy(self) -> "bool" : return _vmkctl.NetworkFileSystem41Impl_IsBusy(self)
    def IsAccessible(self) -> "bool" : return _vmkctl.NetworkFileSystem41Impl_IsAccessible(self)
    def IsAccessibleWithReason(self, *args) -> "bool" : return _vmkctl.NetworkFileSystem41Impl_IsAccessibleWithReason(self, *args)
    def IsActiveVolume(self) -> "bool" : return _vmkctl.NetworkFileSystem41Impl_IsActiveVolume(self)
    def GetActiveVolumeUsers(self) -> "std::vector< HostCtl::Network::MacAddress,std::allocator< HostCtl::Network::MacAddress > >" : return _vmkctl.NetworkFileSystem41Impl_GetActiveVolumeUsers(self)
    def GetVmfsUserInfo(self, *args) -> "std::vector< HostCtl::Storage::VmfsUserInfo,std::allocator< HostCtl::Storage::VmfsUserInfo > >" : return _vmkctl.NetworkFileSystem41Impl_GetVmfsUserInfo(self, *args)
    def GetVAAIState(self) -> "HostCtl::Storage::VAAIState" : return _vmkctl.NetworkFileSystem41Impl_GetVAAIState(self)
    def Refresh(self) -> "void" : return _vmkctl.NetworkFileSystem41Impl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.NetworkFileSystem41Impl_GetName(self)
    def LoadConfig(self) -> "void" : return _vmkctl.NetworkFileSystem41Impl_LoadConfig(self)
    def Print(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_Print(self, *args)
    __swig_getmethods__["AddNetworkFileSystem"] = lambda x: _vmkctl.NetworkFileSystem41Impl_AddNetworkFileSystem
    if _newclass:AddNetworkFileSystem = staticmethod(_vmkctl.NetworkFileSystem41Impl_AddNetworkFileSystem)
    __swig_getmethods__["RemoveNetworkFileSystem"] = lambda x: _vmkctl.NetworkFileSystem41Impl_RemoveNetworkFileSystem
    if _newclass:RemoveNetworkFileSystem = staticmethod(_vmkctl.NetworkFileSystem41Impl_RemoveNetworkFileSystem)
    __swig_getmethods__["LabelExists"] = lambda x: _vmkctl.NetworkFileSystem41Impl_LabelExists
    if _newclass:LabelExists = staticmethod(_vmkctl.NetworkFileSystem41Impl_LabelExists)
    __swig_getmethods__["GetNetworkFileSystemByUUID"] = lambda x: _vmkctl.NetworkFileSystem41Impl_GetNetworkFileSystemByUUID
    if _newclass:GetNetworkFileSystemByUUID = staticmethod(_vmkctl.NetworkFileSystem41Impl_GetNetworkFileSystemByUUID)
    __swig_getmethods__["SetDefaultCredential"] = lambda x: _vmkctl.NetworkFileSystem41Impl_SetDefaultCredential
    if _newclass:SetDefaultCredential = staticmethod(_vmkctl.NetworkFileSystem41Impl_SetDefaultCredential)
    __swig_getmethods__["ChangeDefaultCredential"] = lambda x: _vmkctl.NetworkFileSystem41Impl_ChangeDefaultCredential
    if _newclass:ChangeDefaultCredential = staticmethod(_vmkctl.NetworkFileSystem41Impl_ChangeDefaultCredential)
    __swig_getmethods__["GetDefaultCredential"] = lambda x: _vmkctl.NetworkFileSystem41Impl_GetDefaultCredential
    if _newclass:GetDefaultCredential = staticmethod(_vmkctl.NetworkFileSystem41Impl_GetDefaultCredential)
    __swig_getmethods__["ClearDefaultCredential"] = lambda x: _vmkctl.NetworkFileSystem41Impl_ClearDefaultCredential
    if _newclass:ClearDefaultCredential = staticmethod(_vmkctl.NetworkFileSystem41Impl_ClearDefaultCredential)
    __swig_getmethods__["SetDefaultCurrentPassword"] = lambda x: _vmkctl.NetworkFileSystem41Impl_SetDefaultCurrentPassword
    if _newclass:SetDefaultCurrentPassword = staticmethod(_vmkctl.NetworkFileSystem41Impl_SetDefaultCurrentPassword)
    def GetUnstableWrites(self) -> "bool" : return _vmkctl.NetworkFileSystem41Impl_GetUnstableWrites(self)
    def SetUnstableWrites(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_SetUnstableWrites(self, *args)
    __swig_getmethods__["GetStats"] = lambda x: _vmkctl.NetworkFileSystem41Impl_GetStats
    if _newclass:GetStats = staticmethod(_vmkctl.NetworkFileSystem41Impl_GetStats)
    def GetWorldStats(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_GetWorldStats(self, *args)
    def GetMaxReadTransferSize(self) -> "uint32" : return _vmkctl.NetworkFileSystem41Impl_GetMaxReadTransferSize(self)
    def GetMaxWriteTransferSize(self) -> "uint32" : return _vmkctl.NetworkFileSystem41Impl_GetMaxWriteTransferSize(self)
    def GetMaxQueueDepth(self) -> "uint32" : return _vmkctl.NetworkFileSystem41Impl_GetMaxQueueDepth(self)
    def SetMaxQueueDepth(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_SetMaxQueueDepth(self, *args)
    def GetIormState(self) -> "long" : return _vmkctl.NetworkFileSystem41Impl_GetIormState(self)
    def SetIormState(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_SetIormState(self, *args)
    def GetLatencyThreshold(self) -> "uint32" : return _vmkctl.NetworkFileSystem41Impl_GetLatencyThreshold(self)
    def SetLatencyThreshold(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_SetLatencyThreshold(self, *args)
    def GetIOShares(self) -> "uint32" : return _vmkctl.NetworkFileSystem41Impl_GetIOShares(self)
    def GetClusterWideStats(self) -> "HostCtl::Storage::StorageIormInfo" : return _vmkctl.NetworkFileSystem41Impl_GetClusterWideStats(self)
    def GetIormStatus(self) -> "HostCtl::Storage::StorageIormStatus" : return _vmkctl.NetworkFileSystem41Impl_GetIormStatus(self)
    def SetSDRSPodID(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_SetSDRSPodID(self, *args)
    def GetCredential(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_GetCredential(self, *args)
    def SetCurrentPassword(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_SetCurrentPassword(self, *args)
    def GetVolumeUnmapProperty(self) -> "HostCtl::Storage::VmfsVolumeUnmapProperty" : return _vmkctl.NetworkFileSystem41Impl_GetVolumeUnmapProperty(self)
    def SetVolumeUnmapProperty(self, *args) -> "void" : return _vmkctl.NetworkFileSystem41Impl_SetVolumeUnmapProperty(self, *args)
NetworkFileSystem41Impl_swigregister = _vmkctl.NetworkFileSystem41Impl_swigregister
NetworkFileSystem41Impl_swigregister(NetworkFileSystem41Impl)

def NetworkFileSystem41Impl_GetVSINodeID_mnt() -> "uint32" :
  return _vmkctl.NetworkFileSystem41Impl_GetVSINodeID_mnt()
NetworkFileSystem41Impl_GetVSINodeID_mnt = _vmkctl.NetworkFileSystem41Impl_GetVSINodeID_mnt
NetworkFileSystem41Impl.NAS_TYPE = _vmkctl.cvar.NetworkFileSystem41Impl_NAS_TYPE

def NetworkFileSystem41Impl_AddNetworkFileSystem(*args) -> "HostCtl::Storage::NetworkFileSystemPtr" :
  return _vmkctl.NetworkFileSystem41Impl_AddNetworkFileSystem(*args)
NetworkFileSystem41Impl_AddNetworkFileSystem = _vmkctl.NetworkFileSystem41Impl_AddNetworkFileSystem

def NetworkFileSystem41Impl_RemoveNetworkFileSystem(*args) -> "void" :
  return _vmkctl.NetworkFileSystem41Impl_RemoveNetworkFileSystem(*args)
NetworkFileSystem41Impl_RemoveNetworkFileSystem = _vmkctl.NetworkFileSystem41Impl_RemoveNetworkFileSystem

def NetworkFileSystem41Impl_LabelExists(*args) -> "bool" :
  return _vmkctl.NetworkFileSystem41Impl_LabelExists(*args)
NetworkFileSystem41Impl_LabelExists = _vmkctl.NetworkFileSystem41Impl_LabelExists

def NetworkFileSystem41Impl_GetNetworkFileSystemByUUID(*args) -> "VmkCtl::Storage::NetworkFileSystem41Impl *" :
  return _vmkctl.NetworkFileSystem41Impl_GetNetworkFileSystemByUUID(*args)
NetworkFileSystem41Impl_GetNetworkFileSystemByUUID = _vmkctl.NetworkFileSystem41Impl_GetNetworkFileSystemByUUID

def NetworkFileSystem41Impl_SetDefaultCredential(*args) -> "void" :
  return _vmkctl.NetworkFileSystem41Impl_SetDefaultCredential(*args)
NetworkFileSystem41Impl_SetDefaultCredential = _vmkctl.NetworkFileSystem41Impl_SetDefaultCredential

def NetworkFileSystem41Impl_ChangeDefaultCredential(*args) -> "void" :
  return _vmkctl.NetworkFileSystem41Impl_ChangeDefaultCredential(*args)
NetworkFileSystem41Impl_ChangeDefaultCredential = _vmkctl.NetworkFileSystem41Impl_ChangeDefaultCredential

def NetworkFileSystem41Impl_GetDefaultCredential(*args) -> "void" :
  return _vmkctl.NetworkFileSystem41Impl_GetDefaultCredential(*args)
NetworkFileSystem41Impl_GetDefaultCredential = _vmkctl.NetworkFileSystem41Impl_GetDefaultCredential

def NetworkFileSystem41Impl_ClearDefaultCredential() -> "void" :
  return _vmkctl.NetworkFileSystem41Impl_ClearDefaultCredential()
NetworkFileSystem41Impl_ClearDefaultCredential = _vmkctl.NetworkFileSystem41Impl_ClearDefaultCredential

def NetworkFileSystem41Impl_SetDefaultCurrentPassword(*args) -> "void" :
  return _vmkctl.NetworkFileSystem41Impl_SetDefaultCurrentPassword(*args)
NetworkFileSystem41Impl_SetDefaultCurrentPassword = _vmkctl.NetworkFileSystem41Impl_SetDefaultCurrentPassword

def NetworkFileSystem41Impl_GetStats(*args) -> "void" :
  return _vmkctl.NetworkFileSystem41Impl_GetStats(*args)
NetworkFileSystem41Impl_GetStats = _vmkctl.NetworkFileSystem41Impl_GetStats

class Host(HostCtlObject):
    __swig_setmethods__ = {}
    for _s in [HostCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Host, name, value)
    __swig_getmethods__ = {}
    for _s in [HostCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Host, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetFcoePnicInfo(self, *args) -> "HostCtl::Network::FcoePnicPtr" : return _vmkctl.Host_GetFcoePnicInfo(self, *args)
    __swig_destroy__ = _vmkctl.delete_Host
    __del__ = lambda self : None;
Host_swigregister = _vmkctl.Host_swigregister
Host_swigregister(Host)

class HostImpl(Host,VmkCtlObject):
    __swig_setmethods__ = {}
    for _s in [Host,VmkCtlObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostImpl, name, value)
    __swig_getmethods__ = {}
    for _s in [Host,VmkCtlObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HostImpl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _vmkctl.new_HostImpl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_HostImpl
    __del__ = lambda self : None;
    def GetFcoePnicInfo(self, *args) -> "HostCtl::Network::FcoePnicPtr" : return _vmkctl.HostImpl_GetFcoePnicInfo(self, *args)
    def Refresh(self) -> "void" : return _vmkctl.HostImpl_Refresh(self)
    def GetName(self) -> "std::string" : return _vmkctl.HostImpl_GetName(self)
    def Print(self, *args) -> "void" : return _vmkctl.HostImpl_Print(self, *args)
    def LoadConfig(self) -> "void" : return _vmkctl.HostImpl_LoadConfig(self)
    __swig_getmethods__["LoadVmkCtlPlugins"] = lambda x: _vmkctl.HostImpl_LoadVmkCtlPlugins
    if _newclass:LoadVmkCtlPlugins = staticmethod(_vmkctl.HostImpl_LoadVmkCtlPlugins)
HostImpl_swigregister = _vmkctl.HostImpl_swigregister
HostImpl_swigregister(HostImpl)

def HostImpl_LoadVmkCtlPlugins() -> "void" :
  return _vmkctl.HostImpl_LoadVmkCtlPlugins()
HostImpl_LoadVmkCtlPlugins = _vmkctl.HostImpl_LoadVmkCtlPlugins

class HostFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HostFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HostFactory, name)
    __repr__ = _swig_repr
    __swig_getmethods__["GetHost"] = lambda x: _vmkctl.HostFactory_GetHost
    if _newclass:GetHost = staticmethod(_vmkctl.HostFactory_GetHost)
    def __init__(self): 
        this = _vmkctl.new_HostFactory()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _vmkctl.delete_HostFactory
    __del__ = lambda self : None;
HostFactory_swigregister = _vmkctl.HostFactory_swigregister
HostFactory_swigregister(HostFactory)

def HostFactory_GetHost() -> "HostCtl::HostPtr" :
  return _vmkctl.HostFactory_GetHost()
HostFactory_GetHost = _vmkctl.HostFactory_GetHost


def CastAdvInt(*args) -> "VmkCtl::Adv::AdvancedIntegerOptionImpl *" :
  return _vmkctl.CastAdvInt(*args)
CastAdvInt = _vmkctl.CastAdvInt

def CastAdvString(*args) -> "VmkCtl::Adv::AdvancedStringOptionImpl *" :
  return _vmkctl.CastAdvString(*args)
CastAdvString = _vmkctl.CastAdvString
# This file is compatible with both classic and new-style classes.


